window.Modernizr=function(t,e,i){function n(t){b.cssText=t}function o(t,e){return n(C.join(t+";")+(e||""))}function s(t,e){return typeof t===e}function a(t,e){return!!~(""+t).indexOf(e)}function r(t,e){for(var n in t){var o=t[n];if(!a(o,"-")&&b[o]!==i)return"pfx"==e?o:!0}return!1}function l(t,e,n){for(var o in t){var a=e[t[o]];if(a!==i)return n===!1?t[o]:s(a,"function")?a.bind(n||e):a}return!1}function c(t,e,i){var n=t.charAt(0).toUpperCase()+t.slice(1),o=(t+" "+T.join(n+" ")+n).split(" ");return s(e,"string")||s(e,"undefined")?r(o,e):(o=(t+" "+P.join(n+" ")+n).split(" "),l(o,e,i))}function h(){p.input=function(i){for(var n=0,o=i.length;o>n;n++)A[i[n]]=!!(i[n]in w);return A.list&&(A.list=!(!e.createElement("datalist")||!t.HTMLDataListElement)),A}("autocomplete autofocus list placeholder max min multiple pattern required step".split(" ")),p.inputtypes=function(t){for(var n,o,s,a=0,r=t.length;r>a;a++)w.setAttribute("type",o=t[a]),n="text"!==w.type,n&&(w.value=k,w.style.cssText="position:absolute;visibility:hidden;",/^range$/.test(o)&&w.style.WebkitAppearance!==i?(m.appendChild(w),s=e.defaultView,n=s.getComputedStyle&&"textfield"!==s.getComputedStyle(w,null).WebkitAppearance&&0!==w.offsetHeight,m.removeChild(w)):/^(search|tel)$/.test(o)||(n=/^(url|email)$/.test(o)?w.checkValidity&&w.checkValidity()===!1:w.value!=k)),E[t[a]]=!!n;return E}("search tel url email datetime date month week time datetime-local number range color".split(" "))}var u,d,f="2.8.3",p={},g=!0,m=e.documentElement,v="modernizr",y=e.createElement(v),b=y.style,w=e.createElement("input"),k=":)",x={}.toString,C=" -webkit- -moz- -o- -ms- ".split(" "),S="Webkit Moz O ms",T=S.split(" "),P=S.toLowerCase().split(" "),L={svg:"http://www.w3.org/2000/svg"},$={},E={},A={},F=[],D=F.slice,M=function(t,i,n,o){var s,a,r,l,c=e.createElement("div"),h=e.body,u=h||e.createElement("body");if(parseInt(n,10))for(;n--;)r=e.createElement("div"),r.id=o?o[n]:v+(n+1),c.appendChild(r);return s=["&#173;",'<style id="s',v,'">',t,"</style>"].join(""),c.id=v,(h?c:u).innerHTML+=s,u.appendChild(c),h||(u.style.background="",u.style.overflow="hidden",l=m.style.overflow,m.style.overflow="hidden",m.appendChild(u)),a=i(c,t),h?c.parentNode.removeChild(c):(u.parentNode.removeChild(u),m.style.overflow=l),!!a},R=function(e){var i=t.matchMedia||t.msMatchMedia;if(i)return i(e)&&i(e).matches||!1;var n;return M("@media "+e+" { #"+v+" { position: absolute; } }",function(e){n="absolute"==(t.getComputedStyle?getComputedStyle(e,null):e.currentStyle).position}),n},j=function(){function t(t,o){o=o||e.createElement(n[t]||"div"),t="on"+t;var a=t in o;return a||(o.setAttribute||(o=e.createElement("div")),o.setAttribute&&o.removeAttribute&&(o.setAttribute(t,""),a=s(o[t],"function"),s(o[t],"undefined")||(o[t]=i),o.removeAttribute(t))),o=null,a}var n={select:"input",change:"input",submit:"form",reset:"form",error:"img",load:"img",abort:"img"};return t}(),N={}.hasOwnProperty;d=s(N,"undefined")||s(N.call,"undefined")?function(t,e){return e in t&&s(t.constructor.prototype[e],"undefined")}:function(t,e){return N.call(t,e)},Function.prototype.bind||(Function.prototype.bind=function(t){var e=this;if("function"!=typeof e)throw new TypeError;var i=D.call(arguments,1),n=function(){if(this instanceof n){var o=function(){};o.prototype=e.prototype;var s=new o,a=e.apply(s,i.concat(D.call(arguments)));return Object(a)===a?a:s}return e.apply(t,i.concat(D.call(arguments)))};return n}),$.flexbox=function(){return c("flexWrap")},$.flexboxlegacy=function(){return c("boxDirection")},$.canvas=function(){var t=e.createElement("canvas");return!(!t.getContext||!t.getContext("2d"))},$.canvastext=function(){return!(!p.canvas||!s(e.createElement("canvas").getContext("2d").fillText,"function"))},$.webgl=function(){return!!t.WebGLRenderingContext},$.touch=function(){var i;return"ontouchstart"in t||t.DocumentTouch&&e instanceof DocumentTouch?i=!0:M(["@media (",C.join("touch-enabled),("),v,")","{#modernizr{top:9px;position:absolute}}"].join(""),function(t){i=9===t.offsetTop}),i},$.geolocation=function(){return"geolocation"in navigator},$.postmessage=function(){return!!t.postMessage},$.websqldatabase=function(){return!!t.openDatabase},$.indexedDB=function(){return!!c("indexedDB",t)},$.hashchange=function(){return j("hashchange",t)&&(e.documentMode===i||e.documentMode>7)},$.history=function(){return!(!t.history||!history.pushState)},$.draganddrop=function(){var t=e.createElement("div");return"draggable"in t||"ondragstart"in t&&"ondrop"in t},$.websockets=function(){return"WebSocket"in t||"MozWebSocket"in t},$.rgba=function(){return n("background-color:rgba(150,255,150,.5)"),a(b.backgroundColor,"rgba")},$.hsla=function(){return n("background-color:hsla(120,40%,100%,.5)"),a(b.backgroundColor,"rgba")||a(b.backgroundColor,"hsla")},$.multiplebgs=function(){return n("background:url(https://),url(https://),red url(https://)"),/(url\s*\(.*?){3}/.test(b.background)},$.backgroundsize=function(){return c("backgroundSize")},$.borderimage=function(){return c("borderImage")},$.borderradius=function(){return c("borderRadius")},$.boxshadow=function(){return c("boxShadow")},$.textshadow=function(){return""===e.createElement("div").style.textShadow},$.opacity=function(){return o("opacity:.55"),/^0.55$/.test(b.opacity)},$.cssanimations=function(){return c("animationName")},$.csscolumns=function(){return c("columnCount")},$.cssgradients=function(){var t="background-image:",e="gradient(linear,left top,right bottom,from(#9f9),to(white));",i="linear-gradient(left top,#9f9, white);";return n((t+"-webkit- ".split(" ").join(e+t)+C.join(i+t)).slice(0,-t.length)),a(b.backgroundImage,"gradient")},$.cssreflections=function(){return c("boxReflect")},$.csstransforms=function(){return!!c("transform")},$.csstransforms3d=function(){var t=!!c("perspective");return t&&"webkitPerspective"in m.style&&M("@media (transform-3d),(-webkit-transform-3d){#modernizr{left:9px;position:absolute;height:3px;}}",function(e,i){t=9===e.offsetLeft&&3===e.offsetHeight}),t},$.csstransitions=function(){return c("transition")},$.fontface=function(){var t;return M('@font-face {font-family:"font";src:url("https://")}',function(i,n){var o=e.getElementById("smodernizr"),s=o.sheet||o.styleSheet,a=s?s.cssRules&&s.cssRules[0]?s.cssRules[0].cssText:s.cssText||"":"";t=/src/i.test(a)&&0===a.indexOf(n.split(" ")[0])}),t},$.generatedcontent=function(){var t;return M(["#",v,"{font:0/0 a}#",v,':after{content:"',k,'";visibility:hidden;font:3px/1 a}'].join(""),function(e){t=e.offsetHeight>=3}),t},$.video=function(){var t=e.createElement("video"),i=!1;try{(i=!!t.canPlayType)&&(i=new Boolean(i),i.ogg=t.canPlayType('video/ogg; codecs="theora"').replace(/^no$/,""),i.h264=t.canPlayType('video/mp4; codecs="avc1.42E01E"').replace(/^no$/,""),i.webm=t.canPlayType('video/webm; codecs="vp8, vorbis"').replace(/^no$/,""))}catch(n){}return i},$.audio=function(){var t=e.createElement("audio"),i=!1;try{(i=!!t.canPlayType)&&(i=new Boolean(i),i.ogg=t.canPlayType('audio/ogg; codecs="vorbis"').replace(/^no$/,""),i.mp3=t.canPlayType("audio/mpeg;").replace(/^no$/,""),i.wav=t.canPlayType('audio/wav; codecs="1"').replace(/^no$/,""),i.m4a=(t.canPlayType("audio/x-m4a;")||t.canPlayType("audio/aac;")).replace(/^no$/,""))}catch(n){}return i},$.localstorage=function(){try{return localStorage.setItem(v,v),localStorage.removeItem(v),!0}catch(t){return!1}},$.sessionstorage=function(){try{return sessionStorage.setItem(v,v),sessionStorage.removeItem(v),!0}catch(t){return!1}},$.webworkers=function(){return!!t.Worker},$.applicationcache=function(){return!!t.applicationCache},$.svg=function(){return!!e.createElementNS&&!!e.createElementNS(L.svg,"svg").createSVGRect},$.inlinesvg=function(){var t=e.createElement("div");return t.innerHTML="<svg/>",(t.firstChild&&t.firstChild.namespaceURI)==L.svg},$.smil=function(){return!!e.createElementNS&&/SVGAnimate/.test(x.call(e.createElementNS(L.svg,"animate")))},$.svgclippaths=function(){return!!e.createElementNS&&/SVGClipPath/.test(x.call(e.createElementNS(L.svg,"clipPath")))};for(var I in $)d($,I)&&(u=I.toLowerCase(),p[u]=$[I](),F.push((p[u]?"":"no-")+u));return p.input||h(),p.addTest=function(t,e){if("object"==typeof t)for(var n in t)d(t,n)&&p.addTest(n,t[n]);else{if(t=t.toLowerCase(),p[t]!==i)return p;e="function"==typeof e?e():e,"undefined"!=typeof g&&g&&(m.className+=" "+(e?"":"no-")+t),p[t]=e}return p},n(""),y=w=null,function(t,e){function i(t,e){var i=t.createElement("p"),n=t.getElementsByTagName("head")[0]||t.documentElement;return i.innerHTML="x<style>"+e+"</style>",n.insertBefore(i.lastChild,n.firstChild)}function n(){var t=y.elements;return"string"==typeof t?t.split(" "):t}function o(t){var e=v[t[g]];return e||(e={},m++,t[g]=m,v[m]=e),e}function s(t,i,n){if(i||(i=e),h)return i.createElement(t);n||(n=o(i));var s;return s=n.cache[t]?n.cache[t].cloneNode():p.test(t)?(n.cache[t]=n.createElem(t)).cloneNode():n.createElem(t),!s.canHaveChildren||f.test(t)||s.tagUrn?s:n.frag.appendChild(s)}function a(t,i){if(t||(t=e),h)return t.createDocumentFragment();i=i||o(t);for(var s=i.frag.cloneNode(),a=0,r=n(),l=r.length;l>a;a++)s.createElement(r[a]);return s}function r(t,e){e.cache||(e.cache={},e.createElem=t.createElement,e.createFrag=t.createDocumentFragment,e.frag=e.createFrag()),t.createElement=function(i){return y.shivMethods?s(i,t,e):e.createElem(i)},t.createDocumentFragment=Function("h,f","return function(){var n=f.cloneNode(),c=n.createElement;h.shivMethods&&("+n().join().replace(/[\w\-]+/g,function(t){return e.createElem(t),e.frag.createElement(t),'c("'+t+'")'})+");return n}")(y,e.frag)}function l(t){t||(t=e);var n=o(t);return!y.shivCSS||c||n.hasCSS||(n.hasCSS=!!i(t,"article,aside,dialog,figcaption,figure,footer,header,hgroup,main,nav,section{display:block}mark{background:#FF0;color:#000}template{display:none}")),h||r(t,n),t}var c,h,u="3.7.0",d=t.html5||{},f=/^<|^(?:button|map|select|textarea|object|iframe|option|optgroup)$/i,p=/^(?:a|b|code|div|fieldset|h1|h2|h3|h4|h5|h6|i|label|li|ol|p|q|span|strong|style|table|tbody|td|th|tr|ul)$/i,g="_html5shiv",m=0,v={};!function(){try{var t=e.createElement("a");t.innerHTML="<xyz></xyz>",c="hidden"in t,h=1==t.childNodes.length||function(){e.createElement("a");var t=e.createDocumentFragment();return"undefined"==typeof t.cloneNode||"undefined"==typeof t.createDocumentFragment||"undefined"==typeof t.createElement}()}catch(i){c=!0,h=!0}}();var y={elements:d.elements||"abbr article aside audio bdi canvas data datalist details dialog figcaption figure footer header hgroup main mark meter nav output progress section summary template time video",version:u,shivCSS:d.shivCSS!==!1,supportsUnknownElements:h,shivMethods:d.shivMethods!==!1,type:"default",shivDocument:l,createElement:s,createDocumentFragment:a};t.html5=y,l(e)}(this,e),p._version=f,p._prefixes=C,p._domPrefixes=P,p._cssomPrefixes=T,p.mq=R,p.hasEvent=j,p.testProp=function(t){return r([t])},p.testAllProps=c,p.testStyles=M,p.prefixed=function(t,e,i){return e?c(t,e,i):c(t,"pfx")},m.className=m.className.replace(/(^|\s)no-js(\s|$)/,"$1$2")+(g?" js "+F.join(" "):""),p}(this,this.document),function(t,e){"object"==typeof module&&"object"==typeof module.exports?module.exports=t.document?e(t,!0):function(t){if(!t.document)throw new Error("jQuery requires a window with a document");return e(t)}:e(t)}("undefined"!=typeof window?window:this,function(t,e){function i(t){var e="length"in t&&t.length,i=K.type(t);return"function"===i||K.isWindow(t)?!1:1===t.nodeType&&e?!0:"array"===i||0===e||"number"==typeof e&&e>0&&e-1 in t}function n(t,e,i){if(K.isFunction(e))return K.grep(t,function(t,n){return!!e.call(t,n,t)!==i});if(e.nodeType)return K.grep(t,function(t){return t===e!==i});if("string"==typeof e){if(rt.test(e))return K.filter(e,t,i);e=K.filter(e,t)}return K.grep(t,function(t){return _.call(e,t)>=0!==i})}function o(t,e){for(;(t=t[e])&&1!==t.nodeType;);return t}function s(t){var e=pt[t]={};return K.each(t.match(ft)||[],function(t,i){e[i]=!0}),e}function a(){Z.removeEventListener("DOMContentLoaded",a,!1),t.removeEventListener("load",a,!1),K.ready()}function r(){Object.defineProperty(this.cache={},0,{get:function(){return{}}}),this.expando=K.expando+r.uid++}function l(t,e,i){var n;if(void 0===i&&1===t.nodeType)if(n="data-"+e.replace(wt,"-$1").toLowerCase(),i=t.getAttribute(n),"string"==typeof i){try{i="true"===i?!0:"false"===i?!1:"null"===i?null:+i+""===i?+i:bt.test(i)?K.parseJSON(i):i}catch(o){}yt.set(t,e,i)}else i=void 0;return i}function c(){return!0}function h(){return!1}function u(){try{return Z.activeElement}catch(t){}}function d(t,e){return K.nodeName(t,"table")&&K.nodeName(11!==e.nodeType?e:e.firstChild,"tr")?t.getElementsByTagName("tbody")[0]||t.appendChild(t.ownerDocument.createElement("tbody")):t}function f(t){return t.type=(null!==t.getAttribute("type"))+"/"+t.type,t}function p(t){var e=Nt.exec(t.type);return e?t.type=e[1]:t.removeAttribute("type"),t}function g(t,e){for(var i=0,n=t.length;n>i;i++)vt.set(t[i],"globalEval",!e||vt.get(e[i],"globalEval"))}function m(t,e){var i,n,o,s,a,r,l,c;if(1===e.nodeType){if(vt.hasData(t)&&(s=vt.access(t),a=vt.set(e,s),c=s.events)){delete a.handle,a.events={};for(o in c)for(i=0,n=c[o].length;n>i;i++)K.event.add(e,o,c[o][i])}yt.hasData(t)&&(r=yt.access(t),l=K.extend({},r),yt.set(e,l))}}function v(t,e){var i=t.getElementsByTagName?t.getElementsByTagName(e||"*"):t.querySelectorAll?t.querySelectorAll(e||"*"):[];return void 0===e||e&&K.nodeName(t,e)?K.merge([t],i):i}function y(t,e){var i=e.nodeName.toLowerCase();"input"===i&&St.test(t.type)?e.checked=t.checked:("input"===i||"textarea"===i)&&(e.defaultValue=t.defaultValue)}function b(e,i){var n,o=K(i.createElement(e)).appendTo(i.body),s=t.getDefaultComputedStyle&&(n=t.getDefaultComputedStyle(o[0]))?n.display:K.css(o[0],"display");return o.detach(),s}function w(t){var e=Z,i=Ht[t];return i||(i=b(t,e),"none"!==i&&i||(Wt=(Wt||K("<iframe frameborder='0' width='0' height='0'/>")).appendTo(e.documentElement),e=Wt[0].contentDocument,e.write(),e.close(),i=b(t,e),Wt.detach()),Ht[t]=i),i}function k(t,e,i){var n,o,s,a,r=t.style;return i=i||Ut(t),i&&(a=i.getPropertyValue(e)||i[e]),i&&(""!==a||K.contains(t.ownerDocument,t)||(a=K.style(t,e)),qt.test(a)&&zt.test(e)&&(n=r.width,o=r.minWidth,s=r.maxWidth,r.minWidth=r.maxWidth=r.width=a,a=i.width,r.width=n,r.minWidth=o,r.maxWidth=s)),void 0!==a?a+"":a}function x(t,e){return{get:function(){return t()?void delete this.get:(this.get=e).apply(this,arguments)}}}function C(t,e){if(e in t)return e;for(var i=e[0].toUpperCase()+e.slice(1),n=e,o=Gt.length;o--;)if(e=Gt[o]+i,e in t)return e;return n}function S(t,e,i){var n=Xt.exec(e);return n?Math.max(0,n[1]-(i||0))+(n[2]||"px"):e}function T(t,e,i,n,o){for(var s=i===(n?"border":"content")?4:"width"===e?1:0,a=0;4>s;s+=2)"margin"===i&&(a+=K.css(t,i+xt[s],!0,o)),n?("content"===i&&(a-=K.css(t,"padding"+xt[s],!0,o)),"margin"!==i&&(a-=K.css(t,"border"+xt[s]+"Width",!0,o))):(a+=K.css(t,"padding"+xt[s],!0,o),"padding"!==i&&(a+=K.css(t,"border"+xt[s]+"Width",!0,o)));return a}function P(t,e,i){var n=!0,o="width"===e?t.offsetWidth:t.offsetHeight,s=Ut(t),a="border-box"===K.css(t,"boxSizing",!1,s);if(0>=o||null==o){if(o=k(t,e,s),(0>o||null==o)&&(o=t.style[e]),qt.test(o))return o;n=a&&(Q.boxSizingReliable()||o===t.style[e]),o=parseFloat(o)||0}return o+T(t,e,i||(a?"border":"content"),n,s)+"px"}function L(t,e){for(var i,n,o,s=[],a=0,r=t.length;r>a;a++)n=t[a],n.style&&(s[a]=vt.get(n,"olddisplay"),i=n.style.display,e?(s[a]||"none"!==i||(n.style.display=""),""===n.style.display&&Ct(n)&&(s[a]=vt.access(n,"olddisplay",w(n.nodeName)))):(o=Ct(n),"none"===i&&o||vt.set(n,"olddisplay",o?i:K.css(n,"display"))));for(a=0;r>a;a++)n=t[a],n.style&&(e&&"none"!==n.style.display&&""!==n.style.display||(n.style.display=e?s[a]||"":"none"));return t}function $(t,e,i,n,o){return new $.prototype.init(t,e,i,n,o)}function E(){return setTimeout(function(){Qt=void 0}),Qt=K.now()}function A(t,e){var i,n=0,o={height:t};for(e=e?1:0;4>n;n+=2-e)i=xt[n],o["margin"+i]=o["padding"+i]=t;return e&&(o.opacity=o.width=t),o}function F(t,e,i){for(var n,o=(ie[e]||[]).concat(ie["*"]),s=0,a=o.length;a>s;s++)if(n=o[s].call(i,e,t))return n}function D(t,e,i){var n,o,s,a,r,l,c,h,u=this,d={},f=t.style,p=t.nodeType&&Ct(t),g=vt.get(t,"fxshow");i.queue||(r=K._queueHooks(t,"fx"),null==r.unqueued&&(r.unqueued=0,l=r.empty.fire,r.empty.fire=function(){r.unqueued||l()}),r.unqueued++,u.always(function(){u.always(function(){r.unqueued--,K.queue(t,"fx").length||r.empty.fire()})})),1===t.nodeType&&("height"in e||"width"in e)&&(i.overflow=[f.overflow,f.overflowX,f.overflowY],c=K.css(t,"display"),h="none"===c?vt.get(t,"olddisplay")||w(t.nodeName):c,"inline"===h&&"none"===K.css(t,"float")&&(f.display="inline-block")),i.overflow&&(f.overflow="hidden",u.always(function(){f.overflow=i.overflow[0],f.overflowX=i.overflow[1],f.overflowY=i.overflow[2]}));for(n in e)if(o=e[n],Jt.exec(o)){if(delete e[n],s=s||"toggle"===o,o===(p?"hide":"show")){if("show"!==o||!g||void 0===g[n])continue;p=!0}d[n]=g&&g[n]||K.style(t,n)}else c=void 0;if(K.isEmptyObject(d))"inline"===("none"===c?w(t.nodeName):c)&&(f.display=c);else{g?"hidden"in g&&(p=g.hidden):g=vt.access(t,"fxshow",{}),s&&(g.hidden=!p),p?K(t).show():u.done(function(){K(t).hide()}),u.done(function(){var e;vt.remove(t,"fxshow");for(e in d)K.style(t,e,d[e])});for(n in d)a=F(p?g[n]:0,n,u),n in g||(g[n]=a.start,p&&(a.end=a.start,a.start="width"===n||"height"===n?1:0))}}function M(t,e){var i,n,o,s,a;for(i in t)if(n=K.camelCase(i),o=e[n],s=t[i],K.isArray(s)&&(o=s[1],s=t[i]=s[0]),i!==n&&(t[n]=s,delete t[i]),a=K.cssHooks[n],a&&"expand"in a){s=a.expand(s),delete t[n];for(i in s)i in t||(t[i]=s[i],e[i]=o)}else e[n]=o}function R(t,e,i){var n,o,s=0,a=ee.length,r=K.Deferred().always(function(){delete l.elem}),l=function(){if(o)return!1;for(var e=Qt||E(),i=Math.max(0,c.startTime+c.duration-e),n=i/c.duration||0,s=1-n,a=0,l=c.tweens.length;l>a;a++)c.tweens[a].run(s);return r.notifyWith(t,[c,s,i]),1>s&&l?i:(r.resolveWith(t,[c]),!1)},c=r.promise({elem:t,props:K.extend({},e),opts:K.extend(!0,{specialEasing:{}},i),originalProperties:e,originalOptions:i,startTime:Qt||E(),duration:i.duration,tweens:[],createTween:function(e,i){var n=K.Tween(t,c.opts,e,i,c.opts.specialEasing[e]||c.opts.easing);return c.tweens.push(n),n},stop:function(e){var i=0,n=e?c.tweens.length:0;if(o)return this;for(o=!0;n>i;i++)c.tweens[i].run(1);return e?r.resolveWith(t,[c,e]):r.rejectWith(t,[c,e]),this}}),h=c.props;for(M(h,c.opts.specialEasing);a>s;s++)if(n=ee[s].call(c,t,h,c.opts))return n;return K.map(h,F,c),K.isFunction(c.opts.start)&&c.opts.start.call(t,c),K.fx.timer(K.extend(l,{elem:t,anim:c,queue:c.opts.queue})),c.progress(c.opts.progress).done(c.opts.done,c.opts.complete).fail(c.opts.fail).always(c.opts.always)}function j(t){return function(e,i){"string"!=typeof e&&(i=e,e="*");var n,o=0,s=e.toLowerCase().match(ft)||[];if(K.isFunction(i))for(;n=s[o++];)"+"===n[0]?(n=n.slice(1)||"*",(t[n]=t[n]||[]).unshift(i)):(t[n]=t[n]||[]).push(i)}}function N(t,e,i,n){function o(r){var l;return s[r]=!0,K.each(t[r]||[],function(t,r){var c=r(e,i,n);return"string"!=typeof c||a||s[c]?a?!(l=c):void 0:(e.dataTypes.unshift(c),o(c),!1)}),l}var s={},a=t===be;return o(e.dataTypes[0])||!s["*"]&&o("*")}function I(t,e){var i,n,o=K.ajaxSettings.flatOptions||{};for(i in e)void 0!==e[i]&&((o[i]?t:n||(n={}))[i]=e[i]);return n&&K.extend(!0,t,n),t}function O(t,e,i){for(var n,o,s,a,r=t.contents,l=t.dataTypes;"*"===l[0];)l.shift(),void 0===n&&(n=t.mimeType||e.getResponseHeader("Content-Type"));if(n)for(o in r)if(r[o]&&r[o].test(n)){l.unshift(o);break}if(l[0]in i)s=l[0];else{for(o in i){if(!l[0]||t.converters[o+" "+l[0]]){s=o;break}a||(a=o)}s=s||a}return s?(s!==l[0]&&l.unshift(s),i[s]):void 0}function W(t,e,i,n){var o,s,a,r,l,c={},h=t.dataTypes.slice();if(h[1])for(a in t.converters)c[a.toLowerCase()]=t.converters[a];for(s=h.shift();s;)if(t.responseFields[s]&&(i[t.responseFields[s]]=e),!l&&n&&t.dataFilter&&(e=t.dataFilter(e,t.dataType)),l=s,s=h.shift())if("*"===s)s=l;else if("*"!==l&&l!==s){if(a=c[l+" "+s]||c["* "+s],!a)for(o in c)if(r=o.split(" "),r[1]===s&&(a=c[l+" "+r[0]]||c["* "+r[0]])){a===!0?a=c[o]:c[o]!==!0&&(s=r[0],h.unshift(r[1]));break}if(a!==!0)if(a&&t["throws"])e=a(e);else try{e=a(e)}catch(u){return{state:"parsererror",error:a?u:"No conversion from "+l+" to "+s}}}return{state:"success",data:e}}function H(t,e,i,n){var o;if(K.isArray(e))K.each(e,function(e,o){i||Se.test(t)?n(t,o):H(t+"["+("object"==typeof o?e:"")+"]",o,i,n)});else if(i||"object"!==K.type(e))n(t,e);else for(o in e)H(t+"["+o+"]",e[o],i,n)}function z(t){return K.isWindow(t)?t:9===t.nodeType&&t.defaultView}var q=[],U=q.slice,B=q.concat,X=q.push,_=q.indexOf,V={},Y=V.toString,G=V.hasOwnProperty,Q={},Z=t.document,J="2.1.4",K=function(t,e){return new K.fn.init(t,e)},tt=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,et=/^-ms-/,it=/-([\da-z])/gi,nt=function(t,e){return e.toUpperCase()};K.fn=K.prototype={jquery:J,constructor:K,selector:"",length:0,toArray:function(){return U.call(this)},get:function(t){return null!=t?0>t?this[t+this.length]:this[t]:U.call(this)},pushStack:function(t){var e=K.merge(this.constructor(),t);return e.prevObject=this,e.context=this.context,e},each:function(t,e){return K.each(this,t,e)},map:function(t){return this.pushStack(K.map(this,function(e,i){return t.call(e,i,e)}))},slice:function(){return this.pushStack(U.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(t){var e=this.length,i=+t+(0>t?e:0);return this.pushStack(i>=0&&e>i?[this[i]]:[])},end:function(){return this.prevObject||this.constructor(null)},push:X,sort:q.sort,splice:q.splice},K.extend=K.fn.extend=function(){var t,e,i,n,o,s,a=arguments[0]||{},r=1,l=arguments.length,c=!1;for("boolean"==typeof a&&(c=a,a=arguments[r]||{},r++),"object"==typeof a||K.isFunction(a)||(a={}),r===l&&(a=this,r--);l>r;r++)if(null!=(t=arguments[r]))for(e in t)i=a[e],n=t[e],a!==n&&(c&&n&&(K.isPlainObject(n)||(o=K.isArray(n)))?(o?(o=!1,s=i&&K.isArray(i)?i:[]):s=i&&K.isPlainObject(i)?i:{},a[e]=K.extend(c,s,n)):void 0!==n&&(a[e]=n));return a},K.extend({expando:"jQuery"+(J+Math.random()).replace(/\D/g,""),isReady:!0,error:function(t){throw new Error(t)},noop:function(){},isFunction:function(t){return"function"===K.type(t)},isArray:Array.isArray,isWindow:function(t){return null!=t&&t===t.window},isNumeric:function(t){return!K.isArray(t)&&t-parseFloat(t)+1>=0},isPlainObject:function(t){return"object"!==K.type(t)||t.nodeType||K.isWindow(t)?!1:t.constructor&&!G.call(t.constructor.prototype,"isPrototypeOf")?!1:!0},isEmptyObject:function(t){var e;for(e in t)return!1;return!0},type:function(t){return null==t?t+"":"object"==typeof t||"function"==typeof t?V[Y.call(t)]||"object":typeof t},globalEval:function(t){var e,i=eval;t=K.trim(t),t&&(1===t.indexOf("use strict")?(e=Z.createElement("script"),e.text=t,Z.head.appendChild(e).parentNode.removeChild(e)):i(t))},camelCase:function(t){return t.replace(et,"ms-").replace(it,nt)},nodeName:function(t,e){return t.nodeName&&t.nodeName.toLowerCase()===e.toLowerCase()},each:function(t,e,n){var o,s=0,a=t.length,r=i(t);if(n){if(r)for(;a>s&&(o=e.apply(t[s],n),o!==!1);s++);else for(s in t)if(o=e.apply(t[s],n),o===!1)break}else if(r)for(;a>s&&(o=e.call(t[s],s,t[s]),o!==!1);s++);else for(s in t)if(o=e.call(t[s],s,t[s]),o===!1)break;return t},trim:function(t){return null==t?"":(t+"").replace(tt,"")},makeArray:function(t,e){var n=e||[];return null!=t&&(i(Object(t))?K.merge(n,"string"==typeof t?[t]:t):X.call(n,t)),n},inArray:function(t,e,i){return null==e?-1:_.call(e,t,i)},merge:function(t,e){for(var i=+e.length,n=0,o=t.length;i>n;n++)t[o++]=e[n];return t.length=o,t},grep:function(t,e,i){for(var n,o=[],s=0,a=t.length,r=!i;a>s;s++)n=!e(t[s],s),n!==r&&o.push(t[s]);return o},map:function(t,e,n){var o,s=0,a=t.length,r=i(t),l=[];if(r)for(;a>s;s++)o=e(t[s],s,n),null!=o&&l.push(o);else for(s in t)o=e(t[s],s,n),null!=o&&l.push(o);return B.apply([],l)},guid:1,proxy:function(t,e){var i,n,o;return"string"==typeof e&&(i=t[e],e=t,t=i),K.isFunction(t)?(n=U.call(arguments,2),o=function(){return t.apply(e||this,n.concat(U.call(arguments)))},o.guid=t.guid=t.guid||K.guid++,o):void 0},now:Date.now,support:Q}),K.each("Boolean Number String Function Array Date RegExp Object Error".split(" "),function(t,e){V["[object "+e+"]"]=e.toLowerCase()});var ot=function(t){function e(t,e,i,n){var o,s,a,r,l,c,u,f,p,g;if((e?e.ownerDocument||e:H)!==D&&F(e),e=e||D,i=i||[],r=e.nodeType,"string"!=typeof t||!t||1!==r&&9!==r&&11!==r)return i;if(!n&&R){if(11!==r&&(o=yt.exec(t)))if(a=o[1]){if(9===r){if(s=e.getElementById(a),!s||!s.parentNode)return i;if(s.id===a)return i.push(s),i}else if(e.ownerDocument&&(s=e.ownerDocument.getElementById(a))&&O(e,s)&&s.id===a)return i.push(s),i}else{if(o[2])return J.apply(i,e.getElementsByTagName(t)),i;if((a=o[3])&&k.getElementsByClassName)return J.apply(i,e.getElementsByClassName(a)),i}if(k.qsa&&(!j||!j.test(t))){if(f=u=W,p=e,g=1!==r&&t,1===r&&"object"!==e.nodeName.toLowerCase()){for(c=T(t),(u=e.getAttribute("id"))?f=u.replace(wt,"\\$&"):e.setAttribute("id",f),f="[id='"+f+"'] ",l=c.length;l--;)c[l]=f+d(c[l]);p=bt.test(t)&&h(e.parentNode)||e,g=c.join(",")}if(g)try{return J.apply(i,p.querySelectorAll(g)),i}catch(m){}finally{u||e.removeAttribute("id")}}}return L(t.replace(lt,"$1"),e,i,n)}function i(){function t(i,n){return e.push(i+" ")>x.cacheLength&&delete t[e.shift()],t[i+" "]=n}var e=[];return t}function n(t){return t[W]=!0,t}function o(t){var e=D.createElement("div");try{return!!t(e)}catch(i){return!1}finally{e.parentNode&&e.parentNode.removeChild(e),e=null}}function s(t,e){for(var i=t.split("|"),n=t.length;n--;)x.attrHandle[i[n]]=e}function a(t,e){var i=e&&t,n=i&&1===t.nodeType&&1===e.nodeType&&(~e.sourceIndex||V)-(~t.sourceIndex||V);if(n)return n;if(i)for(;i=i.nextSibling;)if(i===e)return-1;return t?1:-1}function r(t){return function(e){var i=e.nodeName.toLowerCase();return"input"===i&&e.type===t}}function l(t){return function(e){var i=e.nodeName.toLowerCase();return("input"===i||"button"===i)&&e.type===t}}function c(t){return n(function(e){return e=+e,n(function(i,n){for(var o,s=t([],i.length,e),a=s.length;a--;)i[o=s[a]]&&(i[o]=!(n[o]=i[o]))})})}function h(t){return t&&"undefined"!=typeof t.getElementsByTagName&&t}function u(){}function d(t){for(var e=0,i=t.length,n="";i>e;e++)n+=t[e].value;return n}function f(t,e,i){var n=e.dir,o=i&&"parentNode"===n,s=q++;return e.first?function(e,i,s){for(;e=e[n];)if(1===e.nodeType||o)return t(e,i,s)}:function(e,i,a){var r,l,c=[z,s];if(a){for(;e=e[n];)if((1===e.nodeType||o)&&t(e,i,a))return!0}else for(;e=e[n];)if(1===e.nodeType||o){if(l=e[W]||(e[W]={}),(r=l[n])&&r[0]===z&&r[1]===s)return c[2]=r[2];if(l[n]=c,c[2]=t(e,i,a))return!0}}}function p(t){return t.length>1?function(e,i,n){for(var o=t.length;o--;)if(!t[o](e,i,n))return!1;return!0}:t[0]}function g(t,i,n){for(var o=0,s=i.length;s>o;o++)e(t,i[o],n);return n}function m(t,e,i,n,o){for(var s,a=[],r=0,l=t.length,c=null!=e;l>r;r++)(s=t[r])&&(!i||i(s,n,o))&&(a.push(s),c&&e.push(r));return a}function v(t,e,i,o,s,a){return o&&!o[W]&&(o=v(o)),s&&!s[W]&&(s=v(s,a)),n(function(n,a,r,l){var c,h,u,d=[],f=[],p=a.length,v=n||g(e||"*",r.nodeType?[r]:r,[]),y=!t||!n&&e?v:m(v,d,t,r,l),b=i?s||(n?t:p||o)?[]:a:y;if(i&&i(y,b,r,l),o)for(c=m(b,f),o(c,[],r,l),h=c.length;h--;)(u=c[h])&&(b[f[h]]=!(y[f[h]]=u));if(n){if(s||t){if(s){for(c=[],h=b.length;h--;)(u=b[h])&&c.push(y[h]=u);s(null,b=[],c,l)}for(h=b.length;h--;)(u=b[h])&&(c=s?tt(n,u):d[h])>-1&&(n[c]=!(a[c]=u))}}else b=m(b===a?b.splice(p,b.length):b),s?s(null,a,b,l):J.apply(a,b)})}function y(t){for(var e,i,n,o=t.length,s=x.relative[t[0].type],a=s||x.relative[" "],r=s?1:0,l=f(function(t){return t===e},a,!0),c=f(function(t){return tt(e,t)>-1},a,!0),h=[function(t,i,n){var o=!s&&(n||i!==$)||((e=i).nodeType?l(t,i,n):c(t,i,n));return e=null,o}];o>r;r++)if(i=x.relative[t[r].type])h=[f(p(h),i)];else{if(i=x.filter[t[r].type].apply(null,t[r].matches),i[W]){for(n=++r;o>n&&!x.relative[t[n].type];n++);return v(r>1&&p(h),r>1&&d(t.slice(0,r-1).concat({value:" "===t[r-2].type?"*":""})).replace(lt,"$1"),i,n>r&&y(t.slice(r,n)),o>n&&y(t=t.slice(n)),o>n&&d(t))}h.push(i)}return p(h)}function b(t,i){var o=i.length>0,s=t.length>0,a=function(n,a,r,l,c){var h,u,d,f=0,p="0",g=n&&[],v=[],y=$,b=n||s&&x.find.TAG("*",c),w=z+=null==y?1:Math.random()||.1,k=b.length;for(c&&($=a!==D&&a);p!==k&&null!=(h=b[p]);p++){if(s&&h){for(u=0;d=t[u++];)if(d(h,a,r)){l.push(h);break}c&&(z=w)}o&&((h=!d&&h)&&f--,n&&g.push(h))}if(f+=p,o&&p!==f){for(u=0;d=i[u++];)d(g,v,a,r);if(n){if(f>0)for(;p--;)g[p]||v[p]||(v[p]=Q.call(l));v=m(v)}J.apply(l,v),c&&!n&&v.length>0&&f+i.length>1&&e.uniqueSort(l)}return c&&(z=w,$=y),g};return o?n(a):a}var w,k,x,C,S,T,P,L,$,E,A,F,D,M,R,j,N,I,O,W="sizzle"+1*new Date,H=t.document,z=0,q=0,U=i(),B=i(),X=i(),_=function(t,e){return t===e&&(A=!0),0},V=1<<31,Y={}.hasOwnProperty,G=[],Q=G.pop,Z=G.push,J=G.push,K=G.slice,tt=function(t,e){for(var i=0,n=t.length;n>i;i++)if(t[i]===e)return i;return-1},et="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",it="[\\x20\\t\\r\\n\\f]",nt="(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",ot=nt.replace("w","w#"),st="\\["+it+"*("+nt+")(?:"+it+"*([*^$|!~]?=)"+it+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+ot+"))|)"+it+"*\\]",at=":("+nt+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+st+")*)|.*)\\)|)",rt=new RegExp(it+"+","g"),lt=new RegExp("^"+it+"+|((?:^|[^\\\\])(?:\\\\.)*)"+it+"+$","g"),ct=new RegExp("^"+it+"*,"+it+"*"),ht=new RegExp("^"+it+"*([>+~]|"+it+")"+it+"*"),ut=new RegExp("="+it+"*([^\\]'\"]*?)"+it+"*\\]","g"),dt=new RegExp(at),ft=new RegExp("^"+ot+"$"),pt={ID:new RegExp("^#("+nt+")"),CLASS:new RegExp("^\\.("+nt+")"),TAG:new RegExp("^("+nt.replace("w","w*")+")"),ATTR:new RegExp("^"+st),PSEUDO:new RegExp("^"+at),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+it+"*(even|odd|(([+-]|)(\\d*)n|)"+it+"*(?:([+-]|)"+it+"*(\\d+)|))"+it+"*\\)|)","i"),bool:new RegExp("^(?:"+et+")$","i"),needsContext:new RegExp("^"+it+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+it+"*((?:-\\d)?\\d*)"+it+"*\\)|)(?=[^-]|$)","i")},gt=/^(?:input|select|textarea|button)$/i,mt=/^h\d$/i,vt=/^[^{]+\{\s*\[native \w/,yt=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,bt=/[+~]/,wt=/'|\\/g,kt=new RegExp("\\\\([\\da-f]{1,6}"+it+"?|("+it+")|.)","ig"),xt=function(t,e,i){var n="0x"+e-65536;return n!==n||i?e:0>n?String.fromCharCode(n+65536):String.fromCharCode(n>>10|55296,1023&n|56320)},Ct=function(){F()};try{J.apply(G=K.call(H.childNodes),H.childNodes),G[H.childNodes.length].nodeType}catch(St){J={apply:G.length?function(t,e){Z.apply(t,K.call(e))}:function(t,e){for(var i=t.length,n=0;t[i++]=e[n++];);t.length=i-1}}}k=e.support={},S=e.isXML=function(t){var e=t&&(t.ownerDocument||t).documentElement;return e?"HTML"!==e.nodeName:!1},F=e.setDocument=function(t){var e,i,n=t?t.ownerDocument||t:H;return n!==D&&9===n.nodeType&&n.documentElement?(D=n,M=n.documentElement,i=n.defaultView,i&&i!==i.top&&(i.addEventListener?i.addEventListener("unload",Ct,!1):i.attachEvent&&i.attachEvent("onunload",Ct)),R=!S(n),k.attributes=o(function(t){return t.className="i",!t.getAttribute("className")}),k.getElementsByTagName=o(function(t){return t.appendChild(n.createComment("")),!t.getElementsByTagName("*").length}),k.getElementsByClassName=vt.test(n.getElementsByClassName),k.getById=o(function(t){return M.appendChild(t).id=W,!n.getElementsByName||!n.getElementsByName(W).length}),k.getById?(x.find.ID=function(t,e){if("undefined"!=typeof e.getElementById&&R){var i=e.getElementById(t);return i&&i.parentNode?[i]:[]}},x.filter.ID=function(t){var e=t.replace(kt,xt);return function(t){return t.getAttribute("id")===e}}):(delete x.find.ID,x.filter.ID=function(t){var e=t.replace(kt,xt);return function(t){var i="undefined"!=typeof t.getAttributeNode&&t.getAttributeNode("id");return i&&i.value===e}}),x.find.TAG=k.getElementsByTagName?function(t,e){return"undefined"!=typeof e.getElementsByTagName?e.getElementsByTagName(t):k.qsa?e.querySelectorAll(t):void 0;
}:function(t,e){var i,n=[],o=0,s=e.getElementsByTagName(t);if("*"===t){for(;i=s[o++];)1===i.nodeType&&n.push(i);return n}return s},x.find.CLASS=k.getElementsByClassName&&function(t,e){return R?e.getElementsByClassName(t):void 0},N=[],j=[],(k.qsa=vt.test(n.querySelectorAll))&&(o(function(t){M.appendChild(t).innerHTML="<a id='"+W+"'></a><select id='"+W+"-\f]' msallowcapture=''><option selected=''></option></select>",t.querySelectorAll("[msallowcapture^='']").length&&j.push("[*^$]="+it+"*(?:''|\"\")"),t.querySelectorAll("[selected]").length||j.push("\\["+it+"*(?:value|"+et+")"),t.querySelectorAll("[id~="+W+"-]").length||j.push("~="),t.querySelectorAll(":checked").length||j.push(":checked"),t.querySelectorAll("a#"+W+"+*").length||j.push(".#.+[+~]")}),o(function(t){var e=n.createElement("input");e.setAttribute("type","hidden"),t.appendChild(e).setAttribute("name","D"),t.querySelectorAll("[name=d]").length&&j.push("name"+it+"*[*^$|!~]?="),t.querySelectorAll(":enabled").length||j.push(":enabled",":disabled"),t.querySelectorAll("*,:x"),j.push(",.*:")})),(k.matchesSelector=vt.test(I=M.matches||M.webkitMatchesSelector||M.mozMatchesSelector||M.oMatchesSelector||M.msMatchesSelector))&&o(function(t){k.disconnectedMatch=I.call(t,"div"),I.call(t,"[s!='']:x"),N.push("!=",at)}),j=j.length&&new RegExp(j.join("|")),N=N.length&&new RegExp(N.join("|")),e=vt.test(M.compareDocumentPosition),O=e||vt.test(M.contains)?function(t,e){var i=9===t.nodeType?t.documentElement:t,n=e&&e.parentNode;return t===n||!(!n||1!==n.nodeType||!(i.contains?i.contains(n):t.compareDocumentPosition&&16&t.compareDocumentPosition(n)))}:function(t,e){if(e)for(;e=e.parentNode;)if(e===t)return!0;return!1},_=e?function(t,e){if(t===e)return A=!0,0;var i=!t.compareDocumentPosition-!e.compareDocumentPosition;return i?i:(i=(t.ownerDocument||t)===(e.ownerDocument||e)?t.compareDocumentPosition(e):1,1&i||!k.sortDetached&&e.compareDocumentPosition(t)===i?t===n||t.ownerDocument===H&&O(H,t)?-1:e===n||e.ownerDocument===H&&O(H,e)?1:E?tt(E,t)-tt(E,e):0:4&i?-1:1)}:function(t,e){if(t===e)return A=!0,0;var i,o=0,s=t.parentNode,r=e.parentNode,l=[t],c=[e];if(!s||!r)return t===n?-1:e===n?1:s?-1:r?1:E?tt(E,t)-tt(E,e):0;if(s===r)return a(t,e);for(i=t;i=i.parentNode;)l.unshift(i);for(i=e;i=i.parentNode;)c.unshift(i);for(;l[o]===c[o];)o++;return o?a(l[o],c[o]):l[o]===H?-1:c[o]===H?1:0},n):D},e.matches=function(t,i){return e(t,null,null,i)},e.matchesSelector=function(t,i){if((t.ownerDocument||t)!==D&&F(t),i=i.replace(ut,"='$1']"),k.matchesSelector&&R&&(!N||!N.test(i))&&(!j||!j.test(i)))try{var n=I.call(t,i);if(n||k.disconnectedMatch||t.document&&11!==t.document.nodeType)return n}catch(o){}return e(i,D,null,[t]).length>0},e.contains=function(t,e){return(t.ownerDocument||t)!==D&&F(t),O(t,e)},e.attr=function(t,e){(t.ownerDocument||t)!==D&&F(t);var i=x.attrHandle[e.toLowerCase()],n=i&&Y.call(x.attrHandle,e.toLowerCase())?i(t,e,!R):void 0;return void 0!==n?n:k.attributes||!R?t.getAttribute(e):(n=t.getAttributeNode(e))&&n.specified?n.value:null},e.error=function(t){throw new Error("Syntax error, unrecognized expression: "+t)},e.uniqueSort=function(t){var e,i=[],n=0,o=0;if(A=!k.detectDuplicates,E=!k.sortStable&&t.slice(0),t.sort(_),A){for(;e=t[o++];)e===t[o]&&(n=i.push(o));for(;n--;)t.splice(i[n],1)}return E=null,t},C=e.getText=function(t){var e,i="",n=0,o=t.nodeType;if(o){if(1===o||9===o||11===o){if("string"==typeof t.textContent)return t.textContent;for(t=t.firstChild;t;t=t.nextSibling)i+=C(t)}else if(3===o||4===o)return t.nodeValue}else for(;e=t[n++];)i+=C(e);return i},x=e.selectors={cacheLength:50,createPseudo:n,match:pt,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(t){return t[1]=t[1].replace(kt,xt),t[3]=(t[3]||t[4]||t[5]||"").replace(kt,xt),"~="===t[2]&&(t[3]=" "+t[3]+" "),t.slice(0,4)},CHILD:function(t){return t[1]=t[1].toLowerCase(),"nth"===t[1].slice(0,3)?(t[3]||e.error(t[0]),t[4]=+(t[4]?t[5]+(t[6]||1):2*("even"===t[3]||"odd"===t[3])),t[5]=+(t[7]+t[8]||"odd"===t[3])):t[3]&&e.error(t[0]),t},PSEUDO:function(t){var e,i=!t[6]&&t[2];return pt.CHILD.test(t[0])?null:(t[3]?t[2]=t[4]||t[5]||"":i&&dt.test(i)&&(e=T(i,!0))&&(e=i.indexOf(")",i.length-e)-i.length)&&(t[0]=t[0].slice(0,e),t[2]=i.slice(0,e)),t.slice(0,3))}},filter:{TAG:function(t){var e=t.replace(kt,xt).toLowerCase();return"*"===t?function(){return!0}:function(t){return t.nodeName&&t.nodeName.toLowerCase()===e}},CLASS:function(t){var e=U[t+" "];return e||(e=new RegExp("(^|"+it+")"+t+"("+it+"|$)"))&&U(t,function(t){return e.test("string"==typeof t.className&&t.className||"undefined"!=typeof t.getAttribute&&t.getAttribute("class")||"")})},ATTR:function(t,i,n){return function(o){var s=e.attr(o,t);return null==s?"!="===i:i?(s+="","="===i?s===n:"!="===i?s!==n:"^="===i?n&&0===s.indexOf(n):"*="===i?n&&s.indexOf(n)>-1:"$="===i?n&&s.slice(-n.length)===n:"~="===i?(" "+s.replace(rt," ")+" ").indexOf(n)>-1:"|="===i?s===n||s.slice(0,n.length+1)===n+"-":!1):!0}},CHILD:function(t,e,i,n,o){var s="nth"!==t.slice(0,3),a="last"!==t.slice(-4),r="of-type"===e;return 1===n&&0===o?function(t){return!!t.parentNode}:function(e,i,l){var c,h,u,d,f,p,g=s!==a?"nextSibling":"previousSibling",m=e.parentNode,v=r&&e.nodeName.toLowerCase(),y=!l&&!r;if(m){if(s){for(;g;){for(u=e;u=u[g];)if(r?u.nodeName.toLowerCase()===v:1===u.nodeType)return!1;p=g="only"===t&&!p&&"nextSibling"}return!0}if(p=[a?m.firstChild:m.lastChild],a&&y){for(h=m[W]||(m[W]={}),c=h[t]||[],f=c[0]===z&&c[1],d=c[0]===z&&c[2],u=f&&m.childNodes[f];u=++f&&u&&u[g]||(d=f=0)||p.pop();)if(1===u.nodeType&&++d&&u===e){h[t]=[z,f,d];break}}else if(y&&(c=(e[W]||(e[W]={}))[t])&&c[0]===z)d=c[1];else for(;(u=++f&&u&&u[g]||(d=f=0)||p.pop())&&((r?u.nodeName.toLowerCase()!==v:1!==u.nodeType)||!++d||(y&&((u[W]||(u[W]={}))[t]=[z,d]),u!==e)););return d-=o,d===n||d%n===0&&d/n>=0}}},PSEUDO:function(t,i){var o,s=x.pseudos[t]||x.setFilters[t.toLowerCase()]||e.error("unsupported pseudo: "+t);return s[W]?s(i):s.length>1?(o=[t,t,"",i],x.setFilters.hasOwnProperty(t.toLowerCase())?n(function(t,e){for(var n,o=s(t,i),a=o.length;a--;)n=tt(t,o[a]),t[n]=!(e[n]=o[a])}):function(t){return s(t,0,o)}):s}},pseudos:{not:n(function(t){var e=[],i=[],o=P(t.replace(lt,"$1"));return o[W]?n(function(t,e,i,n){for(var s,a=o(t,null,n,[]),r=t.length;r--;)(s=a[r])&&(t[r]=!(e[r]=s))}):function(t,n,s){return e[0]=t,o(e,null,s,i),e[0]=null,!i.pop()}}),has:n(function(t){return function(i){return e(t,i).length>0}}),contains:n(function(t){return t=t.replace(kt,xt),function(e){return(e.textContent||e.innerText||C(e)).indexOf(t)>-1}}),lang:n(function(t){return ft.test(t||"")||e.error("unsupported lang: "+t),t=t.replace(kt,xt).toLowerCase(),function(e){var i;do if(i=R?e.lang:e.getAttribute("xml:lang")||e.getAttribute("lang"))return i=i.toLowerCase(),i===t||0===i.indexOf(t+"-");while((e=e.parentNode)&&1===e.nodeType);return!1}}),target:function(e){var i=t.location&&t.location.hash;return i&&i.slice(1)===e.id},root:function(t){return t===M},focus:function(t){return t===D.activeElement&&(!D.hasFocus||D.hasFocus())&&!!(t.type||t.href||~t.tabIndex)},enabled:function(t){return t.disabled===!1},disabled:function(t){return t.disabled===!0},checked:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&!!t.checked||"option"===e&&!!t.selected},selected:function(t){return t.parentNode&&t.parentNode.selectedIndex,t.selected===!0},empty:function(t){for(t=t.firstChild;t;t=t.nextSibling)if(t.nodeType<6)return!1;return!0},parent:function(t){return!x.pseudos.empty(t)},header:function(t){return mt.test(t.nodeName)},input:function(t){return gt.test(t.nodeName)},button:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&"button"===t.type||"button"===e},text:function(t){var e;return"input"===t.nodeName.toLowerCase()&&"text"===t.type&&(null==(e=t.getAttribute("type"))||"text"===e.toLowerCase())},first:c(function(){return[0]}),last:c(function(t,e){return[e-1]}),eq:c(function(t,e,i){return[0>i?i+e:i]}),even:c(function(t,e){for(var i=0;e>i;i+=2)t.push(i);return t}),odd:c(function(t,e){for(var i=1;e>i;i+=2)t.push(i);return t}),lt:c(function(t,e,i){for(var n=0>i?i+e:i;--n>=0;)t.push(n);return t}),gt:c(function(t,e,i){for(var n=0>i?i+e:i;++n<e;)t.push(n);return t})}},x.pseudos.nth=x.pseudos.eq;for(w in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})x.pseudos[w]=r(w);for(w in{submit:!0,reset:!0})x.pseudos[w]=l(w);return u.prototype=x.filters=x.pseudos,x.setFilters=new u,T=e.tokenize=function(t,i){var n,o,s,a,r,l,c,h=B[t+" "];if(h)return i?0:h.slice(0);for(r=t,l=[],c=x.preFilter;r;){(!n||(o=ct.exec(r)))&&(o&&(r=r.slice(o[0].length)||r),l.push(s=[])),n=!1,(o=ht.exec(r))&&(n=o.shift(),s.push({value:n,type:o[0].replace(lt," ")}),r=r.slice(n.length));for(a in x.filter)!(o=pt[a].exec(r))||c[a]&&!(o=c[a](o))||(n=o.shift(),s.push({value:n,type:a,matches:o}),r=r.slice(n.length));if(!n)break}return i?r.length:r?e.error(t):B(t,l).slice(0)},P=e.compile=function(t,e){var i,n=[],o=[],s=X[t+" "];if(!s){for(e||(e=T(t)),i=e.length;i--;)s=y(e[i]),s[W]?n.push(s):o.push(s);s=X(t,b(o,n)),s.selector=t}return s},L=e.select=function(t,e,i,n){var o,s,a,r,l,c="function"==typeof t&&t,u=!n&&T(t=c.selector||t);if(i=i||[],1===u.length){if(s=u[0]=u[0].slice(0),s.length>2&&"ID"===(a=s[0]).type&&k.getById&&9===e.nodeType&&R&&x.relative[s[1].type]){if(e=(x.find.ID(a.matches[0].replace(kt,xt),e)||[])[0],!e)return i;c&&(e=e.parentNode),t=t.slice(s.shift().value.length)}for(o=pt.needsContext.test(t)?0:s.length;o--&&(a=s[o],!x.relative[r=a.type]);)if((l=x.find[r])&&(n=l(a.matches[0].replace(kt,xt),bt.test(s[0].type)&&h(e.parentNode)||e))){if(s.splice(o,1),t=n.length&&d(s),!t)return J.apply(i,n),i;break}}return(c||P(t,u))(n,e,!R,i,bt.test(t)&&h(e.parentNode)||e),i},k.sortStable=W.split("").sort(_).join("")===W,k.detectDuplicates=!!A,F(),k.sortDetached=o(function(t){return 1&t.compareDocumentPosition(D.createElement("div"))}),o(function(t){return t.innerHTML="<a href='#'></a>","#"===t.firstChild.getAttribute("href")})||s("type|href|height|width",function(t,e,i){return i?void 0:t.getAttribute(e,"type"===e.toLowerCase()?1:2)}),k.attributes&&o(function(t){return t.innerHTML="<input/>",t.firstChild.setAttribute("value",""),""===t.firstChild.getAttribute("value")})||s("value",function(t,e,i){return i||"input"!==t.nodeName.toLowerCase()?void 0:t.defaultValue}),o(function(t){return null==t.getAttribute("disabled")})||s(et,function(t,e,i){var n;return i?void 0:t[e]===!0?e.toLowerCase():(n=t.getAttributeNode(e))&&n.specified?n.value:null}),e}(t);K.find=ot,K.expr=ot.selectors,K.expr[":"]=K.expr.pseudos,K.unique=ot.uniqueSort,K.text=ot.getText,K.isXMLDoc=ot.isXML,K.contains=ot.contains;var st=K.expr.match.needsContext,at=/^<(\w+)\s*\/?>(?:<\/\1>|)$/,rt=/^.[^:#\[\.,]*$/;K.filter=function(t,e,i){var n=e[0];return i&&(t=":not("+t+")"),1===e.length&&1===n.nodeType?K.find.matchesSelector(n,t)?[n]:[]:K.find.matches(t,K.grep(e,function(t){return 1===t.nodeType}))},K.fn.extend({find:function(t){var e,i=this.length,n=[],o=this;if("string"!=typeof t)return this.pushStack(K(t).filter(function(){for(e=0;i>e;e++)if(K.contains(o[e],this))return!0}));for(e=0;i>e;e++)K.find(t,o[e],n);return n=this.pushStack(i>1?K.unique(n):n),n.selector=this.selector?this.selector+" "+t:t,n},filter:function(t){return this.pushStack(n(this,t||[],!1))},not:function(t){return this.pushStack(n(this,t||[],!0))},is:function(t){return!!n(this,"string"==typeof t&&st.test(t)?K(t):t||[],!1).length}});var lt,ct=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,ht=K.fn.init=function(t,e){var i,n;if(!t)return this;if("string"==typeof t){if(i="<"===t[0]&&">"===t[t.length-1]&&t.length>=3?[null,t,null]:ct.exec(t),!i||!i[1]&&e)return!e||e.jquery?(e||lt).find(t):this.constructor(e).find(t);if(i[1]){if(e=e instanceof K?e[0]:e,K.merge(this,K.parseHTML(i[1],e&&e.nodeType?e.ownerDocument||e:Z,!0)),at.test(i[1])&&K.isPlainObject(e))for(i in e)K.isFunction(this[i])?this[i](e[i]):this.attr(i,e[i]);return this}return n=Z.getElementById(i[2]),n&&n.parentNode&&(this.length=1,this[0]=n),this.context=Z,this.selector=t,this}return t.nodeType?(this.context=this[0]=t,this.length=1,this):K.isFunction(t)?"undefined"!=typeof lt.ready?lt.ready(t):t(K):(void 0!==t.selector&&(this.selector=t.selector,this.context=t.context),K.makeArray(t,this))};ht.prototype=K.fn,lt=K(Z);var ut=/^(?:parents|prev(?:Until|All))/,dt={children:!0,contents:!0,next:!0,prev:!0};K.extend({dir:function(t,e,i){for(var n=[],o=void 0!==i;(t=t[e])&&9!==t.nodeType;)if(1===t.nodeType){if(o&&K(t).is(i))break;n.push(t)}return n},sibling:function(t,e){for(var i=[];t;t=t.nextSibling)1===t.nodeType&&t!==e&&i.push(t);return i}}),K.fn.extend({has:function(t){var e=K(t,this),i=e.length;return this.filter(function(){for(var t=0;i>t;t++)if(K.contains(this,e[t]))return!0})},closest:function(t,e){for(var i,n=0,o=this.length,s=[],a=st.test(t)||"string"!=typeof t?K(t,e||this.context):0;o>n;n++)for(i=this[n];i&&i!==e;i=i.parentNode)if(i.nodeType<11&&(a?a.index(i)>-1:1===i.nodeType&&K.find.matchesSelector(i,t))){s.push(i);break}return this.pushStack(s.length>1?K.unique(s):s)},index:function(t){return t?"string"==typeof t?_.call(K(t),this[0]):_.call(this,t.jquery?t[0]:t):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(t,e){return this.pushStack(K.unique(K.merge(this.get(),K(t,e))))},addBack:function(t){return this.add(null==t?this.prevObject:this.prevObject.filter(t))}}),K.each({parent:function(t){var e=t.parentNode;return e&&11!==e.nodeType?e:null},parents:function(t){return K.dir(t,"parentNode")},parentsUntil:function(t,e,i){return K.dir(t,"parentNode",i)},next:function(t){return o(t,"nextSibling")},prev:function(t){return o(t,"previousSibling")},nextAll:function(t){return K.dir(t,"nextSibling")},prevAll:function(t){return K.dir(t,"previousSibling")},nextUntil:function(t,e,i){return K.dir(t,"nextSibling",i)},prevUntil:function(t,e,i){return K.dir(t,"previousSibling",i)},siblings:function(t){return K.sibling((t.parentNode||{}).firstChild,t)},children:function(t){return K.sibling(t.firstChild)},contents:function(t){return t.contentDocument||K.merge([],t.childNodes)}},function(t,e){K.fn[t]=function(i,n){var o=K.map(this,e,i);return"Until"!==t.slice(-5)&&(n=i),n&&"string"==typeof n&&(o=K.filter(n,o)),this.length>1&&(dt[t]||K.unique(o),ut.test(t)&&o.reverse()),this.pushStack(o)}});var ft=/\S+/g,pt={};K.Callbacks=function(t){t="string"==typeof t?pt[t]||s(t):K.extend({},t);var e,i,n,o,a,r,l=[],c=!t.once&&[],h=function(s){for(e=t.memory&&s,i=!0,r=o||0,o=0,a=l.length,n=!0;l&&a>r;r++)if(l[r].apply(s[0],s[1])===!1&&t.stopOnFalse){e=!1;break}n=!1,l&&(c?c.length&&h(c.shift()):e?l=[]:u.disable())},u={add:function(){if(l){var i=l.length;!function s(e){K.each(e,function(e,i){var n=K.type(i);"function"===n?t.unique&&u.has(i)||l.push(i):i&&i.length&&"string"!==n&&s(i)})}(arguments),n?a=l.length:e&&(o=i,h(e))}return this},remove:function(){return l&&K.each(arguments,function(t,e){for(var i;(i=K.inArray(e,l,i))>-1;)l.splice(i,1),n&&(a>=i&&a--,r>=i&&r--)}),this},has:function(t){return t?K.inArray(t,l)>-1:!(!l||!l.length)},empty:function(){return l=[],a=0,this},disable:function(){return l=c=e=void 0,this},disabled:function(){return!l},lock:function(){return c=void 0,e||u.disable(),this},locked:function(){return!c},fireWith:function(t,e){return!l||i&&!c||(e=e||[],e=[t,e.slice?e.slice():e],n?c.push(e):h(e)),this},fire:function(){return u.fireWith(this,arguments),this},fired:function(){return!!i}};return u},K.extend({Deferred:function(t){var e=[["resolve","done",K.Callbacks("once memory"),"resolved"],["reject","fail",K.Callbacks("once memory"),"rejected"],["notify","progress",K.Callbacks("memory")]],i="pending",n={state:function(){return i},always:function(){return o.done(arguments).fail(arguments),this},then:function(){var t=arguments;return K.Deferred(function(i){K.each(e,function(e,s){var a=K.isFunction(t[e])&&t[e];o[s[1]](function(){var t=a&&a.apply(this,arguments);t&&K.isFunction(t.promise)?t.promise().done(i.resolve).fail(i.reject).progress(i.notify):i[s[0]+"With"](this===n?i.promise():this,a?[t]:arguments)})}),t=null}).promise()},promise:function(t){return null!=t?K.extend(t,n):n}},o={};return n.pipe=n.then,K.each(e,function(t,s){var a=s[2],r=s[3];n[s[1]]=a.add,r&&a.add(function(){i=r},e[1^t][2].disable,e[2][2].lock),o[s[0]]=function(){return o[s[0]+"With"](this===o?n:this,arguments),this},o[s[0]+"With"]=a.fireWith}),n.promise(o),t&&t.call(o,o),o},when:function(t){var e,i,n,o=0,s=U.call(arguments),a=s.length,r=1!==a||t&&K.isFunction(t.promise)?a:0,l=1===r?t:K.Deferred(),c=function(t,i,n){return function(o){i[t]=this,n[t]=arguments.length>1?U.call(arguments):o,n===e?l.notifyWith(i,n):--r||l.resolveWith(i,n)}};if(a>1)for(e=new Array(a),i=new Array(a),n=new Array(a);a>o;o++)s[o]&&K.isFunction(s[o].promise)?s[o].promise().done(c(o,n,s)).fail(l.reject).progress(c(o,i,e)):--r;return r||l.resolveWith(n,s),l.promise()}});var gt;K.fn.ready=function(t){return K.ready.promise().done(t),this},K.extend({isReady:!1,readyWait:1,holdReady:function(t){t?K.readyWait++:K.ready(!0)},ready:function(t){(t===!0?--K.readyWait:K.isReady)||(K.isReady=!0,t!==!0&&--K.readyWait>0||(gt.resolveWith(Z,[K]),K.fn.triggerHandler&&(K(Z).triggerHandler("ready"),K(Z).off("ready"))))}}),K.ready.promise=function(e){return gt||(gt=K.Deferred(),"complete"===Z.readyState?setTimeout(K.ready):(Z.addEventListener("DOMContentLoaded",a,!1),t.addEventListener("load",a,!1))),gt.promise(e)},K.ready.promise();var mt=K.access=function(t,e,i,n,o,s,a){var r=0,l=t.length,c=null==i;if("object"===K.type(i)){o=!0;for(r in i)K.access(t,e,r,i[r],!0,s,a)}else if(void 0!==n&&(o=!0,K.isFunction(n)||(a=!0),c&&(a?(e.call(t,n),e=null):(c=e,e=function(t,e,i){return c.call(K(t),i)})),e))for(;l>r;r++)e(t[r],i,a?n:n.call(t[r],r,e(t[r],i)));return o?t:c?e.call(t):l?e(t[0],i):s};K.acceptData=function(t){return 1===t.nodeType||9===t.nodeType||!+t.nodeType},r.uid=1,r.accepts=K.acceptData,r.prototype={key:function(t){if(!r.accepts(t))return 0;var e={},i=t[this.expando];if(!i){i=r.uid++;try{e[this.expando]={value:i},Object.defineProperties(t,e)}catch(n){e[this.expando]=i,K.extend(t,e)}}return this.cache[i]||(this.cache[i]={}),i},set:function(t,e,i){var n,o=this.key(t),s=this.cache[o];if("string"==typeof e)s[e]=i;else if(K.isEmptyObject(s))K.extend(this.cache[o],e);else for(n in e)s[n]=e[n];return s},get:function(t,e){var i=this.cache[this.key(t)];return void 0===e?i:i[e]},access:function(t,e,i){var n;return void 0===e||e&&"string"==typeof e&&void 0===i?(n=this.get(t,e),void 0!==n?n:this.get(t,K.camelCase(e))):(this.set(t,e,i),void 0!==i?i:e)},remove:function(t,e){var i,n,o,s=this.key(t),a=this.cache[s];if(void 0===e)this.cache[s]={};else{K.isArray(e)?n=e.concat(e.map(K.camelCase)):(o=K.camelCase(e),e in a?n=[e,o]:(n=o,n=n in a?[n]:n.match(ft)||[])),i=n.length;for(;i--;)delete a[n[i]]}},hasData:function(t){return!K.isEmptyObject(this.cache[t[this.expando]]||{})},discard:function(t){t[this.expando]&&delete this.cache[t[this.expando]]}};var vt=new r,yt=new r,bt=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,wt=/([A-Z])/g;K.extend({hasData:function(t){return yt.hasData(t)||vt.hasData(t)},data:function(t,e,i){return yt.access(t,e,i)},removeData:function(t,e){yt.remove(t,e)},_data:function(t,e,i){return vt.access(t,e,i)},_removeData:function(t,e){vt.remove(t,e)}}),K.fn.extend({data:function(t,e){var i,n,o,s=this[0],a=s&&s.attributes;if(void 0===t){if(this.length&&(o=yt.get(s),1===s.nodeType&&!vt.get(s,"hasDataAttrs"))){for(i=a.length;i--;)a[i]&&(n=a[i].name,0===n.indexOf("data-")&&(n=K.camelCase(n.slice(5)),l(s,n,o[n])));vt.set(s,"hasDataAttrs",!0)}return o}return"object"==typeof t?this.each(function(){yt.set(this,t)}):mt(this,function(e){var i,n=K.camelCase(t);if(s&&void 0===e){if(i=yt.get(s,t),void 0!==i)return i;if(i=yt.get(s,n),void 0!==i)return i;if(i=l(s,n,void 0),void 0!==i)return i}else this.each(function(){var i=yt.get(this,n);yt.set(this,n,e),-1!==t.indexOf("-")&&void 0!==i&&yt.set(this,t,e)})},null,e,arguments.length>1,null,!0)},removeData:function(t){return this.each(function(){yt.remove(this,t)})}}),K.extend({queue:function(t,e,i){var n;return t?(e=(e||"fx")+"queue",n=vt.get(t,e),i&&(!n||K.isArray(i)?n=vt.access(t,e,K.makeArray(i)):n.push(i)),n||[]):void 0},dequeue:function(t,e){e=e||"fx";var i=K.queue(t,e),n=i.length,o=i.shift(),s=K._queueHooks(t,e),a=function(){K.dequeue(t,e)};"inprogress"===o&&(o=i.shift(),n--),o&&("fx"===e&&i.unshift("inprogress"),delete s.stop,o.call(t,a,s)),!n&&s&&s.empty.fire()},_queueHooks:function(t,e){var i=e+"queueHooks";return vt.get(t,i)||vt.access(t,i,{empty:K.Callbacks("once memory").add(function(){vt.remove(t,[e+"queue",i])})})}}),K.fn.extend({queue:function(t,e){var i=2;return"string"!=typeof t&&(e=t,t="fx",i--),arguments.length<i?K.queue(this[0],t):void 0===e?this:this.each(function(){var i=K.queue(this,t,e);K._queueHooks(this,t),"fx"===t&&"inprogress"!==i[0]&&K.dequeue(this,t)})},dequeue:function(t){return this.each(function(){K.dequeue(this,t)})},clearQueue:function(t){return this.queue(t||"fx",[])},promise:function(t,e){var i,n=1,o=K.Deferred(),s=this,a=this.length,r=function(){--n||o.resolveWith(s,[s])};for("string"!=typeof t&&(e=t,t=void 0),t=t||"fx";a--;)i=vt.get(s[a],t+"queueHooks"),i&&i.empty&&(n++,i.empty.add(r));return r(),o.promise(e)}});var kt=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,xt=["Top","Right","Bottom","Left"],Ct=function(t,e){return t=e||t,"none"===K.css(t,"display")||!K.contains(t.ownerDocument,t)},St=/^(?:checkbox|radio)$/i;!function(){var t=Z.createDocumentFragment(),e=t.appendChild(Z.createElement("div")),i=Z.createElement("input");i.setAttribute("type","radio"),i.setAttribute("checked","checked"),i.setAttribute("name","t"),e.appendChild(i),Q.checkClone=e.cloneNode(!0).cloneNode(!0).lastChild.checked,e.innerHTML="<textarea>x</textarea>",Q.noCloneChecked=!!e.cloneNode(!0).lastChild.defaultValue}();var Tt="undefined";Q.focusinBubbles="onfocusin"in t;var Pt=/^key/,Lt=/^(?:mouse|pointer|contextmenu)|click/,$t=/^(?:focusinfocus|focusoutblur)$/,Et=/^([^.]*)(?:\.(.+)|)$/;K.event={global:{},add:function(t,e,i,n,o){var s,a,r,l,c,h,u,d,f,p,g,m=vt.get(t);if(m)for(i.handler&&(s=i,i=s.handler,o=s.selector),i.guid||(i.guid=K.guid++),(l=m.events)||(l=m.events={}),(a=m.handle)||(a=m.handle=function(e){return typeof K!==Tt&&K.event.triggered!==e.type?K.event.dispatch.apply(t,arguments):void 0}),e=(e||"").match(ft)||[""],c=e.length;c--;)r=Et.exec(e[c])||[],f=g=r[1],p=(r[2]||"").split(".").sort(),f&&(u=K.event.special[f]||{},f=(o?u.delegateType:u.bindType)||f,u=K.event.special[f]||{},h=K.extend({type:f,origType:g,data:n,handler:i,guid:i.guid,selector:o,needsContext:o&&K.expr.match.needsContext.test(o),namespace:p.join(".")},s),(d=l[f])||(d=l[f]=[],d.delegateCount=0,u.setup&&u.setup.call(t,n,p,a)!==!1||t.addEventListener&&t.addEventListener(f,a,!1)),u.add&&(u.add.call(t,h),h.handler.guid||(h.handler.guid=i.guid)),o?d.splice(d.delegateCount++,0,h):d.push(h),K.event.global[f]=!0)},remove:function(t,e,i,n,o){var s,a,r,l,c,h,u,d,f,p,g,m=vt.hasData(t)&&vt.get(t);if(m&&(l=m.events)){for(e=(e||"").match(ft)||[""],c=e.length;c--;)if(r=Et.exec(e[c])||[],f=g=r[1],p=(r[2]||"").split(".").sort(),f){for(u=K.event.special[f]||{},f=(n?u.delegateType:u.bindType)||f,d=l[f]||[],r=r[2]&&new RegExp("(^|\\.)"+p.join("\\.(?:.*\\.|)")+"(\\.|$)"),a=s=d.length;s--;)h=d[s],!o&&g!==h.origType||i&&i.guid!==h.guid||r&&!r.test(h.namespace)||n&&n!==h.selector&&("**"!==n||!h.selector)||(d.splice(s,1),h.selector&&d.delegateCount--,u.remove&&u.remove.call(t,h));a&&!d.length&&(u.teardown&&u.teardown.call(t,p,m.handle)!==!1||K.removeEvent(t,f,m.handle),delete l[f])}else for(f in l)K.event.remove(t,f+e[c],i,n,!0);K.isEmptyObject(l)&&(delete m.handle,vt.remove(t,"events"))}},trigger:function(e,i,n,o){var s,a,r,l,c,h,u,d=[n||Z],f=G.call(e,"type")?e.type:e,p=G.call(e,"namespace")?e.namespace.split("."):[];if(a=r=n=n||Z,3!==n.nodeType&&8!==n.nodeType&&!$t.test(f+K.event.triggered)&&(f.indexOf(".")>=0&&(p=f.split("."),f=p.shift(),p.sort()),c=f.indexOf(":")<0&&"on"+f,e=e[K.expando]?e:new K.Event(f,"object"==typeof e&&e),e.isTrigger=o?2:3,e.namespace=p.join("."),e.namespace_re=e.namespace?new RegExp("(^|\\.)"+p.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=n),i=null==i?[e]:K.makeArray(i,[e]),u=K.event.special[f]||{},o||!u.trigger||u.trigger.apply(n,i)!==!1)){if(!o&&!u.noBubble&&!K.isWindow(n)){for(l=u.delegateType||f,$t.test(l+f)||(a=a.parentNode);a;a=a.parentNode)d.push(a),r=a;r===(n.ownerDocument||Z)&&d.push(r.defaultView||r.parentWindow||t)}for(s=0;(a=d[s++])&&!e.isPropagationStopped();)e.type=s>1?l:u.bindType||f,h=(vt.get(a,"events")||{})[e.type]&&vt.get(a,"handle"),h&&h.apply(a,i),h=c&&a[c],h&&h.apply&&K.acceptData(a)&&(e.result=h.apply(a,i),e.result===!1&&e.preventDefault());return e.type=f,o||e.isDefaultPrevented()||u._default&&u._default.apply(d.pop(),i)!==!1||!K.acceptData(n)||c&&K.isFunction(n[f])&&!K.isWindow(n)&&(r=n[c],r&&(n[c]=null),K.event.triggered=f,n[f](),K.event.triggered=void 0,r&&(n[c]=r)),e.result}},dispatch:function(t){t=K.event.fix(t);var e,i,n,o,s,a=[],r=U.call(arguments),l=(vt.get(this,"events")||{})[t.type]||[],c=K.event.special[t.type]||{};if(r[0]=t,t.delegateTarget=this,!c.preDispatch||c.preDispatch.call(this,t)!==!1){for(a=K.event.handlers.call(this,t,l),e=0;(o=a[e++])&&!t.isPropagationStopped();)for(t.currentTarget=o.elem,i=0;(s=o.handlers[i++])&&!t.isImmediatePropagationStopped();)(!t.namespace_re||t.namespace_re.test(s.namespace))&&(t.handleObj=s,t.data=s.data,n=((K.event.special[s.origType]||{}).handle||s.handler).apply(o.elem,r),void 0!==n&&(t.result=n)===!1&&(t.preventDefault(),t.stopPropagation()));return c.postDispatch&&c.postDispatch.call(this,t),t.result}},handlers:function(t,e){var i,n,o,s,a=[],r=e.delegateCount,l=t.target;if(r&&l.nodeType&&(!t.button||"click"!==t.type))for(;l!==this;l=l.parentNode||this)if(l.disabled!==!0||"click"!==t.type){for(n=[],i=0;r>i;i++)s=e[i],o=s.selector+" ",void 0===n[o]&&(n[o]=s.needsContext?K(o,this).index(l)>=0:K.find(o,this,null,[l]).length),n[o]&&n.push(s);n.length&&a.push({elem:l,handlers:n})}return r<e.length&&a.push({elem:this,handlers:e.slice(r)}),a},props:"altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),fixHooks:{},keyHooks:{props:"char charCode key keyCode".split(" "),filter:function(t,e){return null==t.which&&(t.which=null!=e.charCode?e.charCode:e.keyCode),t}},mouseHooks:{props:"button buttons clientX clientY offsetX offsetY pageX pageY screenX screenY toElement".split(" "),filter:function(t,e){var i,n,o,s=e.button;return null==t.pageX&&null!=e.clientX&&(i=t.target.ownerDocument||Z,n=i.documentElement,o=i.body,t.pageX=e.clientX+(n&&n.scrollLeft||o&&o.scrollLeft||0)-(n&&n.clientLeft||o&&o.clientLeft||0),t.pageY=e.clientY+(n&&n.scrollTop||o&&o.scrollTop||0)-(n&&n.clientTop||o&&o.clientTop||0)),t.which||void 0===s||(t.which=1&s?1:2&s?3:4&s?2:0),t}},fix:function(t){if(t[K.expando])return t;var e,i,n,o=t.type,s=t,a=this.fixHooks[o];for(a||(this.fixHooks[o]=a=Lt.test(o)?this.mouseHooks:Pt.test(o)?this.keyHooks:{}),n=a.props?this.props.concat(a.props):this.props,t=new K.Event(s),e=n.length;e--;)i=n[e],t[i]=s[i];return t.target||(t.target=Z),3===t.target.nodeType&&(t.target=t.target.parentNode),a.filter?a.filter(t,s):t},special:{load:{noBubble:!0},focus:{trigger:function(){return this!==u()&&this.focus?(this.focus(),!1):void 0},delegateType:"focusin"},blur:{trigger:function(){return this===u()&&this.blur?(this.blur(),!1):void 0},delegateType:"focusout"},click:{trigger:function(){return"checkbox"===this.type&&this.click&&K.nodeName(this,"input")?(this.click(),!1):void 0},_default:function(t){return K.nodeName(t.target,"a")}},beforeunload:{postDispatch:function(t){void 0!==t.result&&t.originalEvent&&(t.originalEvent.returnValue=t.result)}}},simulate:function(t,e,i,n){var o=K.extend(new K.Event,i,{type:t,isSimulated:!0,originalEvent:{}});n?K.event.trigger(o,null,e):K.event.dispatch.call(e,o),o.isDefaultPrevented()&&i.preventDefault()}},K.removeEvent=function(t,e,i){t.removeEventListener&&t.removeEventListener(e,i,!1)},K.Event=function(t,e){return this instanceof K.Event?(t&&t.type?(this.originalEvent=t,this.type=t.type,this.isDefaultPrevented=t.defaultPrevented||void 0===t.defaultPrevented&&t.returnValue===!1?c:h):this.type=t,e&&K.extend(this,e),this.timeStamp=t&&t.timeStamp||K.now(),void(this[K.expando]=!0)):new K.Event(t,e)},K.Event.prototype={isDefaultPrevented:h,isPropagationStopped:h,isImmediatePropagationStopped:h,preventDefault:function(){var t=this.originalEvent;this.isDefaultPrevented=c,t&&t.preventDefault&&t.preventDefault()},stopPropagation:function(){var t=this.originalEvent;this.isPropagationStopped=c,t&&t.stopPropagation&&t.stopPropagation()},stopImmediatePropagation:function(){var t=this.originalEvent;this.isImmediatePropagationStopped=c,t&&t.stopImmediatePropagation&&t.stopImmediatePropagation(),this.stopPropagation()}},K.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(t,e){K.event.special[t]={delegateType:e,bindType:e,handle:function(t){var i,n=this,o=t.relatedTarget,s=t.handleObj;return(!o||o!==n&&!K.contains(n,o))&&(t.type=s.origType,i=s.handler.apply(this,arguments),t.type=e),i}}}),Q.focusinBubbles||K.each({focus:"focusin",blur:"focusout"},function(t,e){var i=function(t){K.event.simulate(e,t.target,K.event.fix(t),!0)};K.event.special[e]={setup:function(){var n=this.ownerDocument||this,o=vt.access(n,e);o||n.addEventListener(t,i,!0),vt.access(n,e,(o||0)+1)},teardown:function(){var n=this.ownerDocument||this,o=vt.access(n,e)-1;o?vt.access(n,e,o):(n.removeEventListener(t,i,!0),vt.remove(n,e))}}}),K.fn.extend({on:function(t,e,i,n,o){var s,a;if("object"==typeof t){"string"!=typeof e&&(i=i||e,e=void 0);for(a in t)this.on(a,e,i,t[a],o);return this}if(null==i&&null==n?(n=e,i=e=void 0):null==n&&("string"==typeof e?(n=i,i=void 0):(n=i,i=e,e=void 0)),n===!1)n=h;else if(!n)return this;return 1===o&&(s=n,n=function(t){return K().off(t),s.apply(this,arguments)},n.guid=s.guid||(s.guid=K.guid++)),this.each(function(){K.event.add(this,t,n,i,e)})},one:function(t,e,i,n){return this.on(t,e,i,n,1)},off:function(t,e,i){var n,o;if(t&&t.preventDefault&&t.handleObj)return n=t.handleObj,K(t.delegateTarget).off(n.namespace?n.origType+"."+n.namespace:n.origType,n.selector,n.handler),this;if("object"==typeof t){for(o in t)this.off(o,e,t[o]);return this}return(e===!1||"function"==typeof e)&&(i=e,e=void 0),i===!1&&(i=h),this.each(function(){K.event.remove(this,t,i,e)})},trigger:function(t,e){return this.each(function(){K.event.trigger(t,e,this)})},triggerHandler:function(t,e){var i=this[0];return i?K.event.trigger(t,e,i,!0):void 0}});var At=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,Ft=/<([\w:]+)/,Dt=/<|&#?\w+;/,Mt=/<(?:script|style|link)/i,Rt=/checked\s*(?:[^=]|=\s*.checked.)/i,jt=/^$|\/(?:java|ecma)script/i,Nt=/^true\/(.*)/,It=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,Ot={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};Ot.optgroup=Ot.option,Ot.tbody=Ot.tfoot=Ot.colgroup=Ot.caption=Ot.thead,Ot.th=Ot.td,K.extend({clone:function(t,e,i){var n,o,s,a,r=t.cloneNode(!0),l=K.contains(t.ownerDocument,t);if(!(Q.noCloneChecked||1!==t.nodeType&&11!==t.nodeType||K.isXMLDoc(t)))for(a=v(r),s=v(t),n=0,o=s.length;o>n;n++)y(s[n],a[n]);if(e)if(i)for(s=s||v(t),a=a||v(r),n=0,o=s.length;o>n;n++)m(s[n],a[n]);else m(t,r);return a=v(r,"script"),a.length>0&&g(a,!l&&v(t,"script")),r},buildFragment:function(t,e,i,n){for(var o,s,a,r,l,c,h=e.createDocumentFragment(),u=[],d=0,f=t.length;f>d;d++)if(o=t[d],o||0===o)if("object"===K.type(o))K.merge(u,o.nodeType?[o]:o);else if(Dt.test(o)){for(s=s||h.appendChild(e.createElement("div")),a=(Ft.exec(o)||["",""])[1].toLowerCase(),
r=Ot[a]||Ot._default,s.innerHTML=r[1]+o.replace(At,"<$1></$2>")+r[2],c=r[0];c--;)s=s.lastChild;K.merge(u,s.childNodes),s=h.firstChild,s.textContent=""}else u.push(e.createTextNode(o));for(h.textContent="",d=0;o=u[d++];)if((!n||-1===K.inArray(o,n))&&(l=K.contains(o.ownerDocument,o),s=v(h.appendChild(o),"script"),l&&g(s),i))for(c=0;o=s[c++];)jt.test(o.type||"")&&i.push(o);return h},cleanData:function(t){for(var e,i,n,o,s=K.event.special,a=0;void 0!==(i=t[a]);a++){if(K.acceptData(i)&&(o=i[vt.expando],o&&(e=vt.cache[o]))){if(e.events)for(n in e.events)s[n]?K.event.remove(i,n):K.removeEvent(i,n,e.handle);vt.cache[o]&&delete vt.cache[o]}delete yt.cache[i[yt.expando]]}}}),K.fn.extend({text:function(t){return mt(this,function(t){return void 0===t?K.text(this):this.empty().each(function(){(1===this.nodeType||11===this.nodeType||9===this.nodeType)&&(this.textContent=t)})},null,t,arguments.length)},append:function(){return this.domManip(arguments,function(t){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var e=d(this,t);e.appendChild(t)}})},prepend:function(){return this.domManip(arguments,function(t){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var e=d(this,t);e.insertBefore(t,e.firstChild)}})},before:function(){return this.domManip(arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this)})},after:function(){return this.domManip(arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this.nextSibling)})},remove:function(t,e){for(var i,n=t?K.filter(t,this):this,o=0;null!=(i=n[o]);o++)e||1!==i.nodeType||K.cleanData(v(i)),i.parentNode&&(e&&K.contains(i.ownerDocument,i)&&g(v(i,"script")),i.parentNode.removeChild(i));return this},empty:function(){for(var t,e=0;null!=(t=this[e]);e++)1===t.nodeType&&(K.cleanData(v(t,!1)),t.textContent="");return this},clone:function(t,e){return t=null==t?!1:t,e=null==e?t:e,this.map(function(){return K.clone(this,t,e)})},html:function(t){return mt(this,function(t){var e=this[0]||{},i=0,n=this.length;if(void 0===t&&1===e.nodeType)return e.innerHTML;if("string"==typeof t&&!Mt.test(t)&&!Ot[(Ft.exec(t)||["",""])[1].toLowerCase()]){t=t.replace(At,"<$1></$2>");try{for(;n>i;i++)e=this[i]||{},1===e.nodeType&&(K.cleanData(v(e,!1)),e.innerHTML=t);e=0}catch(o){}}e&&this.empty().append(t)},null,t,arguments.length)},replaceWith:function(){var t=arguments[0];return this.domManip(arguments,function(e){t=this.parentNode,K.cleanData(v(this)),t&&t.replaceChild(e,this)}),t&&(t.length||t.nodeType)?this:this.remove()},detach:function(t){return this.remove(t,!0)},domManip:function(t,e){t=B.apply([],t);var i,n,o,s,a,r,l=0,c=this.length,h=this,u=c-1,d=t[0],g=K.isFunction(d);if(g||c>1&&"string"==typeof d&&!Q.checkClone&&Rt.test(d))return this.each(function(i){var n=h.eq(i);g&&(t[0]=d.call(this,i,n.html())),n.domManip(t,e)});if(c&&(i=K.buildFragment(t,this[0].ownerDocument,!1,this),n=i.firstChild,1===i.childNodes.length&&(i=n),n)){for(o=K.map(v(i,"script"),f),s=o.length;c>l;l++)a=i,l!==u&&(a=K.clone(a,!0,!0),s&&K.merge(o,v(a,"script"))),e.call(this[l],a,l);if(s)for(r=o[o.length-1].ownerDocument,K.map(o,p),l=0;s>l;l++)a=o[l],jt.test(a.type||"")&&!vt.access(a,"globalEval")&&K.contains(r,a)&&(a.src?K._evalUrl&&K._evalUrl(a.src):K.globalEval(a.textContent.replace(It,"")))}return this}}),K.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(t,e){K.fn[t]=function(t){for(var i,n=[],o=K(t),s=o.length-1,a=0;s>=a;a++)i=a===s?this:this.clone(!0),K(o[a])[e](i),X.apply(n,i.get());return this.pushStack(n)}});var Wt,Ht={},zt=/^margin/,qt=new RegExp("^("+kt+")(?!px)[a-z%]+$","i"),Ut=function(e){return e.ownerDocument.defaultView.opener?e.ownerDocument.defaultView.getComputedStyle(e,null):t.getComputedStyle(e,null)};!function(){function e(){a.style.cssText="-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;display:block;margin-top:1%;top:1%;border:1px;padding:1px;width:4px;position:absolute",a.innerHTML="",o.appendChild(s);var e=t.getComputedStyle(a,null);i="1%"!==e.top,n="4px"===e.width,o.removeChild(s)}var i,n,o=Z.documentElement,s=Z.createElement("div"),a=Z.createElement("div");a.style&&(a.style.backgroundClip="content-box",a.cloneNode(!0).style.backgroundClip="",Q.clearCloneStyle="content-box"===a.style.backgroundClip,s.style.cssText="border:0;width:0;height:0;top:0;left:-9999px;margin-top:1px;position:absolute",s.appendChild(a),t.getComputedStyle&&K.extend(Q,{pixelPosition:function(){return e(),i},boxSizingReliable:function(){return null==n&&e(),n},reliableMarginRight:function(){var e,i=a.appendChild(Z.createElement("div"));return i.style.cssText=a.style.cssText="-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:0",i.style.marginRight=i.style.width="0",a.style.width="1px",o.appendChild(s),e=!parseFloat(t.getComputedStyle(i,null).marginRight),o.removeChild(s),a.removeChild(i),e}}))}(),K.swap=function(t,e,i,n){var o,s,a={};for(s in e)a[s]=t.style[s],t.style[s]=e[s];o=i.apply(t,n||[]);for(s in e)t.style[s]=a[s];return o};var Bt=/^(none|table(?!-c[ea]).+)/,Xt=new RegExp("^("+kt+")(.*)$","i"),_t=new RegExp("^([+-])=("+kt+")","i"),Vt={position:"absolute",visibility:"hidden",display:"block"},Yt={letterSpacing:"0",fontWeight:"400"},Gt=["Webkit","O","Moz","ms"];K.extend({cssHooks:{opacity:{get:function(t,e){if(e){var i=k(t,"opacity");return""===i?"1":i}}}},cssNumber:{columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{"float":"cssFloat"},style:function(t,e,i,n){if(t&&3!==t.nodeType&&8!==t.nodeType&&t.style){var o,s,a,r=K.camelCase(e),l=t.style;return e=K.cssProps[r]||(K.cssProps[r]=C(l,r)),a=K.cssHooks[e]||K.cssHooks[r],void 0===i?a&&"get"in a&&void 0!==(o=a.get(t,!1,n))?o:l[e]:(s=typeof i,"string"===s&&(o=_t.exec(i))&&(i=(o[1]+1)*o[2]+parseFloat(K.css(t,e)),s="number"),null!=i&&i===i&&("number"!==s||K.cssNumber[r]||(i+="px"),Q.clearCloneStyle||""!==i||0!==e.indexOf("background")||(l[e]="inherit"),a&&"set"in a&&void 0===(i=a.set(t,i,n))||(l[e]=i)),void 0)}},css:function(t,e,i,n){var o,s,a,r=K.camelCase(e);return e=K.cssProps[r]||(K.cssProps[r]=C(t.style,r)),a=K.cssHooks[e]||K.cssHooks[r],a&&"get"in a&&(o=a.get(t,!0,i)),void 0===o&&(o=k(t,e,n)),"normal"===o&&e in Yt&&(o=Yt[e]),""===i||i?(s=parseFloat(o),i===!0||K.isNumeric(s)?s||0:o):o}}),K.each(["height","width"],function(t,e){K.cssHooks[e]={get:function(t,i,n){return i?Bt.test(K.css(t,"display"))&&0===t.offsetWidth?K.swap(t,Vt,function(){return P(t,e,n)}):P(t,e,n):void 0},set:function(t,i,n){var o=n&&Ut(t);return S(t,i,n?T(t,e,n,"border-box"===K.css(t,"boxSizing",!1,o),o):0)}}}),K.cssHooks.marginRight=x(Q.reliableMarginRight,function(t,e){return e?K.swap(t,{display:"inline-block"},k,[t,"marginRight"]):void 0}),K.each({margin:"",padding:"",border:"Width"},function(t,e){K.cssHooks[t+e]={expand:function(i){for(var n=0,o={},s="string"==typeof i?i.split(" "):[i];4>n;n++)o[t+xt[n]+e]=s[n]||s[n-2]||s[0];return o}},zt.test(t)||(K.cssHooks[t+e].set=S)}),K.fn.extend({css:function(t,e){return mt(this,function(t,e,i){var n,o,s={},a=0;if(K.isArray(e)){for(n=Ut(t),o=e.length;o>a;a++)s[e[a]]=K.css(t,e[a],!1,n);return s}return void 0!==i?K.style(t,e,i):K.css(t,e)},t,e,arguments.length>1)},show:function(){return L(this,!0)},hide:function(){return L(this)},toggle:function(t){return"boolean"==typeof t?t?this.show():this.hide():this.each(function(){Ct(this)?K(this).show():K(this).hide()})}}),K.Tween=$,$.prototype={constructor:$,init:function(t,e,i,n,o,s){this.elem=t,this.prop=i,this.easing=o||"swing",this.options=e,this.start=this.now=this.cur(),this.end=n,this.unit=s||(K.cssNumber[i]?"":"px")},cur:function(){var t=$.propHooks[this.prop];return t&&t.get?t.get(this):$.propHooks._default.get(this)},run:function(t){var e,i=$.propHooks[this.prop];return this.options.duration?this.pos=e=K.easing[this.easing](t,this.options.duration*t,0,1,this.options.duration):this.pos=e=t,this.now=(this.end-this.start)*e+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),i&&i.set?i.set(this):$.propHooks._default.set(this),this}},$.prototype.init.prototype=$.prototype,$.propHooks={_default:{get:function(t){var e;return null==t.elem[t.prop]||t.elem.style&&null!=t.elem.style[t.prop]?(e=K.css(t.elem,t.prop,""),e&&"auto"!==e?e:0):t.elem[t.prop]},set:function(t){K.fx.step[t.prop]?K.fx.step[t.prop](t):t.elem.style&&(null!=t.elem.style[K.cssProps[t.prop]]||K.cssHooks[t.prop])?K.style(t.elem,t.prop,t.now+t.unit):t.elem[t.prop]=t.now}}},$.propHooks.scrollTop=$.propHooks.scrollLeft={set:function(t){t.elem.nodeType&&t.elem.parentNode&&(t.elem[t.prop]=t.now)}},K.easing={linear:function(t){return t},swing:function(t){return.5-Math.cos(t*Math.PI)/2}},K.fx=$.prototype.init,K.fx.step={};var Qt,Zt,Jt=/^(?:toggle|show|hide)$/,Kt=new RegExp("^(?:([+-])=|)("+kt+")([a-z%]*)$","i"),te=/queueHooks$/,ee=[D],ie={"*":[function(t,e){var i=this.createTween(t,e),n=i.cur(),o=Kt.exec(e),s=o&&o[3]||(K.cssNumber[t]?"":"px"),a=(K.cssNumber[t]||"px"!==s&&+n)&&Kt.exec(K.css(i.elem,t)),r=1,l=20;if(a&&a[3]!==s){s=s||a[3],o=o||[],a=+n||1;do r=r||".5",a/=r,K.style(i.elem,t,a+s);while(r!==(r=i.cur()/n)&&1!==r&&--l)}return o&&(a=i.start=+a||+n||0,i.unit=s,i.end=o[1]?a+(o[1]+1)*o[2]:+o[2]),i}]};K.Animation=K.extend(R,{tweener:function(t,e){K.isFunction(t)?(e=t,t=["*"]):t=t.split(" ");for(var i,n=0,o=t.length;o>n;n++)i=t[n],ie[i]=ie[i]||[],ie[i].unshift(e)},prefilter:function(t,e){e?ee.unshift(t):ee.push(t)}}),K.speed=function(t,e,i){var n=t&&"object"==typeof t?K.extend({},t):{complete:i||!i&&e||K.isFunction(t)&&t,duration:t,easing:i&&e||e&&!K.isFunction(e)&&e};return n.duration=K.fx.off?0:"number"==typeof n.duration?n.duration:n.duration in K.fx.speeds?K.fx.speeds[n.duration]:K.fx.speeds._default,(null==n.queue||n.queue===!0)&&(n.queue="fx"),n.old=n.complete,n.complete=function(){K.isFunction(n.old)&&n.old.call(this),n.queue&&K.dequeue(this,n.queue)},n},K.fn.extend({fadeTo:function(t,e,i,n){return this.filter(Ct).css("opacity",0).show().end().animate({opacity:e},t,i,n)},animate:function(t,e,i,n){var o=K.isEmptyObject(t),s=K.speed(e,i,n),a=function(){var e=R(this,K.extend({},t),s);(o||vt.get(this,"finish"))&&e.stop(!0)};return a.finish=a,o||s.queue===!1?this.each(a):this.queue(s.queue,a)},stop:function(t,e,i){var n=function(t){var e=t.stop;delete t.stop,e(i)};return"string"!=typeof t&&(i=e,e=t,t=void 0),e&&t!==!1&&this.queue(t||"fx",[]),this.each(function(){var e=!0,o=null!=t&&t+"queueHooks",s=K.timers,a=vt.get(this);if(o)a[o]&&a[o].stop&&n(a[o]);else for(o in a)a[o]&&a[o].stop&&te.test(o)&&n(a[o]);for(o=s.length;o--;)s[o].elem!==this||null!=t&&s[o].queue!==t||(s[o].anim.stop(i),e=!1,s.splice(o,1));(e||!i)&&K.dequeue(this,t)})},finish:function(t){return t!==!1&&(t=t||"fx"),this.each(function(){var e,i=vt.get(this),n=i[t+"queue"],o=i[t+"queueHooks"],s=K.timers,a=n?n.length:0;for(i.finish=!0,K.queue(this,t,[]),o&&o.stop&&o.stop.call(this,!0),e=s.length;e--;)s[e].elem===this&&s[e].queue===t&&(s[e].anim.stop(!0),s.splice(e,1));for(e=0;a>e;e++)n[e]&&n[e].finish&&n[e].finish.call(this);delete i.finish})}}),K.each(["toggle","show","hide"],function(t,e){var i=K.fn[e];K.fn[e]=function(t,n,o){return null==t||"boolean"==typeof t?i.apply(this,arguments):this.animate(A(e,!0),t,n,o)}}),K.each({slideDown:A("show"),slideUp:A("hide"),slideToggle:A("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(t,e){K.fn[t]=function(t,i,n){return this.animate(e,t,i,n)}}),K.timers=[],K.fx.tick=function(){var t,e=0,i=K.timers;for(Qt=K.now();e<i.length;e++)t=i[e],t()||i[e]!==t||i.splice(e--,1);i.length||K.fx.stop(),Qt=void 0},K.fx.timer=function(t){K.timers.push(t),t()?K.fx.start():K.timers.pop()},K.fx.interval=13,K.fx.start=function(){Zt||(Zt=setInterval(K.fx.tick,K.fx.interval))},K.fx.stop=function(){clearInterval(Zt),Zt=null},K.fx.speeds={slow:600,fast:200,_default:400},K.fn.delay=function(t,e){return t=K.fx?K.fx.speeds[t]||t:t,e=e||"fx",this.queue(e,function(e,i){var n=setTimeout(e,t);i.stop=function(){clearTimeout(n)}})},function(){var t=Z.createElement("input"),e=Z.createElement("select"),i=e.appendChild(Z.createElement("option"));t.type="checkbox",Q.checkOn=""!==t.value,Q.optSelected=i.selected,e.disabled=!0,Q.optDisabled=!i.disabled,t=Z.createElement("input"),t.value="t",t.type="radio",Q.radioValue="t"===t.value}();var ne,oe,se=K.expr.attrHandle;K.fn.extend({attr:function(t,e){return mt(this,K.attr,t,e,arguments.length>1)},removeAttr:function(t){return this.each(function(){K.removeAttr(this,t)})}}),K.extend({attr:function(t,e,i){var n,o,s=t.nodeType;if(t&&3!==s&&8!==s&&2!==s)return typeof t.getAttribute===Tt?K.prop(t,e,i):(1===s&&K.isXMLDoc(t)||(e=e.toLowerCase(),n=K.attrHooks[e]||(K.expr.match.bool.test(e)?oe:ne)),void 0===i?n&&"get"in n&&null!==(o=n.get(t,e))?o:(o=K.find.attr(t,e),null==o?void 0:o):null!==i?n&&"set"in n&&void 0!==(o=n.set(t,i,e))?o:(t.setAttribute(e,i+""),i):void K.removeAttr(t,e))},removeAttr:function(t,e){var i,n,o=0,s=e&&e.match(ft);if(s&&1===t.nodeType)for(;i=s[o++];)n=K.propFix[i]||i,K.expr.match.bool.test(i)&&(t[n]=!1),t.removeAttribute(i)},attrHooks:{type:{set:function(t,e){if(!Q.radioValue&&"radio"===e&&K.nodeName(t,"input")){var i=t.value;return t.setAttribute("type",e),i&&(t.value=i),e}}}}}),oe={set:function(t,e,i){return e===!1?K.removeAttr(t,i):t.setAttribute(i,i),i}},K.each(K.expr.match.bool.source.match(/\w+/g),function(t,e){var i=se[e]||K.find.attr;se[e]=function(t,e,n){var o,s;return n||(s=se[e],se[e]=o,o=null!=i(t,e,n)?e.toLowerCase():null,se[e]=s),o}});var ae=/^(?:input|select|textarea|button)$/i;K.fn.extend({prop:function(t,e){return mt(this,K.prop,t,e,arguments.length>1)},removeProp:function(t){return this.each(function(){delete this[K.propFix[t]||t]})}}),K.extend({propFix:{"for":"htmlFor","class":"className"},prop:function(t,e,i){var n,o,s,a=t.nodeType;if(t&&3!==a&&8!==a&&2!==a)return s=1!==a||!K.isXMLDoc(t),s&&(e=K.propFix[e]||e,o=K.propHooks[e]),void 0!==i?o&&"set"in o&&void 0!==(n=o.set(t,i,e))?n:t[e]=i:o&&"get"in o&&null!==(n=o.get(t,e))?n:t[e]},propHooks:{tabIndex:{get:function(t){return t.hasAttribute("tabindex")||ae.test(t.nodeName)||t.href?t.tabIndex:-1}}}}),Q.optSelected||(K.propHooks.selected={get:function(t){var e=t.parentNode;return e&&e.parentNode&&e.parentNode.selectedIndex,null}}),K.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){K.propFix[this.toLowerCase()]=this});var re=/[\t\r\n\f]/g;K.fn.extend({addClass:function(t){var e,i,n,o,s,a,r="string"==typeof t&&t,l=0,c=this.length;if(K.isFunction(t))return this.each(function(e){K(this).addClass(t.call(this,e,this.className))});if(r)for(e=(t||"").match(ft)||[];c>l;l++)if(i=this[l],n=1===i.nodeType&&(i.className?(" "+i.className+" ").replace(re," "):" ")){for(s=0;o=e[s++];)n.indexOf(" "+o+" ")<0&&(n+=o+" ");a=K.trim(n),i.className!==a&&(i.className=a)}return this},removeClass:function(t){var e,i,n,o,s,a,r=0===arguments.length||"string"==typeof t&&t,l=0,c=this.length;if(K.isFunction(t))return this.each(function(e){K(this).removeClass(t.call(this,e,this.className))});if(r)for(e=(t||"").match(ft)||[];c>l;l++)if(i=this[l],n=1===i.nodeType&&(i.className?(" "+i.className+" ").replace(re," "):"")){for(s=0;o=e[s++];)for(;n.indexOf(" "+o+" ")>=0;)n=n.replace(" "+o+" "," ");a=t?K.trim(n):"",i.className!==a&&(i.className=a)}return this},toggleClass:function(t,e){var i=typeof t;return"boolean"==typeof e&&"string"===i?e?this.addClass(t):this.removeClass(t):K.isFunction(t)?this.each(function(i){K(this).toggleClass(t.call(this,i,this.className,e),e)}):this.each(function(){if("string"===i)for(var e,n=0,o=K(this),s=t.match(ft)||[];e=s[n++];)o.hasClass(e)?o.removeClass(e):o.addClass(e);else(i===Tt||"boolean"===i)&&(this.className&&vt.set(this,"__className__",this.className),this.className=this.className||t===!1?"":vt.get(this,"__className__")||"")})},hasClass:function(t){for(var e=" "+t+" ",i=0,n=this.length;n>i;i++)if(1===this[i].nodeType&&(" "+this[i].className+" ").replace(re," ").indexOf(e)>=0)return!0;return!1}});var le=/\r/g;K.fn.extend({val:function(t){var e,i,n,o=this[0];{if(arguments.length)return n=K.isFunction(t),this.each(function(i){var o;1===this.nodeType&&(o=n?t.call(this,i,K(this).val()):t,null==o?o="":"number"==typeof o?o+="":K.isArray(o)&&(o=K.map(o,function(t){return null==t?"":t+""})),e=K.valHooks[this.type]||K.valHooks[this.nodeName.toLowerCase()],e&&"set"in e&&void 0!==e.set(this,o,"value")||(this.value=o))});if(o)return e=K.valHooks[o.type]||K.valHooks[o.nodeName.toLowerCase()],e&&"get"in e&&void 0!==(i=e.get(o,"value"))?i:(i=o.value,"string"==typeof i?i.replace(le,""):null==i?"":i)}}}),K.extend({valHooks:{option:{get:function(t){var e=K.find.attr(t,"value");return null!=e?e:K.trim(K.text(t))}},select:{get:function(t){for(var e,i,n=t.options,o=t.selectedIndex,s="select-one"===t.type||0>o,a=s?null:[],r=s?o+1:n.length,l=0>o?r:s?o:0;r>l;l++)if(i=n[l],(i.selected||l===o)&&(Q.optDisabled?!i.disabled:null===i.getAttribute("disabled"))&&(!i.parentNode.disabled||!K.nodeName(i.parentNode,"optgroup"))){if(e=K(i).val(),s)return e;a.push(e)}return a},set:function(t,e){for(var i,n,o=t.options,s=K.makeArray(e),a=o.length;a--;)n=o[a],(n.selected=K.inArray(n.value,s)>=0)&&(i=!0);return i||(t.selectedIndex=-1),s}}}}),K.each(["radio","checkbox"],function(){K.valHooks[this]={set:function(t,e){return K.isArray(e)?t.checked=K.inArray(K(t).val(),e)>=0:void 0}},Q.checkOn||(K.valHooks[this].get=function(t){return null===t.getAttribute("value")?"on":t.value})}),K.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "),function(t,e){K.fn[e]=function(t,i){return arguments.length>0?this.on(e,null,t,i):this.trigger(e)}}),K.fn.extend({hover:function(t,e){return this.mouseenter(t).mouseleave(e||t)},bind:function(t,e,i){return this.on(t,null,e,i)},unbind:function(t,e){return this.off(t,null,e)},delegate:function(t,e,i,n){return this.on(e,t,i,n)},undelegate:function(t,e,i){return 1===arguments.length?this.off(t,"**"):this.off(e,t||"**",i)}});var ce=K.now(),he=/\?/;K.parseJSON=function(t){return JSON.parse(t+"")},K.parseXML=function(t){var e,i;if(!t||"string"!=typeof t)return null;try{i=new DOMParser,e=i.parseFromString(t,"text/xml")}catch(n){e=void 0}return(!e||e.getElementsByTagName("parsererror").length)&&K.error("Invalid XML: "+t),e};var ue=/#.*$/,de=/([?&])_=[^&]*/,fe=/^(.*?):[ \t]*([^\r\n]*)$/gm,pe=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,ge=/^(?:GET|HEAD)$/,me=/^\/\//,ve=/^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/,ye={},be={},we="*/".concat("*"),ke=t.location.href,xe=ve.exec(ke.toLowerCase())||[];K.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:ke,type:"GET",isLocal:pe.test(xe[1]),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":we,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/xml/,html:/html/,json:/json/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":K.parseJSON,"text xml":K.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(t,e){return e?I(I(t,K.ajaxSettings),e):I(K.ajaxSettings,t)},ajaxPrefilter:j(ye),ajaxTransport:j(be),ajax:function(t,e){function i(t,e,i,a){var l,h,v,y,w,x=e;2!==b&&(b=2,r&&clearTimeout(r),n=void 0,s=a||"",k.readyState=t>0?4:0,l=t>=200&&300>t||304===t,i&&(y=O(u,k,i)),y=W(u,y,k,l),l?(u.ifModified&&(w=k.getResponseHeader("Last-Modified"),w&&(K.lastModified[o]=w),w=k.getResponseHeader("etag"),w&&(K.etag[o]=w)),204===t||"HEAD"===u.type?x="nocontent":304===t?x="notmodified":(x=y.state,h=y.data,v=y.error,l=!v)):(v=x,(t||!x)&&(x="error",0>t&&(t=0))),k.status=t,k.statusText=(e||x)+"",l?p.resolveWith(d,[h,x,k]):p.rejectWith(d,[k,x,v]),k.statusCode(m),m=void 0,c&&f.trigger(l?"ajaxSuccess":"ajaxError",[k,u,l?h:v]),g.fireWith(d,[k,x]),c&&(f.trigger("ajaxComplete",[k,u]),--K.active||K.event.trigger("ajaxStop")))}"object"==typeof t&&(e=t,t=void 0),e=e||{};var n,o,s,a,r,l,c,h,u=K.ajaxSetup({},e),d=u.context||u,f=u.context&&(d.nodeType||d.jquery)?K(d):K.event,p=K.Deferred(),g=K.Callbacks("once memory"),m=u.statusCode||{},v={},y={},b=0,w="canceled",k={readyState:0,getResponseHeader:function(t){var e;if(2===b){if(!a)for(a={};e=fe.exec(s);)a[e[1].toLowerCase()]=e[2];e=a[t.toLowerCase()]}return null==e?null:e},getAllResponseHeaders:function(){return 2===b?s:null},setRequestHeader:function(t,e){var i=t.toLowerCase();return b||(t=y[i]=y[i]||t,v[t]=e),this},overrideMimeType:function(t){return b||(u.mimeType=t),this},statusCode:function(t){var e;if(t)if(2>b)for(e in t)m[e]=[m[e],t[e]];else k.always(t[k.status]);return this},abort:function(t){var e=t||w;return n&&n.abort(e),i(0,e),this}};if(p.promise(k).complete=g.add,k.success=k.done,k.error=k.fail,u.url=((t||u.url||ke)+"").replace(ue,"").replace(me,xe[1]+"//"),u.type=e.method||e.type||u.method||u.type,u.dataTypes=K.trim(u.dataType||"*").toLowerCase().match(ft)||[""],null==u.crossDomain&&(l=ve.exec(u.url.toLowerCase()),u.crossDomain=!(!l||l[1]===xe[1]&&l[2]===xe[2]&&(l[3]||("http:"===l[1]?"80":"443"))===(xe[3]||("http:"===xe[1]?"80":"443")))),u.data&&u.processData&&"string"!=typeof u.data&&(u.data=K.param(u.data,u.traditional)),N(ye,u,e,k),2===b)return k;c=K.event&&u.global,c&&0===K.active++&&K.event.trigger("ajaxStart"),u.type=u.type.toUpperCase(),u.hasContent=!ge.test(u.type),o=u.url,u.hasContent||(u.data&&(o=u.url+=(he.test(o)?"&":"?")+u.data,delete u.data),u.cache===!1&&(u.url=de.test(o)?o.replace(de,"$1_="+ce++):o+(he.test(o)?"&":"?")+"_="+ce++)),u.ifModified&&(K.lastModified[o]&&k.setRequestHeader("If-Modified-Since",K.lastModified[o]),K.etag[o]&&k.setRequestHeader("If-None-Match",K.etag[o])),(u.data&&u.hasContent&&u.contentType!==!1||e.contentType)&&k.setRequestHeader("Content-Type",u.contentType),k.setRequestHeader("Accept",u.dataTypes[0]&&u.accepts[u.dataTypes[0]]?u.accepts[u.dataTypes[0]]+("*"!==u.dataTypes[0]?", "+we+"; q=0.01":""):u.accepts["*"]);for(h in u.headers)k.setRequestHeader(h,u.headers[h]);if(u.beforeSend&&(u.beforeSend.call(d,k,u)===!1||2===b))return k.abort();w="abort";for(h in{success:1,error:1,complete:1})k[h](u[h]);if(n=N(be,u,e,k)){k.readyState=1,c&&f.trigger("ajaxSend",[k,u]),u.async&&u.timeout>0&&(r=setTimeout(function(){k.abort("timeout")},u.timeout));try{b=1,n.send(v,i)}catch(x){if(!(2>b))throw x;i(-1,x)}}else i(-1,"No Transport");return k},getJSON:function(t,e,i){return K.get(t,e,i,"json")},getScript:function(t,e){return K.get(t,void 0,e,"script")}}),K.each(["get","post"],function(t,e){K[e]=function(t,i,n,o){return K.isFunction(i)&&(o=o||n,n=i,i=void 0),K.ajax({url:t,type:e,dataType:o,data:i,success:n})}}),K._evalUrl=function(t){return K.ajax({url:t,type:"GET",dataType:"script",async:!1,global:!1,"throws":!0})},K.fn.extend({wrapAll:function(t){var e;return K.isFunction(t)?this.each(function(e){K(this).wrapAll(t.call(this,e))}):(this[0]&&(e=K(t,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&e.insertBefore(this[0]),e.map(function(){for(var t=this;t.firstElementChild;)t=t.firstElementChild;return t}).append(this)),this)},wrapInner:function(t){return K.isFunction(t)?this.each(function(e){K(this).wrapInner(t.call(this,e))}):this.each(function(){var e=K(this),i=e.contents();i.length?i.wrapAll(t):e.append(t)})},wrap:function(t){var e=K.isFunction(t);return this.each(function(i){K(this).wrapAll(e?t.call(this,i):t)})},unwrap:function(){return this.parent().each(function(){K.nodeName(this,"body")||K(this).replaceWith(this.childNodes)}).end()}}),K.expr.filters.hidden=function(t){return t.offsetWidth<=0&&t.offsetHeight<=0},K.expr.filters.visible=function(t){return!K.expr.filters.hidden(t)};var Ce=/%20/g,Se=/\[\]$/,Te=/\r?\n/g,Pe=/^(?:submit|button|image|reset|file)$/i,Le=/^(?:input|select|textarea|keygen)/i;K.param=function(t,e){var i,n=[],o=function(t,e){e=K.isFunction(e)?e():null==e?"":e,n[n.length]=encodeURIComponent(t)+"="+encodeURIComponent(e)};if(void 0===e&&(e=K.ajaxSettings&&K.ajaxSettings.traditional),K.isArray(t)||t.jquery&&!K.isPlainObject(t))K.each(t,function(){o(this.name,this.value)});else for(i in t)H(i,t[i],e,o);return n.join("&").replace(Ce,"+")},K.fn.extend({serialize:function(){return K.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var t=K.prop(this,"elements");return t?K.makeArray(t):this}).filter(function(){var t=this.type;return this.name&&!K(this).is(":disabled")&&Le.test(this.nodeName)&&!Pe.test(t)&&(this.checked||!St.test(t))}).map(function(t,e){var i=K(this).val();return null==i?null:K.isArray(i)?K.map(i,function(t){return{name:e.name,value:t.replace(Te,"\r\n")}}):{name:e.name,value:i.replace(Te,"\r\n")}}).get()}}),K.ajaxSettings.xhr=function(){try{return new XMLHttpRequest}catch(t){}};var $e=0,Ee={},Ae={0:200,1223:204},Fe=K.ajaxSettings.xhr();t.attachEvent&&t.attachEvent("onunload",function(){for(var t in Ee)Ee[t]()}),Q.cors=!!Fe&&"withCredentials"in Fe,Q.ajax=Fe=!!Fe,K.ajaxTransport(function(t){var e;return Q.cors||Fe&&!t.crossDomain?{send:function(i,n){var o,s=t.xhr(),a=++$e;if(s.open(t.type,t.url,t.async,t.username,t.password),t.xhrFields)for(o in t.xhrFields)s[o]=t.xhrFields[o];t.mimeType&&s.overrideMimeType&&s.overrideMimeType(t.mimeType),t.crossDomain||i["X-Requested-With"]||(i["X-Requested-With"]="XMLHttpRequest");for(o in i)s.setRequestHeader(o,i[o]);e=function(t){return function(){e&&(delete Ee[a],e=s.onload=s.onerror=null,"abort"===t?s.abort():"error"===t?n(s.status,s.statusText):n(Ae[s.status]||s.status,s.statusText,"string"==typeof s.responseText?{text:s.responseText}:void 0,s.getAllResponseHeaders()))}},s.onload=e(),s.onerror=e("error"),e=Ee[a]=e("abort");try{s.send(t.hasContent&&t.data||null)}catch(r){if(e)throw r}},abort:function(){e&&e()}}:void 0}),K.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/(?:java|ecma)script/},converters:{"text script":function(t){return K.globalEval(t),t}}}),K.ajaxPrefilter("script",function(t){void 0===t.cache&&(t.cache=!1),t.crossDomain&&(t.type="GET")}),K.ajaxTransport("script",function(t){if(t.crossDomain){var e,i;return{send:function(n,o){e=K("<script>").prop({async:!0,charset:t.scriptCharset,src:t.url}).on("load error",i=function(t){e.remove(),i=null,t&&o("error"===t.type?404:200,t.type)}),Z.head.appendChild(e[0])},abort:function(){i&&i()}}}});var De=[],Me=/(=)\?(?=&|$)|\?\?/;K.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var t=De.pop()||K.expando+"_"+ce++;return this[t]=!0,t}}),K.ajaxPrefilter("json jsonp",function(e,i,n){var o,s,a,r=e.jsonp!==!1&&(Me.test(e.url)?"url":"string"==typeof e.data&&!(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&Me.test(e.data)&&"data");return r||"jsonp"===e.dataTypes[0]?(o=e.jsonpCallback=K.isFunction(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,r?e[r]=e[r].replace(Me,"$1"+o):e.jsonp!==!1&&(e.url+=(he.test(e.url)?"&":"?")+e.jsonp+"="+o),e.converters["script json"]=function(){return a||K.error(o+" was not called"),a[0]},e.dataTypes[0]="json",s=t[o],t[o]=function(){a=arguments},n.always(function(){t[o]=s,e[o]&&(e.jsonpCallback=i.jsonpCallback,De.push(o)),a&&K.isFunction(s)&&s(a[0]),a=s=void 0}),"script"):void 0}),K.parseHTML=function(t,e,i){if(!t||"string"!=typeof t)return null;"boolean"==typeof e&&(i=e,e=!1),e=e||Z;var n=at.exec(t),o=!i&&[];return n?[e.createElement(n[1])]:(n=K.buildFragment([t],e,o),o&&o.length&&K(o).remove(),K.merge([],n.childNodes))};var Re=K.fn.load;K.fn.load=function(t,e,i){if("string"!=typeof t&&Re)return Re.apply(this,arguments);var n,o,s,a=this,r=t.indexOf(" ");return r>=0&&(n=K.trim(t.slice(r)),t=t.slice(0,r)),K.isFunction(e)?(i=e,e=void 0):e&&"object"==typeof e&&(o="POST"),a.length>0&&K.ajax({url:t,type:o,dataType:"html",data:e}).done(function(t){s=arguments,a.html(n?K("<div>").append(K.parseHTML(t)).find(n):t)}).complete(i&&function(t,e){a.each(i,s||[t.responseText,e,t])}),this},K.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(t,e){K.fn[e]=function(t){return this.on(e,t)}}),K.expr.filters.animated=function(t){return K.grep(K.timers,function(e){return t===e.elem}).length};var je=t.document.documentElement;K.offset={setOffset:function(t,e,i){var n,o,s,a,r,l,c,h=K.css(t,"position"),u=K(t),d={};"static"===h&&(t.style.position="relative"),r=u.offset(),s=K.css(t,"top"),l=K.css(t,"left"),c=("absolute"===h||"fixed"===h)&&(s+l).indexOf("auto")>-1,c?(n=u.position(),a=n.top,o=n.left):(a=parseFloat(s)||0,o=parseFloat(l)||0),K.isFunction(e)&&(e=e.call(t,i,r)),null!=e.top&&(d.top=e.top-r.top+a),null!=e.left&&(d.left=e.left-r.left+o),"using"in e?e.using.call(t,d):u.css(d)}},K.fn.extend({offset:function(t){if(arguments.length)return void 0===t?this:this.each(function(e){K.offset.setOffset(this,t,e)});var e,i,n=this[0],o={top:0,left:0},s=n&&n.ownerDocument;if(s)return e=s.documentElement,K.contains(e,n)?(typeof n.getBoundingClientRect!==Tt&&(o=n.getBoundingClientRect()),i=z(s),{top:o.top+i.pageYOffset-e.clientTop,left:o.left+i.pageXOffset-e.clientLeft}):o},position:function(){if(this[0]){var t,e,i=this[0],n={top:0,left:0};return"fixed"===K.css(i,"position")?e=i.getBoundingClientRect():(t=this.offsetParent(),e=this.offset(),K.nodeName(t[0],"html")||(n=t.offset()),n.top+=K.css(t[0],"borderTopWidth",!0),n.left+=K.css(t[0],"borderLeftWidth",!0)),{top:e.top-n.top-K.css(i,"marginTop",!0),left:e.left-n.left-K.css(i,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var t=this.offsetParent||je;t&&!K.nodeName(t,"html")&&"static"===K.css(t,"position");)t=t.offsetParent;return t||je})}}),K.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(e,i){var n="pageYOffset"===i;K.fn[e]=function(o){return mt(this,function(e,o,s){var a=z(e);return void 0===s?a?a[i]:e[o]:void(a?a.scrollTo(n?t.pageXOffset:s,n?s:t.pageYOffset):e[o]=s)},e,o,arguments.length,null)}}),K.each(["top","left"],function(t,e){K.cssHooks[e]=x(Q.pixelPosition,function(t,i){return i?(i=k(t,e),qt.test(i)?K(t).position()[e]+"px":i):void 0})}),K.each({Height:"height",Width:"width"},function(t,e){K.each({padding:"inner"+t,content:e,"":"outer"+t},function(i,n){K.fn[n]=function(n,o){var s=arguments.length&&(i||"boolean"!=typeof n),a=i||(n===!0||o===!0?"margin":"border");return mt(this,function(e,i,n){var o;return K.isWindow(e)?e.document.documentElement["client"+t]:9===e.nodeType?(o=e.documentElement,Math.max(e.body["scroll"+t],o["scroll"+t],e.body["offset"+t],o["offset"+t],o["client"+t])):void 0===n?K.css(e,i,a):K.style(e,i,n,a)},e,s?n:void 0,s,null)}})}),K.fn.size=function(){return this.length},K.fn.andSelf=K.fn.addBack,"function"==typeof define&&define.amd&&define("jquery",[],function(){return K});var Ne=t.jQuery,Ie=t.$;return K.noConflict=function(e){return t.$===K&&(t.$=Ie),e&&t.jQuery===K&&(t.jQuery=Ne),K},typeof e===Tt&&(t.jQuery=t.$=K),K}),function(t){if("function"==typeof define&&define.amd&&define("uikit",function(){var e=window.UIkit||t(window,window.jQuery,window.document);return e.load=function(t,i,n,o){var s,a=t.split(","),r=[],l=(o.config&&o.config.uikit&&o.config.uikit.base?o.config.uikit.base:"").replace(/\/+$/g,"");if(!l)throw new Error("Please define base path to UIkit in the requirejs config.");for(s=0;s<a.length;s+=1){var c=a[s].replace(/\./g,"/");r.push(l+"/components/"+c)}i(r,function(){n(e)})},e}),!window.jQuery)throw new Error("UIkit requires jQuery");window&&window.jQuery&&t(window,window.jQuery,window.document)}(function(t,e,i){"use strict";var n={},o=t.UIkit?Object.create(t.UIkit):void 0;if(n.version="2.24.2",n.noConflict=function(){return o&&(t.UIkit=o,e.UIkit=o,e.fn.uk=o.fn),
n},n.prefix=function(t){return t},n.$=e,n.$doc=n.$(document),n.$win=n.$(window),n.$html=n.$("html"),n.support={},n.support.transition=function(){var t=function(){var t,e=i.body||i.documentElement,n={WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",OTransition:"oTransitionEnd otransitionend",transition:"transitionend"};for(t in n)if(void 0!==e.style[t])return n[t]}();return t&&{end:t}}(),n.support.animation=function(){var t=function(){var t,e=i.body||i.documentElement,n={WebkitAnimation:"webkitAnimationEnd",MozAnimation:"animationend",OAnimation:"oAnimationEnd oanimationend",animation:"animationend"};for(t in n)if(void 0!==e.style[t])return n[t]}();return t&&{end:t}}(),function(){Date.now=Date.now||function(){return(new Date).getTime()};for(var t=["webkit","moz"],e=0;e<t.length&&!window.requestAnimationFrame;++e){var i=t[e];window.requestAnimationFrame=window[i+"RequestAnimationFrame"],window.cancelAnimationFrame=window[i+"CancelAnimationFrame"]||window[i+"CancelRequestAnimationFrame"]}if(/iP(ad|hone|od).*OS 6/.test(window.navigator.userAgent)||!window.requestAnimationFrame||!window.cancelAnimationFrame){var n=0;window.requestAnimationFrame=function(t){var e=Date.now(),i=Math.max(n+16,e);return setTimeout(function(){t(n=i)},i-e)},window.cancelAnimationFrame=clearTimeout}}(),n.support.touch="ontouchstart"in document||t.DocumentTouch&&document instanceof t.DocumentTouch||t.navigator.msPointerEnabled&&t.navigator.msMaxTouchPoints>0||t.navigator.pointerEnabled&&t.navigator.maxTouchPoints>0||!1,n.support.mutationobserver=t.MutationObserver||t.WebKitMutationObserver||null,n.Utils={},n.Utils.isFullscreen=function(){return document.webkitFullscreenElement||document.mozFullScreenElement||document.msFullscreenElement||document.fullscreenElement||!1},n.Utils.str2json=function(t,e){try{return e?JSON.parse(t.replace(/([\$\w]+)\s*:/g,function(t,e){return'"'+e+'":'}).replace(/'([^']+)'/g,function(t,e){return'"'+e+'"'})):new Function("","var json = "+t+"; return JSON.parse(JSON.stringify(json));")()}catch(i){return!1}},n.Utils.debounce=function(t,e,i){var n;return function(){var o=this,s=arguments,a=function(){n=null,i||t.apply(o,s)},r=i&&!n;clearTimeout(n),n=setTimeout(a,e),r&&t.apply(o,s)}},n.Utils.removeCssRules=function(t){var e,i,n,o,s,a,r,l,c,h;t&&setTimeout(function(){try{for(h=document.styleSheets,o=0,r=h.length;r>o;o++){for(n=h[o],i=[],n.cssRules=n.cssRules,e=s=0,l=n.cssRules.length;l>s;e=++s)n.cssRules[e].type===CSSRule.STYLE_RULE&&t.test(n.cssRules[e].selectorText)&&i.unshift(e);for(a=0,c=i.length;c>a;a++)n.deleteRule(i[a])}}catch(u){}},0)},n.Utils.isInView=function(t,i){var o=e(t);if(!o.is(":visible"))return!1;var s=n.$win.scrollLeft(),a=n.$win.scrollTop(),r=o.offset(),l=r.left,c=r.top;return i=e.extend({topoffset:0,leftoffset:0},i),c+o.height()>=a&&c-i.topoffset<=a+n.$win.height()&&l+o.width()>=s&&l-i.leftoffset<=s+n.$win.width()?!0:!1},n.Utils.checkDisplay=function(t,i){var o=n.$("[data-uk-margin], [data-uk-grid-match], [data-uk-grid-margin], [data-uk-check-display]",t||document);return t&&!o.length&&(o=e(t)),o.trigger("display.uk.check"),i&&("string"!=typeof i&&(i='[class*="uk-animation-"]'),o.find(i).each(function(){var t=n.$(this),e=t.attr("class"),i=e.match(/uk\-animation\-(.+)/);t.removeClass(i[0]).width(),t.addClass(i[0])})),o},n.Utils.options=function(t){if(e.isPlainObject(t))return t;var i=t?t.indexOf("{"):-1,o={};if(-1!=i)try{o=n.Utils.str2json(t.substr(i))}catch(s){}return o},n.Utils.animate=function(t,i){var o=e.Deferred();return t=n.$(t),i=i,t.css("display","none").addClass(i).one(n.support.animation.end,function(){t.removeClass(i),o.resolve()}).width(),t.css("display",""),o.promise()},n.Utils.uid=function(t){return(t||"id")+(new Date).getTime()+"RAND"+Math.ceil(1e5*Math.random())},n.Utils.template=function(t,e){for(var i,n,o,s,a=t.replace(/\n/g,"\\n").replace(/\{\{\{\s*(.+?)\s*\}\}\}/g,"{{!$1}}").split(/(\{\{\s*(.+?)\s*\}\})/g),r=0,l=[],c=0;r<a.length;){if(i=a[r],i.match(/\{\{\s*(.+?)\s*\}\}/))switch(r+=1,i=a[r],n=i[0],o=i.substring(i.match(/^(\^|\#|\!|\~|\:)/)?1:0),n){case"~":l.push("for(var $i=0;$i<"+o+".length;$i++) { var $item = "+o+"[$i];"),c++;break;case":":l.push("for(var $key in "+o+") { var $val = "+o+"[$key];"),c++;break;case"#":l.push("if("+o+") {"),c++;break;case"^":l.push("if(!"+o+") {"),c++;break;case"/":l.push("}"),c--;break;case"!":l.push("__ret.push("+o+");");break;default:l.push("__ret.push(escape("+o+"));")}else l.push("__ret.push('"+i.replace(/\'/g,"\\'")+"');");r+=1}return s=new Function("$data",["var __ret = [];","try {","with($data){",c?'__ret = ["Not all blocks are closed correctly."]':l.join(""),"};","}catch(e){__ret = [e.message];}",'return __ret.join("").replace(/\\n\\n/g, "\\n");',"function escape(html) { return String(html).replace(/&/g, '&amp;').replace(/\"/g, '&quot;').replace(/</g, '&lt;').replace(/>/g, '&gt;');}"].join("\n")),e?s(e):s},n.Utils.events={},n.Utils.events.click=n.support.touch?"tap":"click",t.UIkit=n,n.fn=function(t,i){var o=arguments,s=t.match(/^([a-z\-]+)(?:\.([a-z]+))?/i),a=s[1],r=s[2];return n[a]?this.each(function(){var t=e(this),s=t.data(a);s||t.data(a,s=n[a](this,r?void 0:i)),r&&s[r].apply(s,Array.prototype.slice.call(o,1))}):(e.error("UIkit component ["+a+"] does not exist."),this)},e.UIkit=n,e.fn.uk=n.fn,n.langdirection="rtl"==n.$html.attr("dir")?"right":"left",n.components={},n.component=function(t,i){var o=function(i,s){var a=this;return this.UIkit=n,this.element=i?n.$(i):null,this.options=e.extend(!0,{},this.defaults,s),this.plugins={},this.element&&this.element.data(t,this),this.init(),(this.options.plugins.length?this.options.plugins:Object.keys(o.plugins)).forEach(function(t){o.plugins[t].init&&(o.plugins[t].init(a),a.plugins[t]=!0)}),this.trigger("init.uk.component",[t,this]),this};return o.plugins={},e.extend(!0,o.prototype,{defaults:{plugins:[]},boot:function(){},init:function(){},on:function(t,e,i){return n.$(this.element||this).on(t,e,i)},one:function(t,e,i){return n.$(this.element||this).one(t,e,i)},off:function(t){return n.$(this.element||this).off(t)},trigger:function(t,e){return n.$(this.element||this).trigger(t,e)},find:function(t){return n.$(this.element?this.element:[]).find(t)},proxy:function(t,e){var i=this;e.split(" ").forEach(function(e){i[e]||(i[e]=function(){return t[e].apply(t,arguments)})})},mixin:function(t,e){var i=this;e.split(" ").forEach(function(e){i[e]||(i[e]=t[e].bind(i))})},option:function(){return 1==arguments.length?this.options[arguments[0]]||void 0:void(2==arguments.length&&(this.options[arguments[0]]=arguments[1]))}},i),this.components[t]=o,this[t]=function(){var i,o;if(arguments.length)switch(arguments.length){case 1:"string"==typeof arguments[0]||arguments[0].nodeType||arguments[0]instanceof jQuery?i=e(arguments[0]):o=arguments[0];break;case 2:i=e(arguments[0]),o=arguments[1]}return i&&i.data(t)?i.data(t):new n.components[t](i,o)},n.domready&&n.component.boot(t),o},n.plugin=function(t,e,i){this.components[t].plugins[e]=i},n.component.boot=function(t){n.components[t].prototype&&n.components[t].prototype.boot&&!n.components[t].booted&&(n.components[t].prototype.boot.apply(n,[]),n.components[t].booted=!0)},n.component.bootComponents=function(){for(var t in n.components)n.component.boot(t)},n.domObservers=[],n.domready=!1,n.ready=function(t){n.domObservers.push(t),n.domready&&t(document)},n.on=function(t,e,i){return t&&t.indexOf("ready.uk.dom")>-1&&n.domready&&e.apply(n.$doc),n.$doc.on(t,e,i)},n.one=function(t,e,i){return t&&t.indexOf("ready.uk.dom")>-1&&n.domready?(e.apply(n.$doc),n.$doc):n.$doc.one(t,e,i)},n.trigger=function(t,e){return n.$doc.trigger(t,e)},n.domObserve=function(t,e){n.support.mutationobserver&&(e=e||function(){},n.$(t).each(function(){var t=this,i=n.$(t);if(!i.data("observer"))try{var o=new n.support.mutationobserver(n.Utils.debounce(function(n){e.apply(t,[]),i.trigger("changed.uk.dom")},50));o.observe(t,{childList:!0,subtree:!0}),i.data("observer",o)}catch(s){}}))},n.init=function(t){t=t||document,n.domObservers.forEach(function(e){e(t)})},n.on("domready.uk.dom",function(){n.init(),n.domready&&n.Utils.checkDisplay()}),e(function(){n.$body=n.$("body"),n.ready(function(t){n.domObserve("[data-uk-observe]")}),n.on("changed.uk.dom",function(t){n.init(t.target),n.Utils.checkDisplay(t.target)}),n.trigger("beforeready.uk.dom"),n.component.bootComponents(),requestAnimationFrame(function(){var t,e={x:window.pageXOffset,y:window.pageYOffset},i=function(){(e.x!=window.pageXOffset||e.y!=window.pageYOffset)&&(t={x:0,y:0},window.pageXOffset!=e.x&&(t.x=window.pageXOffset>e.x?1:-1),window.pageYOffset!=e.y&&(t.y=window.pageYOffset>e.y?1:-1),e={dir:t,x:window.pageXOffset,y:window.pageYOffset},n.$doc.trigger("scrolling.uk.document",[e])),requestAnimationFrame(i)};return n.support.touch&&n.$html.on("touchmove touchend MSPointerMove MSPointerUp pointermove pointerup",i),(e.x||e.y)&&i(),i}()),n.trigger("domready.uk.dom"),n.support.touch&&navigator.userAgent.match(/(iPad|iPhone|iPod)/g)&&n.$win.on("load orientationchange resize",n.Utils.debounce(function(){var t=function(){return e(".uk-height-viewport").css("height",window.innerHeight),t};return t()}(),100)),n.trigger("afterready.uk.dom"),n.domready=!0}),n.$html.addClass(n.support.touch?"uk-touch":"uk-notouch"),n.support.touch){var s,a=!1,r="uk-hover",l=".uk-overlay, .uk-overlay-hover, .uk-overlay-toggle, .uk-animation-hover, .uk-has-hover";n.$html.on("mouseenter touchstart MSPointerDown pointerdown",l,function(){a&&e("."+r).removeClass(r),a=e(this).addClass(r)}).on("mouseleave touchend MSPointerUp pointerup",function(t){s=e(t.target).parents(l),a&&a.not(s).removeClass(r)})}return n}),function(t){function e(t,e,i,n){return Math.abs(t-e)>=Math.abs(i-n)?t-e>0?"Left":"Right":i-n>0?"Up":"Down"}function i(){c=null,u.last&&(void 0!==u.el&&u.el.trigger("longTap"),u={})}function n(){c&&clearTimeout(c),c=null}function o(){a&&clearTimeout(a),r&&clearTimeout(r),l&&clearTimeout(l),c&&clearTimeout(c),a=r=l=c=null,u={}}function s(t){return t.pointerType==t.MSPOINTER_TYPE_TOUCH&&t.isPrimary}if(!t.fn.swipeLeft){var a,r,l,c,h,u={},d=750;t(function(){var f,p,g,m=0,v=0;"MSGesture"in window&&(h=new MSGesture,h.target=document.body),t(document).on("MSGestureEnd gestureend",function(t){var e=t.originalEvent.velocityX>1?"Right":t.originalEvent.velocityX<-1?"Left":t.originalEvent.velocityY>1?"Down":t.originalEvent.velocityY<-1?"Up":null;e&&void 0!==u.el&&(u.el.trigger("swipe"),u.el.trigger("swipe"+e))}).on("touchstart MSPointerDown pointerdown",function(e){("MSPointerDown"!=e.type||s(e.originalEvent))&&(g="MSPointerDown"==e.type||"pointerdown"==e.type?e:e.originalEvent.touches[0],f=Date.now(),p=f-(u.last||f),u.el=t("tagName"in g.target?g.target:g.target.parentNode),a&&clearTimeout(a),u.x1=g.pageX,u.y1=g.pageY,p>0&&250>=p&&(u.isDoubleTap=!0),u.last=f,c=setTimeout(i,d),!h||"MSPointerDown"!=e.type&&"pointerdown"!=e.type&&"touchstart"!=e.type||h.addPointer(e.originalEvent.pointerId))}).on("touchmove MSPointerMove pointermove",function(t){("MSPointerMove"!=t.type||s(t.originalEvent))&&(g="MSPointerMove"==t.type||"pointermove"==t.type?t:t.originalEvent.touches[0],n(),u.x2=g.pageX,u.y2=g.pageY,m+=Math.abs(u.x1-u.x2),v+=Math.abs(u.y1-u.y2))}).on("touchend MSPointerUp pointerup",function(i){("MSPointerUp"!=i.type||s(i.originalEvent))&&(n(),u.x2&&Math.abs(u.x1-u.x2)>30||u.y2&&Math.abs(u.y1-u.y2)>30?l=setTimeout(function(){void 0!==u.el&&(u.el.trigger("swipe"),u.el.trigger("swipe"+e(u.x1,u.x2,u.y1,u.y2))),u={}},0):"last"in u&&(isNaN(m)||30>m&&30>v?r=setTimeout(function(){var e=t.Event("tap");e.cancelTouch=o,void 0!==u.el&&u.el.trigger(e),u.isDoubleTap?(void 0!==u.el&&u.el.trigger("doubleTap"),u={}):a=setTimeout(function(){a=null,void 0!==u.el&&u.el.trigger("singleTap"),u={}},250)},0):u={},m=v=0))}).on("touchcancel MSPointerCancel",o),t(window).on("scroll",o)}),["swipe","swipeLeft","swipeRight","swipeUp","swipeDown","doubleTap","tap","singleTap","longTap"].forEach(function(e){t.fn[e]=function(i){return t(this).on(e,i)}})}}(jQuery),function(t){"use strict";var e=[];t.component("stackMargin",{defaults:{cls:"uk-margin-small-top"},boot:function(){t.ready(function(e){t.$("[data-uk-margin]",e).each(function(){var e,i=t.$(this);i.data("stackMargin")||(e=t.stackMargin(i,t.Utils.options(i.attr("data-uk-margin"))))})})},init:function(){var i=this;this.columns=[],t.$win.on("resize orientationchange",function(){var e=function(){i.process()};return t.$(function(){e(),t.$win.on("load",e)}),t.Utils.debounce(e,20)}()),t.$html.on("changed.uk.dom",function(t){i.process()}),this.on("display.uk.check",function(t){this.element.is(":visible")&&this.process()}.bind(this)),e.push(this)},process:function(){return this.columns=this.element.children(),t.Utils.stackMargin(this.columns,this.options),this},revert:function(){return this.columns.removeClass(this.options.cls),this}}),function(){var e=[],i=function(t){if(t.is(":visible")){var e=t.parent().width(),i=t.data("width"),n=e/i,o=Math.floor(n*t.data("height"));t.css({height:i>e?o:t.data("height")})}};t.component("responsiveElement",{defaults:{},boot:function(){t.ready(function(e){t.$("iframe.uk-responsive-width, [data-uk-responsive]",e).each(function(){var e,i=t.$(this);i.data("responsiveIframe")||(e=t.responsiveElement(i,{}))})})},init:function(){var t=this.element;t.attr("width")&&t.attr("height")&&(t.data({width:t.attr("width"),height:t.attr("height")}).on("display.uk.check",function(){i(t)}),i(t),e.push(t))}}),t.$win.on("resize load",t.Utils.debounce(function(){e.forEach(function(t){i(t)})},15))}(),t.Utils.stackMargin=function(e,i){i=t.$.extend({cls:"uk-margin-small-top"},i),i.cls=i.cls,e=t.$(e).removeClass(i.cls);var n=!1,o=e.filter(":visible:first"),s=o.length?o.position().top+o.outerHeight()-1:!1;s!==!1&&1!=e.length&&e.each(function(){var e=t.$(this);e.is(":visible")&&(n?e.addClass(i.cls):e.position().top>=s&&(n=e.addClass(i.cls)))})},t.Utils.matchHeights=function(e,i){e=t.$(e).css("min-height",""),i=t.$.extend({row:!0},i);var n=function(e){if(!(e.length<2)){var i=0;e.each(function(){i=Math.max(i,t.$(this).outerHeight())}).each(function(){var e=t.$(this),n=i-("border-box"==e.css("box-sizing")?0:e.outerHeight()-e.height());e.css("min-height",n+"px")})}};i.row?(e.first().width(),setTimeout(function(){var i=!1,o=[];e.each(function(){var e=t.$(this),s=e.offset().top;s!=i&&o.length&&(n(t.$(o)),o=[],s=e.offset().top),o.push(e),i=s}),o.length&&n(t.$(o))},0)):n(e)},function(e){t.Utils.inlineSvg=function(i,n){t.$(i||'img[src$=".svg"]',n||document).each(function(){var i=t.$(this),n=i.attr("src");if(!e[n]){var o=t.$.Deferred();t.$.get(n,{nc:Math.random()},function(e){o.resolve(t.$(e).find("svg"))}),e[n]=o.promise()}e[n].then(function(e){var n=t.$(e).clone();i.attr("id")&&n.attr("id",i.attr("id")),i.attr("class")&&n.attr("class",i.attr("class")),i.attr("style")&&n.attr("style",i.attr("style")),i.attr("width")&&(n.attr("width",i.attr("width")),i.attr("height")||n.removeAttr("height")),i.attr("height")&&(n.attr("height",i.attr("height")),i.attr("width")||n.removeAttr("width")),i.replaceWith(n)})})},t.ready(function(e){t.Utils.inlineSvg("[data-uk-svg]",e)})}({})}(UIkit),function(t){"use strict";function e(e,i){i=t.$.extend({duration:1e3,transition:"easeOutExpo",offset:0,complete:function(){}},i);var n=e.offset().top-i.offset,o=t.$doc.height(),s=window.innerHeight;n+s>o&&(n=o-s),t.$("html,body").stop().animate({scrollTop:n},i.duration,i.transition).promise().done(i.complete)}t.component("smoothScroll",{boot:function(){t.$html.on("click.smooth-scroll.uikit","[data-uk-smooth-scroll]",function(e){var i=t.$(this);if(!i.data("smoothScroll")){t.smoothScroll(i,t.Utils.options(i.attr("data-uk-smooth-scroll")));i.trigger("click")}return!1})},init:function(){var i=this;this.on("click",function(n){n.preventDefault(),e(t.$(this.hash).length?t.$(this.hash):t.$("body"),i.options)})}}),t.Utils.scrollToElement=e,t.$.easing.easeOutExpo||(t.$.easing.easeOutExpo=function(t,e,i,n,o){return e==o?i+n:n*(-Math.pow(2,-10*e/o)+1)+i})}(UIkit),function(t){"use strict";var e=t.$win,i=t.$doc,n=[],o=function(){for(var t=0;t<n.length;t++)window.requestAnimationFrame.apply(window,[n[t].check])};t.component("scrollspy",{defaults:{target:!1,cls:"uk-scrollspy-inview",initcls:"uk-scrollspy-init-inview",topoffset:0,leftoffset:0,repeat:!1,delay:0},boot:function(){i.on("scrolling.uk.document",o),e.on("load resize orientationchange",t.Utils.debounce(o,50)),t.ready(function(e){t.$("[data-uk-scrollspy]",e).each(function(){var e=t.$(this);if(!e.data("scrollspy")){t.scrollspy(e,t.Utils.options(e.attr("data-uk-scrollspy")))}})})},init:function(){var e,i=this,o=this.options.cls.split(/,/),s=function(){var n=i.options.target?i.element.find(i.options.target):i.element,s=1===n.length?1:0,a=0;n.each(function(n){var r=t.$(this),l=r.data("inviewstate"),c=t.Utils.isInView(r,i.options),h=r.data("ukScrollspyCls")||o[a].trim();!c||l||r.data("scrollspy-idle")||(e||(r.addClass(i.options.initcls),i.offset=r.offset(),e=!0,r.trigger("init.uk.scrollspy")),r.data("scrollspy-idle",setTimeout(function(){r.addClass("uk-scrollspy-inview").toggleClass(h).width(),r.trigger("inview.uk.scrollspy"),r.data("scrollspy-idle",!1),r.data("inviewstate",!0)},i.options.delay*s)),s++),!c&&l&&i.options.repeat&&(r.data("scrollspy-idle")&&clearTimeout(r.data("scrollspy-idle")),r.removeClass("uk-scrollspy-inview").toggleClass(h),r.data("inviewstate",!1),r.trigger("outview.uk.scrollspy")),a=o[a+1]?a+1:0})};s(),this.check=s,n.push(this)}});var s=[],a=function(){for(var t=0;t<s.length;t++)window.requestAnimationFrame.apply(window,[s[t].check])};t.component("scrollspynav",{defaults:{cls:"uk-active",closest:!1,topoffset:0,leftoffset:0,smoothscroll:!1},boot:function(){i.on("scrolling.uk.document",a),e.on("resize orientationchange",t.Utils.debounce(a,50)),t.ready(function(e){t.$("[data-uk-scrollspy-nav]",e).each(function(){var e=t.$(this);if(!e.data("scrollspynav")){t.scrollspynav(e,t.Utils.options(e.attr("data-uk-scrollspy-nav")))}})})},init:function(){var i,n=[],o=this.find("a[href^='#']").each(function(){"#"!==this.getAttribute("href").trim()&&n.push(this.getAttribute("href"))}),a=t.$(n.join(",")),r=this.options.cls,l=this.options.closest||this.options.closest,c=this,h=function(){i=[];for(var n=0;n<a.length;n++)t.Utils.isInView(a.eq(n),c.options)&&i.push(a.eq(n));if(i.length){var s,h=e.scrollTop(),u=function(){for(var t=0;t<i.length;t++)if(i[t].offset().top>=h)return i[t]}();if(!u)return;c.options.closest?(o.blur().closest(l).removeClass(r),s=o.filter("a[href='#"+u.attr("id")+"']").closest(l).addClass(r)):s=o.removeClass(r).filter("a[href='#"+u.attr("id")+"']").addClass(r),c.element.trigger("inview.uk.scrollspynav",[u,s])}};this.options.smoothscroll&&t.smoothScroll&&o.each(function(){t.smoothScroll(this,c.options.smoothscroll)}),h(),this.element.data("scrollspynav",this),this.check=h,s.push(this)}})}(UIkit),function(t){"use strict";var e=[];t.component("toggle",{defaults:{target:!1,cls:"uk-hidden",animation:!1,duration:200},boot:function(){t.ready(function(i){t.$("[data-uk-toggle]",i).each(function(){var e=t.$(this);if(!e.data("toggle")){t.toggle(e,t.Utils.options(e.attr("data-uk-toggle")))}}),setTimeout(function(){e.forEach(function(t){t.getToggles()})},0)})},init:function(){var t=this;this.aria=-1!==this.options.cls.indexOf("uk-hidden"),this.getToggles(),this.on("click",function(e){t.element.is('a[href="#"]')&&e.preventDefault(),t.toggle()}),e.push(this)},toggle:function(){if(this.totoggle.length){if(this.options.animation&&t.support.animation){var e=this,i=this.options.animation.split(",");1==i.length&&(i[1]=i[0]),i[0]=i[0].trim(),i[1]=i[1].trim(),this.totoggle.css("animation-duration",this.options.duration+"ms"),this.totoggle.each(function(){var n=t.$(this);n.hasClass(e.options.cls)?(n.toggleClass(e.options.cls),t.Utils.animate(n,i[0]).then(function(){n.css("animation-duration",""),t.Utils.checkDisplay(n)})):t.Utils.animate(this,i[1]+" uk-animation-reverse").then(function(){n.toggleClass(e.options.cls).css("animation-duration",""),t.Utils.checkDisplay(n)})})}else this.totoggle.toggleClass(this.options.cls),t.Utils.checkDisplay(this.totoggle);this.updateAria()}},getToggles:function(){this.totoggle=this.options.target?t.$(this.options.target):[],this.updateAria()},updateAria:function(){this.aria&&this.totoggle.length&&this.totoggle.each(function(){t.$(this).attr("aria-hidden",t.$(this).hasClass("uk-hidden"))})}})}(UIkit),function(t){"use strict";t.component("alert",{defaults:{fade:!0,duration:200,trigger:".uk-alert-close"},boot:function(){t.$html.on("click.alert.uikit","[data-uk-alert]",function(e){var i=t.$(this);if(!i.data("alert")){var n=t.alert(i,t.Utils.options(i.attr("data-uk-alert")));t.$(e.target).is(n.options.trigger)&&(e.preventDefault(),n.close())}})},init:function(){var t=this;this.on("click",this.options.trigger,function(e){e.preventDefault(),t.close()})},close:function(){var t=this.trigger("close.uk.alert"),e=function(){this.trigger("closed.uk.alert").remove()}.bind(this);this.options.fade?t.css("overflow","hidden").css("max-height",t.height()).animate({height:0,opacity:0,"padding-top":0,"padding-bottom":0,"margin-top":0,"margin-bottom":0},this.options.duration,e):e()}})}(UIkit),function(t){"use strict";t.component("buttonRadio",{defaults:{activeClass:"uk-active",target:".uk-button"},boot:function(){t.$html.on("click.buttonradio.uikit","[data-uk-button-radio]",function(e){var i=t.$(this);if(!i.data("buttonRadio")){var n=t.buttonRadio(i,t.Utils.options(i.attr("data-uk-button-radio"))),o=t.$(e.target);o.is(n.options.target)&&o.trigger("click")}})},init:function(){var e=this;this.find(e.options.target).attr("aria-checked","false").filter("."+e.options.activeClass).attr("aria-checked","true"),this.on("click",this.options.target,function(i){var n=t.$(this);n.is('a[href="#"]')&&i.preventDefault(),e.find(e.options.target).not(n).removeClass(e.options.activeClass).blur(),n.addClass(e.options.activeClass),e.find(e.options.target).not(n).attr("aria-checked","false"),n.attr("aria-checked","true"),e.trigger("change.uk.button",[n])})},getSelected:function(){return this.find("."+this.options.activeClass)}}),t.component("buttonCheckbox",{defaults:{activeClass:"uk-active",target:".uk-button"},boot:function(){t.$html.on("click.buttoncheckbox.uikit","[data-uk-button-checkbox]",function(e){var i=t.$(this);if(!i.data("buttonCheckbox")){var n=t.buttonCheckbox(i,t.Utils.options(i.attr("data-uk-button-checkbox"))),o=t.$(e.target);o.is(n.options.target)&&o.trigger("click")}})},init:function(){var e=this;this.find(e.options.target).attr("aria-checked","false").filter("."+e.options.activeClass).attr("aria-checked","true"),this.on("click",this.options.target,function(i){var n=t.$(this);n.is('a[href="#"]')&&i.preventDefault(),n.toggleClass(e.options.activeClass).blur(),n.attr("aria-checked",n.hasClass(e.options.activeClass)),e.trigger("change.uk.button",[n])})},getSelected:function(){return this.find("."+this.options.activeClass)}}),t.component("button",{defaults:{},boot:function(){t.$html.on("click.button.uikit","[data-uk-button]",function(e){var i=t.$(this);if(!i.data("button")){t.button(i,t.Utils.options(i.attr("data-uk-button")));i.trigger("click")}})},init:function(){var t=this;this.element.attr("aria-pressed",this.element.hasClass("uk-active")),this.on("click",function(e){t.element.is('a[href="#"]')&&e.preventDefault(),t.toggle(),t.trigger("change.uk.button",[t.element.blur().hasClass("uk-active")])})},toggle:function(){this.element.toggleClass("uk-active"),this.element.attr("aria-pressed",this.element.hasClass("uk-active"))}})}(UIkit),function(t){"use strict";function e(e,i,n,o){if(e=t.$(e),i=t.$(i),n=n||window.innerWidth,o=o||e.offset(),i.length){var s=i.outerWidth();if(e.css("min-width",s),"right"==t.langdirection){var a=n-(i.offset().left+s),r=n-(e.offset().left+e.outerWidth());e.css("margin-right",a-r)}else e.css("margin-left",i.offset().left-o.left)}}var i,n=!1,o={x:{"bottom-left":"bottom-right","bottom-right":"bottom-left","bottom-center":"bottom-right","top-left":"top-right","top-right":"top-left","top-center":"top-right","left-top":"right","left-bottom":"right-bottom","left-center":"right-center","right-top":"left","right-bottom":"left-bottom","right-center":"left-center"},y:{"bottom-left":"top-left","bottom-right":"top-right","bottom-center":"top-center","top-left":"bottom-left","top-right":"bottom-right","top-center":"bottom-center","left-top":"top-left","left-bottom":"left-bottom","left-center":"top-left","right-top":"top-left","right-bottom":"bottom-left","right-center":"top-left"},xy:{}};t.component("dropdown",{defaults:{mode:"hover",pos:"bottom-left",offset:0,remaintime:800,justify:!1,boundary:t.$win,delay:0,dropdownSelector:".uk-dropdown,.uk-dropdown-blank",hoverDelayIdle:250,preventflip:!1},remainIdle:!1,boot:function(){var e=t.support.touch?"click":"mouseenter";t.$html.on(e+".dropdown.uikit","[data-uk-dropdown]",function(i){var n=t.$(this);if(!n.data("dropdown")){var o=t.dropdown(n,t.Utils.options(n.attr("data-uk-dropdown")));("click"==e||"mouseenter"==e&&"hover"==o.options.mode)&&o.element.trigger(e),o.element.find(o.options.dropdownSelector).length&&i.preventDefault()}})},init:function(){var e=this;this.dropdown=this.find(this.options.dropdownSelector),this.offsetParent=this.dropdown.parents().filter(function(){return-1!==t.$.inArray(t.$(this).css("position"),["relative","fixed","absolute"])}).slice(0,1),this.centered=this.dropdown.hasClass("uk-dropdown-center"),this.justified=this.options.justify?t.$(this.options.justify):!1,this.boundary=t.$(this.options.boundary),this.boundary.length||(this.boundary=t.$win),this.dropdown.hasClass("uk-dropdown-up")&&(this.options.pos="top-left"),this.dropdown.hasClass("uk-dropdown-flip")&&(this.options.pos=this.options.pos.replace("left","right")),this.dropdown.hasClass("uk-dropdown-center")&&(this.options.pos=this.options.pos.replace(/(left|right)/,"center")),this.element.attr("aria-haspopup","true"),this.element.attr("aria-expanded",this.element.hasClass("uk-open")),"click"==this.options.mode||t.support.touch?this.on("click.uikit.dropdown",function(i){var n=t.$(i.target);n.parents(e.options.dropdownSelector).length||((n.is("a[href='#']")||n.parent().is("a[href='#']")||e.dropdown.length&&!e.dropdown.is(":visible"))&&i.preventDefault(),n.blur()),e.element.hasClass("uk-open")?(!e.dropdown.find(i.target).length||n.is(".uk-dropdown-close")||n.parents(".uk-dropdown-close").length)&&e.hide():e.show()}):this.on("mouseenter",function(t){e.trigger("pointerenter.uk.dropdown",[e]),e.remainIdle&&clearTimeout(e.remainIdle),i&&clearTimeout(i),n&&n==e||(i=n&&n!=e?setTimeout(function(){i=setTimeout(e.show.bind(e),e.options.delay)},e.options.hoverDelayIdle):setTimeout(e.show.bind(e),e.options.delay))}).on("mouseleave",function(){i&&clearTimeout(i),e.remainIdle=setTimeout(function(){n&&n==e&&e.hide()},e.options.remaintime),e.trigger("pointerleave.uk.dropdown",[e])}).on("click",function(i){var o=t.$(i.target);return e.remainIdle&&clearTimeout(e.remainIdle),n&&n==e?void((!e.dropdown.find(i.target).length||o.is(".uk-dropdown-close")||o.parents(".uk-dropdown-close").length)&&e.hide()):((o.is("a[href='#']")||o.parent().is("a[href='#']"))&&i.preventDefault(),void e.show())})},show:function(){t.$html.off("click.outer.dropdown"),n&&n!=this&&n.hide(!0),i&&clearTimeout(i),this.trigger("beforeshow.uk.dropdown",[this]),this.checkDimensions(),this.element.addClass("uk-open"),this.element.attr("aria-expanded","true"),this.trigger("show.uk.dropdown",[this]),t.Utils.checkDisplay(this.dropdown,!0),n=this,this.registerOuterClick()},hide:function(t){this.trigger("beforehide.uk.dropdown",[this,t]),this.element.removeClass("uk-open"),this.remainIdle&&clearTimeout(this.remainIdle),this.remainIdle=!1,this.element.attr("aria-expanded","false"),this.trigger("hide.uk.dropdown",[this,t]),n==this&&(n=!1)},registerOuterClick:function(){var e=this;t.$html.off("click.outer.dropdown"),setTimeout(function(){t.$html.on("click.outer.dropdown",function(o){i&&clearTimeout(i);t.$(o.target);n!=e||e.element.find(o.target).length||(e.hide(!0),t.$html.off("click.outer.dropdown"))})},10)},checkDimensions:function(){if(this.dropdown.length){this.dropdown.removeClass("uk-dropdown-top uk-dropdown-bottom uk-dropdown-left uk-dropdown-right uk-dropdown-stack").css({"top-left":"",left:"","margin-left":"","margin-right":""}),this.justified&&this.justified.length&&this.dropdown.css("min-width","");var i,n=t.$.extend({},this.offsetParent.offset(),{width:this.offsetParent[0].offsetWidth,height:this.offsetParent[0].offsetHeight}),s=this.options.offset,a=this.dropdown,r=(a.show().offset()||{left:0,top:0},a.outerWidth()),l=a.outerHeight(),c=this.boundary.width(),h=(this.boundary[0]!==window&&this.boundary.offset()?this.boundary.offset():{top:0,left:0},this.options.pos),u={"bottom-left":{top:0+n.height+s,left:0},"bottom-right":{top:0+n.height+s,left:0+n.width-r},"bottom-center":{top:0+n.height+s,left:0+n.width/2-r/2},"top-left":{top:0-l-s,left:0},"top-right":{top:0-l-s,left:0+n.width-r},"top-center":{top:0-l-s,left:0+n.width/2-r/2},"left-top":{top:0,left:0-r-s},"left-bottom":{top:0+n.height-l,left:0-r-s},"left-center":{top:0+n.height/2-l/2,left:0-r-s},"right-top":{top:0,left:0+n.width+s},"right-bottom":{top:0+n.height-l,left:0+n.width+s},"right-center":{top:0+n.height/2-l/2,left:0+n.width+s}},d={};if(i=h.split("-"),d=u[h]?u[h]:u["bottom-left"],this.justified&&this.justified.length)e(a.css({left:0}),this.justified,c);else if(this.options.preventflip!==!0){var f;switch(this.checkBoundary(n.left+d.left,n.top+d.top,r,l,c)){case"x":"x"!==this.options.preventflip&&(f=o.x[h]||"right-top");break;case"y":"y"!==this.options.preventflip&&(f=o.y[h]||"top-left");break;case"xy":this.options.preventflip||(f=o.xy[h]||"right-bottom")}f&&(i=f.split("-"),d=u[f]?u[f]:u["bottom-left"],this.checkBoundary(n.left+d.left,n.top+d.top,r,l,c)&&(i=h.split("-"),d=u[h]?u[h]:u["bottom-left"]))}r>c&&(a.addClass("uk-dropdown-stack"),this.trigger("stack.uk.dropdown",[this])),a.css(d).css("display","").addClass("uk-dropdown-"+i[0])}},checkBoundary:function(e,i,n,o,s){var a="";return(0>e||e-t.$win.scrollLeft()+n>s)&&(a+="x"),(i-t.$win.scrollTop()<0||i-t.$win.scrollTop()+o>window.innerHeight)&&(a+="y"),a}}),t.component("dropdownOverlay",{defaults:{justify:!1,cls:"",duration:200},boot:function(){t.ready(function(e){t.$("[data-uk-dropdown-overlay]",e).each(function(){var e=t.$(this);e.data("dropdownOverlay")||t.dropdownOverlay(e,t.Utils.options(e.attr("data-uk-dropdown-overlay")))})})},init:function(){var i=this;this.justified=this.options.justify?t.$(this.options.justify):!1,this.overlay=this.element.find("uk-dropdown-overlay"),this.overlay.length||(this.overlay=t.$('<div class="uk-dropdown-overlay"></div>').appendTo(this.element)),this.overlay.addClass(this.options.cls),this.on({"beforeshow.uk.dropdown":function(t,n){i.dropdown=n,i.justified&&i.justified.length&&e(i.overlay.css({display:"block","margin-left":"","margin-right":""}),i.justified,i.justified.outerWidth())},"show.uk.dropdown":function(e,n){var o=i.dropdown.dropdown.outerHeight(!0);i.dropdown.element.removeClass("uk-open"),i.overlay.stop().css("display","block").animate({height:o},i.options.duration,function(){i.dropdown.dropdown.css("visibility",""),i.dropdown.element.addClass("uk-open"),t.Utils.checkDisplay(i.dropdown.dropdown,!0)}),i.pointerleave=!1},"hide.uk.dropdown":function(){i.overlay.stop().animate({height:0},i.options.duration)},"pointerenter.uk.dropdown":function(t,e){clearTimeout(i.remainIdle)},"pointerleave.uk.dropdown":function(t,e){i.pointerleave=!0}}),this.overlay.on({mouseenter:function(){i.remainIdle&&(clearTimeout(i.dropdown.remainIdle),clearTimeout(i.remainIdle))},mouseleave:function(){i.pointerleave&&n&&(i.remainIdle=setTimeout(function(){n&&n.hide()},n.options.remaintime))}})}})}(UIkit),function(t){"use strict";var e=[];t.component("gridMatchHeight",{defaults:{target:!1,row:!0,ignorestacked:!1},boot:function(){t.ready(function(e){t.$("[data-uk-grid-match]",e).each(function(){var e,i=t.$(this);i.data("gridMatchHeight")||(e=t.gridMatchHeight(i,t.Utils.options(i.attr("data-uk-grid-match"))));
})})},init:function(){var i=this;this.columns=this.element.children(),this.elements=this.options.target?this.find(this.options.target):this.columns,this.columns.length&&(t.$win.on("load resize orientationchange",function(){var e=function(){i.match()};return t.$(function(){e()}),t.Utils.debounce(e,50)}()),t.$html.on("changed.uk.dom",function(t){i.columns=i.element.children(),i.elements=i.options.target?i.find(i.options.target):i.columns,i.match()}),this.on("display.uk.check",function(t){this.element.is(":visible")&&this.match()}.bind(this)),e.push(this))},match:function(){var e=this.columns.filter(":visible:first");if(e.length){var i=Math.ceil(100*parseFloat(e.css("width"))/parseFloat(e.parent().css("width")))>=100;return i&&!this.options.ignorestacked?this.revert():t.Utils.matchHeights(this.elements,this.options),this}},revert:function(){return this.elements.css("min-height",""),this}}),t.component("gridMargin",{defaults:{cls:"uk-grid-margin"},boot:function(){t.ready(function(e){t.$("[data-uk-grid-margin]",e).each(function(){var e,i=t.$(this);i.data("gridMargin")||(e=t.gridMargin(i,t.Utils.options(i.attr("data-uk-grid-margin"))))})})},init:function(){t.stackMargin(this.element,this.options)}})}(UIkit),function(t){"use strict";function e(e,i){return i?("object"==typeof e?(e=e instanceof jQuery?e:t.$(e),e.parent().length&&(i.persist=e,i.persist.data("modalPersistParent",e.parent()))):e="string"==typeof e||"number"==typeof e?t.$("<div></div>").html(e):t.$("<div></div>").html("UIkit.modal Error: Unsupported data type: "+typeof e),e.appendTo(i.element.find(".uk-modal-dialog")),i):void 0}var i,n=!1,o=0,s=t.$html;t.component("modal",{defaults:{keyboard:!0,bgclose:!0,minScrollHeight:150,center:!1,modal:!0},scrollable:!1,transition:!1,hasTransitioned:!0,init:function(){if(i||(i=t.$("body")),this.element.length){var e=this;this.paddingdir="padding-"+("left"==t.langdirection?"right":"left"),this.dialog=this.find(".uk-modal-dialog"),this.active=!1,this.element.attr("aria-hidden",this.element.hasClass("uk-open")),this.on("click",".uk-modal-close",function(t){t.preventDefault(),e.hide()}).on("click",function(i){var n=t.$(i.target);n[0]==e.element[0]&&e.options.bgclose&&e.hide()})}},toggle:function(){return this[this.isActive()?"hide":"show"]()},show:function(){if(this.element.length){var e=this;if(!this.isActive())return this.options.modal&&n&&n.hide(!0),this.element.removeClass("uk-open").show(),this.resize(),this.options.modal&&(n=this),this.active=!0,o++,t.support.transition?(this.hasTransitioned=!1,this.element.one(t.support.transition.end,function(){e.hasTransitioned=!0}).addClass("uk-open")):this.element.addClass("uk-open"),s.addClass("uk-modal-page").height(),this.element.attr("aria-hidden","false"),this.element.trigger("show.uk.modal"),t.Utils.checkDisplay(this.dialog,!0),this}},hide:function(e){if(!e&&t.support.transition&&this.hasTransitioned){var i=this;this.one(t.support.transition.end,function(){i._hide()}).removeClass("uk-open")}else this._hide();return this},resize:function(){var t=i.width();if(this.scrollbarwidth=window.innerWidth-t,i.css(this.paddingdir,this.scrollbarwidth),this.element.css("overflow-y",this.scrollbarwidth?"scroll":"auto"),!this.updateScrollable()&&this.options.center){var e=this.dialog.outerHeight(),n=parseInt(this.dialog.css("margin-top"),10)+parseInt(this.dialog.css("margin-bottom"),10);e+n<window.innerHeight?this.dialog.css({top:window.innerHeight/2-e/2-n}):this.dialog.css({top:""})}},updateScrollable:function(){var t=this.dialog.find(".uk-overflow-container:visible:first");if(t.length){t.css("height",0);var e=Math.abs(parseInt(this.dialog.css("margin-top"),10)),i=this.dialog.outerHeight(),n=window.innerHeight,o=n-2*(20>e?20:e)-i;return t.css({"max-height":o<this.options.minScrollHeight?"":o,height:""}),!0}return!1},_hide:function(){this.active=!1,o>0?o--:o=0,this.element.hide().removeClass("uk-open"),this.element.attr("aria-hidden","true"),o||(s.removeClass("uk-modal-page"),i.css(this.paddingdir,"")),n===this&&(n=!1),this.trigger("hide.uk.modal")},isActive:function(){return this.active}}),t.component("modalTrigger",{boot:function(){t.$html.on("click.modal.uikit","[data-uk-modal]",function(e){var i=t.$(this);if(i.is("a")&&e.preventDefault(),!i.data("modalTrigger")){var n=t.modalTrigger(i,t.Utils.options(i.attr("data-uk-modal")));n.show()}}),t.$html.on("keydown.modal.uikit",function(t){n&&27===t.keyCode&&n.options.keyboard&&(t.preventDefault(),n.hide())}),t.$win.on("resize orientationchange",t.Utils.debounce(function(){n&&n.resize()},150))},init:function(){var e=this;this.options=t.$.extend({target:e.element.is("a")?e.element.attr("href"):!1},this.options),this.modal=t.modal(this.options.target,this.options),this.on("click",function(t){t.preventDefault(),e.show()}),this.proxy(this.modal,"show hide isActive")}}),t.modal.dialog=function(i,n){var o=t.modal(t.$(t.modal.dialog.template).appendTo("body"),n);return o.on("hide.uk.modal",function(){o.persist&&(o.persist.appendTo(o.persist.data("modalPersistParent")),o.persist=!1),o.element.remove()}),e(i,o),o},t.modal.dialog.template='<div class="uk-modal"><div class="uk-modal-dialog" style="min-height:0;"></div></div>',t.modal.alert=function(e,i){i=t.$.extend(!0,{bgclose:!1,keyboard:!1,modal:!1,labels:t.modal.labels},i);var n=t.modal.dialog(['<div class="uk-margin uk-modal-content">'+String(e)+"</div>",'<div class="uk-modal-footer uk-text-right"><button class="uk-button uk-button-primary uk-modal-close">'+i.labels.Ok+"</button></div>"].join(""),i);return n.on("show.uk.modal",function(){setTimeout(function(){n.element.find("button:first").focus()},50)}),n.show()},t.modal.confirm=function(e,i,n){i=t.$.isFunction(i)?i:function(){},n=t.$.extend(!0,{bgclose:!1,keyboard:!1,modal:!1,labels:t.modal.labels},n);var o=t.modal.dialog(['<div class="uk-margin uk-modal-content">'+String(e)+"</div>",'<div class="uk-modal-footer uk-text-right"><button class="uk-button uk-modal-close">'+n.labels.Cancel+'</button> <button class="uk-button uk-button-primary js-modal-confirm">'+n.labels.Ok+"</button></div>"].join(""),n);return o.element.find(".js-modal-confirm").on("click",function(){i(),o.hide()}),o.on("show.uk.modal",function(){setTimeout(function(){o.element.find(".js-modal-confirm").focus()},50)}),o.show()},t.modal.prompt=function(e,i,n,o){n=t.$.isFunction(n)?n:function(t){},o=t.$.extend(!0,{bgclose:!1,keyboard:!1,modal:!1,labels:t.modal.labels},o);var s=t.modal.dialog([e?'<div class="uk-modal-content uk-form">'+String(e)+"</div>":"",'<div class="uk-margin-small-top uk-modal-content uk-form"><p><input type="text" class="uk-width-1-1"></p></div>','<div class="uk-modal-footer uk-text-right"><button class="uk-button uk-modal-close">'+o.labels.Cancel+'</button> <button class="uk-button uk-button-primary js-modal-ok">'+o.labels.Ok+"</button></div>"].join(""),o),a=s.element.find("input[type='text']").val(i||"").on("keyup",function(t){13==t.keyCode&&s.element.find(".js-modal-ok").trigger("click")});return s.element.find(".js-modal-ok").on("click",function(){n(a.val())!==!1&&s.hide()}),s.on("show.uk.modal",function(){setTimeout(function(){a.focus()},50)}),s.show()},t.modal.blockUI=function(e,i){var n=t.modal.dialog(['<div class="uk-margin uk-modal-content">'+String(e||'<div class="uk-text-center">...</div>')+"</div>"].join(""),t.$.extend({bgclose:!1,keyboard:!1,modal:!1},i));return n.content=n.element.find(".uk-modal-content:first"),n.show()},t.modal.labels={Ok:"Ok",Cancel:"Cancel"}}(UIkit),function(t){"use strict";function e(e){var i=t.$(e),n="auto";if(i.is(":visible"))n=i.outerHeight();else{var o={position:i.css("position"),visibility:i.css("visibility"),display:i.css("display")};n=i.css({position:"absolute",visibility:"hidden",display:"block"}).outerHeight(),i.css(o)}return n}t.component("nav",{defaults:{toggle:">li.uk-parent > a[href='#']",lists:">li.uk-parent > ul",multiple:!1},boot:function(){t.ready(function(e){t.$("[data-uk-nav]",e).each(function(){var e=t.$(this);if(!e.data("nav")){t.nav(e,t.Utils.options(e.attr("data-uk-nav")))}})})},init:function(){var e=this;this.on("click.uikit.nav",this.options.toggle,function(i){i.preventDefault();var n=t.$(this);e.open(n.parent()[0]==e.element[0]?n:n.parent("li"))}),this.find(this.options.lists).each(function(){var i=t.$(this),n=i.parent(),o=n.hasClass("uk-active");i.wrap('<div style="overflow:hidden;height:0;position:relative;"></div>'),n.data("list-container",i.parent()[o?"removeClass":"addClass"]("uk-hidden")),n.attr("aria-expanded",n.hasClass("uk-open")),o&&e.open(n,!0)})},open:function(i,n){var o=this,s=this.element,a=t.$(i),r=a.data("list-container");this.options.multiple||s.children(".uk-open").not(i).each(function(){var e=t.$(this);e.data("list-container")&&e.data("list-container").stop().animate({height:0},function(){t.$(this).parent().removeClass("uk-open").end().addClass("uk-hidden")})}),a.toggleClass("uk-open"),a.attr("aria-expanded",a.hasClass("uk-open")),r&&(a.hasClass("uk-open")&&r.removeClass("uk-hidden"),n?(r.stop().height(a.hasClass("uk-open")?"auto":0),a.hasClass("uk-open")||r.addClass("uk-hidden"),this.trigger("display.uk.check")):r.stop().animate({height:a.hasClass("uk-open")?e(r.find("ul:first")):0},function(){a.hasClass("uk-open")?r.css("height",""):r.addClass("uk-hidden"),o.trigger("display.uk.check")}))}})}(UIkit),function(t){"use strict";var e={x:window.scrollX,y:window.scrollY},i=(t.$win,t.$doc,t.$html),n={show:function(n){if(n=t.$(n),n.length){var o=t.$("body"),s=n.find(".uk-offcanvas-bar:first"),a="right"==t.langdirection,r=s.hasClass("uk-offcanvas-bar-flip")?-1:1,l=r*(a?-1:1),c=window.innerWidth-o.width();e={x:window.pageXOffset,y:window.pageYOffset},n.addClass("uk-active"),o.css({width:window.innerWidth-c,height:window.innerHeight}).addClass("uk-offcanvas-page"),o.css(a?"margin-right":"margin-left",(a?-1:1)*(s.outerWidth()*l)).width(),i.css("margin-top",-1*e.y),s.addClass("uk-offcanvas-bar-show"),this._initElement(n),s.trigger("show.uk.offcanvas",[n,s]),n.attr("aria-hidden","false")}},hide:function(n){var o=t.$("body"),s=t.$(".uk-offcanvas.uk-active"),a="right"==t.langdirection,r=s.find(".uk-offcanvas-bar:first"),l=function(){o.removeClass("uk-offcanvas-page").css({width:"",height:"","margin-left":"","margin-right":""}),s.removeClass("uk-active"),r.removeClass("uk-offcanvas-bar-show"),i.css("margin-top",""),window.scrollTo(e.x,e.y),r.trigger("hide.uk.offcanvas",[s,r]),s.attr("aria-hidden","true")};s.length&&(t.support.transition&&!n?(o.one(t.support.transition.end,function(){l()}).css(a?"margin-right":"margin-left",""),setTimeout(function(){r.removeClass("uk-offcanvas-bar-show")},0)):l())},_initElement:function(e){e.data("OffcanvasInit")||(e.on("click.uk.offcanvas swipeRight.uk.offcanvas swipeLeft.uk.offcanvas",function(e){var i=t.$(e.target);if(!e.type.match(/swipe/)&&!i.hasClass("uk-offcanvas-close")){if(i.hasClass("uk-offcanvas-bar"))return;if(i.parents(".uk-offcanvas-bar:first").length)return}e.stopImmediatePropagation(),n.hide()}),e.on("click","a[href^='#']",function(e){var i=t.$(this),o=i.attr("href");"#"!=o&&(t.$doc.one("hide.uk.offcanvas",function(){var e;try{e=t.$(o)}catch(n){e=""}e.length||(e=t.$('[name="'+o.replace("#","")+'"]')),e.length&&i.attr("data-uk-smooth-scroll")&&t.Utils.scrollToElement?t.Utils.scrollToElement(e,t.Utils.options(i.attr("data-uk-smooth-scroll")||"{}")):window.location.href=o}),n.hide())}),e.data("OffcanvasInit",!0))}};t.component("offcanvasTrigger",{boot:function(){i.on("click.offcanvas.uikit","[data-uk-offcanvas]",function(e){e.preventDefault();var i=t.$(this);if(!i.data("offcanvasTrigger")){t.offcanvasTrigger(i,t.Utils.options(i.attr("data-uk-offcanvas")));i.trigger("click")}}),i.on("keydown.uk.offcanvas",function(t){27===t.keyCode&&n.hide()})},init:function(){var e=this;this.options=t.$.extend({target:e.element.is("a")?e.element.attr("href"):!1},this.options),this.on("click",function(t){t.preventDefault(),n.show(e.options.target)})}}),t.offcanvas=n}(UIkit),function(t){"use strict";function e(e,i,n){var o,s=t.$.Deferred(),a=e,r=e;return n[0]===i[0]?(s.resolve(),s.promise()):("object"==typeof e&&(a=e[0],r=e[1]||e[0]),t.$body.css("overflow-x","hidden"),o=function(){i&&i.hide().removeClass("uk-active "+r+" uk-animation-reverse"),n.addClass(a).one(t.support.animation.end,function(){n.removeClass(""+a).css({opacity:"",display:""}),s.resolve(),t.$body.css("overflow-x",""),i&&i.css({opacity:"",display:""})}.bind(this)).show()},n.css("animation-duration",this.options.duration+"ms"),i&&i.length?(i.css("animation-duration",this.options.duration+"ms"),i.css("display","none").addClass(r+" uk-animation-reverse").one(t.support.animation.end,function(){o()}.bind(this)).css("display","")):(n.addClass("uk-active"),o()),s.promise())}var i;t.component("switcher",{defaults:{connect:!1,toggle:">*",active:0,animation:!1,duration:200,swiping:!0},animating:!1,boot:function(){t.ready(function(e){t.$("[data-uk-switcher]",e).each(function(){var e=t.$(this);if(!e.data("switcher")){t.switcher(e,t.Utils.options(e.attr("data-uk-switcher")))}})})},init:function(){var e=this;if(this.on("click.uikit.switcher",this.options.toggle,function(t){t.preventDefault(),e.show(this)}),this.options.connect){this.connect=t.$(this.options.connect),this.connect.find(".uk-active").removeClass(".uk-active"),this.connect.length&&(this.connect.children().attr("aria-hidden","true"),this.connect.on("click","[data-uk-switcher-item]",function(i){i.preventDefault();var n=t.$(this).attr("data-uk-switcher-item");if(e.index!=n)switch(n){case"next":case"previous":e.show(e.index+("next"==n?1:-1));break;default:e.show(parseInt(n,10))}}),this.options.swiping&&this.connect.on("swipeRight swipeLeft",function(t){t.preventDefault(),window.getSelection().toString()||e.show(e.index+("swipeLeft"==t.type?1:-1))}));var i=this.find(this.options.toggle),n=i.filter(".uk-active");if(n.length)this.show(n,!1);else{if(this.options.active===!1)return;n=i.eq(this.options.active),this.show(n.length?n:i.eq(0),!1)}i.not(n).attr("aria-expanded","false"),n.attr("aria-expanded","true"),this.on("changed.uk.dom",function(){e.connect=t.$(e.options.connect)})}},show:function(n,o){if(!this.animating){if(isNaN(n))n=t.$(n);else{var s=this.find(this.options.toggle);n=0>n?s.length-1:n,n=s.eq(s[n]?n:0)}var a=this,s=this.find(this.options.toggle),r=t.$(n),l=i[this.options.animation]||function(t,n){if(!a.options.animation)return i.none.apply(a);var o=a.options.animation.split(",");return 1==o.length&&(o[1]=o[0]),o[0]=o[0].trim(),o[1]=o[1].trim(),e.apply(a,[o,t,n])};o!==!1&&t.support.animation||(l=i.none),r.hasClass("uk-disabled")||(s.attr("aria-expanded","false"),r.attr("aria-expanded","true"),s.filter(".uk-active").removeClass("uk-active"),r.addClass("uk-active"),this.options.connect&&this.connect.length&&(this.index=this.find(this.options.toggle).index(r),-1==this.index&&(this.index=0),this.connect.each(function(){var e=t.$(this),i=t.$(e.children()),n=t.$(i.filter(".uk-active")),o=t.$(i.eq(a.index));a.animating=!0,l.apply(a,[n,o]).then(function(){n.removeClass("uk-active"),o.addClass("uk-active"),n.attr("aria-hidden","true"),o.attr("aria-hidden","false"),t.Utils.checkDisplay(o,!0),a.animating=!1})})),this.trigger("show.uk.switcher",[r]))}}}),i={none:function(){var e=t.$.Deferred();return e.resolve(),e.promise()},fade:function(t,i){return e.apply(this,["uk-animation-fade",t,i])},"slide-bottom":function(t,i){return e.apply(this,["uk-animation-slide-bottom",t,i])},"slide-top":function(t,i){return e.apply(this,["uk-animation-slide-top",t,i])},"slide-vertical":function(t,i,n){var o=["uk-animation-slide-top","uk-animation-slide-bottom"];return t&&t.index()>i.index()&&o.reverse(),e.apply(this,[o,t,i])},"slide-left":function(t,i){return e.apply(this,["uk-animation-slide-left",t,i])},"slide-right":function(t,i){return e.apply(this,["uk-animation-slide-right",t,i])},"slide-horizontal":function(t,i,n){var o=["uk-animation-slide-right","uk-animation-slide-left"];return t&&t.index()>i.index()&&o.reverse(),e.apply(this,[o,t,i])},scale:function(t,i){return e.apply(this,["uk-animation-scale-up",t,i])}},t.switcher.animations=i}(UIkit),function(t){"use strict";t.component("tab",{defaults:{target:">li:not(.uk-tab-responsive, .uk-disabled)",connect:!1,active:0,animation:!1,duration:200,swiping:!0},boot:function(){t.ready(function(e){t.$("[data-uk-tab]",e).each(function(){var e=t.$(this);if(!e.data("tab")){t.tab(e,t.Utils.options(e.attr("data-uk-tab")))}})})},init:function(){var e=this;this.current=!1,this.on("click.uikit.tab",this.options.target,function(i){if(i.preventDefault(),!e.switcher||!e.switcher.animating){var n=e.find(e.options.target).not(this);n.removeClass("uk-active").blur(),e.trigger("change.uk.tab",[t.$(this).addClass("uk-active"),e.current]),e.current=t.$(this),e.options.connect||(n.attr("aria-expanded","false"),t.$(this).attr("aria-expanded","true"))}}),this.options.connect&&(this.connect=t.$(this.options.connect)),this.responsivetab=t.$('<li class="uk-tab-responsive uk-active"><a></a></li>').append('<div class="uk-dropdown uk-dropdown-small"><ul class="uk-nav uk-nav-dropdown"></ul><div>'),this.responsivetab.dropdown=this.responsivetab.find(".uk-dropdown"),this.responsivetab.lst=this.responsivetab.dropdown.find("ul"),this.responsivetab.caption=this.responsivetab.find("a:first"),this.element.hasClass("uk-tab-bottom")&&this.responsivetab.dropdown.addClass("uk-dropdown-up"),this.responsivetab.lst.on("click.uikit.tab","a",function(i){i.preventDefault(),i.stopPropagation();var n=t.$(this);e.element.children("li:not(.uk-tab-responsive)").eq(n.data("index")).trigger("click")}),this.on("show.uk.switcher change.uk.tab",function(t,i){e.responsivetab.caption.html(i.text())}),this.element.append(this.responsivetab),this.options.connect&&(this.switcher=t.switcher(this.element,{toggle:">li:not(.uk-tab-responsive)",connect:this.options.connect,active:this.options.active,animation:this.options.animation,duration:this.options.duration,swiping:this.options.swiping})),t.dropdown(this.responsivetab,{mode:"click"}),e.trigger("change.uk.tab",[this.element.find(this.options.target).not(".uk-tab-responsive").filter(".uk-active")]),this.check(),t.$win.on("resize orientationchange",t.Utils.debounce(function(){e.element.is(":visible")&&e.check()},100)),this.on("display.uk.check",function(){e.element.is(":visible")&&e.check()})},check:function(){var e=this.element.children("li:not(.uk-tab-responsive)").removeClass("uk-hidden");if(!e.length)return void this.responsivetab.addClass("uk-hidden");var i,n,o,s=e.eq(0).offset().top+Math.ceil(e.eq(0).height()/2),a=!1;if(this.responsivetab.lst.empty(),e.each(function(){t.$(this).offset().top>s&&(a=!0)}),a)for(var r=0;r<e.length;r++)i=t.$(e.eq(r)),n=i.find("a"),"none"==i.css("float")||i.attr("uk-dropdown")||(i.hasClass("uk-disabled")||(o=i[0].outerHTML.replace("<a ",'<a data-index="'+r+'" '),this.responsivetab.lst.append(o)),i.addClass("uk-hidden"));this.responsivetab[this.responsivetab.lst.children("li").length?"removeClass":"addClass"]("uk-hidden")}})}(UIkit),function(t){"use strict";t.component("cover",{defaults:{automute:!0},boot:function(){t.ready(function(e){t.$("[data-uk-cover]",e).each(function(){var e=t.$(this);if(!e.data("cover")){t.cover(e,t.Utils.options(e.attr("data-uk-cover")))}})})},init:function(){if(this.parent=this.element.parent(),t.$win.on("load resize orientationchange",t.Utils.debounce(function(){this.check()}.bind(this),100)),this.on("display.uk.check",function(t){this.element.is(":visible")&&this.check()}.bind(this)),this.check(),this.element.is("iframe")&&this.options.automute){var e=this.element.attr("src");this.element.attr("src","").on("load",function(){this.contentWindow.postMessage('{ "event": "command", "func": "mute", "method":"setVolume", "value":0}',"*")}).attr("src",[e,e.indexOf("?")>-1?"&":"?","enablejsapi=1&api=1"].join(""))}},check:function(){this.element.css({width:"",height:""}),this.dimension={w:this.element.width(),h:this.element.height()},this.element.attr("width")&&!isNaN(this.element.attr("width"))&&(this.dimension.w=this.element.attr("width")),this.element.attr("height")&&!isNaN(this.element.attr("height"))&&(this.dimension.h=this.element.attr("height")),this.ratio=this.dimension.w/this.dimension.h;var t,e,i=this.parent.width(),n=this.parent.height();i/this.ratio<n?(t=Math.ceil(n*this.ratio),e=n):(t=i,e=Math.ceil(i/this.ratio)),this.element.css({width:t,height:e})}})}(UIkit),function(t){var e;window.UIkit&&(e=t(UIkit)),"function"==typeof define&&define.amd&&define("uikit-slider",["uikit"],function(){return e||t(UIkit)})}(function(t){"use strict";var e,i,n,o,s={};return t.component("slider",{defaults:{center:!1,threshold:10,infinite:!0,autoplay:!1,autoplayInterval:7e3,pauseOnHover:!0,activecls:"uk-active"},boot:function(){t.ready(function(e){setTimeout(function(){t.$("[data-uk-slider]",e).each(function(){var e=t.$(this);e.data("slider")||t.slider(e,t.Utils.options(e.attr("data-uk-slider")))})},0)})},init:function(){var a=this;this.container=this.element.find(".uk-slider"),this.focus=0,t.$win.on("resize load",t.Utils.debounce(function(){a.resize(!0)},100)),this.on("click.uikit.slider","[data-uk-slider-item]",function(e){e.preventDefault();var i=t.$(this).attr("data-uk-slider-item");if(a.focus!=i)switch(a.stop(),i){case"next":case"previous":a["next"==i?"next":"previous"]();break;default:a.updateFocus(parseInt(i,10))}}),this.container.on({"touchstart mousedown":function(r){r.originalEvent&&r.originalEvent.touches&&(r=r.originalEvent.touches[0]),r.button&&2==r.button||!a.active||(a.stop(),n=t.$(r.target).is("a")?t.$(r.target):t.$(r.target).parents("a:first"),o=!1,n.length&&n.one("click",function(t){o&&t.preventDefault()}),i=function(t){o=!0,e=a,s={touchx:parseInt(t.pageX,10),dir:1,focus:a.focus,base:a.options.center?"center":"area"},t.originalEvent&&t.originalEvent.touches&&(t=t.originalEvent.touches[0]),e.element.data({"pointer-start":{x:parseInt(t.pageX,10),y:parseInt(t.pageY,10)},"pointer-pos-start":a.pos}),a.container.addClass("uk-drag"),i=!1},i.x=parseInt(r.pageX,10),i.threshold=a.options.threshold)},mouseenter:function(){a.options.pauseOnHover&&(a.hovering=!0)},mouseleave:function(){a.hovering=!1}}),this.resize(!0),this.on("display.uk.check",function(){a.element.is(":visible")&&a.resize(!0)}),this.element.find("a,img").attr("draggable","false"),this.options.autoplay&&this.start()},resize:function(e){var i,n,o,s,a=this,r=0,l=0;return this.items=this.container.children().filter(":visible"),this.vp=this.element[0].getBoundingClientRect().width,this.container.css({"min-width":"","min-height":""}),this.items.each(function(e){i=t.$(this),s=i.css({left:"",width:""})[0].getBoundingClientRect(),n=s.width,o=i.width(),l=Math.max(l,s.height),i.css({left:r,width:n}).data({idx:e,left:r,width:n,cwidth:o,area:r+n,center:r-(a.vp/2-o/2)}),r+=n}),this.container.css({"min-width":r,"min-height":l}),this.options.infinite&&r<=2*this.vp&&!this.itemsResized?(this.container.children().each(function(t){a.container.append(a.items.eq(t).clone(!0).attr("id",""))}).each(function(t){a.container.append(a.items.eq(t).clone(!0).attr("id",""))}),this.itemsResized=!0,this.resize()):(this.cw=r,this.pos=0,this.active=r>=this.vp,this.container.css({"-ms-transform":"","-webkit-transform":"",transform:""}),void(e&&this.updateFocus(this.focus)))},updatePos:function(t){this.pos=t,this.container.css({"-ms-transform":"translateX("+t+"px)","-webkit-transform":"translateX("+t+"px)",transform:"translateX("+t+"px)"})},updateFocus:function(t,e){if(this.active){e=e||(t>this.focus?1:-1);var i,n,o=this.items.eq(t);if(this.options.infinite&&this.infinite(t,e),this.options.center)this.updatePos(-1*o.data("center")),this.items.filter("."+this.options.activecls).removeClass(this.options.activecls),o.addClass(this.options.activecls);else if(this.options.infinite)this.updatePos(-1*o.data("left"));else{for(i=0,n=t;n<this.items.length;n++)i+=this.items.eq(n).data("width");if(i>this.vp)this.updatePos(-1*o.data("left"));else if(1==e){for(i=0,n=this.items.length-1;n>=0;n--){if(i+=this.items.eq(n).data("width"),i==this.vp){t=n;break}if(i>this.vp){t=n<this.items.length-1?n+1:n;break}}i>this.vp?this.updatePos(-1*(this.container.width()-this.vp)):this.updatePos(-1*this.items.eq(t).data("left"))}}this.focus=t,this.trigger("focusitem.uk.slider",[t,this.items.eq(t),this])}},next:function(){var t=this.items[this.focus+1]?this.focus+1:this.options.infinite?0:this.focus;this.updateFocus(t,1)},previous:function(){var t=this.items[this.focus-1]?this.focus-1:this.options.infinite?this.items[this.focus-1]?this.items-1:this.items.length-1:this.focus;this.updateFocus(t,-1)},start:function(){this.stop();var t=this;this.interval=setInterval(function(){t.hovering||t.next()},this.options.autoplayInterval)},stop:function(){this.interval&&clearInterval(this.interval)},infinite:function(t,e){var i,n=this,o=this.items.eq(t),s=t,a=[],r=0;if(1==e){for(i=0;i<this.items.length&&(s!=t&&(r+=this.items.eq(s).data("width"),a.push(this.items.eq(s))),!(r>this.vp));i++)s=s+1==this.items.length?0:s+1;a.length&&a.forEach(function(t){var e=o.data("area");t.css({left:e}).data({left:e,area:e+t.data("width"),center:e-(n.vp/2-t.data("cwidth")/2)}),o=t})}else{for(i=this.items.length-1;i>-1&&(r+=this.items.eq(s).data("width"),s!=t&&a.push(this.items.eq(s)),!(r>this.vp));i--)s=s-1==-1?this.items.length-1:s-1;a.length&&a.forEach(function(t){var e=o.data("left")-t.data("width");t.css({left:e}).data({left:e,area:e+t.data("width"),center:e-(n.vp/2-t.data("cwidth")/2)}),o=t})}}}),t.$doc.on("mousemove.uikit.slider touchmove.uikit.slider",function(t){if(t.originalEvent&&t.originalEvent.touches&&(t=t.originalEvent.touches[0]),i&&Math.abs(t.pageX-i.x)>i.threshold&&(window.getSelection().toString()?e=i=!1:i(t)),e){var n,o,a,r,l,c,h,u,d,f;if(t.clientX||t.clientY?n=t.clientX:(t.pageX||t.pageY)&&(n=t.pageX-document.body.scrollLeft-document.documentElement.scrollLeft),l=s.focus,o=n-e.element.data("pointer-start").x,a=e.element.data("pointer-pos-start")+o,r=n>e.element.data("pointer-start").x?-1:1,c=e.items.eq(s.focus),1==r)for(h=c.data("left")+Math.abs(o),u=0,d=s.focus;u<e.items.length;u++){if(f=e.items.eq(d),d!=s.focus&&f.data("left")<h&&f.data("area")>h){l=d;break}d=d+1==e.items.length?0:d+1}else for(h=c.data("left")-Math.abs(o),u=0,d=s.focus;u<e.items.length;u++){if(f=e.items.eq(d),d!=s.focus&&f.data("area")<=c.data("left")&&f.data("center")<h){l=d;break}d=d-1==-1?e.items.length-1:d-1}e.options.infinite&&l!=s._focus&&e.infinite(l,r),e.updatePos(a),s.dir=r,s._focus=l,s.touchx=parseInt(t.pageX,10),s.diff=h}}),t.$doc.on("mouseup.uikit.slider touchend.uikit.slider",function(t){if(e){e.container.removeClass("uk-drag"),e.items.eq(s.focus);var n,o,a,r=!1;if(1==s.dir)for(o=0,a=s.focus;o<e.items.length;o++){if(n=e.items.eq(a),a!=s.focus&&n.data("left")>s.diff){r=a;break}a=a+1==e.items.length?0:a+1}else for(o=0,a=s.focus;o<e.items.length;o++){if(n=e.items.eq(a),a!=s.focus&&n.data("left")<s.diff){r=a;break}a=a-1==-1?e.items.length-1:a-1}e.updateFocus(r!==!1?r:s._focus)}e=i=!1}),t.slider}),function(t){var e;window.UIkit&&(e=t(UIkit)),"function"==typeof define&&define.amd&&define("uikit-lightbox",["uikit"],function(){return e||t(UIkit)})}(function(t){"use strict";function e(e){return i?(i.lightbox=e,i):(i=t.$(['<div class="uk-modal">','<div class="uk-modal-dialog uk-modal-dialog-lightbox uk-slidenav-position" style="margin-left:auto;margin-right:auto;width:200px;height:200px;top:'+Math.abs(window.innerHeight/2-200)+'px;">','<a href="#" class="uk-modal-close uk-close uk-close-alt"></a>','<div class="uk-lightbox-content"></div>','<div class="uk-modal-spinner uk-hidden"></div>',"</div>","</div>"].join("")).appendTo("body"),i.dialog=i.find(".uk-modal-dialog:first"),i.content=i.find(".uk-lightbox-content:first"),i.loader=i.find(".uk-modal-spinner:first"),i.closer=i.find(".uk-close.uk-close-alt"),i.modal=t.modal(i,{modal:!1}),i.on("swipeRight swipeLeft",function(t){i.lightbox["swipeLeft"==t.type?"next":"previous"]()}).on("click","[data-lightbox-previous], [data-lightbox-next]",function(e){e.preventDefault(),i.lightbox[t.$(this).is("[data-lightbox-next]")?"next":"previous"]()}),i.on("hide.uk.modal",function(t){i.content.html("")}),t.$win.on("load resize orientationchange",t.Utils.debounce(function(e){i.is(":visible")&&!t.Utils.isFullscreen()&&i.lightbox.fitSize()}.bind(this),100)),i.lightbox=e,i)}var i,n={};return t.component("lightbox",{defaults:{group:!1,duration:400,keyboard:!0},index:0,items:!1,boot:function(){t.$html.on("click","[data-uk-lightbox]",function(e){e.preventDefault();var i=t.$(this);i.data("lightbox")||t.lightbox(i,t.Utils.options(i.attr("data-uk-lightbox"))),i.data("lightbox").show(i)}),t.$doc.on("keyup",function(t){if(i&&i.is(":visible")&&i.lightbox.options.keyboard)switch(t.preventDefault(),t.keyCode){case 37:i.lightbox.previous();break;case 39:i.lightbox.next()}})},init:function(){var e=[];if(this.index=0,this.siblings=[],this.element&&this.element.length){var i=this.options.group?t.$(['[data-uk-lightbox*="'+this.options.group+'"]',"[data-uk-lightbox*='"+this.options.group+"']"].join(",")):this.element;i.each(function(){var i=t.$(this);e.push({source:i.attr("href"),title:i.attr("title"),type:i.attr("data-lightbox-type")||"auto",link:i})}),this.index=i.index(this.element),this.siblings=e}else this.options.group&&this.options.group.length&&(this.siblings=this.options.group);this.trigger("lightbox-init",[this])},show:function(i){this.modal=e(this),this.modal.dialog.stop(),this.modal.content.stop();var n,o,s=this,a=t.$.Deferred();i=i||0,"object"==typeof i&&this.siblings.forEach(function(t,e){i[0]===t.link[0]&&(i=e)}),0>i?i=this.siblings.length-i:this.siblings[i]||(i=0),o=this.siblings[i],n={lightbox:s,source:o.source,type:o.type,index:i,promise:a,title:o.title,item:o,meta:{content:"",width:null,height:null}},this.index=i,this.modal.content.empty(),this.modal.is(":visible")||(this.modal.content.css({width:"",height:""}).empty(),this.modal.modal.show()),this.modal.loader.removeClass("uk-hidden"),a.promise().done(function(){s.data=n,s.fitSize(n)}).fail(function(){n.meta.content='<div class="uk-position-cover uk-flex uk-flex-middle uk-flex-center"><strong>Loading resource failed!</strong></div>',n.meta.width=400,n.meta.height=300,s.data=n,s.fitSize(n)}),s.trigger("showitem.uk.lightbox",[n])},fitSize:function(){var e=this,i=this.data,n=this.modal.dialog.outerWidth()-this.modal.dialog.width(),o=parseInt(this.modal.dialog.css("margin-top"),10),s=parseInt(this.modal.dialog.css("margin-bottom"),10),a=o+s,r=i.meta.content,l=e.options.duration;this.siblings.length>1&&(r=[r,'<a href="#" class="uk-slidenav uk-slidenav-contrast uk-slidenav-previous uk-hidden-touch" data-lightbox-previous></a>','<a href="#" class="uk-slidenav uk-slidenav-contrast uk-slidenav-next uk-hidden-touch" data-lightbox-next></a>'].join(""));var c,h,u=t.$("<div>&nbsp;</div>").css({opacity:0,position:"absolute",top:0,left:0,width:"100%","max-width":e.modal.dialog.css("max-width"),padding:e.modal.dialog.css("padding"),margin:e.modal.dialog.css("margin")}),d=i.meta.width,f=i.meta.height;u.appendTo("body").width(),c=u.width(),h=window.innerHeight-a,u.remove(),this.modal.dialog.find(".uk-modal-caption").remove(),i.title&&(this.modal.dialog.append('<div class="uk-modal-caption">'+i.title+"</div>"),h-=this.modal.dialog.find(".uk-modal-caption").outerHeight()),c<i.meta.width&&(f=Math.floor(f*(c/d)),d=c),f>h&&(f=Math.floor(h),d=Math.ceil(i.meta.width*(h/i.meta.height))),this.modal.content.css("opacity",0).width(d).html(r),"iframe"==i.type&&this.modal.content.find("iframe:first").height(f);var p=f+n,g=Math.floor(window.innerHeight/2-p/2)-a;0>g&&(g=0),this.modal.closer.addClass("uk-hidden"),e.modal.data("mwidth")==d&&e.modal.data("mheight")==f&&(l=0),this.modal.dialog.animate({width:d+n,height:f+n,top:g},l,"swing",function(){e.modal.loader.addClass("uk-hidden"),e.modal.content.css({width:""}).animate({opacity:1},function(){e.modal.closer.removeClass("uk-hidden")}),e.modal.data({mwidth:d,mheight:f})})},next:function(){this.show(this.siblings[this.index+1]?this.index+1:0);
},previous:function(){this.show(this.siblings[this.index-1]?this.index-1:this.siblings.length-1)}}),t.plugin("lightbox","image",{init:function(t){t.on("showitem.uk.lightbox",function(t,e){if("image"==e.type||e.source&&e.source.match(/\.(jpg|jpeg|png|gif|svg)$/i)){var i=function(t,i,n){e.meta={content:'<img class="uk-responsive-width" width="'+i+'" height="'+n+'" src ="'+t+'">',width:i,height:n},e.type="image",e.promise.resolve()};if(n[e.source])i(e.source,n[e.source].width,n[e.source].height);else{var o=new Image;o.onerror=function(){e.promise.reject("Loading image failed")},o.onload=function(){n[e.source]={width:o.width,height:o.height},i(e.source,n[e.source].width,n[e.source].height)},o.src=e.source}}})}}),t.plugin("lightbox","youtube",{init:function(t){var e=/(\/\/.*?youtube\.[a-z]+)\/watch\?v=([^&]+)&?(.*)/,i=/youtu\.be\/(.*)/;t.on("showitem.uk.lightbox",function(t,o){var s,a,r=function(t,e,i){o.meta={content:'<iframe src="//www.youtube.com/embed/'+t+'" width="'+e+'" height="'+i+'" style="max-width:100%;"></iframe>',width:e,height:i},o.type="iframe",o.promise.resolve()};if((a=o.source.match(e))&&(s=a[2]),(a=o.source.match(i))&&(s=a[1]),s){if(n[s])r(s,n[s].width,n[s].height);else{var l=new Image,c=!1;l.onerror=function(){n[s]={width:640,height:320},r(s,n[s].width,n[s].height)},l.onload=function(){120==l.width&&90==l.height?c?(n[s]={width:640,height:320},r(s,n[s].width,n[s].height)):(c=!0,l.src="//img.youtube.com/vi/"+s+"/0.jpg"):(n[s]={width:l.width,height:l.height},r(s,l.width,l.height))},l.src="//img.youtube.com/vi/"+s+"/maxresdefault.jpg"}t.stopImmediatePropagation()}})}}),t.plugin("lightbox","vimeo",{init:function(e){var i,o=/(\/\/.*?)vimeo\.[a-z]+\/([0-9]+).*?/;e.on("showitem.uk.lightbox",function(e,s){var a,r=function(t,e,i){s.meta={content:'<iframe src="//player.vimeo.com/video/'+t+'" width="'+e+'" height="'+i+'" style="width:100%;box-sizing:border-box;"></iframe>',width:e,height:i},s.type="iframe",s.promise.resolve()};(i=s.source.match(o))&&(a=i[2],n[a]?r(a,n[a].width,n[a].height):t.$.ajax({type:"GET",url:"http://vimeo.com/api/oembed.json?url="+encodeURI(s.source),jsonp:"callback",dataType:"jsonp",success:function(t){n[a]={width:t.width,height:t.height},r(a,n[a].width,n[a].height)}}),e.stopImmediatePropagation())})}}),t.plugin("lightbox","video",{init:function(e){e.on("showitem.uk.lightbox",function(e,i){var o=function(t,e,n){i.meta={content:'<video class="uk-responsive-width" src="'+t+'" width="'+e+'" height="'+n+'" controls></video>',width:e,height:n},i.type="video",i.promise.resolve()};if("video"==i.type||i.source.match(/\.(mp4|webm|ogv)$/i))if(n[i.source])o(i.source,n[i.source].width,n[i.source].height);else var s=t.$('<video style="position:fixed;visibility:hidden;top:-10000px;"></video>').attr("src",i.source).appendTo("body"),a=setInterval(function(){s[0].videoWidth&&(clearInterval(a),n[i.source]={width:s[0].videoWidth,height:s[0].videoHeight},o(i.source,n[i.source].width,n[i.source].height),s.remove())},20)})}}),t.lightbox.create=function(e,i){if(e){var n,o=[];return e.forEach(function(e){o.push(t.$.extend({source:"",title:"",type:"auto",link:!1},"string"==typeof e?{source:e}:e))}),n=t.lightbox(t.$.extend({},i,{group:o}))}},t.lightbox}),function(t){var e;window.UIkit&&(e=t(UIkit)),"function"==typeof define&&define.amd&&define("uikit-accordion",["uikit"],function(){return e||t(UIkit)})}(function(t){"use strict";function e(e){var i=t.$(e),n="auto";if(i.is(":visible"))n=i.outerHeight();else{var o={position:i.css("position"),visibility:i.css("visibility"),display:i.css("display")};n=i.css({position:"absolute",visibility:"hidden",display:"block"}).outerHeight(),i.css(o)}return n}return t.component("accordion",{defaults:{showfirst:!0,collapse:!0,animate:!0,easing:"swing",duration:300,toggle:".uk-accordion-title",containers:".uk-accordion-content",clsactive:"uk-active"},boot:function(){t.ready(function(e){setTimeout(function(){t.$("[data-uk-accordion]",e).each(function(){var e=t.$(this);e.data("accordion")||t.accordion(e,t.Utils.options(e.attr("data-uk-accordion")))})},0)})},init:function(){var e=this;this.element.on("click.uikit.accordion",this.options.toggle,function(i){i.preventDefault(),e.toggleItem(t.$(this).data("wrapper"),e.options.animate,e.options.collapse)}),this.update(),this.options.showfirst&&this.toggleItem(this.toggle.eq(0).data("wrapper"),!1,!1)},toggleItem:function(i,n,o){var s=this;i.data("toggle").toggleClass(this.options.clsactive),i.data("content").toggleClass(this.options.clsactive);var a=i.data("toggle").hasClass(this.options.clsactive);o&&(this.toggle.not(i.data("toggle")).removeClass(this.options.clsactive),this.content.not(i.data("content")).removeClass(this.options.clsactive).parent().stop().css("overflow","hidden").animate({height:0},{easing:this.options.easing,duration:n?this.options.duration:0}).attr("aria-expanded","false")),i.stop().css("overflow","hidden"),n?i.animate({height:a?e(i.data("content")):0},{easing:this.options.easing,duration:this.options.duration,complete:function(){a&&(i.css({overflow:"",height:"auto"}),t.Utils.checkDisplay(i.data("content"))),s.trigger("display.uk.check")}}):(i.height(a?"auto":0),a&&(i.css({overflow:""}),t.Utils.checkDisplay(i.data("content"))),this.trigger("display.uk.check")),i.attr("aria-expanded",a),this.element.trigger("toggle.uk.accordion",[a,i.data("toggle"),i.data("content")])},update:function(){var e,i,n,o=this;this.toggle=this.find(this.options.toggle),this.content=this.find(this.options.containers),this.content.each(function(s){e=t.$(this),e.parent().data("wrapper")?i=e.parent():(i=t.$(this).wrap('<div data-wrapper="true" style="overflow:hidden;height:0;position:relative;"></div>').parent(),i.attr("aria-expanded","false")),n=o.toggle.eq(s),i.data("toggle",n),i.data("content",e),n.data("wrapper",i),e.data("wrapper",i)}),this.element.trigger("update.uk.accordion",[this])}}),t.accordion}),function(){"use strict";var t=this,e=t.Chart,i=function(t){this.canvas=t.canvas,this.ctx=t;var e=function(t,e){return t["offset"+e]?t["offset"+e]:document.defaultView.getComputedStyle(t).getPropertyValue(e)},i=this.width=e(t.canvas,"Width"),o=this.height=e(t.canvas,"Height");t.canvas.width=i,t.canvas.height=o;var i=this.width=t.canvas.width,o=this.height=t.canvas.height;return this.aspectRatio=this.width/this.height,n.retinaScale(this),this};i.defaults={global:{animation:!0,animationSteps:60,animationEasing:"easeOutQuart",showScale:!0,scaleOverride:!1,scaleSteps:null,scaleStepWidth:null,scaleStartValue:null,scaleLineColor:"rgba(0,0,0,.1)",scaleLineWidth:1,scaleShowLabels:!0,scaleLabel:"<%=value%>",scaleIntegersOnly:!0,scaleBeginAtZero:!1,scaleFontFamily:"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",scaleFontSize:12,scaleFontStyle:"normal",scaleFontColor:"#666",responsive:!1,maintainAspectRatio:!0,showTooltips:!0,customTooltips:!1,tooltipEvents:["mousemove","touchstart","touchmove","mouseout"],tooltipFillColor:"rgba(0,0,0,0.8)",tooltipFontFamily:"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",tooltipFontSize:14,tooltipFontStyle:"normal",tooltipFontColor:"#fff",tooltipTitleFontFamily:"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",tooltipTitleFontSize:14,tooltipTitleFontStyle:"bold",tooltipTitleFontColor:"#fff",tooltipYPadding:6,tooltipXPadding:6,tooltipCaretSize:8,tooltipCornerRadius:6,tooltipXOffset:10,tooltipTemplate:"<%if (label){%><%=label%>: <%}%><%= value %>",multiTooltipTemplate:"<%= value %>",multiTooltipKeyBackground:"#fff",onAnimationProgress:function(){},onAnimationComplete:function(){}}},i.types={};var n=i.helpers={},o=n.each=function(t,e,i){var n=Array.prototype.slice.call(arguments,3);if(t)if(t.length===+t.length){var o;for(o=0;o<t.length;o++)e.apply(i,[t[o],o].concat(n))}else for(var s in t)e.apply(i,[t[s],s].concat(n))},s=n.clone=function(t){var e={};return o(t,function(i,n){t.hasOwnProperty(n)&&(e[n]=i)}),e},a=n.extend=function(t){return o(Array.prototype.slice.call(arguments,1),function(e){o(e,function(i,n){e.hasOwnProperty(n)&&(t[n]=i)})}),t},r=n.merge=function(){var t=Array.prototype.slice.call(arguments,0);return t.unshift({}),a.apply(null,t)},l=n.indexOf=function(t,e){if(Array.prototype.indexOf)return t.indexOf(e);for(var i=0;i<t.length;i++)if(t[i]===e)return i;return-1},c=(n.where=function(t,e){var i=[];return n.each(t,function(t){e(t)&&i.push(t)}),i},n.findNextWhere=function(t,e,i){i||(i=-1);for(var n=i+1;n<t.length;n++){var o=t[n];if(e(o))return o}},n.findPreviousWhere=function(t,e,i){i||(i=t.length);for(var n=i-1;n>=0;n--){var o=t[n];if(e(o))return o}},n.inherits=function(t){var e=this,i=t&&t.hasOwnProperty("constructor")?t.constructor:function(){return e.apply(this,arguments)},n=function(){this.constructor=i};return n.prototype=e.prototype,i.prototype=new n,i.extend=c,t&&a(i.prototype,t),i.__super__=e.prototype,i}),h=n.noop=function(){},u=n.uid=function(){var t=0;return function(){return"chart-"+t++}}(),d=n.warn=function(t){window.console&&"function"==typeof window.console.warn&&console.warn(t)},f=n.amd="function"==typeof define&&define.amd,p=n.isNumber=function(t){return!isNaN(parseFloat(t))&&isFinite(t)},g=n.max=function(t){return Math.max.apply(Math,t)},m=n.min=function(t){return Math.min.apply(Math,t)},v=(n.cap=function(t,e,i){if(p(e)){if(t>e)return e}else if(p(i)&&i>t)return i;return t},n.getDecimalPlaces=function(t){return t%1!==0&&p(t)?t.toString().split(".")[1].length:0}),y=n.radians=function(t){return t*(Math.PI/180)},b=(n.getAngleFromPoint=function(t,e){var i=e.x-t.x,n=e.y-t.y,o=Math.sqrt(i*i+n*n),s=2*Math.PI+Math.atan2(n,i);return 0>i&&0>n&&(s+=2*Math.PI),{angle:s,distance:o}},n.aliasPixel=function(t){return t%2===0?0:.5}),w=(n.splineCurve=function(t,e,i,n){var o=Math.sqrt(Math.pow(e.x-t.x,2)+Math.pow(e.y-t.y,2)),s=Math.sqrt(Math.pow(i.x-e.x,2)+Math.pow(i.y-e.y,2)),a=n*o/(o+s),r=n*s/(o+s);return{inner:{x:e.x-a*(i.x-t.x),y:e.y-a*(i.y-t.y)},outer:{x:e.x+r*(i.x-t.x),y:e.y+r*(i.y-t.y)}}},n.calculateOrderOfMagnitude=function(t){return Math.floor(Math.log(t)/Math.LN10)}),k=(n.calculateScaleRange=function(t,e,i,n,o){var s=2,a=Math.floor(e/(1.5*i)),r=s>=a,l=g(t),c=m(t);l===c&&(l+=.5,c>=.5&&!n?c-=.5:l+=.5);for(var h=Math.abs(l-c),u=w(h),d=Math.ceil(l/(1*Math.pow(10,u)))*Math.pow(10,u),f=n?0:Math.floor(c/(1*Math.pow(10,u)))*Math.pow(10,u),p=d-f,v=Math.pow(10,u),y=Math.round(p/v);(y>a||a>2*y)&&!r;)if(y>a)v*=2,y=Math.round(p/v),y%1!==0&&(r=!0);else if(o&&u>=0){if(v/2%1!==0)break;v/=2,y=Math.round(p/v)}else v/=2,y=Math.round(p/v);return r&&(y=s,v=p/y),{steps:y,stepValue:v,min:f,max:f+y*v}},n.template=function(t,e){function i(t,e){var i=/\W/.test(t)?new Function("obj","var p=[],print=function(){p.push.apply(p,arguments);};with(obj){p.push('"+t.replace(/[\r\t\n]/g," ").split("<%").join("	").replace(/((^|%>)[^\t]*)'/g,"$1\r").replace(/\t=(.*?)%>/g,"',$1,'").split("	").join("');").split("%>").join("p.push('").split("\r").join("\\'")+"');}return p.join('');"):n[t]=n[t];return e?i(e):i}if(t instanceof Function)return t(e);var n={};return i(t,e)}),x=(n.generateLabels=function(t,e,i,n){var s=new Array(e);return labelTemplateString&&o(s,function(e,o){s[o]=k(t,{value:i+n*(o+1)})}),s},n.easingEffects={linear:function(t){return t},easeInQuad:function(t){return t*t},easeOutQuad:function(t){return-1*t*(t-2)},easeInOutQuad:function(t){return(t/=.5)<1?.5*t*t:-.5*(--t*(t-2)-1)},easeInCubic:function(t){return t*t*t},easeOutCubic:function(t){return 1*((t=t/1-1)*t*t+1)},easeInOutCubic:function(t){return(t/=.5)<1?.5*t*t*t:.5*((t-=2)*t*t+2)},easeInQuart:function(t){return t*t*t*t},easeOutQuart:function(t){return-1*((t=t/1-1)*t*t*t-1)},easeInOutQuart:function(t){return(t/=.5)<1?.5*t*t*t*t:-.5*((t-=2)*t*t*t-2)},easeInQuint:function(t){return 1*(t/=1)*t*t*t*t},easeOutQuint:function(t){return 1*((t=t/1-1)*t*t*t*t+1)},easeInOutQuint:function(t){return(t/=.5)<1?.5*t*t*t*t*t:.5*((t-=2)*t*t*t*t+2)},easeInSine:function(t){return-1*Math.cos(t/1*(Math.PI/2))+1},easeOutSine:function(t){return 1*Math.sin(t/1*(Math.PI/2))},easeInOutSine:function(t){return-.5*(Math.cos(Math.PI*t/1)-1)},easeInExpo:function(t){return 0===t?1:1*Math.pow(2,10*(t/1-1))},easeOutExpo:function(t){return 1===t?1:1*(-Math.pow(2,-10*t/1)+1)},easeInOutExpo:function(t){return 0===t?0:1===t?1:(t/=.5)<1?.5*Math.pow(2,10*(t-1)):.5*(-Math.pow(2,-10*--t)+2)},easeInCirc:function(t){return t>=1?t:-1*(Math.sqrt(1-(t/=1)*t)-1)},easeOutCirc:function(t){return 1*Math.sqrt(1-(t=t/1-1)*t)},easeInOutCirc:function(t){return(t/=.5)<1?-.5*(Math.sqrt(1-t*t)-1):.5*(Math.sqrt(1-(t-=2)*t)+1)},easeInElastic:function(t){var e=1.70158,i=0,n=1;return 0===t?0:1==(t/=1)?1:(i||(i=.3),n<Math.abs(1)?(n=1,e=i/4):e=i/(2*Math.PI)*Math.asin(1/n),-(n*Math.pow(2,10*(t-=1))*Math.sin(2*(1*t-e)*Math.PI/i)))},easeOutElastic:function(t){var e=1.70158,i=0,n=1;return 0===t?0:1==(t/=1)?1:(i||(i=.3),n<Math.abs(1)?(n=1,e=i/4):e=i/(2*Math.PI)*Math.asin(1/n),n*Math.pow(2,-10*t)*Math.sin(2*(1*t-e)*Math.PI/i)+1)},easeInOutElastic:function(t){var e=1.70158,i=0,n=1;return 0===t?0:2==(t/=.5)?1:(i||(i=.3*1.5),n<Math.abs(1)?(n=1,e=i/4):e=i/(2*Math.PI)*Math.asin(1/n),1>t?-.5*n*Math.pow(2,10*(t-=1))*Math.sin(2*(1*t-e)*Math.PI/i):n*Math.pow(2,-10*(t-=1))*Math.sin(2*(1*t-e)*Math.PI/i)*.5+1)},easeInBack:function(t){var e=1.70158;return 1*(t/=1)*t*((e+1)*t-e)},easeOutBack:function(t){var e=1.70158;return 1*((t=t/1-1)*t*((e+1)*t+e)+1)},easeInOutBack:function(t){var e=1.70158;return(t/=.5)<1?.5*t*t*(((e*=1.525)+1)*t-e):.5*((t-=2)*t*(((e*=1.525)+1)*t+e)+2)},easeInBounce:function(t){return 1-x.easeOutBounce(1-t)},easeOutBounce:function(t){return(t/=1)<1/2.75?7.5625*t*t:2/2.75>t?1*(7.5625*(t-=1.5/2.75)*t+.75):2.5/2.75>t?1*(7.5625*(t-=2.25/2.75)*t+.9375):1*(7.5625*(t-=2.625/2.75)*t+.984375)},easeInOutBounce:function(t){return.5>t?.5*x.easeInBounce(2*t):.5*x.easeOutBounce(2*t-1)+.5}}),C=n.requestAnimFrame=function(){return window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.oRequestAnimationFrame||window.msRequestAnimationFrame||function(t){return window.setTimeout(t,1e3/60)}}(),S=n.cancelAnimFrame=function(){return window.cancelAnimationFrame||window.webkitCancelAnimationFrame||window.mozCancelAnimationFrame||window.oCancelAnimationFrame||window.msCancelAnimationFrame||function(t){return window.clearTimeout(t,1e3/60)}}(),T=(n.animationLoop=function(t,e,i,n,o,s){var a=0,r=x[i]||x.linear,l=function(){a++;var i=a/e,c=r(i);t.call(s,c,i,a),n.call(s,c,i),e>a?s.animationFrame=C(l):o.apply(s)};C(l)},n.getRelativePosition=function(t){var e,i,n=t.originalEvent||t,o=t.currentTarget||t.srcElement,s=o.getBoundingClientRect();return n.touches?(e=n.touches[0].clientX-s.left,i=n.touches[0].clientY-s.top):(e=n.clientX-s.left,i=n.clientY-s.top),{x:e,y:i}},n.addEvent=function(t,e,i){t.addEventListener?t.addEventListener(e,i):t.attachEvent?t.attachEvent("on"+e,i):t["on"+e]=i}),P=n.removeEvent=function(t,e,i){t.removeEventListener?t.removeEventListener(e,i,!1):t.detachEvent?t.detachEvent("on"+e,i):t["on"+e]=h},L=(n.bindEvents=function(t,e,i){t.events||(t.events={}),o(e,function(e){t.events[e]=function(){i.apply(t,arguments)},T(t.chart.canvas,e,t.events[e])})},n.unbindEvents=function(t,e){o(e,function(e,i){P(t.chart.canvas,i,e)})}),$=n.getMaximumWidth=function(t){var e=t.parentNode;return e.clientWidth},E=n.getMaximumHeight=function(t){var e=t.parentNode;return e.clientHeight},A=(n.getMaximumSize=n.getMaximumWidth,n.retinaScale=function(t){var e=t.ctx,i=t.canvas.width,n=t.canvas.height;window.devicePixelRatio&&(e.canvas.style.width=i+"px",e.canvas.style.height=n+"px",e.canvas.height=n*window.devicePixelRatio,e.canvas.width=i*window.devicePixelRatio,e.scale(window.devicePixelRatio,window.devicePixelRatio))}),F=n.clear=function(t){t.ctx.clearRect(0,0,t.width,t.height)},D=n.fontString=function(t,e,i){return e+" "+t+"px "+i},M=n.longestText=function(t,e,i){t.font=e;var n=0;return o(i,function(e){var i=t.measureText(e).width;n=i>n?i:n}),n},R=n.drawRoundedRectangle=function(t,e,i,n,o,s){t.beginPath(),t.moveTo(e+s,i),t.lineTo(e+n-s,i),t.quadraticCurveTo(e+n,i,e+n,i+s),t.lineTo(e+n,i+o-s),t.quadraticCurveTo(e+n,i+o,e+n-s,i+o),t.lineTo(e+s,i+o),t.quadraticCurveTo(e,i+o,e,i+o-s),t.lineTo(e,i+s),t.quadraticCurveTo(e,i,e+s,i),t.closePath()};i.instances={},i.Type=function(t,e,n){this.options=e,this.chart=n,this.id=u(),i.instances[this.id]=this,e.responsive&&this.resize(),this.initialize.call(this,t)},a(i.Type.prototype,{initialize:function(){return this},clear:function(){return F(this.chart),this},stop:function(){return S(this.animationFrame),this},resize:function(t){this.stop();var e=this.chart.canvas,i=$(this.chart.canvas),n=this.options.maintainAspectRatio?i/this.chart.aspectRatio:E(this.chart.canvas);return e.width=this.chart.width=i,e.height=this.chart.height=n,A(this.chart),"function"==typeof t&&t.apply(this,Array.prototype.slice.call(arguments,1)),this},reflow:h,render:function(t){return t&&this.reflow(),this.options.animation&&!t?n.animationLoop(this.draw,this.options.animationSteps,this.options.animationEasing,this.options.onAnimationProgress,this.options.onAnimationComplete,this):(this.draw(),this.options.onAnimationComplete.call(this)),this},generateLegend:function(){return k(this.options.legendTemplate,this)},destroy:function(){this.clear(),L(this,this.events);var t=this.chart.canvas;t.width=this.chart.width,t.height=this.chart.height,t.style.removeProperty?(t.style.removeProperty("width"),t.style.removeProperty("height")):(t.style.removeAttribute("width"),t.style.removeAttribute("height")),delete i.instances[this.id]},showTooltip:function(t,e){"undefined"==typeof this.activeElements&&(this.activeElements=[]);var s=function(t){var e=!1;return t.length!==this.activeElements.length?e=!0:(o(t,function(t,i){t!==this.activeElements[i]&&(e=!0)},this),e)}.call(this,t);if(s||e){if(this.activeElements=t,this.draw(),this.options.customTooltips&&this.options.customTooltips(!1),t.length>0)if(this.datasets&&this.datasets.length>1){for(var a,r,c=this.datasets.length-1;c>=0&&(a=this.datasets[c].points||this.datasets[c].bars||this.datasets[c].segments,r=l(a,t[0]),-1===r);c--);var h=[],u=[],d=function(){var t,e,i,o,s,a=[],l=[],c=[];return n.each(this.datasets,function(e){t=e.points||e.bars||e.segments,t[r]&&t[r].hasValue()&&a.push(t[r])}),n.each(a,function(t){l.push(t.x),c.push(t.y),h.push(n.template(this.options.multiTooltipTemplate,t)),u.push({fill:t._saved.fillColor||t.fillColor,stroke:t._saved.strokeColor||t.strokeColor})},this),s=m(c),i=g(c),o=m(l),e=g(l),{x:o>this.chart.width/2?o:e,y:(s+i)/2}}.call(this,r);new i.MultiTooltip({x:d.x,y:d.y,xPadding:this.options.tooltipXPadding,yPadding:this.options.tooltipYPadding,xOffset:this.options.tooltipXOffset,fillColor:this.options.tooltipFillColor,textColor:this.options.tooltipFontColor,fontFamily:this.options.tooltipFontFamily,fontStyle:this.options.tooltipFontStyle,fontSize:this.options.tooltipFontSize,titleTextColor:this.options.tooltipTitleFontColor,titleFontFamily:this.options.tooltipTitleFontFamily,titleFontStyle:this.options.tooltipTitleFontStyle,titleFontSize:this.options.tooltipTitleFontSize,cornerRadius:this.options.tooltipCornerRadius,labels:h,legendColors:u,legendColorBackground:this.options.multiTooltipKeyBackground,title:t[0].label,chart:this.chart,ctx:this.chart.ctx,custom:this.options.customTooltips}).draw()}else o(t,function(t){var e=t.tooltipPosition();new i.Tooltip({x:Math.round(e.x),y:Math.round(e.y),xPadding:this.options.tooltipXPadding,yPadding:this.options.tooltipYPadding,fillColor:this.options.tooltipFillColor,textColor:this.options.tooltipFontColor,fontFamily:this.options.tooltipFontFamily,fontStyle:this.options.tooltipFontStyle,fontSize:this.options.tooltipFontSize,caretHeight:this.options.tooltipCaretSize,cornerRadius:this.options.tooltipCornerRadius,text:k(this.options.tooltipTemplate,t),chart:this.chart,custom:this.options.customTooltips}).draw()},this);return this}},toBase64Image:function(){return this.chart.canvas.toDataURL.apply(this.chart.canvas,arguments)}}),i.Type.extend=function(t){var e=this,n=function(){return e.apply(this,arguments)};if(n.prototype=s(e.prototype),a(n.prototype,t),n.extend=i.Type.extend,t.name||e.prototype.name){var o=t.name||e.prototype.name,l=i.defaults[e.prototype.name]?s(i.defaults[e.prototype.name]):{};i.defaults[o]=a(l,t.defaults),i.types[o]=n,i.prototype[o]=function(t,e){var s=r(i.defaults.global,i.defaults[o],e||{});return new n(t,s,this)}}else d("Name not provided for this chart, so it hasn't been registered");return e},i.Element=function(t){a(this,t),this.initialize.apply(this,arguments),this.save()},a(i.Element.prototype,{initialize:function(){},restore:function(t){return t?o(t,function(t){this[t]=this._saved[t]},this):a(this,this._saved),this},save:function(){return this._saved=s(this),delete this._saved._saved,this},update:function(t){return o(t,function(t,e){this._saved[e]=this[e],this[e]=t},this),this},transition:function(t,e){return o(t,function(t,i){this[i]=(t-this._saved[i])*e+this._saved[i]},this),this},tooltipPosition:function(){return{x:this.x,y:this.y}},hasValue:function(){return p(this.value)}}),i.Element.extend=c,i.Point=i.Element.extend({display:!0,inRange:function(t,e){var i=this.hitDetectionRadius+this.radius;return Math.pow(t-this.x,2)+Math.pow(e-this.y,2)<Math.pow(i,2)},draw:function(){if(this.display){var t=this.ctx;t.beginPath(),t.arc(this.x,this.y,this.radius,0,2*Math.PI),t.closePath(),t.strokeStyle=this.strokeColor,t.lineWidth=this.strokeWidth,t.fillStyle=this.fillColor,t.fill(),t.stroke()}}}),i.Arc=i.Element.extend({inRange:function(t,e){var i=n.getAngleFromPoint(this,{x:t,y:e}),o=i.angle>=this.startAngle&&i.angle<=this.endAngle,s=i.distance>=this.innerRadius&&i.distance<=this.outerRadius;return o&&s},tooltipPosition:function(){var t=this.startAngle+(this.endAngle-this.startAngle)/2,e=(this.outerRadius-this.innerRadius)/2+this.innerRadius;return{x:this.x+Math.cos(t)*e,y:this.y+Math.sin(t)*e}},draw:function(t){var e=this.ctx;e.beginPath(),e.arc(this.x,this.y,this.outerRadius,this.startAngle,this.endAngle),e.arc(this.x,this.y,this.innerRadius,this.endAngle,this.startAngle,!0),e.closePath(),e.strokeStyle=this.strokeColor,e.lineWidth=this.strokeWidth,e.fillStyle=this.fillColor,e.fill(),e.lineJoin="bevel",this.showStroke&&e.stroke()}}),i.Rectangle=i.Element.extend({draw:function(){var t=this.ctx,e=this.width/2,i=this.x-e,n=this.x+e,o=this.base-(this.base-this.y),s=this.strokeWidth/2;this.showStroke&&(i+=s,n-=s,o+=s),t.beginPath(),t.fillStyle=this.fillColor,t.strokeStyle=this.strokeColor,t.lineWidth=this.strokeWidth,t.moveTo(i,this.base),t.lineTo(i,o),t.lineTo(n,o),t.lineTo(n,this.base),t.fill(),this.showStroke&&t.stroke()},height:function(){return this.base-this.y},inRange:function(t,e){return t>=this.x-this.width/2&&t<=this.x+this.width/2&&e>=this.y&&e<=this.base}}),i.Tooltip=i.Element.extend({draw:function(){var t=this.chart.ctx;t.font=D(this.fontSize,this.fontStyle,this.fontFamily),this.xAlign="center",this.yAlign="above";var e=this.caretPadding=2,i=t.measureText(this.text).width+2*this.xPadding,n=this.fontSize+2*this.yPadding,o=n+this.caretHeight+e;this.x+i/2>this.chart.width?this.xAlign="left":this.x-i/2<0&&(this.xAlign="right"),this.y-o<0&&(this.yAlign="below");var s=this.x-i/2,a=this.y-o;if(t.fillStyle=this.fillColor,this.custom)this.custom(this);else{switch(this.yAlign){case"above":t.beginPath(),t.moveTo(this.x,this.y-e),t.lineTo(this.x+this.caretHeight,this.y-(e+this.caretHeight)),t.lineTo(this.x-this.caretHeight,this.y-(e+this.caretHeight)),t.closePath(),t.fill();break;case"below":a=this.y+e+this.caretHeight,t.beginPath(),t.moveTo(this.x,this.y+e),t.lineTo(this.x+this.caretHeight,this.y+e+this.caretHeight),t.lineTo(this.x-this.caretHeight,this.y+e+this.caretHeight),t.closePath(),t.fill()}switch(this.xAlign){case"left":s=this.x-i+(this.cornerRadius+this.caretHeight);break;case"right":s=this.x-(this.cornerRadius+this.caretHeight)}R(t,s,a,i,n,this.cornerRadius),t.fill(),t.fillStyle=this.textColor,t.textAlign="center",t.textBaseline="middle",t.fillText(this.text,s+i/2,a+n/2)}}}),i.MultiTooltip=i.Element.extend({initialize:function(){this.font=D(this.fontSize,this.fontStyle,this.fontFamily),this.titleFont=D(this.titleFontSize,this.titleFontStyle,this.titleFontFamily),this.height=this.labels.length*this.fontSize+(this.labels.length-1)*(this.fontSize/2)+2*this.yPadding+1.5*this.titleFontSize,this.ctx.font=this.titleFont;var t=this.ctx.measureText(this.title).width,e=M(this.ctx,this.font,this.labels)+this.fontSize+3,i=g([e,t]);this.width=i+2*this.xPadding;var n=this.height/2;this.y-n<0?this.y=n:this.y+n>this.chart.height&&(this.y=this.chart.height-n),this.x>this.chart.width/2?this.x-=this.xOffset+this.width:this.x+=this.xOffset},getLineHeight:function(t){var e=this.y-this.height/2+this.yPadding,i=t-1;return 0===t?e+this.titleFontSize/2:e+(1.5*this.fontSize*i+this.fontSize/2)+1.5*this.titleFontSize},draw:function(){if(this.custom)this.custom(this);else{R(this.ctx,this.x,this.y-this.height/2,this.width,this.height,this.cornerRadius);var t=this.ctx;t.fillStyle=this.fillColor,t.fill(),t.closePath(),t.textAlign="left",t.textBaseline="middle",t.fillStyle=this.titleTextColor,t.font=this.titleFont,t.fillText(this.title,this.x+this.xPadding,this.getLineHeight(0)),t.font=this.font,n.each(this.labels,function(e,i){t.fillStyle=this.textColor,t.fillText(e,this.x+this.xPadding+this.fontSize+3,this.getLineHeight(i+1)),t.fillStyle=this.legendColorBackground,t.fillRect(this.x+this.xPadding,this.getLineHeight(i+1)-this.fontSize/2,this.fontSize,this.fontSize),t.fillStyle=this.legendColors[i].fill,t.fillRect(this.x+this.xPadding,this.getLineHeight(i+1)-this.fontSize/2,this.fontSize,this.fontSize)},this)}}}),i.Scale=i.Element.extend({initialize:function(){this.fit()},buildYLabels:function(){this.yLabels=[];for(var t=v(this.stepValue),e=0;e<=this.steps;e++)this.yLabels.push(k(this.templateString,{value:(this.min+e*this.stepValue).toFixed(t)}));this.yLabelWidth=this.display&&this.showLabels?M(this.ctx,this.font,this.yLabels):0},addXLabel:function(t){this.xLabels.push(t),this.valuesCount++,this.fit()},removeXLabel:function(){this.xLabels.shift(),this.valuesCount--,this.fit()},fit:function(){this.startPoint=this.display?this.fontSize:0,this.endPoint=this.display?this.height-1.5*this.fontSize-5:this.height,this.startPoint+=this.padding,this.endPoint-=this.padding;var t,e=this.endPoint-this.startPoint;for(this.calculateYRange(e),this.buildYLabels(),this.calculateXLabelRotation();e>this.endPoint-this.startPoint;)e=this.endPoint-this.startPoint,t=this.yLabelWidth,this.calculateYRange(e),this.buildYLabels(),t<this.yLabelWidth&&this.calculateXLabelRotation()},calculateXLabelRotation:function(){this.ctx.font=this.font;var t,e,i=this.ctx.measureText(this.xLabels[0]).width,n=this.ctx.measureText(this.xLabels[this.xLabels.length-1]).width;if(this.xScalePaddingRight=n/2+3,this.xScalePaddingLeft=i/2>this.yLabelWidth+10?i/2:this.yLabelWidth+10,this.xLabelRotation=0,this.display){var o,s=M(this.ctx,this.font,this.xLabels);this.xLabelWidth=s;for(var a=Math.floor(this.calculateX(1)-this.calculateX(0))-6;this.xLabelWidth>a&&0===this.xLabelRotation||this.xLabelWidth>a&&this.xLabelRotation<=90&&this.xLabelRotation>0;)o=Math.cos(y(this.xLabelRotation)),t=o*i,e=o*n,t+this.fontSize/2>this.yLabelWidth+8&&(this.xScalePaddingLeft=t+this.fontSize/2),this.xScalePaddingRight=this.fontSize/2,this.xLabelRotation++,this.xLabelWidth=o*s;this.xLabelRotation>0&&(this.endPoint-=Math.sin(y(this.xLabelRotation))*s+3)}else this.xLabelWidth=0,this.xScalePaddingRight=this.padding,this.xScalePaddingLeft=this.padding},calculateYRange:h,drawingArea:function(){return this.startPoint-this.endPoint},calculateY:function(t){var e=this.drawingArea()/(this.min-this.max);return this.endPoint-e*(t-this.min)},calculateX:function(t){var e=(this.xLabelRotation>0,this.width-(this.xScalePaddingLeft+this.xScalePaddingRight)),i=e/Math.max(this.valuesCount-(this.offsetGridLines?0:1),1),n=i*t+this.xScalePaddingLeft;return this.offsetGridLines&&(n+=i/2),Math.round(n)},update:function(t){n.extend(this,t),this.fit()},draw:function(){var t=this.ctx,e=(this.endPoint-this.startPoint)/this.steps,i=Math.round(this.xScalePaddingLeft);this.display&&(t.fillStyle=this.textColor,t.font=this.font,o(this.yLabels,function(o,s){var a=this.endPoint-e*s,r=Math.round(a),l=this.showHorizontalLines;t.textAlign="right",t.textBaseline="middle",this.showLabels&&t.fillText(o,i-10,a),0!==s||l||(l=!0),l&&t.beginPath(),s>0?(t.lineWidth=this.gridLineWidth,t.strokeStyle=this.gridLineColor):(t.lineWidth=this.lineWidth,t.strokeStyle=this.lineColor),r+=n.aliasPixel(t.lineWidth),l&&(t.moveTo(i,r),t.lineTo(this.width,r),t.stroke(),t.closePath()),t.lineWidth=this.lineWidth,t.strokeStyle=this.lineColor,t.beginPath(),t.moveTo(i-5,r),t.lineTo(i,r),t.stroke(),t.closePath()},this),o(this.xLabels,function(e,i){var n=this.calculateX(i)+b(this.lineWidth),o=this.calculateX(i-(this.offsetGridLines?.5:0))+b(this.lineWidth),s=this.xLabelRotation>0,a=this.showVerticalLines;0!==i||a||(a=!0),a&&t.beginPath(),i>0?(t.lineWidth=this.gridLineWidth,t.strokeStyle=this.gridLineColor):(t.lineWidth=this.lineWidth,t.strokeStyle=this.lineColor),a&&(t.moveTo(o,this.endPoint),t.lineTo(o,this.startPoint-3),t.stroke(),t.closePath()),t.lineWidth=this.lineWidth,t.strokeStyle=this.lineColor,t.beginPath(),t.moveTo(o,this.endPoint),t.lineTo(o,this.endPoint+5),t.stroke(),t.closePath(),t.save(),t.translate(n,s?this.endPoint+12:this.endPoint+8),t.rotate(-1*y(this.xLabelRotation)),t.font=this.font,t.textAlign=s?"right":"center",t.textBaseline=s?"middle":"top",t.fillText(e,0,0),t.restore()},this))}}),i.RadialScale=i.Element.extend({initialize:function(){this.size=m([this.height,this.width]),this.drawingArea=this.display?this.size/2-(this.fontSize/2+this.backdropPaddingY):this.size/2},calculateCenterOffset:function(t){var e=this.drawingArea/(this.max-this.min);return(t-this.min)*e},update:function(){this.lineArc?this.drawingArea=this.display?this.size/2-(this.fontSize/2+this.backdropPaddingY):this.size/2:this.setScaleSize(),this.buildYLabels()},buildYLabels:function(){this.yLabels=[];for(var t=v(this.stepValue),e=0;e<=this.steps;e++)this.yLabels.push(k(this.templateString,{value:(this.min+e*this.stepValue).toFixed(t)}))},getCircumference:function(){return 2*Math.PI/this.valuesCount},setScaleSize:function(){var t,e,i,n,o,s,a,r,l,c,h,u,d=m([this.height/2-this.pointLabelFontSize-5,this.width/2]),f=this.width,g=0;for(this.ctx.font=D(this.pointLabelFontSize,this.pointLabelFontStyle,this.pointLabelFontFamily),e=0;e<this.valuesCount;e++)t=this.getPointPosition(e,d),i=this.ctx.measureText(k(this.templateString,{value:this.labels[e]})).width+5,0===e||e===this.valuesCount/2?(n=i/2,t.x+n>f&&(f=t.x+n,o=e),t.x-n<g&&(g=t.x-n,a=e)):e<this.valuesCount/2?t.x+i>f&&(f=t.x+i,o=e):e>this.valuesCount/2&&t.x-i<g&&(g=t.x-i,a=e);l=g,c=Math.ceil(f-this.width),s=this.getIndexAngle(o),r=this.getIndexAngle(a),h=c/Math.sin(s+Math.PI/2),u=l/Math.sin(r+Math.PI/2),h=p(h)?h:0,u=p(u)?u:0,this.drawingArea=d-(u+h)/2,this.setCenterPoint(u,h)},setCenterPoint:function(t,e){var i=this.width-e-this.drawingArea,n=t+this.drawingArea;this.xCenter=(n+i)/2,this.yCenter=this.height/2},getIndexAngle:function(t){var e=2*Math.PI/this.valuesCount;return t*e-Math.PI/2},getPointPosition:function(t,e){var i=this.getIndexAngle(t);return{x:Math.cos(i)*e+this.xCenter,y:Math.sin(i)*e+this.yCenter}},draw:function(){if(this.display){var t=this.ctx;if(o(this.yLabels,function(e,i){if(i>0){var n,o=i*(this.drawingArea/this.steps),s=this.yCenter-o;if(this.lineWidth>0)if(t.strokeStyle=this.lineColor,t.lineWidth=this.lineWidth,this.lineArc)t.beginPath(),t.arc(this.xCenter,this.yCenter,o,0,2*Math.PI),t.closePath(),t.stroke();else{t.beginPath();for(var a=0;a<this.valuesCount;a++)n=this.getPointPosition(a,this.calculateCenterOffset(this.min+i*this.stepValue)),0===a?t.moveTo(n.x,n.y):t.lineTo(n.x,n.y);t.closePath(),t.stroke()}if(this.showLabels){if(t.font=D(this.fontSize,this.fontStyle,this.fontFamily),this.showLabelBackdrop){var r=t.measureText(e).width;t.fillStyle=this.backdropColor,t.fillRect(this.xCenter-r/2-this.backdropPaddingX,s-this.fontSize/2-this.backdropPaddingY,r+2*this.backdropPaddingX,this.fontSize+2*this.backdropPaddingY);
}t.textAlign="center",t.textBaseline="middle",t.fillStyle=this.fontColor,t.fillText(e,this.xCenter,s)}}},this),!this.lineArc){t.lineWidth=this.angleLineWidth,t.strokeStyle=this.angleLineColor;for(var e=this.valuesCount-1;e>=0;e--){if(this.angleLineWidth>0){var i=this.getPointPosition(e,this.calculateCenterOffset(this.max));t.beginPath(),t.moveTo(this.xCenter,this.yCenter),t.lineTo(i.x,i.y),t.stroke(),t.closePath()}var n=this.getPointPosition(e,this.calculateCenterOffset(this.max)+5);t.font=D(this.pointLabelFontSize,this.pointLabelFontStyle,this.pointLabelFontFamily),t.fillStyle=this.pointLabelFontColor;var s=this.labels.length,a=this.labels.length/2,r=a/2,l=r>e||e>s-r,c=e===r||e===s-r;t.textAlign=0===e?"center":e===a?"center":a>e?"left":"right",t.textBaseline=c?"middle":l?"bottom":"top",t.fillText(this.labels[e],n.x,n.y)}}}}}),n.addEvent(window,"resize",function(){var t;return function(){clearTimeout(t),t=setTimeout(function(){o(i.instances,function(t){t.options.responsive&&t.resize(t.render,!0)})},50)}}()),f?define(function(){return i}):"object"==typeof module&&module.exports&&(module.exports=i),t.Chart=i,i.noConflict=function(){return t.Chart=e,i}}.call(this),function(){"use strict";var t=this,e=t.Chart,i=e.helpers,n={scaleBeginAtZero:!0,scaleShowGridLines:!0,scaleGridLineColor:"rgba(0,0,0,.05)",scaleGridLineWidth:1,scaleShowHorizontalLines:!0,scaleShowVerticalLines:!0,barShowStroke:!0,barStrokeWidth:2,barValueSpacing:5,barDatasetSpacing:1,legendTemplate:'<ul class="<%=name.toLowerCase()%>-legend"><% for (var i=0; i<datasets.length; i++){%><li><span style="background-color:<%=datasets[i].fillColor%>"></span><%if(datasets[i].label){%><%=datasets[i].label%><%}%></li><%}%></ul>'};e.Type.extend({name:"Bar",defaults:n,initialize:function(t){var n=this.options;this.ScaleClass=e.Scale.extend({offsetGridLines:!0,calculateBarX:function(t,e,i){var o=this.calculateBaseWidth(),s=this.calculateX(i)-o/2,a=this.calculateBarWidth(t);return s+a*e+e*n.barDatasetSpacing+a/2},calculateBaseWidth:function(){return this.calculateX(1)-this.calculateX(0)-2*n.barValueSpacing},calculateBarWidth:function(t){var e=this.calculateBaseWidth()-(t-1)*n.barDatasetSpacing;return e/t}}),this.datasets=[],this.options.showTooltips&&i.bindEvents(this,this.options.tooltipEvents,function(t){var e="mouseout"!==t.type?this.getBarsAtEvent(t):[];this.eachBars(function(t){t.restore(["fillColor","strokeColor"])}),i.each(e,function(t){t.fillColor=t.highlightFill,t.strokeColor=t.highlightStroke}),this.showTooltip(e)}),this.BarClass=e.Rectangle.extend({strokeWidth:this.options.barStrokeWidth,showStroke:this.options.barShowStroke,ctx:this.chart.ctx}),i.each(t.datasets,function(e){var n={label:e.label||null,fillColor:e.fillColor,strokeColor:e.strokeColor,bars:[]};this.datasets.push(n),i.each(e.data,function(i,o){n.bars.push(new this.BarClass({value:i,label:t.labels[o],datasetLabel:e.label,strokeColor:e.strokeColor,fillColor:e.fillColor,highlightFill:e.highlightFill||e.fillColor,highlightStroke:e.highlightStroke||e.strokeColor}))},this)},this),this.buildScale(t.labels),this.BarClass.prototype.base=this.scale.endPoint,this.eachBars(function(t,e,n){i.extend(t,{width:this.scale.calculateBarWidth(this.datasets.length),x:this.scale.calculateBarX(this.datasets.length,n,e),y:this.scale.endPoint}),t.save()},this),this.render()},update:function(){this.scale.update(),i.each(this.activeElements,function(t){t.restore(["fillColor","strokeColor"])}),this.eachBars(function(t){t.save()}),this.render()},eachBars:function(t){i.each(this.datasets,function(e,n){i.each(e.bars,t,this,n)},this)},getBarsAtEvent:function(t){for(var e,n=[],o=i.getRelativePosition(t),s=function(t){n.push(t.bars[e])},a=0;a<this.datasets.length;a++)for(e=0;e<this.datasets[a].bars.length;e++)if(this.datasets[a].bars[e].inRange(o.x,o.y))return i.each(this.datasets,s),n;return n},buildScale:function(t){var e=this,n=function(){var t=[];return e.eachBars(function(e){t.push(e.value)}),t},o={templateString:this.options.scaleLabel,height:this.chart.height,width:this.chart.width,ctx:this.chart.ctx,textColor:this.options.scaleFontColor,fontSize:this.options.scaleFontSize,fontStyle:this.options.scaleFontStyle,fontFamily:this.options.scaleFontFamily,valuesCount:t.length,beginAtZero:this.options.scaleBeginAtZero,integersOnly:this.options.scaleIntegersOnly,calculateYRange:function(t){var e=i.calculateScaleRange(n(),t,this.fontSize,this.beginAtZero,this.integersOnly);i.extend(this,e)},xLabels:t,font:i.fontString(this.options.scaleFontSize,this.options.scaleFontStyle,this.options.scaleFontFamily),lineWidth:this.options.scaleLineWidth,lineColor:this.options.scaleLineColor,showHorizontalLines:this.options.scaleShowHorizontalLines,showVerticalLines:this.options.scaleShowVerticalLines,gridLineWidth:this.options.scaleShowGridLines?this.options.scaleGridLineWidth:0,gridLineColor:this.options.scaleShowGridLines?this.options.scaleGridLineColor:"rgba(0,0,0,0)",padding:this.options.showScale?0:this.options.barShowStroke?this.options.barStrokeWidth:0,showLabels:this.options.scaleShowLabels,display:this.options.showScale};this.options.scaleOverride&&i.extend(o,{calculateYRange:i.noop,steps:this.options.scaleSteps,stepValue:this.options.scaleStepWidth,min:this.options.scaleStartValue,max:this.options.scaleStartValue+this.options.scaleSteps*this.options.scaleStepWidth}),this.scale=new this.ScaleClass(o)},addData:function(t,e){i.each(t,function(t,i){this.datasets[i].bars.push(new this.BarClass({value:t,label:e,x:this.scale.calculateBarX(this.datasets.length,i,this.scale.valuesCount+1),y:this.scale.endPoint,width:this.scale.calculateBarWidth(this.datasets.length),base:this.scale.endPoint,strokeColor:this.datasets[i].strokeColor,fillColor:this.datasets[i].fillColor}))},this),this.scale.addXLabel(e),this.update()},removeData:function(){this.scale.removeXLabel(),i.each(this.datasets,function(t){t.bars.shift()},this),this.update()},reflow:function(){i.extend(this.BarClass.prototype,{y:this.scale.endPoint,base:this.scale.endPoint});var t=i.extend({height:this.chart.height,width:this.chart.width});this.scale.update(t)},draw:function(t){var e=t||1;this.clear(),this.chart.ctx,this.scale.draw(e),i.each(this.datasets,function(t,n){i.each(t.bars,function(t,i){t.hasValue()&&(t.base=this.scale.endPoint,t.transition({x:this.scale.calculateBarX(this.datasets.length,n,i),y:this.scale.calculateY(t.value),width:this.scale.calculateBarWidth(this.datasets.length)},e).draw())},this)},this)}})}.call(this),function(){"use strict";var t=this,e=t.Chart,i=e.helpers,n={segmentShowStroke:!0,segmentStrokeColor:"#fff",segmentStrokeWidth:2,percentageInnerCutout:50,animationSteps:100,animationEasing:"easeOutBounce",animateRotate:!0,animateScale:!1,legendTemplate:'<ul class="<%=name.toLowerCase()%>-legend"><% for (var i=0; i<segments.length; i++){%><li><span style="background-color:<%=segments[i].fillColor%>"></span><%if(segments[i].label){%><%=segments[i].label%><%}%></li><%}%></ul>'};e.Type.extend({name:"Doughnut",defaults:n,initialize:function(t){this.segments=[],this.outerRadius=(i.min([this.chart.width,this.chart.height])-this.options.segmentStrokeWidth/2)/2,this.SegmentArc=e.Arc.extend({ctx:this.chart.ctx,x:this.chart.width/2,y:this.chart.height/2}),this.options.showTooltips&&i.bindEvents(this,this.options.tooltipEvents,function(t){var e="mouseout"!==t.type?this.getSegmentsAtEvent(t):[];i.each(this.segments,function(t){t.restore(["fillColor"])}),i.each(e,function(t){t.fillColor=t.highlightColor}),this.showTooltip(e)}),this.calculateTotal(t),i.each(t,function(t,e){this.addData(t,e,!0)},this),this.render()},getSegmentsAtEvent:function(t){var e=[],n=i.getRelativePosition(t);return i.each(this.segments,function(t){t.inRange(n.x,n.y)&&e.push(t)},this),e},addData:function(t,e,i){var n=e||this.segments.length;this.segments.splice(n,0,new this.SegmentArc({value:t.value,outerRadius:this.options.animateScale?0:this.outerRadius,innerRadius:this.options.animateScale?0:this.outerRadius/100*this.options.percentageInnerCutout,fillColor:t.color,highlightColor:t.highlight||t.color,showStroke:this.options.segmentShowStroke,strokeWidth:this.options.segmentStrokeWidth,strokeColor:this.options.segmentStrokeColor,startAngle:1.5*Math.PI,circumference:this.options.animateRotate?0:this.calculateCircumference(t.value),label:t.label})),i||(this.reflow(),this.update())},calculateCircumference:function(t){return 2*Math.PI*(Math.abs(t)/this.total)},calculateTotal:function(t){this.total=0,i.each(t,function(t){this.total+=Math.abs(t.value)},this)},update:function(){this.calculateTotal(this.segments),i.each(this.activeElements,function(t){t.restore(["fillColor"])}),i.each(this.segments,function(t){t.save()}),this.render()},removeData:function(t){var e=i.isNumber(t)?t:this.segments.length-1;this.segments.splice(e,1),this.reflow(),this.update()},reflow:function(){i.extend(this.SegmentArc.prototype,{x:this.chart.width/2,y:this.chart.height/2}),this.outerRadius=(i.min([this.chart.width,this.chart.height])-this.options.segmentStrokeWidth/2)/2,i.each(this.segments,function(t){t.update({outerRadius:this.outerRadius,innerRadius:this.outerRadius/100*this.options.percentageInnerCutout})},this)},draw:function(t){var e=t?t:1;this.clear(),i.each(this.segments,function(t,i){t.transition({circumference:this.calculateCircumference(t.value),outerRadius:this.outerRadius,innerRadius:this.outerRadius/100*this.options.percentageInnerCutout},e),t.endAngle=t.startAngle+t.circumference,t.draw(),0===i&&(t.startAngle=1.5*Math.PI),i<this.segments.length-1&&(this.segments[i+1].startAngle=t.endAngle)},this)}}),e.types.Doughnut.extend({name:"Pie",defaults:i.merge(n,{percentageInnerCutout:0})})}.call(this),function(){"use strict";var t=this,e=t.Chart,i=e.helpers,n={scaleShowGridLines:!0,scaleGridLineColor:"rgba(0,0,0,.05)",scaleGridLineWidth:1,scaleShowHorizontalLines:!0,scaleShowVerticalLines:!0,bezierCurve:!0,bezierCurveTension:.4,pointDot:!0,pointDotRadius:4,pointDotStrokeWidth:1,pointHitDetectionRadius:20,datasetStroke:!0,datasetStrokeWidth:2,datasetFill:!0,legendTemplate:'<ul class="<%=name.toLowerCase()%>-legend"><% for (var i=0; i<datasets.length; i++){%><li><span style="background-color:<%=datasets[i].strokeColor%>"></span><%if(datasets[i].label){%><%=datasets[i].label%><%}%></li><%}%></ul>'};e.Type.extend({name:"Line",defaults:n,initialize:function(t){this.PointClass=e.Point.extend({strokeWidth:this.options.pointDotStrokeWidth,radius:this.options.pointDotRadius,display:this.options.pointDot,hitDetectionRadius:this.options.pointHitDetectionRadius,ctx:this.chart.ctx,inRange:function(t){return Math.pow(t-this.x,2)<Math.pow(this.radius+this.hitDetectionRadius,2)}}),this.datasets=[],this.options.showTooltips&&i.bindEvents(this,this.options.tooltipEvents,function(t){var e="mouseout"!==t.type?this.getPointsAtEvent(t):[];this.eachPoints(function(t){t.restore(["fillColor","strokeColor"])}),i.each(e,function(t){t.fillColor=t.highlightFill,t.strokeColor=t.highlightStroke}),this.showTooltip(e)}),i.each(t.datasets,function(e){var n={label:e.label||null,fillColor:e.fillColor,strokeColor:e.strokeColor,pointColor:e.pointColor,pointStrokeColor:e.pointStrokeColor,points:[]};this.datasets.push(n),i.each(e.data,function(i,o){n.points.push(new this.PointClass({value:i,label:t.labels[o],datasetLabel:e.label,strokeColor:e.pointStrokeColor,fillColor:e.pointColor,highlightFill:e.pointHighlightFill||e.pointColor,highlightStroke:e.pointHighlightStroke||e.pointStrokeColor}))},this),this.buildScale(t.labels),this.eachPoints(function(t,e){i.extend(t,{x:this.scale.calculateX(e),y:this.scale.endPoint}),t.save()},this)},this),this.render()},update:function(){this.scale.update(),i.each(this.activeElements,function(t){t.restore(["fillColor","strokeColor"])}),this.eachPoints(function(t){t.save()}),this.render()},eachPoints:function(t){i.each(this.datasets,function(e){i.each(e.points,t,this)},this)},getPointsAtEvent:function(t){var e=[],n=i.getRelativePosition(t);return i.each(this.datasets,function(t){i.each(t.points,function(t){t.inRange(n.x,n.y)&&e.push(t)})},this),e},buildScale:function(t){var n=this,o=function(){var t=[];return n.eachPoints(function(e){t.push(e.value)}),t},s={templateString:this.options.scaleLabel,height:this.chart.height,width:this.chart.width,ctx:this.chart.ctx,textColor:this.options.scaleFontColor,fontSize:this.options.scaleFontSize,fontStyle:this.options.scaleFontStyle,fontFamily:this.options.scaleFontFamily,valuesCount:t.length,beginAtZero:this.options.scaleBeginAtZero,integersOnly:this.options.scaleIntegersOnly,calculateYRange:function(t){var e=i.calculateScaleRange(o(),t,this.fontSize,this.beginAtZero,this.integersOnly);i.extend(this,e)},xLabels:t,font:i.fontString(this.options.scaleFontSize,this.options.scaleFontStyle,this.options.scaleFontFamily),lineWidth:this.options.scaleLineWidth,lineColor:this.options.scaleLineColor,showHorizontalLines:this.options.scaleShowHorizontalLines,showVerticalLines:this.options.scaleShowVerticalLines,gridLineWidth:this.options.scaleShowGridLines?this.options.scaleGridLineWidth:0,gridLineColor:this.options.scaleShowGridLines?this.options.scaleGridLineColor:"rgba(0,0,0,0)",padding:this.options.showScale?0:this.options.pointDotRadius+this.options.pointDotStrokeWidth,showLabels:this.options.scaleShowLabels,display:this.options.showScale};this.options.scaleOverride&&i.extend(s,{calculateYRange:i.noop,steps:this.options.scaleSteps,stepValue:this.options.scaleStepWidth,min:this.options.scaleStartValue,max:this.options.scaleStartValue+this.options.scaleSteps*this.options.scaleStepWidth}),this.scale=new e.Scale(s)},addData:function(t,e){i.each(t,function(t,i){this.datasets[i].points.push(new this.PointClass({value:t,label:e,x:this.scale.calculateX(this.scale.valuesCount+1),y:this.scale.endPoint,strokeColor:this.datasets[i].pointStrokeColor,fillColor:this.datasets[i].pointColor}))},this),this.scale.addXLabel(e),this.update()},removeData:function(){this.scale.removeXLabel(),i.each(this.datasets,function(t){t.points.shift()},this),this.update()},reflow:function(){var t=i.extend({height:this.chart.height,width:this.chart.width});this.scale.update(t)},draw:function(t){var e=t||1;this.clear();var n=this.chart.ctx,o=function(t){return null!==t.value},s=function(t,e,n){return i.findNextWhere(e,o,n)||t},a=function(t,e,n){return i.findPreviousWhere(e,o,n)||t};this.scale.draw(e),i.each(this.datasets,function(t){var r=i.where(t.points,o);i.each(t.points,function(t,i){t.hasValue()&&t.transition({y:this.scale.calculateY(t.value),x:this.scale.calculateX(i)},e)},this),this.options.bezierCurve&&i.each(r,function(t,e){var n=e>0&&e<r.length-1?this.options.bezierCurveTension:0;t.controlPoints=i.splineCurve(a(t,r,e),t,s(t,r,e),n),t.controlPoints.outer.y>this.scale.endPoint?t.controlPoints.outer.y=this.scale.endPoint:t.controlPoints.outer.y<this.scale.startPoint&&(t.controlPoints.outer.y=this.scale.startPoint),t.controlPoints.inner.y>this.scale.endPoint?t.controlPoints.inner.y=this.scale.endPoint:t.controlPoints.inner.y<this.scale.startPoint&&(t.controlPoints.inner.y=this.scale.startPoint)},this),n.lineWidth=this.options.datasetStrokeWidth,n.strokeStyle=t.strokeColor,n.beginPath(),i.each(r,function(t,e){if(0===e)n.moveTo(t.x,t.y);else if(this.options.bezierCurve){var i=a(t,r,e);n.bezierCurveTo(i.controlPoints.outer.x,i.controlPoints.outer.y,t.controlPoints.inner.x,t.controlPoints.inner.y,t.x,t.y)}else n.lineTo(t.x,t.y)},this),n.stroke(),this.options.datasetFill&&r.length>0&&(n.lineTo(r[r.length-1].x,this.scale.endPoint),n.lineTo(r[0].x,this.scale.endPoint),n.fillStyle=t.fillColor,n.closePath(),n.fill()),i.each(r,function(t){t.draw()})},this)}})}.call(this),function(){"use strict";var t=this,e=t.Chart,i=e.helpers,n={scaleShowLabelBackdrop:!0,scaleBackdropColor:"rgba(255,255,255,0.75)",scaleBeginAtZero:!0,scaleBackdropPaddingY:2,scaleBackdropPaddingX:2,scaleShowLine:!0,segmentShowStroke:!0,segmentStrokeColor:"#fff",segmentStrokeWidth:2,animationSteps:100,animationEasing:"easeOutBounce",animateRotate:!0,animateScale:!1,legendTemplate:'<ul class="<%=name.toLowerCase()%>-legend"><% for (var i=0; i<segments.length; i++){%><li><span style="background-color:<%=segments[i].fillColor%>"></span><%if(segments[i].label){%><%=segments[i].label%><%}%></li><%}%></ul>'};e.Type.extend({name:"PolarArea",defaults:n,initialize:function(t){this.segments=[],this.SegmentArc=e.Arc.extend({showStroke:this.options.segmentShowStroke,strokeWidth:this.options.segmentStrokeWidth,strokeColor:this.options.segmentStrokeColor,ctx:this.chart.ctx,innerRadius:0,x:this.chart.width/2,y:this.chart.height/2}),this.scale=new e.RadialScale({display:this.options.showScale,fontStyle:this.options.scaleFontStyle,fontSize:this.options.scaleFontSize,fontFamily:this.options.scaleFontFamily,fontColor:this.options.scaleFontColor,showLabels:this.options.scaleShowLabels,showLabelBackdrop:this.options.scaleShowLabelBackdrop,backdropColor:this.options.scaleBackdropColor,backdropPaddingY:this.options.scaleBackdropPaddingY,backdropPaddingX:this.options.scaleBackdropPaddingX,lineWidth:this.options.scaleShowLine?this.options.scaleLineWidth:0,lineColor:this.options.scaleLineColor,lineArc:!0,width:this.chart.width,height:this.chart.height,xCenter:this.chart.width/2,yCenter:this.chart.height/2,ctx:this.chart.ctx,templateString:this.options.scaleLabel,valuesCount:t.length}),this.updateScaleRange(t),this.scale.update(),i.each(t,function(t,e){this.addData(t,e,!0)},this),this.options.showTooltips&&i.bindEvents(this,this.options.tooltipEvents,function(t){var e="mouseout"!==t.type?this.getSegmentsAtEvent(t):[];i.each(this.segments,function(t){t.restore(["fillColor"])}),i.each(e,function(t){t.fillColor=t.highlightColor}),this.showTooltip(e)}),this.render()},getSegmentsAtEvent:function(t){var e=[],n=i.getRelativePosition(t);return i.each(this.segments,function(t){t.inRange(n.x,n.y)&&e.push(t)},this),e},addData:function(t,e,i){var n=e||this.segments.length;this.segments.splice(n,0,new this.SegmentArc({fillColor:t.color,highlightColor:t.highlight||t.color,label:t.label,value:t.value,outerRadius:this.options.animateScale?0:this.scale.calculateCenterOffset(t.value),circumference:this.options.animateRotate?0:this.scale.getCircumference(),startAngle:1.5*Math.PI})),i||(this.reflow(),this.update())},removeData:function(t){var e=i.isNumber(t)?t:this.segments.length-1;this.segments.splice(e,1),this.reflow(),this.update()},calculateTotal:function(t){this.total=0,i.each(t,function(t){this.total+=t.value},this),this.scale.valuesCount=this.segments.length},updateScaleRange:function(t){var e=[];i.each(t,function(t){e.push(t.value)});var n=this.options.scaleOverride?{steps:this.options.scaleSteps,stepValue:this.options.scaleStepWidth,min:this.options.scaleStartValue,max:this.options.scaleStartValue+this.options.scaleSteps*this.options.scaleStepWidth}:i.calculateScaleRange(e,i.min([this.chart.width,this.chart.height])/2,this.options.scaleFontSize,this.options.scaleBeginAtZero,this.options.scaleIntegersOnly);i.extend(this.scale,n,{size:i.min([this.chart.width,this.chart.height]),xCenter:this.chart.width/2,yCenter:this.chart.height/2})},update:function(){this.calculateTotal(this.segments),i.each(this.segments,function(t){t.save()}),this.reflow(),this.render()},reflow:function(){i.extend(this.SegmentArc.prototype,{x:this.chart.width/2,y:this.chart.height/2}),this.updateScaleRange(this.segments),this.scale.update(),i.extend(this.scale,{xCenter:this.chart.width/2,yCenter:this.chart.height/2}),i.each(this.segments,function(t){t.update({outerRadius:this.scale.calculateCenterOffset(t.value)})},this)},draw:function(t){var e=t||1;this.clear(),i.each(this.segments,function(t,i){t.transition({circumference:this.scale.getCircumference(),outerRadius:this.scale.calculateCenterOffset(t.value)},e),t.endAngle=t.startAngle+t.circumference,0===i&&(t.startAngle=1.5*Math.PI),i<this.segments.length-1&&(this.segments[i+1].startAngle=t.endAngle),t.draw()},this),this.scale.draw()}})}.call(this),function(){"use strict";var t=this,e=t.Chart,i=e.helpers;e.Type.extend({name:"Radar",defaults:{scaleShowLine:!0,angleShowLineOut:!0,scaleShowLabels:!1,scaleBeginAtZero:!0,angleLineColor:"rgba(0,0,0,.1)",angleLineWidth:1,pointLabelFontFamily:"'Arial'",pointLabelFontStyle:"normal",pointLabelFontSize:10,pointLabelFontColor:"#666",pointDot:!0,pointDotRadius:3,pointDotStrokeWidth:1,pointHitDetectionRadius:20,datasetStroke:!0,datasetStrokeWidth:2,datasetFill:!0,legendTemplate:'<ul class="<%=name.toLowerCase()%>-legend"><% for (var i=0; i<datasets.length; i++){%><li><span style="background-color:<%=datasets[i].strokeColor%>"></span><%if(datasets[i].label){%><%=datasets[i].label%><%}%></li><%}%></ul>'},initialize:function(t){this.PointClass=e.Point.extend({strokeWidth:this.options.pointDotStrokeWidth,radius:this.options.pointDotRadius,display:this.options.pointDot,hitDetectionRadius:this.options.pointHitDetectionRadius,ctx:this.chart.ctx}),this.datasets=[],this.buildScale(t),this.options.showTooltips&&i.bindEvents(this,this.options.tooltipEvents,function(t){var e="mouseout"!==t.type?this.getPointsAtEvent(t):[];this.eachPoints(function(t){t.restore(["fillColor","strokeColor"])}),i.each(e,function(t){t.fillColor=t.highlightFill,t.strokeColor=t.highlightStroke}),this.showTooltip(e)}),i.each(t.datasets,function(e){var n={label:e.label||null,fillColor:e.fillColor,strokeColor:e.strokeColor,pointColor:e.pointColor,pointStrokeColor:e.pointStrokeColor,points:[]};this.datasets.push(n),i.each(e.data,function(i,o){var s;this.scale.animation||(s=this.scale.getPointPosition(o,this.scale.calculateCenterOffset(i))),n.points.push(new this.PointClass({value:i,label:t.labels[o],datasetLabel:e.label,x:this.options.animation?this.scale.xCenter:s.x,y:this.options.animation?this.scale.yCenter:s.y,strokeColor:e.pointStrokeColor,fillColor:e.pointColor,highlightFill:e.pointHighlightFill||e.pointColor,highlightStroke:e.pointHighlightStroke||e.pointStrokeColor}))},this)},this),this.render()},eachPoints:function(t){i.each(this.datasets,function(e){i.each(e.points,t,this)},this)},getPointsAtEvent:function(t){var e=i.getRelativePosition(t),n=i.getAngleFromPoint({x:this.scale.xCenter,y:this.scale.yCenter},e),o=2*Math.PI/this.scale.valuesCount,s=Math.round((n.angle-1.5*Math.PI)/o),a=[];return(s>=this.scale.valuesCount||0>s)&&(s=0),n.distance<=this.scale.drawingArea&&i.each(this.datasets,function(t){a.push(t.points[s])}),a},buildScale:function(t){this.scale=new e.RadialScale({display:this.options.showScale,fontStyle:this.options.scaleFontStyle,fontSize:this.options.scaleFontSize,fontFamily:this.options.scaleFontFamily,fontColor:this.options.scaleFontColor,showLabels:this.options.scaleShowLabels,showLabelBackdrop:this.options.scaleShowLabelBackdrop,backdropColor:this.options.scaleBackdropColor,backdropPaddingY:this.options.scaleBackdropPaddingY,backdropPaddingX:this.options.scaleBackdropPaddingX,lineWidth:this.options.scaleShowLine?this.options.scaleLineWidth:0,lineColor:this.options.scaleLineColor,angleLineColor:this.options.angleLineColor,angleLineWidth:this.options.angleShowLineOut?this.options.angleLineWidth:0,pointLabelFontColor:this.options.pointLabelFontColor,pointLabelFontSize:this.options.pointLabelFontSize,pointLabelFontFamily:this.options.pointLabelFontFamily,pointLabelFontStyle:this.options.pointLabelFontStyle,height:this.chart.height,width:this.chart.width,xCenter:this.chart.width/2,yCenter:this.chart.height/2,ctx:this.chart.ctx,templateString:this.options.scaleLabel,labels:t.labels,valuesCount:t.datasets[0].data.length}),this.scale.setScaleSize(),this.updateScaleRange(t.datasets),this.scale.buildYLabels()},updateScaleRange:function(t){var e=function(){var e=[];return i.each(t,function(t){t.data?e=e.concat(t.data):i.each(t.points,function(t){e.push(t.value)})}),e}(),n=this.options.scaleOverride?{steps:this.options.scaleSteps,stepValue:this.options.scaleStepWidth,min:this.options.scaleStartValue,max:this.options.scaleStartValue+this.options.scaleSteps*this.options.scaleStepWidth}:i.calculateScaleRange(e,i.min([this.chart.width,this.chart.height])/2,this.options.scaleFontSize,this.options.scaleBeginAtZero,this.options.scaleIntegersOnly);i.extend(this.scale,n)},addData:function(t,e){this.scale.valuesCount++,i.each(t,function(t,i){var n=this.scale.getPointPosition(this.scale.valuesCount,this.scale.calculateCenterOffset(t));this.datasets[i].points.push(new this.PointClass({value:t,label:e,x:n.x,y:n.y,strokeColor:this.datasets[i].pointStrokeColor,fillColor:this.datasets[i].pointColor}))},this),this.scale.labels.push(e),this.reflow(),this.update()},removeData:function(){this.scale.valuesCount--,this.scale.labels.shift(),i.each(this.datasets,function(t){t.points.shift()},this),this.reflow(),this.update()},update:function(){this.eachPoints(function(t){t.save()}),this.reflow(),this.render()},reflow:function(){i.extend(this.scale,{width:this.chart.width,height:this.chart.height,size:i.min([this.chart.width,this.chart.height]),xCenter:this.chart.width/2,yCenter:this.chart.height/2}),this.updateScaleRange(this.datasets),this.scale.setScaleSize(),this.scale.buildYLabels()},draw:function(t){var e=t||1,n=this.chart.ctx;this.clear(),this.scale.draw(),i.each(this.datasets,function(t){i.each(t.points,function(t,i){t.hasValue()&&t.transition(this.scale.getPointPosition(i,this.scale.calculateCenterOffset(t.value)),e)},this),n.lineWidth=this.options.datasetStrokeWidth,n.strokeStyle=t.strokeColor,n.beginPath(),i.each(t.points,function(t,e){0===e?n.moveTo(t.x,t.y):n.lineTo(t.x,t.y)},this),n.closePath(),n.stroke(),n.fillStyle=t.fillColor,n.fill(),i.each(t.points,function(t){t.hasValue()&&t.draw()})},this)}})}.call(this),$(document).ready(function(){tag(),star(),teamToggle(),checkAll(),cartChartTrigger(),chart()});var tag=function(){var t=$(".js-tag");t.on("click",function(){var t=$(this);t.toggleClass("active")})},star=function(){var t=$(".star"),e=$(".js-star-toggle");t.on("click",function(){var t=$(this);t.toggleClass("star_active")}),e.on("click",function(){var e=$(this),i=$(this).text();"Добавить в избранное"==i?e.text("Убрать из избранного"):e.text("Добавить в избранное"),e.prev(t).toggleClass("star_active")})},teamToggle=function(){var t=$(".js-team"),e=$(".js-team-txt"),i=[];e.each(function(){var t=$(this),e=t.outerHeight();i.push(e),t.hide().css({left:0,visibility:"visible"})}),t.each(function(){var n=$(this),o=n.find(e),s=n.index();n.on("click",function(){e.hide(),t.css({"padding-bottom":0}),o.slideDown("400"),n.css({"padding-bottom":i[s]})})})},checkAll=function(){var t=$(".cart-tbl"),e=t.find('input[type="checkbox"]'),i=$("#cart-check-all");i.on("change",function(){e.prop("checked",i.prop("checked"))}),t.find("label.check").click(function(t){t.stopPropagation()})},cartChartTrigger=function(){$("#cart-chart-trigger").on("click",function(){$("#js-cart-chart").toggleClass("on"),$(".cart-chart__link").toggleClass("uk-hidden")})},chart=function(){$(".js-cart-chart-toggle").slideUp(function(){$(this).addClass("uk-hidden")});var t={labels:["Eating","Drinking","Sleeping","Designing","Coding","Cycling","Running"],datasets:[{label:"My First dataset",fillColor:"rgba(220,220,220,0.2)",strokeColor:"rgba(220,220,220,1)",pointColor:"rgba(220,220,220,1)",pointStrokeColor:"#fff",pointHighlightFill:"#fff",pointHighlightStroke:"rgba(220,220,220,1)",data:[65,59,90,81,56,55,40]},{label:"My Second dataset",fillColor:"rgba(151,187,205,0.2)",strokeColor:"rgba(151,187,205,1)",pointColor:"rgba(151,187,205,1)",pointStrokeColor:"#fff",pointHighlightFill:"#fff",pointHighlightStroke:"rgba(151,187,205,1)",data:[28,48,40,19,96,27,100]}]},e=document.getElementById("myChart").getContext("2d");new Chart(e).Radar(t,{scaleShowLine:!0,angleShowLineOut:!0,scaleShowLabels:!1,scaleBeginAtZero:!0,angleLineColor:"rgba(0,0,0,.1)",angleLineWidth:1,pointLabelFontFamily:"'Arial'",pointLabelFontStyle:"normal",pointLabelFontSize:10,pointLabelFontColor:"#666",pointDot:!0,pointDotRadius:3,pointDotStrokeWidth:1,pointHitDetectionRadius:20,datasetStroke:!0,datasetStrokeWidth:2,datasetFill:!0,legendTemplate:'<ul class="<%=name.toLowerCase()%>-legend"><% for (var i=0; i<datasets.length; i++){%><li><span style="background-color:<%=datasets[i].strokeColor%>"></span><%if(datasets[i].label){%><%=datasets[i].label%><%}%></li><%}%></ul>'})};
//# sourceMappingURL=data:application/json;base64,
