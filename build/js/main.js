window.Modernizr=function(t,e,i){function n(t){b.cssText=t}function o(t,e){return n(C.join(t+";")+(e||""))}function s(t,e){return typeof t===e}function a(t,e){return!!~(""+t).indexOf(e)}function r(t,e){for(var n in t){var o=t[n];if(!a(o,"-")&&b[o]!==i)return"pfx"==e?o:!0}return!1}function l(t,e,n){for(var o in t){var a=e[t[o]];if(a!==i)return n===!1?t[o]:s(a,"function")?a.bind(n||e):a}return!1}function c(t,e,i){var n=t.charAt(0).toUpperCase()+t.slice(1),o=(t+" "+T.join(n+" ")+n).split(" ");return s(e,"string")||s(e,"undefined")?r(o,e):(o=(t+" "+P.join(n+" ")+n).split(" "),l(o,e,i))}function h(){p.input=function(i){for(var n=0,o=i.length;o>n;n++)A[i[n]]=!!(i[n]in w);return A.list&&(A.list=!(!e.createElement("datalist")||!t.HTMLDataListElement)),A}("autocomplete autofocus list placeholder max min multiple pattern required step".split(" ")),p.inputtypes=function(t){for(var n,o,s,a=0,r=t.length;r>a;a++)w.setAttribute("type",o=t[a]),n="text"!==w.type,n&&(w.value=k,w.style.cssText="position:absolute;visibility:hidden;",/^range$/.test(o)&&w.style.WebkitAppearance!==i?(m.appendChild(w),s=e.defaultView,n=s.getComputedStyle&&"textfield"!==s.getComputedStyle(w,null).WebkitAppearance&&0!==w.offsetHeight,m.removeChild(w)):/^(search|tel)$/.test(o)||(n=/^(url|email)$/.test(o)?w.checkValidity&&w.checkValidity()===!1:w.value!=k)),E[t[a]]=!!n;return E}("search tel url email datetime date month week time datetime-local number range color".split(" "))}var u,d,f="2.8.3",p={},g=!0,m=e.documentElement,v="modernizr",y=e.createElement(v),b=y.style,w=e.createElement("input"),k=":)",x={}.toString,C=" -webkit- -moz- -o- -ms- ".split(" "),S="Webkit Moz O ms",T=S.split(" "),P=S.toLowerCase().split(" "),$={svg:"http://www.w3.org/2000/svg"},L={},E={},A={},F=[],D=F.slice,M=function(t,i,n,o){var s,a,r,l,c=e.createElement("div"),h=e.body,u=h||e.createElement("body");if(parseInt(n,10))for(;n--;)r=e.createElement("div"),r.id=o?o[n]:v+(n+1),c.appendChild(r);return s=["&#173;",'<style id="s',v,'">',t,"</style>"].join(""),c.id=v,(h?c:u).innerHTML+=s,u.appendChild(c),h||(u.style.background="",u.style.overflow="hidden",l=m.style.overflow,m.style.overflow="hidden",m.appendChild(u)),a=i(c,t),h?c.parentNode.removeChild(c):(u.parentNode.removeChild(u),m.style.overflow=l),!!a},R=function(e){var i=t.matchMedia||t.msMatchMedia;if(i)return i(e)&&i(e).matches||!1;var n;return M("@media "+e+" { #"+v+" { position: absolute; } }",function(e){n="absolute"==(t.getComputedStyle?getComputedStyle(e,null):e.currentStyle).position}),n},j=function(){function t(t,o){o=o||e.createElement(n[t]||"div"),t="on"+t;var a=t in o;return a||(o.setAttribute||(o=e.createElement("div")),o.setAttribute&&o.removeAttribute&&(o.setAttribute(t,""),a=s(o[t],"function"),s(o[t],"undefined")||(o[t]=i),o.removeAttribute(t))),o=null,a}var n={select:"input",change:"input",submit:"form",reset:"form",error:"img",load:"img",abort:"img"};return t}(),N={}.hasOwnProperty;d=s(N,"undefined")||s(N.call,"undefined")?function(t,e){return e in t&&s(t.constructor.prototype[e],"undefined")}:function(t,e){return N.call(t,e)},Function.prototype.bind||(Function.prototype.bind=function(t){var e=this;if("function"!=typeof e)throw new TypeError;var i=D.call(arguments,1),n=function(){if(this instanceof n){var o=function(){};o.prototype=e.prototype;var s=new o,a=e.apply(s,i.concat(D.call(arguments)));return Object(a)===a?a:s}return e.apply(t,i.concat(D.call(arguments)))};return n}),L.flexbox=function(){return c("flexWrap")},L.flexboxlegacy=function(){return c("boxDirection")},L.canvas=function(){var t=e.createElement("canvas");return!(!t.getContext||!t.getContext("2d"))},L.canvastext=function(){return!(!p.canvas||!s(e.createElement("canvas").getContext("2d").fillText,"function"))},L.webgl=function(){return!!t.WebGLRenderingContext},L.touch=function(){var i;return"ontouchstart"in t||t.DocumentTouch&&e instanceof DocumentTouch?i=!0:M(["@media (",C.join("touch-enabled),("),v,")","{#modernizr{top:9px;position:absolute}}"].join(""),function(t){i=9===t.offsetTop}),i},L.geolocation=function(){return"geolocation"in navigator},L.postmessage=function(){return!!t.postMessage},L.websqldatabase=function(){return!!t.openDatabase},L.indexedDB=function(){return!!c("indexedDB",t)},L.hashchange=function(){return j("hashchange",t)&&(e.documentMode===i||e.documentMode>7)},L.history=function(){return!(!t.history||!history.pushState)},L.draganddrop=function(){var t=e.createElement("div");return"draggable"in t||"ondragstart"in t&&"ondrop"in t},L.websockets=function(){return"WebSocket"in t||"MozWebSocket"in t},L.rgba=function(){return n("background-color:rgba(150,255,150,.5)"),a(b.backgroundColor,"rgba")},L.hsla=function(){return n("background-color:hsla(120,40%,100%,.5)"),a(b.backgroundColor,"rgba")||a(b.backgroundColor,"hsla")},L.multiplebgs=function(){return n("background:url(https://),url(https://),red url(https://)"),/(url\s*\(.*?){3}/.test(b.background)},L.backgroundsize=function(){return c("backgroundSize")},L.borderimage=function(){return c("borderImage")},L.borderradius=function(){return c("borderRadius")},L.boxshadow=function(){return c("boxShadow")},L.textshadow=function(){return""===e.createElement("div").style.textShadow},L.opacity=function(){return o("opacity:.55"),/^0.55$/.test(b.opacity)},L.cssanimations=function(){return c("animationName")},L.csscolumns=function(){return c("columnCount")},L.cssgradients=function(){var t="background-image:",e="gradient(linear,left top,right bottom,from(#9f9),to(white));",i="linear-gradient(left top,#9f9, white);";return n((t+"-webkit- ".split(" ").join(e+t)+C.join(i+t)).slice(0,-t.length)),a(b.backgroundImage,"gradient")},L.cssreflections=function(){return c("boxReflect")},L.csstransforms=function(){return!!c("transform")},L.csstransforms3d=function(){var t=!!c("perspective");return t&&"webkitPerspective"in m.style&&M("@media (transform-3d),(-webkit-transform-3d){#modernizr{left:9px;position:absolute;height:3px;}}",function(e,i){t=9===e.offsetLeft&&3===e.offsetHeight}),t},L.csstransitions=function(){return c("transition")},L.fontface=function(){var t;return M('@font-face {font-family:"font";src:url("https://")}',function(i,n){var o=e.getElementById("smodernizr"),s=o.sheet||o.styleSheet,a=s?s.cssRules&&s.cssRules[0]?s.cssRules[0].cssText:s.cssText||"":"";t=/src/i.test(a)&&0===a.indexOf(n.split(" ")[0])}),t},L.generatedcontent=function(){var t;return M(["#",v,"{font:0/0 a}#",v,':after{content:"',k,'";visibility:hidden;font:3px/1 a}'].join(""),function(e){t=e.offsetHeight>=3}),t},L.video=function(){var t=e.createElement("video"),i=!1;try{(i=!!t.canPlayType)&&(i=new Boolean(i),i.ogg=t.canPlayType('video/ogg; codecs="theora"').replace(/^no$/,""),i.h264=t.canPlayType('video/mp4; codecs="avc1.42E01E"').replace(/^no$/,""),i.webm=t.canPlayType('video/webm; codecs="vp8, vorbis"').replace(/^no$/,""))}catch(n){}return i},L.audio=function(){var t=e.createElement("audio"),i=!1;try{(i=!!t.canPlayType)&&(i=new Boolean(i),i.ogg=t.canPlayType('audio/ogg; codecs="vorbis"').replace(/^no$/,""),i.mp3=t.canPlayType("audio/mpeg;").replace(/^no$/,""),i.wav=t.canPlayType('audio/wav; codecs="1"').replace(/^no$/,""),i.m4a=(t.canPlayType("audio/x-m4a;")||t.canPlayType("audio/aac;")).replace(/^no$/,""))}catch(n){}return i},L.localstorage=function(){try{return localStorage.setItem(v,v),localStorage.removeItem(v),!0}catch(t){return!1}},L.sessionstorage=function(){try{return sessionStorage.setItem(v,v),sessionStorage.removeItem(v),!0}catch(t){return!1}},L.webworkers=function(){return!!t.Worker},L.applicationcache=function(){return!!t.applicationCache},L.svg=function(){return!!e.createElementNS&&!!e.createElementNS($.svg,"svg").createSVGRect},L.inlinesvg=function(){var t=e.createElement("div");return t.innerHTML="<svg/>",(t.firstChild&&t.firstChild.namespaceURI)==$.svg},L.smil=function(){return!!e.createElementNS&&/SVGAnimate/.test(x.call(e.createElementNS($.svg,"animate")))},L.svgclippaths=function(){return!!e.createElementNS&&/SVGClipPath/.test(x.call(e.createElementNS($.svg,"clipPath")))};for(var I in L)d(L,I)&&(u=I.toLowerCase(),p[u]=L[I](),F.push((p[u]?"":"no-")+u));return p.input||h(),p.addTest=function(t,e){if("object"==typeof t)for(var n in t)d(t,n)&&p.addTest(n,t[n]);else{if(t=t.toLowerCase(),p[t]!==i)return p;e="function"==typeof e?e():e,"undefined"!=typeof g&&g&&(m.className+=" "+(e?"":"no-")+t),p[t]=e}return p},n(""),y=w=null,function(t,e){function i(t,e){var i=t.createElement("p"),n=t.getElementsByTagName("head")[0]||t.documentElement;return i.innerHTML="x<style>"+e+"</style>",n.insertBefore(i.lastChild,n.firstChild)}function n(){var t=y.elements;return"string"==typeof t?t.split(" "):t}function o(t){var e=v[t[g]];return e||(e={},m++,t[g]=m,v[m]=e),e}function s(t,i,n){if(i||(i=e),h)return i.createElement(t);n||(n=o(i));var s;return s=n.cache[t]?n.cache[t].cloneNode():p.test(t)?(n.cache[t]=n.createElem(t)).cloneNode():n.createElem(t),!s.canHaveChildren||f.test(t)||s.tagUrn?s:n.frag.appendChild(s)}function a(t,i){if(t||(t=e),h)return t.createDocumentFragment();i=i||o(t);for(var s=i.frag.cloneNode(),a=0,r=n(),l=r.length;l>a;a++)s.createElement(r[a]);return s}function r(t,e){e.cache||(e.cache={},e.createElem=t.createElement,e.createFrag=t.createDocumentFragment,e.frag=e.createFrag()),t.createElement=function(i){return y.shivMethods?s(i,t,e):e.createElem(i)},t.createDocumentFragment=Function("h,f","return function(){var n=f.cloneNode(),c=n.createElement;h.shivMethods&&("+n().join().replace(/[\w\-]+/g,function(t){return e.createElem(t),e.frag.createElement(t),'c("'+t+'")'})+");return n}")(y,e.frag)}function l(t){t||(t=e);var n=o(t);return!y.shivCSS||c||n.hasCSS||(n.hasCSS=!!i(t,"article,aside,dialog,figcaption,figure,footer,header,hgroup,main,nav,section{display:block}mark{background:#FF0;color:#000}template{display:none}")),h||r(t,n),t}var c,h,u="3.7.0",d=t.html5||{},f=/^<|^(?:button|map|select|textarea|object|iframe|option|optgroup)$/i,p=/^(?:a|b|code|div|fieldset|h1|h2|h3|h4|h5|h6|i|label|li|ol|p|q|span|strong|style|table|tbody|td|th|tr|ul)$/i,g="_html5shiv",m=0,v={};!function(){try{var t=e.createElement("a");t.innerHTML="<xyz></xyz>",c="hidden"in t,h=1==t.childNodes.length||function(){e.createElement("a");var t=e.createDocumentFragment();return"undefined"==typeof t.cloneNode||"undefined"==typeof t.createDocumentFragment||"undefined"==typeof t.createElement}()}catch(i){c=!0,h=!0}}();var y={elements:d.elements||"abbr article aside audio bdi canvas data datalist details dialog figcaption figure footer header hgroup main mark meter nav output progress section summary template time video",version:u,shivCSS:d.shivCSS!==!1,supportsUnknownElements:h,shivMethods:d.shivMethods!==!1,type:"default",shivDocument:l,createElement:s,createDocumentFragment:a};t.html5=y,l(e)}(this,e),p._version=f,p._prefixes=C,p._domPrefixes=P,p._cssomPrefixes=T,p.mq=R,p.hasEvent=j,p.testProp=function(t){return r([t])},p.testAllProps=c,p.testStyles=M,p.prefixed=function(t,e,i){return e?c(t,e,i):c(t,"pfx")},m.className=m.className.replace(/(^|\s)no-js(\s|$)/,"$1$2")+(g?" js "+F.join(" "):""),p}(this,this.document),function(t,e){"object"==typeof module&&"object"==typeof module.exports?module.exports=t.document?e(t,!0):function(t){if(!t.document)throw new Error("jQuery requires a window with a document");return e(t)}:e(t)}("undefined"!=typeof window?window:this,function(t,e){function i(t){var e="length"in t&&t.length,i=K.type(t);return"function"===i||K.isWindow(t)?!1:1===t.nodeType&&e?!0:"array"===i||0===e||"number"==typeof e&&e>0&&e-1 in t}function n(t,e,i){if(K.isFunction(e))return K.grep(t,function(t,n){return!!e.call(t,n,t)!==i});if(e.nodeType)return K.grep(t,function(t){return t===e!==i});if("string"==typeof e){if(rt.test(e))return K.filter(e,t,i);e=K.filter(e,t)}return K.grep(t,function(t){return X.call(e,t)>=0!==i})}function o(t,e){for(;(t=t[e])&&1!==t.nodeType;);return t}function s(t){var e=pt[t]={};return K.each(t.match(ft)||[],function(t,i){e[i]=!0}),e}function a(){Z.removeEventListener("DOMContentLoaded",a,!1),t.removeEventListener("load",a,!1),K.ready()}function r(){Object.defineProperty(this.cache={},0,{get:function(){return{}}}),this.expando=K.expando+r.uid++}function l(t,e,i){var n;if(void 0===i&&1===t.nodeType)if(n="data-"+e.replace(wt,"-$1").toLowerCase(),i=t.getAttribute(n),"string"==typeof i){try{i="true"===i?!0:"false"===i?!1:"null"===i?null:+i+""===i?+i:bt.test(i)?K.parseJSON(i):i}catch(o){}yt.set(t,e,i)}else i=void 0;return i}function c(){return!0}function h(){return!1}function u(){try{return Z.activeElement}catch(t){}}function d(t,e){return K.nodeName(t,"table")&&K.nodeName(11!==e.nodeType?e:e.firstChild,"tr")?t.getElementsByTagName("tbody")[0]||t.appendChild(t.ownerDocument.createElement("tbody")):t}function f(t){return t.type=(null!==t.getAttribute("type"))+"/"+t.type,t}function p(t){var e=Nt.exec(t.type);return e?t.type=e[1]:t.removeAttribute("type"),t}function g(t,e){for(var i=0,n=t.length;n>i;i++)vt.set(t[i],"globalEval",!e||vt.get(e[i],"globalEval"))}function m(t,e){var i,n,o,s,a,r,l,c;if(1===e.nodeType){if(vt.hasData(t)&&(s=vt.access(t),a=vt.set(e,s),c=s.events)){delete a.handle,a.events={};for(o in c)for(i=0,n=c[o].length;n>i;i++)K.event.add(e,o,c[o][i])}yt.hasData(t)&&(r=yt.access(t),l=K.extend({},r),yt.set(e,l))}}function v(t,e){var i=t.getElementsByTagName?t.getElementsByTagName(e||"*"):t.querySelectorAll?t.querySelectorAll(e||"*"):[];return void 0===e||e&&K.nodeName(t,e)?K.merge([t],i):i}function y(t,e){var i=e.nodeName.toLowerCase();"input"===i&&St.test(t.type)?e.checked=t.checked:("input"===i||"textarea"===i)&&(e.defaultValue=t.defaultValue)}function b(e,i){var n,o=K(i.createElement(e)).appendTo(i.body),s=t.getDefaultComputedStyle&&(n=t.getDefaultComputedStyle(o[0]))?n.display:K.css(o[0],"display");return o.detach(),s}function w(t){var e=Z,i=Ht[t];return i||(i=b(t,e),"none"!==i&&i||(Wt=(Wt||K("<iframe frameborder='0' width='0' height='0'/>")).appendTo(e.documentElement),e=Wt[0].contentDocument,e.write(),e.close(),i=b(t,e),Wt.detach()),Ht[t]=i),i}function k(t,e,i){var n,o,s,a,r=t.style;return i=i||Ut(t),i&&(a=i.getPropertyValue(e)||i[e]),i&&(""!==a||K.contains(t.ownerDocument,t)||(a=K.style(t,e)),qt.test(a)&&zt.test(e)&&(n=r.width,o=r.minWidth,s=r.maxWidth,r.minWidth=r.maxWidth=r.width=a,a=i.width,r.width=n,r.minWidth=o,r.maxWidth=s)),void 0!==a?a+"":a}function x(t,e){return{get:function(){return t()?void delete this.get:(this.get=e).apply(this,arguments)}}}function C(t,e){if(e in t)return e;for(var i=e[0].toUpperCase()+e.slice(1),n=e,o=Gt.length;o--;)if(e=Gt[o]+i,e in t)return e;return n}function S(t,e,i){var n=_t.exec(e);return n?Math.max(0,n[1]-(i||0))+(n[2]||"px"):e}function T(t,e,i,n,o){for(var s=i===(n?"border":"content")?4:"width"===e?1:0,a=0;4>s;s+=2)"margin"===i&&(a+=K.css(t,i+xt[s],!0,o)),n?("content"===i&&(a-=K.css(t,"padding"+xt[s],!0,o)),"margin"!==i&&(a-=K.css(t,"border"+xt[s]+"Width",!0,o))):(a+=K.css(t,"padding"+xt[s],!0,o),"padding"!==i&&(a+=K.css(t,"border"+xt[s]+"Width",!0,o)));return a}function P(t,e,i){var n=!0,o="width"===e?t.offsetWidth:t.offsetHeight,s=Ut(t),a="border-box"===K.css(t,"boxSizing",!1,s);if(0>=o||null==o){if(o=k(t,e,s),(0>o||null==o)&&(o=t.style[e]),qt.test(o))return o;n=a&&(Q.boxSizingReliable()||o===t.style[e]),o=parseFloat(o)||0}return o+T(t,e,i||(a?"border":"content"),n,s)+"px"}function $(t,e){for(var i,n,o,s=[],a=0,r=t.length;r>a;a++)n=t[a],n.style&&(s[a]=vt.get(n,"olddisplay"),i=n.style.display,e?(s[a]||"none"!==i||(n.style.display=""),""===n.style.display&&Ct(n)&&(s[a]=vt.access(n,"olddisplay",w(n.nodeName)))):(o=Ct(n),"none"===i&&o||vt.set(n,"olddisplay",o?i:K.css(n,"display"))));for(a=0;r>a;a++)n=t[a],n.style&&(e&&"none"!==n.style.display&&""!==n.style.display||(n.style.display=e?s[a]||"":"none"));return t}function L(t,e,i,n,o){return new L.prototype.init(t,e,i,n,o)}function E(){return setTimeout(function(){Qt=void 0}),Qt=K.now()}function A(t,e){var i,n=0,o={height:t};for(e=e?1:0;4>n;n+=2-e)i=xt[n],o["margin"+i]=o["padding"+i]=t;return e&&(o.opacity=o.width=t),o}function F(t,e,i){for(var n,o=(ie[e]||[]).concat(ie["*"]),s=0,a=o.length;a>s;s++)if(n=o[s].call(i,e,t))return n}function D(t,e,i){var n,o,s,a,r,l,c,h,u=this,d={},f=t.style,p=t.nodeType&&Ct(t),g=vt.get(t,"fxshow");i.queue||(r=K._queueHooks(t,"fx"),null==r.unqueued&&(r.unqueued=0,l=r.empty.fire,r.empty.fire=function(){r.unqueued||l()}),r.unqueued++,u.always(function(){u.always(function(){r.unqueued--,K.queue(t,"fx").length||r.empty.fire()})})),1===t.nodeType&&("height"in e||"width"in e)&&(i.overflow=[f.overflow,f.overflowX,f.overflowY],c=K.css(t,"display"),h="none"===c?vt.get(t,"olddisplay")||w(t.nodeName):c,"inline"===h&&"none"===K.css(t,"float")&&(f.display="inline-block")),i.overflow&&(f.overflow="hidden",u.always(function(){f.overflow=i.overflow[0],f.overflowX=i.overflow[1],f.overflowY=i.overflow[2]}));for(n in e)if(o=e[n],Jt.exec(o)){if(delete e[n],s=s||"toggle"===o,o===(p?"hide":"show")){if("show"!==o||!g||void 0===g[n])continue;p=!0}d[n]=g&&g[n]||K.style(t,n)}else c=void 0;if(K.isEmptyObject(d))"inline"===("none"===c?w(t.nodeName):c)&&(f.display=c);else{g?"hidden"in g&&(p=g.hidden):g=vt.access(t,"fxshow",{}),s&&(g.hidden=!p),p?K(t).show():u.done(function(){K(t).hide()}),u.done(function(){var e;vt.remove(t,"fxshow");for(e in d)K.style(t,e,d[e])});for(n in d)a=F(p?g[n]:0,n,u),n in g||(g[n]=a.start,p&&(a.end=a.start,a.start="width"===n||"height"===n?1:0))}}function M(t,e){var i,n,o,s,a;for(i in t)if(n=K.camelCase(i),o=e[n],s=t[i],K.isArray(s)&&(o=s[1],s=t[i]=s[0]),i!==n&&(t[n]=s,delete t[i]),a=K.cssHooks[n],a&&"expand"in a){s=a.expand(s),delete t[n];for(i in s)i in t||(t[i]=s[i],e[i]=o)}else e[n]=o}function R(t,e,i){var n,o,s=0,a=ee.length,r=K.Deferred().always(function(){delete l.elem}),l=function(){if(o)return!1;for(var e=Qt||E(),i=Math.max(0,c.startTime+c.duration-e),n=i/c.duration||0,s=1-n,a=0,l=c.tweens.length;l>a;a++)c.tweens[a].run(s);return r.notifyWith(t,[c,s,i]),1>s&&l?i:(r.resolveWith(t,[c]),!1)},c=r.promise({elem:t,props:K.extend({},e),opts:K.extend(!0,{specialEasing:{}},i),originalProperties:e,originalOptions:i,startTime:Qt||E(),duration:i.duration,tweens:[],createTween:function(e,i){var n=K.Tween(t,c.opts,e,i,c.opts.specialEasing[e]||c.opts.easing);return c.tweens.push(n),n},stop:function(e){var i=0,n=e?c.tweens.length:0;if(o)return this;for(o=!0;n>i;i++)c.tweens[i].run(1);return e?r.resolveWith(t,[c,e]):r.rejectWith(t,[c,e]),this}}),h=c.props;for(M(h,c.opts.specialEasing);a>s;s++)if(n=ee[s].call(c,t,h,c.opts))return n;return K.map(h,F,c),K.isFunction(c.opts.start)&&c.opts.start.call(t,c),K.fx.timer(K.extend(l,{elem:t,anim:c,queue:c.opts.queue})),c.progress(c.opts.progress).done(c.opts.done,c.opts.complete).fail(c.opts.fail).always(c.opts.always)}function j(t){return function(e,i){"string"!=typeof e&&(i=e,e="*");var n,o=0,s=e.toLowerCase().match(ft)||[];if(K.isFunction(i))for(;n=s[o++];)"+"===n[0]?(n=n.slice(1)||"*",(t[n]=t[n]||[]).unshift(i)):(t[n]=t[n]||[]).push(i)}}function N(t,e,i,n){function o(r){var l;return s[r]=!0,K.each(t[r]||[],function(t,r){var c=r(e,i,n);return"string"!=typeof c||a||s[c]?a?!(l=c):void 0:(e.dataTypes.unshift(c),o(c),!1)}),l}var s={},a=t===be;return o(e.dataTypes[0])||!s["*"]&&o("*")}function I(t,e){var i,n,o=K.ajaxSettings.flatOptions||{};for(i in e)void 0!==e[i]&&((o[i]?t:n||(n={}))[i]=e[i]);return n&&K.extend(!0,t,n),t}function O(t,e,i){for(var n,o,s,a,r=t.contents,l=t.dataTypes;"*"===l[0];)l.shift(),void 0===n&&(n=t.mimeType||e.getResponseHeader("Content-Type"));if(n)for(o in r)if(r[o]&&r[o].test(n)){l.unshift(o);break}if(l[0]in i)s=l[0];else{for(o in i){if(!l[0]||t.converters[o+" "+l[0]]){s=o;break}a||(a=o)}s=s||a}return s?(s!==l[0]&&l.unshift(s),i[s]):void 0}function W(t,e,i,n){var o,s,a,r,l,c={},h=t.dataTypes.slice();if(h[1])for(a in t.converters)c[a.toLowerCase()]=t.converters[a];for(s=h.shift();s;)if(t.responseFields[s]&&(i[t.responseFields[s]]=e),!l&&n&&t.dataFilter&&(e=t.dataFilter(e,t.dataType)),l=s,s=h.shift())if("*"===s)s=l;else if("*"!==l&&l!==s){if(a=c[l+" "+s]||c["* "+s],!a)for(o in c)if(r=o.split(" "),r[1]===s&&(a=c[l+" "+r[0]]||c["* "+r[0]])){a===!0?a=c[o]:c[o]!==!0&&(s=r[0],h.unshift(r[1]));break}if(a!==!0)if(a&&t["throws"])e=a(e);else try{e=a(e)}catch(u){return{state:"parsererror",error:a?u:"No conversion from "+l+" to "+s}}}return{state:"success",data:e}}function H(t,e,i,n){var o;if(K.isArray(e))K.each(e,function(e,o){i||Se.test(t)?n(t,o):H(t+"["+("object"==typeof o?e:"")+"]",o,i,n)});else if(i||"object"!==K.type(e))n(t,e);else for(o in e)H(t+"["+o+"]",e[o],i,n)}function z(t){return K.isWindow(t)?t:9===t.nodeType&&t.defaultView}var q=[],U=q.slice,B=q.concat,_=q.push,X=q.indexOf,V={},Y=V.toString,G=V.hasOwnProperty,Q={},Z=t.document,J="2.1.4",K=function(t,e){return new K.fn.init(t,e)},tt=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,et=/^-ms-/,it=/-([\da-z])/gi,nt=function(t,e){return e.toUpperCase()};K.fn=K.prototype={jquery:J,constructor:K,selector:"",length:0,toArray:function(){return U.call(this)},get:function(t){return null!=t?0>t?this[t+this.length]:this[t]:U.call(this)},pushStack:function(t){var e=K.merge(this.constructor(),t);return e.prevObject=this,e.context=this.context,e},each:function(t,e){return K.each(this,t,e)},map:function(t){return this.pushStack(K.map(this,function(e,i){return t.call(e,i,e)}))},slice:function(){return this.pushStack(U.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(t){var e=this.length,i=+t+(0>t?e:0);return this.pushStack(i>=0&&e>i?[this[i]]:[])},end:function(){return this.prevObject||this.constructor(null)},push:_,sort:q.sort,splice:q.splice},K.extend=K.fn.extend=function(){var t,e,i,n,o,s,a=arguments[0]||{},r=1,l=arguments.length,c=!1;for("boolean"==typeof a&&(c=a,a=arguments[r]||{},r++),"object"==typeof a||K.isFunction(a)||(a={}),r===l&&(a=this,r--);l>r;r++)if(null!=(t=arguments[r]))for(e in t)i=a[e],n=t[e],a!==n&&(c&&n&&(K.isPlainObject(n)||(o=K.isArray(n)))?(o?(o=!1,s=i&&K.isArray(i)?i:[]):s=i&&K.isPlainObject(i)?i:{},a[e]=K.extend(c,s,n)):void 0!==n&&(a[e]=n));return a},K.extend({expando:"jQuery"+(J+Math.random()).replace(/\D/g,""),isReady:!0,error:function(t){throw new Error(t)},noop:function(){},isFunction:function(t){return"function"===K.type(t)},isArray:Array.isArray,isWindow:function(t){return null!=t&&t===t.window},isNumeric:function(t){return!K.isArray(t)&&t-parseFloat(t)+1>=0},isPlainObject:function(t){return"object"!==K.type(t)||t.nodeType||K.isWindow(t)?!1:t.constructor&&!G.call(t.constructor.prototype,"isPrototypeOf")?!1:!0},isEmptyObject:function(t){var e;for(e in t)return!1;return!0},type:function(t){return null==t?t+"":"object"==typeof t||"function"==typeof t?V[Y.call(t)]||"object":typeof t},globalEval:function(t){var e,i=eval;t=K.trim(t),t&&(1===t.indexOf("use strict")?(e=Z.createElement("script"),e.text=t,Z.head.appendChild(e).parentNode.removeChild(e)):i(t))},camelCase:function(t){return t.replace(et,"ms-").replace(it,nt)},nodeName:function(t,e){return t.nodeName&&t.nodeName.toLowerCase()===e.toLowerCase()},each:function(t,e,n){var o,s=0,a=t.length,r=i(t);if(n){if(r)for(;a>s&&(o=e.apply(t[s],n),o!==!1);s++);else for(s in t)if(o=e.apply(t[s],n),o===!1)break}else if(r)for(;a>s&&(o=e.call(t[s],s,t[s]),o!==!1);s++);else for(s in t)if(o=e.call(t[s],s,t[s]),o===!1)break;return t},trim:function(t){return null==t?"":(t+"").replace(tt,"")},makeArray:function(t,e){var n=e||[];return null!=t&&(i(Object(t))?K.merge(n,"string"==typeof t?[t]:t):_.call(n,t)),n},inArray:function(t,e,i){return null==e?-1:X.call(e,t,i)},merge:function(t,e){for(var i=+e.length,n=0,o=t.length;i>n;n++)t[o++]=e[n];return t.length=o,t},grep:function(t,e,i){for(var n,o=[],s=0,a=t.length,r=!i;a>s;s++)n=!e(t[s],s),n!==r&&o.push(t[s]);return o},map:function(t,e,n){var o,s=0,a=t.length,r=i(t),l=[];if(r)for(;a>s;s++)o=e(t[s],s,n),null!=o&&l.push(o);else for(s in t)o=e(t[s],s,n),null!=o&&l.push(o);return B.apply([],l)},guid:1,proxy:function(t,e){var i,n,o;return"string"==typeof e&&(i=t[e],e=t,t=i),K.isFunction(t)?(n=U.call(arguments,2),o=function(){return t.apply(e||this,n.concat(U.call(arguments)))},o.guid=t.guid=t.guid||K.guid++,o):void 0},now:Date.now,support:Q}),K.each("Boolean Number String Function Array Date RegExp Object Error".split(" "),function(t,e){V["[object "+e+"]"]=e.toLowerCase()});var ot=function(t){function e(t,e,i,n){var o,s,a,r,l,c,u,f,p,g;if((e?e.ownerDocument||e:H)!==D&&F(e),e=e||D,i=i||[],r=e.nodeType,"string"!=typeof t||!t||1!==r&&9!==r&&11!==r)return i;if(!n&&R){if(11!==r&&(o=yt.exec(t)))if(a=o[1]){if(9===r){if(s=e.getElementById(a),!s||!s.parentNode)return i;if(s.id===a)return i.push(s),i}else if(e.ownerDocument&&(s=e.ownerDocument.getElementById(a))&&O(e,s)&&s.id===a)return i.push(s),i}else{if(o[2])return J.apply(i,e.getElementsByTagName(t)),i;if((a=o[3])&&k.getElementsByClassName)return J.apply(i,e.getElementsByClassName(a)),i}if(k.qsa&&(!j||!j.test(t))){if(f=u=W,p=e,g=1!==r&&t,1===r&&"object"!==e.nodeName.toLowerCase()){for(c=T(t),(u=e.getAttribute("id"))?f=u.replace(wt,"\\$&"):e.setAttribute("id",f),f="[id='"+f+"'] ",l=c.length;l--;)c[l]=f+d(c[l]);p=bt.test(t)&&h(e.parentNode)||e,g=c.join(",")}if(g)try{return J.apply(i,p.querySelectorAll(g)),i}catch(m){}finally{u||e.removeAttribute("id")}}}return $(t.replace(lt,"$1"),e,i,n)}function i(){function t(i,n){return e.push(i+" ")>x.cacheLength&&delete t[e.shift()],t[i+" "]=n}var e=[];return t}function n(t){return t[W]=!0,t}function o(t){var e=D.createElement("div");try{return!!t(e)}catch(i){return!1}finally{e.parentNode&&e.parentNode.removeChild(e),e=null}}function s(t,e){for(var i=t.split("|"),n=t.length;n--;)x.attrHandle[i[n]]=e}function a(t,e){var i=e&&t,n=i&&1===t.nodeType&&1===e.nodeType&&(~e.sourceIndex||V)-(~t.sourceIndex||V);if(n)return n;if(i)for(;i=i.nextSibling;)if(i===e)return-1;return t?1:-1}function r(t){return function(e){var i=e.nodeName.toLowerCase();return"input"===i&&e.type===t}}function l(t){return function(e){var i=e.nodeName.toLowerCase();return("input"===i||"button"===i)&&e.type===t}}function c(t){return n(function(e){return e=+e,n(function(i,n){for(var o,s=t([],i.length,e),a=s.length;a--;)i[o=s[a]]&&(i[o]=!(n[o]=i[o]))})})}function h(t){return t&&"undefined"!=typeof t.getElementsByTagName&&t}function u(){}function d(t){for(var e=0,i=t.length,n="";i>e;e++)n+=t[e].value;return n}function f(t,e,i){var n=e.dir,o=i&&"parentNode"===n,s=q++;return e.first?function(e,i,s){for(;e=e[n];)if(1===e.nodeType||o)return t(e,i,s)}:function(e,i,a){var r,l,c=[z,s];if(a){for(;e=e[n];)if((1===e.nodeType||o)&&t(e,i,a))return!0}else for(;e=e[n];)if(1===e.nodeType||o){if(l=e[W]||(e[W]={}),(r=l[n])&&r[0]===z&&r[1]===s)return c[2]=r[2];if(l[n]=c,c[2]=t(e,i,a))return!0}}}function p(t){return t.length>1?function(e,i,n){for(var o=t.length;o--;)if(!t[o](e,i,n))return!1;return!0}:t[0]}function g(t,i,n){for(var o=0,s=i.length;s>o;o++)e(t,i[o],n);return n}function m(t,e,i,n,o){for(var s,a=[],r=0,l=t.length,c=null!=e;l>r;r++)(s=t[r])&&(!i||i(s,n,o))&&(a.push(s),c&&e.push(r));return a}function v(t,e,i,o,s,a){return o&&!o[W]&&(o=v(o)),s&&!s[W]&&(s=v(s,a)),n(function(n,a,r,l){var c,h,u,d=[],f=[],p=a.length,v=n||g(e||"*",r.nodeType?[r]:r,[]),y=!t||!n&&e?v:m(v,d,t,r,l),b=i?s||(n?t:p||o)?[]:a:y;if(i&&i(y,b,r,l),o)for(c=m(b,f),o(c,[],r,l),h=c.length;h--;)(u=c[h])&&(b[f[h]]=!(y[f[h]]=u));if(n){if(s||t){if(s){for(c=[],h=b.length;h--;)(u=b[h])&&c.push(y[h]=u);s(null,b=[],c,l)}for(h=b.length;h--;)(u=b[h])&&(c=s?tt(n,u):d[h])>-1&&(n[c]=!(a[c]=u))}}else b=m(b===a?b.splice(p,b.length):b),s?s(null,a,b,l):J.apply(a,b)})}function y(t){for(var e,i,n,o=t.length,s=x.relative[t[0].type],a=s||x.relative[" "],r=s?1:0,l=f(function(t){return t===e},a,!0),c=f(function(t){return tt(e,t)>-1},a,!0),h=[function(t,i,n){var o=!s&&(n||i!==L)||((e=i).nodeType?l(t,i,n):c(t,i,n));return e=null,o}];o>r;r++)if(i=x.relative[t[r].type])h=[f(p(h),i)];else{if(i=x.filter[t[r].type].apply(null,t[r].matches),i[W]){for(n=++r;o>n&&!x.relative[t[n].type];n++);return v(r>1&&p(h),r>1&&d(t.slice(0,r-1).concat({value:" "===t[r-2].type?"*":""})).replace(lt,"$1"),i,n>r&&y(t.slice(r,n)),o>n&&y(t=t.slice(n)),o>n&&d(t))}h.push(i)}return p(h)}function b(t,i){var o=i.length>0,s=t.length>0,a=function(n,a,r,l,c){var h,u,d,f=0,p="0",g=n&&[],v=[],y=L,b=n||s&&x.find.TAG("*",c),w=z+=null==y?1:Math.random()||.1,k=b.length;for(c&&(L=a!==D&&a);p!==k&&null!=(h=b[p]);p++){if(s&&h){for(u=0;d=t[u++];)if(d(h,a,r)){l.push(h);break}c&&(z=w)}o&&((h=!d&&h)&&f--,n&&g.push(h))}if(f+=p,o&&p!==f){for(u=0;d=i[u++];)d(g,v,a,r);if(n){if(f>0)for(;p--;)g[p]||v[p]||(v[p]=Q.call(l));v=m(v)}J.apply(l,v),c&&!n&&v.length>0&&f+i.length>1&&e.uniqueSort(l)}return c&&(z=w,L=y),g};return o?n(a):a}var w,k,x,C,S,T,P,$,L,E,A,F,D,M,R,j,N,I,O,W="sizzle"+1*new Date,H=t.document,z=0,q=0,U=i(),B=i(),_=i(),X=function(t,e){return t===e&&(A=!0),0},V=1<<31,Y={}.hasOwnProperty,G=[],Q=G.pop,Z=G.push,J=G.push,K=G.slice,tt=function(t,e){for(var i=0,n=t.length;n>i;i++)if(t[i]===e)return i;return-1},et="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",it="[\\x20\\t\\r\\n\\f]",nt="(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",ot=nt.replace("w","w#"),st="\\["+it+"*("+nt+")(?:"+it+"*([*^$|!~]?=)"+it+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+ot+"))|)"+it+"*\\]",at=":("+nt+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+st+")*)|.*)\\)|)",rt=new RegExp(it+"+","g"),lt=new RegExp("^"+it+"+|((?:^|[^\\\\])(?:\\\\.)*)"+it+"+$","g"),ct=new RegExp("^"+it+"*,"+it+"*"),ht=new RegExp("^"+it+"*([>+~]|"+it+")"+it+"*"),ut=new RegExp("="+it+"*([^\\]'\"]*?)"+it+"*\\]","g"),dt=new RegExp(at),ft=new RegExp("^"+ot+"$"),pt={ID:new RegExp("^#("+nt+")"),CLASS:new RegExp("^\\.("+nt+")"),TAG:new RegExp("^("+nt.replace("w","w*")+")"),ATTR:new RegExp("^"+st),PSEUDO:new RegExp("^"+at),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+it+"*(even|odd|(([+-]|)(\\d*)n|)"+it+"*(?:([+-]|)"+it+"*(\\d+)|))"+it+"*\\)|)","i"),bool:new RegExp("^(?:"+et+")$","i"),needsContext:new RegExp("^"+it+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+it+"*((?:-\\d)?\\d*)"+it+"*\\)|)(?=[^-]|$)","i")},gt=/^(?:input|select|textarea|button)$/i,mt=/^h\d$/i,vt=/^[^{]+\{\s*\[native \w/,yt=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,bt=/[+~]/,wt=/'|\\/g,kt=new RegExp("\\\\([\\da-f]{1,6}"+it+"?|("+it+")|.)","ig"),xt=function(t,e,i){var n="0x"+e-65536;return n!==n||i?e:0>n?String.fromCharCode(n+65536):String.fromCharCode(n>>10|55296,1023&n|56320)},Ct=function(){F()};try{J.apply(G=K.call(H.childNodes),H.childNodes),G[H.childNodes.length].nodeType}catch(St){J={apply:G.length?function(t,e){Z.apply(t,K.call(e))}:function(t,e){for(var i=t.length,n=0;t[i++]=e[n++];);t.length=i-1}}}k=e.support={},S=e.isXML=function(t){var e=t&&(t.ownerDocument||t).documentElement;return e?"HTML"!==e.nodeName:!1},F=e.setDocument=function(t){var e,i,n=t?t.ownerDocument||t:H;return n!==D&&9===n.nodeType&&n.documentElement?(D=n,M=n.documentElement,i=n.defaultView,i&&i!==i.top&&(i.addEventListener?i.addEventListener("unload",Ct,!1):i.attachEvent&&i.attachEvent("onunload",Ct)),R=!S(n),k.attributes=o(function(t){return t.className="i",!t.getAttribute("className")}),k.getElementsByTagName=o(function(t){return t.appendChild(n.createComment("")),!t.getElementsByTagName("*").length}),k.getElementsByClassName=vt.test(n.getElementsByClassName),k.getById=o(function(t){return M.appendChild(t).id=W,!n.getElementsByName||!n.getElementsByName(W).length}),k.getById?(x.find.ID=function(t,e){if("undefined"!=typeof e.getElementById&&R){var i=e.getElementById(t);return i&&i.parentNode?[i]:[]}},x.filter.ID=function(t){var e=t.replace(kt,xt);return function(t){return t.getAttribute("id")===e}}):(delete x.find.ID,x.filter.ID=function(t){var e=t.replace(kt,xt);return function(t){var i="undefined"!=typeof t.getAttributeNode&&t.getAttributeNode("id");return i&&i.value===e}}),x.find.TAG=k.getElementsByTagName?function(t,e){return"undefined"!=typeof e.getElementsByTagName?e.getElementsByTagName(t):k.qsa?e.querySelectorAll(t):void 0;
}:function(t,e){var i,n=[],o=0,s=e.getElementsByTagName(t);if("*"===t){for(;i=s[o++];)1===i.nodeType&&n.push(i);return n}return s},x.find.CLASS=k.getElementsByClassName&&function(t,e){return R?e.getElementsByClassName(t):void 0},N=[],j=[],(k.qsa=vt.test(n.querySelectorAll))&&(o(function(t){M.appendChild(t).innerHTML="<a id='"+W+"'></a><select id='"+W+"-\f]' msallowcapture=''><option selected=''></option></select>",t.querySelectorAll("[msallowcapture^='']").length&&j.push("[*^$]="+it+"*(?:''|\"\")"),t.querySelectorAll("[selected]").length||j.push("\\["+it+"*(?:value|"+et+")"),t.querySelectorAll("[id~="+W+"-]").length||j.push("~="),t.querySelectorAll(":checked").length||j.push(":checked"),t.querySelectorAll("a#"+W+"+*").length||j.push(".#.+[+~]")}),o(function(t){var e=n.createElement("input");e.setAttribute("type","hidden"),t.appendChild(e).setAttribute("name","D"),t.querySelectorAll("[name=d]").length&&j.push("name"+it+"*[*^$|!~]?="),t.querySelectorAll(":enabled").length||j.push(":enabled",":disabled"),t.querySelectorAll("*,:x"),j.push(",.*:")})),(k.matchesSelector=vt.test(I=M.matches||M.webkitMatchesSelector||M.mozMatchesSelector||M.oMatchesSelector||M.msMatchesSelector))&&o(function(t){k.disconnectedMatch=I.call(t,"div"),I.call(t,"[s!='']:x"),N.push("!=",at)}),j=j.length&&new RegExp(j.join("|")),N=N.length&&new RegExp(N.join("|")),e=vt.test(M.compareDocumentPosition),O=e||vt.test(M.contains)?function(t,e){var i=9===t.nodeType?t.documentElement:t,n=e&&e.parentNode;return t===n||!(!n||1!==n.nodeType||!(i.contains?i.contains(n):t.compareDocumentPosition&&16&t.compareDocumentPosition(n)))}:function(t,e){if(e)for(;e=e.parentNode;)if(e===t)return!0;return!1},X=e?function(t,e){if(t===e)return A=!0,0;var i=!t.compareDocumentPosition-!e.compareDocumentPosition;return i?i:(i=(t.ownerDocument||t)===(e.ownerDocument||e)?t.compareDocumentPosition(e):1,1&i||!k.sortDetached&&e.compareDocumentPosition(t)===i?t===n||t.ownerDocument===H&&O(H,t)?-1:e===n||e.ownerDocument===H&&O(H,e)?1:E?tt(E,t)-tt(E,e):0:4&i?-1:1)}:function(t,e){if(t===e)return A=!0,0;var i,o=0,s=t.parentNode,r=e.parentNode,l=[t],c=[e];if(!s||!r)return t===n?-1:e===n?1:s?-1:r?1:E?tt(E,t)-tt(E,e):0;if(s===r)return a(t,e);for(i=t;i=i.parentNode;)l.unshift(i);for(i=e;i=i.parentNode;)c.unshift(i);for(;l[o]===c[o];)o++;return o?a(l[o],c[o]):l[o]===H?-1:c[o]===H?1:0},n):D},e.matches=function(t,i){return e(t,null,null,i)},e.matchesSelector=function(t,i){if((t.ownerDocument||t)!==D&&F(t),i=i.replace(ut,"='$1']"),k.matchesSelector&&R&&(!N||!N.test(i))&&(!j||!j.test(i)))try{var n=I.call(t,i);if(n||k.disconnectedMatch||t.document&&11!==t.document.nodeType)return n}catch(o){}return e(i,D,null,[t]).length>0},e.contains=function(t,e){return(t.ownerDocument||t)!==D&&F(t),O(t,e)},e.attr=function(t,e){(t.ownerDocument||t)!==D&&F(t);var i=x.attrHandle[e.toLowerCase()],n=i&&Y.call(x.attrHandle,e.toLowerCase())?i(t,e,!R):void 0;return void 0!==n?n:k.attributes||!R?t.getAttribute(e):(n=t.getAttributeNode(e))&&n.specified?n.value:null},e.error=function(t){throw new Error("Syntax error, unrecognized expression: "+t)},e.uniqueSort=function(t){var e,i=[],n=0,o=0;if(A=!k.detectDuplicates,E=!k.sortStable&&t.slice(0),t.sort(X),A){for(;e=t[o++];)e===t[o]&&(n=i.push(o));for(;n--;)t.splice(i[n],1)}return E=null,t},C=e.getText=function(t){var e,i="",n=0,o=t.nodeType;if(o){if(1===o||9===o||11===o){if("string"==typeof t.textContent)return t.textContent;for(t=t.firstChild;t;t=t.nextSibling)i+=C(t)}else if(3===o||4===o)return t.nodeValue}else for(;e=t[n++];)i+=C(e);return i},x=e.selectors={cacheLength:50,createPseudo:n,match:pt,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(t){return t[1]=t[1].replace(kt,xt),t[3]=(t[3]||t[4]||t[5]||"").replace(kt,xt),"~="===t[2]&&(t[3]=" "+t[3]+" "),t.slice(0,4)},CHILD:function(t){return t[1]=t[1].toLowerCase(),"nth"===t[1].slice(0,3)?(t[3]||e.error(t[0]),t[4]=+(t[4]?t[5]+(t[6]||1):2*("even"===t[3]||"odd"===t[3])),t[5]=+(t[7]+t[8]||"odd"===t[3])):t[3]&&e.error(t[0]),t},PSEUDO:function(t){var e,i=!t[6]&&t[2];return pt.CHILD.test(t[0])?null:(t[3]?t[2]=t[4]||t[5]||"":i&&dt.test(i)&&(e=T(i,!0))&&(e=i.indexOf(")",i.length-e)-i.length)&&(t[0]=t[0].slice(0,e),t[2]=i.slice(0,e)),t.slice(0,3))}},filter:{TAG:function(t){var e=t.replace(kt,xt).toLowerCase();return"*"===t?function(){return!0}:function(t){return t.nodeName&&t.nodeName.toLowerCase()===e}},CLASS:function(t){var e=U[t+" "];return e||(e=new RegExp("(^|"+it+")"+t+"("+it+"|$)"))&&U(t,function(t){return e.test("string"==typeof t.className&&t.className||"undefined"!=typeof t.getAttribute&&t.getAttribute("class")||"")})},ATTR:function(t,i,n){return function(o){var s=e.attr(o,t);return null==s?"!="===i:i?(s+="","="===i?s===n:"!="===i?s!==n:"^="===i?n&&0===s.indexOf(n):"*="===i?n&&s.indexOf(n)>-1:"$="===i?n&&s.slice(-n.length)===n:"~="===i?(" "+s.replace(rt," ")+" ").indexOf(n)>-1:"|="===i?s===n||s.slice(0,n.length+1)===n+"-":!1):!0}},CHILD:function(t,e,i,n,o){var s="nth"!==t.slice(0,3),a="last"!==t.slice(-4),r="of-type"===e;return 1===n&&0===o?function(t){return!!t.parentNode}:function(e,i,l){var c,h,u,d,f,p,g=s!==a?"nextSibling":"previousSibling",m=e.parentNode,v=r&&e.nodeName.toLowerCase(),y=!l&&!r;if(m){if(s){for(;g;){for(u=e;u=u[g];)if(r?u.nodeName.toLowerCase()===v:1===u.nodeType)return!1;p=g="only"===t&&!p&&"nextSibling"}return!0}if(p=[a?m.firstChild:m.lastChild],a&&y){for(h=m[W]||(m[W]={}),c=h[t]||[],f=c[0]===z&&c[1],d=c[0]===z&&c[2],u=f&&m.childNodes[f];u=++f&&u&&u[g]||(d=f=0)||p.pop();)if(1===u.nodeType&&++d&&u===e){h[t]=[z,f,d];break}}else if(y&&(c=(e[W]||(e[W]={}))[t])&&c[0]===z)d=c[1];else for(;(u=++f&&u&&u[g]||(d=f=0)||p.pop())&&((r?u.nodeName.toLowerCase()!==v:1!==u.nodeType)||!++d||(y&&((u[W]||(u[W]={}))[t]=[z,d]),u!==e)););return d-=o,d===n||d%n===0&&d/n>=0}}},PSEUDO:function(t,i){var o,s=x.pseudos[t]||x.setFilters[t.toLowerCase()]||e.error("unsupported pseudo: "+t);return s[W]?s(i):s.length>1?(o=[t,t,"",i],x.setFilters.hasOwnProperty(t.toLowerCase())?n(function(t,e){for(var n,o=s(t,i),a=o.length;a--;)n=tt(t,o[a]),t[n]=!(e[n]=o[a])}):function(t){return s(t,0,o)}):s}},pseudos:{not:n(function(t){var e=[],i=[],o=P(t.replace(lt,"$1"));return o[W]?n(function(t,e,i,n){for(var s,a=o(t,null,n,[]),r=t.length;r--;)(s=a[r])&&(t[r]=!(e[r]=s))}):function(t,n,s){return e[0]=t,o(e,null,s,i),e[0]=null,!i.pop()}}),has:n(function(t){return function(i){return e(t,i).length>0}}),contains:n(function(t){return t=t.replace(kt,xt),function(e){return(e.textContent||e.innerText||C(e)).indexOf(t)>-1}}),lang:n(function(t){return ft.test(t||"")||e.error("unsupported lang: "+t),t=t.replace(kt,xt).toLowerCase(),function(e){var i;do if(i=R?e.lang:e.getAttribute("xml:lang")||e.getAttribute("lang"))return i=i.toLowerCase(),i===t||0===i.indexOf(t+"-");while((e=e.parentNode)&&1===e.nodeType);return!1}}),target:function(e){var i=t.location&&t.location.hash;return i&&i.slice(1)===e.id},root:function(t){return t===M},focus:function(t){return t===D.activeElement&&(!D.hasFocus||D.hasFocus())&&!!(t.type||t.href||~t.tabIndex)},enabled:function(t){return t.disabled===!1},disabled:function(t){return t.disabled===!0},checked:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&!!t.checked||"option"===e&&!!t.selected},selected:function(t){return t.parentNode&&t.parentNode.selectedIndex,t.selected===!0},empty:function(t){for(t=t.firstChild;t;t=t.nextSibling)if(t.nodeType<6)return!1;return!0},parent:function(t){return!x.pseudos.empty(t)},header:function(t){return mt.test(t.nodeName)},input:function(t){return gt.test(t.nodeName)},button:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&"button"===t.type||"button"===e},text:function(t){var e;return"input"===t.nodeName.toLowerCase()&&"text"===t.type&&(null==(e=t.getAttribute("type"))||"text"===e.toLowerCase())},first:c(function(){return[0]}),last:c(function(t,e){return[e-1]}),eq:c(function(t,e,i){return[0>i?i+e:i]}),even:c(function(t,e){for(var i=0;e>i;i+=2)t.push(i);return t}),odd:c(function(t,e){for(var i=1;e>i;i+=2)t.push(i);return t}),lt:c(function(t,e,i){for(var n=0>i?i+e:i;--n>=0;)t.push(n);return t}),gt:c(function(t,e,i){for(var n=0>i?i+e:i;++n<e;)t.push(n);return t})}},x.pseudos.nth=x.pseudos.eq;for(w in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})x.pseudos[w]=r(w);for(w in{submit:!0,reset:!0})x.pseudos[w]=l(w);return u.prototype=x.filters=x.pseudos,x.setFilters=new u,T=e.tokenize=function(t,i){var n,o,s,a,r,l,c,h=B[t+" "];if(h)return i?0:h.slice(0);for(r=t,l=[],c=x.preFilter;r;){(!n||(o=ct.exec(r)))&&(o&&(r=r.slice(o[0].length)||r),l.push(s=[])),n=!1,(o=ht.exec(r))&&(n=o.shift(),s.push({value:n,type:o[0].replace(lt," ")}),r=r.slice(n.length));for(a in x.filter)!(o=pt[a].exec(r))||c[a]&&!(o=c[a](o))||(n=o.shift(),s.push({value:n,type:a,matches:o}),r=r.slice(n.length));if(!n)break}return i?r.length:r?e.error(t):B(t,l).slice(0)},P=e.compile=function(t,e){var i,n=[],o=[],s=_[t+" "];if(!s){for(e||(e=T(t)),i=e.length;i--;)s=y(e[i]),s[W]?n.push(s):o.push(s);s=_(t,b(o,n)),s.selector=t}return s},$=e.select=function(t,e,i,n){var o,s,a,r,l,c="function"==typeof t&&t,u=!n&&T(t=c.selector||t);if(i=i||[],1===u.length){if(s=u[0]=u[0].slice(0),s.length>2&&"ID"===(a=s[0]).type&&k.getById&&9===e.nodeType&&R&&x.relative[s[1].type]){if(e=(x.find.ID(a.matches[0].replace(kt,xt),e)||[])[0],!e)return i;c&&(e=e.parentNode),t=t.slice(s.shift().value.length)}for(o=pt.needsContext.test(t)?0:s.length;o--&&(a=s[o],!x.relative[r=a.type]);)if((l=x.find[r])&&(n=l(a.matches[0].replace(kt,xt),bt.test(s[0].type)&&h(e.parentNode)||e))){if(s.splice(o,1),t=n.length&&d(s),!t)return J.apply(i,n),i;break}}return(c||P(t,u))(n,e,!R,i,bt.test(t)&&h(e.parentNode)||e),i},k.sortStable=W.split("").sort(X).join("")===W,k.detectDuplicates=!!A,F(),k.sortDetached=o(function(t){return 1&t.compareDocumentPosition(D.createElement("div"))}),o(function(t){return t.innerHTML="<a href='#'></a>","#"===t.firstChild.getAttribute("href")})||s("type|href|height|width",function(t,e,i){return i?void 0:t.getAttribute(e,"type"===e.toLowerCase()?1:2)}),k.attributes&&o(function(t){return t.innerHTML="<input/>",t.firstChild.setAttribute("value",""),""===t.firstChild.getAttribute("value")})||s("value",function(t,e,i){return i||"input"!==t.nodeName.toLowerCase()?void 0:t.defaultValue}),o(function(t){return null==t.getAttribute("disabled")})||s(et,function(t,e,i){var n;return i?void 0:t[e]===!0?e.toLowerCase():(n=t.getAttributeNode(e))&&n.specified?n.value:null}),e}(t);K.find=ot,K.expr=ot.selectors,K.expr[":"]=K.expr.pseudos,K.unique=ot.uniqueSort,K.text=ot.getText,K.isXMLDoc=ot.isXML,K.contains=ot.contains;var st=K.expr.match.needsContext,at=/^<(\w+)\s*\/?>(?:<\/\1>|)$/,rt=/^.[^:#\[\.,]*$/;K.filter=function(t,e,i){var n=e[0];return i&&(t=":not("+t+")"),1===e.length&&1===n.nodeType?K.find.matchesSelector(n,t)?[n]:[]:K.find.matches(t,K.grep(e,function(t){return 1===t.nodeType}))},K.fn.extend({find:function(t){var e,i=this.length,n=[],o=this;if("string"!=typeof t)return this.pushStack(K(t).filter(function(){for(e=0;i>e;e++)if(K.contains(o[e],this))return!0}));for(e=0;i>e;e++)K.find(t,o[e],n);return n=this.pushStack(i>1?K.unique(n):n),n.selector=this.selector?this.selector+" "+t:t,n},filter:function(t){return this.pushStack(n(this,t||[],!1))},not:function(t){return this.pushStack(n(this,t||[],!0))},is:function(t){return!!n(this,"string"==typeof t&&st.test(t)?K(t):t||[],!1).length}});var lt,ct=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,ht=K.fn.init=function(t,e){var i,n;if(!t)return this;if("string"==typeof t){if(i="<"===t[0]&&">"===t[t.length-1]&&t.length>=3?[null,t,null]:ct.exec(t),!i||!i[1]&&e)return!e||e.jquery?(e||lt).find(t):this.constructor(e).find(t);if(i[1]){if(e=e instanceof K?e[0]:e,K.merge(this,K.parseHTML(i[1],e&&e.nodeType?e.ownerDocument||e:Z,!0)),at.test(i[1])&&K.isPlainObject(e))for(i in e)K.isFunction(this[i])?this[i](e[i]):this.attr(i,e[i]);return this}return n=Z.getElementById(i[2]),n&&n.parentNode&&(this.length=1,this[0]=n),this.context=Z,this.selector=t,this}return t.nodeType?(this.context=this[0]=t,this.length=1,this):K.isFunction(t)?"undefined"!=typeof lt.ready?lt.ready(t):t(K):(void 0!==t.selector&&(this.selector=t.selector,this.context=t.context),K.makeArray(t,this))};ht.prototype=K.fn,lt=K(Z);var ut=/^(?:parents|prev(?:Until|All))/,dt={children:!0,contents:!0,next:!0,prev:!0};K.extend({dir:function(t,e,i){for(var n=[],o=void 0!==i;(t=t[e])&&9!==t.nodeType;)if(1===t.nodeType){if(o&&K(t).is(i))break;n.push(t)}return n},sibling:function(t,e){for(var i=[];t;t=t.nextSibling)1===t.nodeType&&t!==e&&i.push(t);return i}}),K.fn.extend({has:function(t){var e=K(t,this),i=e.length;return this.filter(function(){for(var t=0;i>t;t++)if(K.contains(this,e[t]))return!0})},closest:function(t,e){for(var i,n=0,o=this.length,s=[],a=st.test(t)||"string"!=typeof t?K(t,e||this.context):0;o>n;n++)for(i=this[n];i&&i!==e;i=i.parentNode)if(i.nodeType<11&&(a?a.index(i)>-1:1===i.nodeType&&K.find.matchesSelector(i,t))){s.push(i);break}return this.pushStack(s.length>1?K.unique(s):s)},index:function(t){return t?"string"==typeof t?X.call(K(t),this[0]):X.call(this,t.jquery?t[0]:t):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(t,e){return this.pushStack(K.unique(K.merge(this.get(),K(t,e))))},addBack:function(t){return this.add(null==t?this.prevObject:this.prevObject.filter(t))}}),K.each({parent:function(t){var e=t.parentNode;return e&&11!==e.nodeType?e:null},parents:function(t){return K.dir(t,"parentNode")},parentsUntil:function(t,e,i){return K.dir(t,"parentNode",i)},next:function(t){return o(t,"nextSibling")},prev:function(t){return o(t,"previousSibling")},nextAll:function(t){return K.dir(t,"nextSibling")},prevAll:function(t){return K.dir(t,"previousSibling")},nextUntil:function(t,e,i){return K.dir(t,"nextSibling",i)},prevUntil:function(t,e,i){return K.dir(t,"previousSibling",i)},siblings:function(t){return K.sibling((t.parentNode||{}).firstChild,t)},children:function(t){return K.sibling(t.firstChild)},contents:function(t){return t.contentDocument||K.merge([],t.childNodes)}},function(t,e){K.fn[t]=function(i,n){var o=K.map(this,e,i);return"Until"!==t.slice(-5)&&(n=i),n&&"string"==typeof n&&(o=K.filter(n,o)),this.length>1&&(dt[t]||K.unique(o),ut.test(t)&&o.reverse()),this.pushStack(o)}});var ft=/\S+/g,pt={};K.Callbacks=function(t){t="string"==typeof t?pt[t]||s(t):K.extend({},t);var e,i,n,o,a,r,l=[],c=!t.once&&[],h=function(s){for(e=t.memory&&s,i=!0,r=o||0,o=0,a=l.length,n=!0;l&&a>r;r++)if(l[r].apply(s[0],s[1])===!1&&t.stopOnFalse){e=!1;break}n=!1,l&&(c?c.length&&h(c.shift()):e?l=[]:u.disable())},u={add:function(){if(l){var i=l.length;!function s(e){K.each(e,function(e,i){var n=K.type(i);"function"===n?t.unique&&u.has(i)||l.push(i):i&&i.length&&"string"!==n&&s(i)})}(arguments),n?a=l.length:e&&(o=i,h(e))}return this},remove:function(){return l&&K.each(arguments,function(t,e){for(var i;(i=K.inArray(e,l,i))>-1;)l.splice(i,1),n&&(a>=i&&a--,r>=i&&r--)}),this},has:function(t){return t?K.inArray(t,l)>-1:!(!l||!l.length)},empty:function(){return l=[],a=0,this},disable:function(){return l=c=e=void 0,this},disabled:function(){return!l},lock:function(){return c=void 0,e||u.disable(),this},locked:function(){return!c},fireWith:function(t,e){return!l||i&&!c||(e=e||[],e=[t,e.slice?e.slice():e],n?c.push(e):h(e)),this},fire:function(){return u.fireWith(this,arguments),this},fired:function(){return!!i}};return u},K.extend({Deferred:function(t){var e=[["resolve","done",K.Callbacks("once memory"),"resolved"],["reject","fail",K.Callbacks("once memory"),"rejected"],["notify","progress",K.Callbacks("memory")]],i="pending",n={state:function(){return i},always:function(){return o.done(arguments).fail(arguments),this},then:function(){var t=arguments;return K.Deferred(function(i){K.each(e,function(e,s){var a=K.isFunction(t[e])&&t[e];o[s[1]](function(){var t=a&&a.apply(this,arguments);t&&K.isFunction(t.promise)?t.promise().done(i.resolve).fail(i.reject).progress(i.notify):i[s[0]+"With"](this===n?i.promise():this,a?[t]:arguments)})}),t=null}).promise()},promise:function(t){return null!=t?K.extend(t,n):n}},o={};return n.pipe=n.then,K.each(e,function(t,s){var a=s[2],r=s[3];n[s[1]]=a.add,r&&a.add(function(){i=r},e[1^t][2].disable,e[2][2].lock),o[s[0]]=function(){return o[s[0]+"With"](this===o?n:this,arguments),this},o[s[0]+"With"]=a.fireWith}),n.promise(o),t&&t.call(o,o),o},when:function(t){var e,i,n,o=0,s=U.call(arguments),a=s.length,r=1!==a||t&&K.isFunction(t.promise)?a:0,l=1===r?t:K.Deferred(),c=function(t,i,n){return function(o){i[t]=this,n[t]=arguments.length>1?U.call(arguments):o,n===e?l.notifyWith(i,n):--r||l.resolveWith(i,n)}};if(a>1)for(e=new Array(a),i=new Array(a),n=new Array(a);a>o;o++)s[o]&&K.isFunction(s[o].promise)?s[o].promise().done(c(o,n,s)).fail(l.reject).progress(c(o,i,e)):--r;return r||l.resolveWith(n,s),l.promise()}});var gt;K.fn.ready=function(t){return K.ready.promise().done(t),this},K.extend({isReady:!1,readyWait:1,holdReady:function(t){t?K.readyWait++:K.ready(!0)},ready:function(t){(t===!0?--K.readyWait:K.isReady)||(K.isReady=!0,t!==!0&&--K.readyWait>0||(gt.resolveWith(Z,[K]),K.fn.triggerHandler&&(K(Z).triggerHandler("ready"),K(Z).off("ready"))))}}),K.ready.promise=function(e){return gt||(gt=K.Deferred(),"complete"===Z.readyState?setTimeout(K.ready):(Z.addEventListener("DOMContentLoaded",a,!1),t.addEventListener("load",a,!1))),gt.promise(e)},K.ready.promise();var mt=K.access=function(t,e,i,n,o,s,a){var r=0,l=t.length,c=null==i;if("object"===K.type(i)){o=!0;for(r in i)K.access(t,e,r,i[r],!0,s,a)}else if(void 0!==n&&(o=!0,K.isFunction(n)||(a=!0),c&&(a?(e.call(t,n),e=null):(c=e,e=function(t,e,i){return c.call(K(t),i)})),e))for(;l>r;r++)e(t[r],i,a?n:n.call(t[r],r,e(t[r],i)));return o?t:c?e.call(t):l?e(t[0],i):s};K.acceptData=function(t){return 1===t.nodeType||9===t.nodeType||!+t.nodeType},r.uid=1,r.accepts=K.acceptData,r.prototype={key:function(t){if(!r.accepts(t))return 0;var e={},i=t[this.expando];if(!i){i=r.uid++;try{e[this.expando]={value:i},Object.defineProperties(t,e)}catch(n){e[this.expando]=i,K.extend(t,e)}}return this.cache[i]||(this.cache[i]={}),i},set:function(t,e,i){var n,o=this.key(t),s=this.cache[o];if("string"==typeof e)s[e]=i;else if(K.isEmptyObject(s))K.extend(this.cache[o],e);else for(n in e)s[n]=e[n];return s},get:function(t,e){var i=this.cache[this.key(t)];return void 0===e?i:i[e]},access:function(t,e,i){var n;return void 0===e||e&&"string"==typeof e&&void 0===i?(n=this.get(t,e),void 0!==n?n:this.get(t,K.camelCase(e))):(this.set(t,e,i),void 0!==i?i:e)},remove:function(t,e){var i,n,o,s=this.key(t),a=this.cache[s];if(void 0===e)this.cache[s]={};else{K.isArray(e)?n=e.concat(e.map(K.camelCase)):(o=K.camelCase(e),e in a?n=[e,o]:(n=o,n=n in a?[n]:n.match(ft)||[])),i=n.length;for(;i--;)delete a[n[i]]}},hasData:function(t){return!K.isEmptyObject(this.cache[t[this.expando]]||{})},discard:function(t){t[this.expando]&&delete this.cache[t[this.expando]]}};var vt=new r,yt=new r,bt=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,wt=/([A-Z])/g;K.extend({hasData:function(t){return yt.hasData(t)||vt.hasData(t)},data:function(t,e,i){return yt.access(t,e,i)},removeData:function(t,e){yt.remove(t,e)},_data:function(t,e,i){return vt.access(t,e,i)},_removeData:function(t,e){vt.remove(t,e)}}),K.fn.extend({data:function(t,e){var i,n,o,s=this[0],a=s&&s.attributes;if(void 0===t){if(this.length&&(o=yt.get(s),1===s.nodeType&&!vt.get(s,"hasDataAttrs"))){for(i=a.length;i--;)a[i]&&(n=a[i].name,0===n.indexOf("data-")&&(n=K.camelCase(n.slice(5)),l(s,n,o[n])));vt.set(s,"hasDataAttrs",!0)}return o}return"object"==typeof t?this.each(function(){yt.set(this,t)}):mt(this,function(e){var i,n=K.camelCase(t);if(s&&void 0===e){if(i=yt.get(s,t),void 0!==i)return i;if(i=yt.get(s,n),void 0!==i)return i;if(i=l(s,n,void 0),void 0!==i)return i}else this.each(function(){var i=yt.get(this,n);yt.set(this,n,e),-1!==t.indexOf("-")&&void 0!==i&&yt.set(this,t,e)})},null,e,arguments.length>1,null,!0)},removeData:function(t){return this.each(function(){yt.remove(this,t)})}}),K.extend({queue:function(t,e,i){var n;return t?(e=(e||"fx")+"queue",n=vt.get(t,e),i&&(!n||K.isArray(i)?n=vt.access(t,e,K.makeArray(i)):n.push(i)),n||[]):void 0},dequeue:function(t,e){e=e||"fx";var i=K.queue(t,e),n=i.length,o=i.shift(),s=K._queueHooks(t,e),a=function(){K.dequeue(t,e)};"inprogress"===o&&(o=i.shift(),n--),o&&("fx"===e&&i.unshift("inprogress"),delete s.stop,o.call(t,a,s)),!n&&s&&s.empty.fire()},_queueHooks:function(t,e){var i=e+"queueHooks";return vt.get(t,i)||vt.access(t,i,{empty:K.Callbacks("once memory").add(function(){vt.remove(t,[e+"queue",i])})})}}),K.fn.extend({queue:function(t,e){var i=2;return"string"!=typeof t&&(e=t,t="fx",i--),arguments.length<i?K.queue(this[0],t):void 0===e?this:this.each(function(){var i=K.queue(this,t,e);K._queueHooks(this,t),"fx"===t&&"inprogress"!==i[0]&&K.dequeue(this,t)})},dequeue:function(t){return this.each(function(){K.dequeue(this,t)})},clearQueue:function(t){return this.queue(t||"fx",[])},promise:function(t,e){var i,n=1,o=K.Deferred(),s=this,a=this.length,r=function(){--n||o.resolveWith(s,[s])};for("string"!=typeof t&&(e=t,t=void 0),t=t||"fx";a--;)i=vt.get(s[a],t+"queueHooks"),i&&i.empty&&(n++,i.empty.add(r));return r(),o.promise(e)}});var kt=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,xt=["Top","Right","Bottom","Left"],Ct=function(t,e){return t=e||t,"none"===K.css(t,"display")||!K.contains(t.ownerDocument,t)},St=/^(?:checkbox|radio)$/i;!function(){var t=Z.createDocumentFragment(),e=t.appendChild(Z.createElement("div")),i=Z.createElement("input");i.setAttribute("type","radio"),i.setAttribute("checked","checked"),i.setAttribute("name","t"),e.appendChild(i),Q.checkClone=e.cloneNode(!0).cloneNode(!0).lastChild.checked,e.innerHTML="<textarea>x</textarea>",Q.noCloneChecked=!!e.cloneNode(!0).lastChild.defaultValue}();var Tt="undefined";Q.focusinBubbles="onfocusin"in t;var Pt=/^key/,$t=/^(?:mouse|pointer|contextmenu)|click/,Lt=/^(?:focusinfocus|focusoutblur)$/,Et=/^([^.]*)(?:\.(.+)|)$/;K.event={global:{},add:function(t,e,i,n,o){var s,a,r,l,c,h,u,d,f,p,g,m=vt.get(t);if(m)for(i.handler&&(s=i,i=s.handler,o=s.selector),i.guid||(i.guid=K.guid++),(l=m.events)||(l=m.events={}),(a=m.handle)||(a=m.handle=function(e){return typeof K!==Tt&&K.event.triggered!==e.type?K.event.dispatch.apply(t,arguments):void 0}),e=(e||"").match(ft)||[""],c=e.length;c--;)r=Et.exec(e[c])||[],f=g=r[1],p=(r[2]||"").split(".").sort(),f&&(u=K.event.special[f]||{},f=(o?u.delegateType:u.bindType)||f,u=K.event.special[f]||{},h=K.extend({type:f,origType:g,data:n,handler:i,guid:i.guid,selector:o,needsContext:o&&K.expr.match.needsContext.test(o),namespace:p.join(".")},s),(d=l[f])||(d=l[f]=[],d.delegateCount=0,u.setup&&u.setup.call(t,n,p,a)!==!1||t.addEventListener&&t.addEventListener(f,a,!1)),u.add&&(u.add.call(t,h),h.handler.guid||(h.handler.guid=i.guid)),o?d.splice(d.delegateCount++,0,h):d.push(h),K.event.global[f]=!0)},remove:function(t,e,i,n,o){var s,a,r,l,c,h,u,d,f,p,g,m=vt.hasData(t)&&vt.get(t);if(m&&(l=m.events)){for(e=(e||"").match(ft)||[""],c=e.length;c--;)if(r=Et.exec(e[c])||[],f=g=r[1],p=(r[2]||"").split(".").sort(),f){for(u=K.event.special[f]||{},f=(n?u.delegateType:u.bindType)||f,d=l[f]||[],r=r[2]&&new RegExp("(^|\\.)"+p.join("\\.(?:.*\\.|)")+"(\\.|$)"),a=s=d.length;s--;)h=d[s],!o&&g!==h.origType||i&&i.guid!==h.guid||r&&!r.test(h.namespace)||n&&n!==h.selector&&("**"!==n||!h.selector)||(d.splice(s,1),h.selector&&d.delegateCount--,u.remove&&u.remove.call(t,h));a&&!d.length&&(u.teardown&&u.teardown.call(t,p,m.handle)!==!1||K.removeEvent(t,f,m.handle),delete l[f])}else for(f in l)K.event.remove(t,f+e[c],i,n,!0);K.isEmptyObject(l)&&(delete m.handle,vt.remove(t,"events"))}},trigger:function(e,i,n,o){var s,a,r,l,c,h,u,d=[n||Z],f=G.call(e,"type")?e.type:e,p=G.call(e,"namespace")?e.namespace.split("."):[];if(a=r=n=n||Z,3!==n.nodeType&&8!==n.nodeType&&!Lt.test(f+K.event.triggered)&&(f.indexOf(".")>=0&&(p=f.split("."),f=p.shift(),p.sort()),c=f.indexOf(":")<0&&"on"+f,e=e[K.expando]?e:new K.Event(f,"object"==typeof e&&e),e.isTrigger=o?2:3,e.namespace=p.join("."),e.namespace_re=e.namespace?new RegExp("(^|\\.)"+p.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=n),i=null==i?[e]:K.makeArray(i,[e]),u=K.event.special[f]||{},o||!u.trigger||u.trigger.apply(n,i)!==!1)){if(!o&&!u.noBubble&&!K.isWindow(n)){for(l=u.delegateType||f,Lt.test(l+f)||(a=a.parentNode);a;a=a.parentNode)d.push(a),r=a;r===(n.ownerDocument||Z)&&d.push(r.defaultView||r.parentWindow||t)}for(s=0;(a=d[s++])&&!e.isPropagationStopped();)e.type=s>1?l:u.bindType||f,h=(vt.get(a,"events")||{})[e.type]&&vt.get(a,"handle"),h&&h.apply(a,i),h=c&&a[c],h&&h.apply&&K.acceptData(a)&&(e.result=h.apply(a,i),e.result===!1&&e.preventDefault());return e.type=f,o||e.isDefaultPrevented()||u._default&&u._default.apply(d.pop(),i)!==!1||!K.acceptData(n)||c&&K.isFunction(n[f])&&!K.isWindow(n)&&(r=n[c],r&&(n[c]=null),K.event.triggered=f,n[f](),K.event.triggered=void 0,r&&(n[c]=r)),e.result}},dispatch:function(t){t=K.event.fix(t);var e,i,n,o,s,a=[],r=U.call(arguments),l=(vt.get(this,"events")||{})[t.type]||[],c=K.event.special[t.type]||{};if(r[0]=t,t.delegateTarget=this,!c.preDispatch||c.preDispatch.call(this,t)!==!1){for(a=K.event.handlers.call(this,t,l),e=0;(o=a[e++])&&!t.isPropagationStopped();)for(t.currentTarget=o.elem,i=0;(s=o.handlers[i++])&&!t.isImmediatePropagationStopped();)(!t.namespace_re||t.namespace_re.test(s.namespace))&&(t.handleObj=s,t.data=s.data,n=((K.event.special[s.origType]||{}).handle||s.handler).apply(o.elem,r),void 0!==n&&(t.result=n)===!1&&(t.preventDefault(),t.stopPropagation()));return c.postDispatch&&c.postDispatch.call(this,t),t.result}},handlers:function(t,e){var i,n,o,s,a=[],r=e.delegateCount,l=t.target;if(r&&l.nodeType&&(!t.button||"click"!==t.type))for(;l!==this;l=l.parentNode||this)if(l.disabled!==!0||"click"!==t.type){for(n=[],i=0;r>i;i++)s=e[i],o=s.selector+" ",void 0===n[o]&&(n[o]=s.needsContext?K(o,this).index(l)>=0:K.find(o,this,null,[l]).length),n[o]&&n.push(s);n.length&&a.push({elem:l,handlers:n})}return r<e.length&&a.push({elem:this,handlers:e.slice(r)}),a},props:"altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),fixHooks:{},keyHooks:{props:"char charCode key keyCode".split(" "),filter:function(t,e){return null==t.which&&(t.which=null!=e.charCode?e.charCode:e.keyCode),t}},mouseHooks:{props:"button buttons clientX clientY offsetX offsetY pageX pageY screenX screenY toElement".split(" "),filter:function(t,e){var i,n,o,s=e.button;return null==t.pageX&&null!=e.clientX&&(i=t.target.ownerDocument||Z,n=i.documentElement,o=i.body,t.pageX=e.clientX+(n&&n.scrollLeft||o&&o.scrollLeft||0)-(n&&n.clientLeft||o&&o.clientLeft||0),t.pageY=e.clientY+(n&&n.scrollTop||o&&o.scrollTop||0)-(n&&n.clientTop||o&&o.clientTop||0)),t.which||void 0===s||(t.which=1&s?1:2&s?3:4&s?2:0),t}},fix:function(t){if(t[K.expando])return t;var e,i,n,o=t.type,s=t,a=this.fixHooks[o];for(a||(this.fixHooks[o]=a=$t.test(o)?this.mouseHooks:Pt.test(o)?this.keyHooks:{}),n=a.props?this.props.concat(a.props):this.props,t=new K.Event(s),e=n.length;e--;)i=n[e],t[i]=s[i];return t.target||(t.target=Z),3===t.target.nodeType&&(t.target=t.target.parentNode),a.filter?a.filter(t,s):t},special:{load:{noBubble:!0},focus:{trigger:function(){return this!==u()&&this.focus?(this.focus(),!1):void 0},delegateType:"focusin"},blur:{trigger:function(){return this===u()&&this.blur?(this.blur(),!1):void 0},delegateType:"focusout"},click:{trigger:function(){return"checkbox"===this.type&&this.click&&K.nodeName(this,"input")?(this.click(),!1):void 0},_default:function(t){return K.nodeName(t.target,"a")}},beforeunload:{postDispatch:function(t){void 0!==t.result&&t.originalEvent&&(t.originalEvent.returnValue=t.result)}}},simulate:function(t,e,i,n){var o=K.extend(new K.Event,i,{type:t,isSimulated:!0,originalEvent:{}});n?K.event.trigger(o,null,e):K.event.dispatch.call(e,o),o.isDefaultPrevented()&&i.preventDefault()}},K.removeEvent=function(t,e,i){t.removeEventListener&&t.removeEventListener(e,i,!1)},K.Event=function(t,e){return this instanceof K.Event?(t&&t.type?(this.originalEvent=t,this.type=t.type,this.isDefaultPrevented=t.defaultPrevented||void 0===t.defaultPrevented&&t.returnValue===!1?c:h):this.type=t,e&&K.extend(this,e),this.timeStamp=t&&t.timeStamp||K.now(),void(this[K.expando]=!0)):new K.Event(t,e)},K.Event.prototype={isDefaultPrevented:h,isPropagationStopped:h,isImmediatePropagationStopped:h,preventDefault:function(){var t=this.originalEvent;this.isDefaultPrevented=c,t&&t.preventDefault&&t.preventDefault()},stopPropagation:function(){var t=this.originalEvent;this.isPropagationStopped=c,t&&t.stopPropagation&&t.stopPropagation()},stopImmediatePropagation:function(){var t=this.originalEvent;this.isImmediatePropagationStopped=c,t&&t.stopImmediatePropagation&&t.stopImmediatePropagation(),this.stopPropagation()}},K.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(t,e){K.event.special[t]={delegateType:e,bindType:e,handle:function(t){var i,n=this,o=t.relatedTarget,s=t.handleObj;return(!o||o!==n&&!K.contains(n,o))&&(t.type=s.origType,i=s.handler.apply(this,arguments),t.type=e),i}}}),Q.focusinBubbles||K.each({focus:"focusin",blur:"focusout"},function(t,e){var i=function(t){K.event.simulate(e,t.target,K.event.fix(t),!0)};K.event.special[e]={setup:function(){var n=this.ownerDocument||this,o=vt.access(n,e);o||n.addEventListener(t,i,!0),vt.access(n,e,(o||0)+1)},teardown:function(){var n=this.ownerDocument||this,o=vt.access(n,e)-1;o?vt.access(n,e,o):(n.removeEventListener(t,i,!0),vt.remove(n,e))}}}),K.fn.extend({on:function(t,e,i,n,o){var s,a;if("object"==typeof t){"string"!=typeof e&&(i=i||e,e=void 0);for(a in t)this.on(a,e,i,t[a],o);return this}if(null==i&&null==n?(n=e,i=e=void 0):null==n&&("string"==typeof e?(n=i,i=void 0):(n=i,i=e,e=void 0)),n===!1)n=h;else if(!n)return this;return 1===o&&(s=n,n=function(t){return K().off(t),s.apply(this,arguments)},n.guid=s.guid||(s.guid=K.guid++)),this.each(function(){K.event.add(this,t,n,i,e)})},one:function(t,e,i,n){return this.on(t,e,i,n,1)},off:function(t,e,i){var n,o;if(t&&t.preventDefault&&t.handleObj)return n=t.handleObj,K(t.delegateTarget).off(n.namespace?n.origType+"."+n.namespace:n.origType,n.selector,n.handler),this;if("object"==typeof t){for(o in t)this.off(o,e,t[o]);return this}return(e===!1||"function"==typeof e)&&(i=e,e=void 0),i===!1&&(i=h),this.each(function(){K.event.remove(this,t,i,e)})},trigger:function(t,e){return this.each(function(){K.event.trigger(t,e,this)})},triggerHandler:function(t,e){var i=this[0];return i?K.event.trigger(t,e,i,!0):void 0}});var At=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,Ft=/<([\w:]+)/,Dt=/<|&#?\w+;/,Mt=/<(?:script|style|link)/i,Rt=/checked\s*(?:[^=]|=\s*.checked.)/i,jt=/^$|\/(?:java|ecma)script/i,Nt=/^true\/(.*)/,It=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,Ot={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};Ot.optgroup=Ot.option,Ot.tbody=Ot.tfoot=Ot.colgroup=Ot.caption=Ot.thead,Ot.th=Ot.td,K.extend({clone:function(t,e,i){var n,o,s,a,r=t.cloneNode(!0),l=K.contains(t.ownerDocument,t);if(!(Q.noCloneChecked||1!==t.nodeType&&11!==t.nodeType||K.isXMLDoc(t)))for(a=v(r),s=v(t),n=0,o=s.length;o>n;n++)y(s[n],a[n]);if(e)if(i)for(s=s||v(t),a=a||v(r),n=0,o=s.length;o>n;n++)m(s[n],a[n]);else m(t,r);return a=v(r,"script"),a.length>0&&g(a,!l&&v(t,"script")),r},buildFragment:function(t,e,i,n){for(var o,s,a,r,l,c,h=e.createDocumentFragment(),u=[],d=0,f=t.length;f>d;d++)if(o=t[d],o||0===o)if("object"===K.type(o))K.merge(u,o.nodeType?[o]:o);else if(Dt.test(o)){for(s=s||h.appendChild(e.createElement("div")),a=(Ft.exec(o)||["",""])[1].toLowerCase(),
r=Ot[a]||Ot._default,s.innerHTML=r[1]+o.replace(At,"<$1></$2>")+r[2],c=r[0];c--;)s=s.lastChild;K.merge(u,s.childNodes),s=h.firstChild,s.textContent=""}else u.push(e.createTextNode(o));for(h.textContent="",d=0;o=u[d++];)if((!n||-1===K.inArray(o,n))&&(l=K.contains(o.ownerDocument,o),s=v(h.appendChild(o),"script"),l&&g(s),i))for(c=0;o=s[c++];)jt.test(o.type||"")&&i.push(o);return h},cleanData:function(t){for(var e,i,n,o,s=K.event.special,a=0;void 0!==(i=t[a]);a++){if(K.acceptData(i)&&(o=i[vt.expando],o&&(e=vt.cache[o]))){if(e.events)for(n in e.events)s[n]?K.event.remove(i,n):K.removeEvent(i,n,e.handle);vt.cache[o]&&delete vt.cache[o]}delete yt.cache[i[yt.expando]]}}}),K.fn.extend({text:function(t){return mt(this,function(t){return void 0===t?K.text(this):this.empty().each(function(){(1===this.nodeType||11===this.nodeType||9===this.nodeType)&&(this.textContent=t)})},null,t,arguments.length)},append:function(){return this.domManip(arguments,function(t){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var e=d(this,t);e.appendChild(t)}})},prepend:function(){return this.domManip(arguments,function(t){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var e=d(this,t);e.insertBefore(t,e.firstChild)}})},before:function(){return this.domManip(arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this)})},after:function(){return this.domManip(arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this.nextSibling)})},remove:function(t,e){for(var i,n=t?K.filter(t,this):this,o=0;null!=(i=n[o]);o++)e||1!==i.nodeType||K.cleanData(v(i)),i.parentNode&&(e&&K.contains(i.ownerDocument,i)&&g(v(i,"script")),i.parentNode.removeChild(i));return this},empty:function(){for(var t,e=0;null!=(t=this[e]);e++)1===t.nodeType&&(K.cleanData(v(t,!1)),t.textContent="");return this},clone:function(t,e){return t=null==t?!1:t,e=null==e?t:e,this.map(function(){return K.clone(this,t,e)})},html:function(t){return mt(this,function(t){var e=this[0]||{},i=0,n=this.length;if(void 0===t&&1===e.nodeType)return e.innerHTML;if("string"==typeof t&&!Mt.test(t)&&!Ot[(Ft.exec(t)||["",""])[1].toLowerCase()]){t=t.replace(At,"<$1></$2>");try{for(;n>i;i++)e=this[i]||{},1===e.nodeType&&(K.cleanData(v(e,!1)),e.innerHTML=t);e=0}catch(o){}}e&&this.empty().append(t)},null,t,arguments.length)},replaceWith:function(){var t=arguments[0];return this.domManip(arguments,function(e){t=this.parentNode,K.cleanData(v(this)),t&&t.replaceChild(e,this)}),t&&(t.length||t.nodeType)?this:this.remove()},detach:function(t){return this.remove(t,!0)},domManip:function(t,e){t=B.apply([],t);var i,n,o,s,a,r,l=0,c=this.length,h=this,u=c-1,d=t[0],g=K.isFunction(d);if(g||c>1&&"string"==typeof d&&!Q.checkClone&&Rt.test(d))return this.each(function(i){var n=h.eq(i);g&&(t[0]=d.call(this,i,n.html())),n.domManip(t,e)});if(c&&(i=K.buildFragment(t,this[0].ownerDocument,!1,this),n=i.firstChild,1===i.childNodes.length&&(i=n),n)){for(o=K.map(v(i,"script"),f),s=o.length;c>l;l++)a=i,l!==u&&(a=K.clone(a,!0,!0),s&&K.merge(o,v(a,"script"))),e.call(this[l],a,l);if(s)for(r=o[o.length-1].ownerDocument,K.map(o,p),l=0;s>l;l++)a=o[l],jt.test(a.type||"")&&!vt.access(a,"globalEval")&&K.contains(r,a)&&(a.src?K._evalUrl&&K._evalUrl(a.src):K.globalEval(a.textContent.replace(It,"")))}return this}}),K.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(t,e){K.fn[t]=function(t){for(var i,n=[],o=K(t),s=o.length-1,a=0;s>=a;a++)i=a===s?this:this.clone(!0),K(o[a])[e](i),_.apply(n,i.get());return this.pushStack(n)}});var Wt,Ht={},zt=/^margin/,qt=new RegExp("^("+kt+")(?!px)[a-z%]+$","i"),Ut=function(e){return e.ownerDocument.defaultView.opener?e.ownerDocument.defaultView.getComputedStyle(e,null):t.getComputedStyle(e,null)};!function(){function e(){a.style.cssText="-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;display:block;margin-top:1%;top:1%;border:1px;padding:1px;width:4px;position:absolute",a.innerHTML="",o.appendChild(s);var e=t.getComputedStyle(a,null);i="1%"!==e.top,n="4px"===e.width,o.removeChild(s)}var i,n,o=Z.documentElement,s=Z.createElement("div"),a=Z.createElement("div");a.style&&(a.style.backgroundClip="content-box",a.cloneNode(!0).style.backgroundClip="",Q.clearCloneStyle="content-box"===a.style.backgroundClip,s.style.cssText="border:0;width:0;height:0;top:0;left:-9999px;margin-top:1px;position:absolute",s.appendChild(a),t.getComputedStyle&&K.extend(Q,{pixelPosition:function(){return e(),i},boxSizingReliable:function(){return null==n&&e(),n},reliableMarginRight:function(){var e,i=a.appendChild(Z.createElement("div"));return i.style.cssText=a.style.cssText="-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:0",i.style.marginRight=i.style.width="0",a.style.width="1px",o.appendChild(s),e=!parseFloat(t.getComputedStyle(i,null).marginRight),o.removeChild(s),a.removeChild(i),e}}))}(),K.swap=function(t,e,i,n){var o,s,a={};for(s in e)a[s]=t.style[s],t.style[s]=e[s];o=i.apply(t,n||[]);for(s in e)t.style[s]=a[s];return o};var Bt=/^(none|table(?!-c[ea]).+)/,_t=new RegExp("^("+kt+")(.*)$","i"),Xt=new RegExp("^([+-])=("+kt+")","i"),Vt={position:"absolute",visibility:"hidden",display:"block"},Yt={letterSpacing:"0",fontWeight:"400"},Gt=["Webkit","O","Moz","ms"];K.extend({cssHooks:{opacity:{get:function(t,e){if(e){var i=k(t,"opacity");return""===i?"1":i}}}},cssNumber:{columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{"float":"cssFloat"},style:function(t,e,i,n){if(t&&3!==t.nodeType&&8!==t.nodeType&&t.style){var o,s,a,r=K.camelCase(e),l=t.style;return e=K.cssProps[r]||(K.cssProps[r]=C(l,r)),a=K.cssHooks[e]||K.cssHooks[r],void 0===i?a&&"get"in a&&void 0!==(o=a.get(t,!1,n))?o:l[e]:(s=typeof i,"string"===s&&(o=Xt.exec(i))&&(i=(o[1]+1)*o[2]+parseFloat(K.css(t,e)),s="number"),null!=i&&i===i&&("number"!==s||K.cssNumber[r]||(i+="px"),Q.clearCloneStyle||""!==i||0!==e.indexOf("background")||(l[e]="inherit"),a&&"set"in a&&void 0===(i=a.set(t,i,n))||(l[e]=i)),void 0)}},css:function(t,e,i,n){var o,s,a,r=K.camelCase(e);return e=K.cssProps[r]||(K.cssProps[r]=C(t.style,r)),a=K.cssHooks[e]||K.cssHooks[r],a&&"get"in a&&(o=a.get(t,!0,i)),void 0===o&&(o=k(t,e,n)),"normal"===o&&e in Yt&&(o=Yt[e]),""===i||i?(s=parseFloat(o),i===!0||K.isNumeric(s)?s||0:o):o}}),K.each(["height","width"],function(t,e){K.cssHooks[e]={get:function(t,i,n){return i?Bt.test(K.css(t,"display"))&&0===t.offsetWidth?K.swap(t,Vt,function(){return P(t,e,n)}):P(t,e,n):void 0},set:function(t,i,n){var o=n&&Ut(t);return S(t,i,n?T(t,e,n,"border-box"===K.css(t,"boxSizing",!1,o),o):0)}}}),K.cssHooks.marginRight=x(Q.reliableMarginRight,function(t,e){return e?K.swap(t,{display:"inline-block"},k,[t,"marginRight"]):void 0}),K.each({margin:"",padding:"",border:"Width"},function(t,e){K.cssHooks[t+e]={expand:function(i){for(var n=0,o={},s="string"==typeof i?i.split(" "):[i];4>n;n++)o[t+xt[n]+e]=s[n]||s[n-2]||s[0];return o}},zt.test(t)||(K.cssHooks[t+e].set=S)}),K.fn.extend({css:function(t,e){return mt(this,function(t,e,i){var n,o,s={},a=0;if(K.isArray(e)){for(n=Ut(t),o=e.length;o>a;a++)s[e[a]]=K.css(t,e[a],!1,n);return s}return void 0!==i?K.style(t,e,i):K.css(t,e)},t,e,arguments.length>1)},show:function(){return $(this,!0)},hide:function(){return $(this)},toggle:function(t){return"boolean"==typeof t?t?this.show():this.hide():this.each(function(){Ct(this)?K(this).show():K(this).hide()})}}),K.Tween=L,L.prototype={constructor:L,init:function(t,e,i,n,o,s){this.elem=t,this.prop=i,this.easing=o||"swing",this.options=e,this.start=this.now=this.cur(),this.end=n,this.unit=s||(K.cssNumber[i]?"":"px")},cur:function(){var t=L.propHooks[this.prop];return t&&t.get?t.get(this):L.propHooks._default.get(this)},run:function(t){var e,i=L.propHooks[this.prop];return this.options.duration?this.pos=e=K.easing[this.easing](t,this.options.duration*t,0,1,this.options.duration):this.pos=e=t,this.now=(this.end-this.start)*e+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),i&&i.set?i.set(this):L.propHooks._default.set(this),this}},L.prototype.init.prototype=L.prototype,L.propHooks={_default:{get:function(t){var e;return null==t.elem[t.prop]||t.elem.style&&null!=t.elem.style[t.prop]?(e=K.css(t.elem,t.prop,""),e&&"auto"!==e?e:0):t.elem[t.prop]},set:function(t){K.fx.step[t.prop]?K.fx.step[t.prop](t):t.elem.style&&(null!=t.elem.style[K.cssProps[t.prop]]||K.cssHooks[t.prop])?K.style(t.elem,t.prop,t.now+t.unit):t.elem[t.prop]=t.now}}},L.propHooks.scrollTop=L.propHooks.scrollLeft={set:function(t){t.elem.nodeType&&t.elem.parentNode&&(t.elem[t.prop]=t.now)}},K.easing={linear:function(t){return t},swing:function(t){return.5-Math.cos(t*Math.PI)/2}},K.fx=L.prototype.init,K.fx.step={};var Qt,Zt,Jt=/^(?:toggle|show|hide)$/,Kt=new RegExp("^(?:([+-])=|)("+kt+")([a-z%]*)$","i"),te=/queueHooks$/,ee=[D],ie={"*":[function(t,e){var i=this.createTween(t,e),n=i.cur(),o=Kt.exec(e),s=o&&o[3]||(K.cssNumber[t]?"":"px"),a=(K.cssNumber[t]||"px"!==s&&+n)&&Kt.exec(K.css(i.elem,t)),r=1,l=20;if(a&&a[3]!==s){s=s||a[3],o=o||[],a=+n||1;do r=r||".5",a/=r,K.style(i.elem,t,a+s);while(r!==(r=i.cur()/n)&&1!==r&&--l)}return o&&(a=i.start=+a||+n||0,i.unit=s,i.end=o[1]?a+(o[1]+1)*o[2]:+o[2]),i}]};K.Animation=K.extend(R,{tweener:function(t,e){K.isFunction(t)?(e=t,t=["*"]):t=t.split(" ");for(var i,n=0,o=t.length;o>n;n++)i=t[n],ie[i]=ie[i]||[],ie[i].unshift(e)},prefilter:function(t,e){e?ee.unshift(t):ee.push(t)}}),K.speed=function(t,e,i){var n=t&&"object"==typeof t?K.extend({},t):{complete:i||!i&&e||K.isFunction(t)&&t,duration:t,easing:i&&e||e&&!K.isFunction(e)&&e};return n.duration=K.fx.off?0:"number"==typeof n.duration?n.duration:n.duration in K.fx.speeds?K.fx.speeds[n.duration]:K.fx.speeds._default,(null==n.queue||n.queue===!0)&&(n.queue="fx"),n.old=n.complete,n.complete=function(){K.isFunction(n.old)&&n.old.call(this),n.queue&&K.dequeue(this,n.queue)},n},K.fn.extend({fadeTo:function(t,e,i,n){return this.filter(Ct).css("opacity",0).show().end().animate({opacity:e},t,i,n)},animate:function(t,e,i,n){var o=K.isEmptyObject(t),s=K.speed(e,i,n),a=function(){var e=R(this,K.extend({},t),s);(o||vt.get(this,"finish"))&&e.stop(!0)};return a.finish=a,o||s.queue===!1?this.each(a):this.queue(s.queue,a)},stop:function(t,e,i){var n=function(t){var e=t.stop;delete t.stop,e(i)};return"string"!=typeof t&&(i=e,e=t,t=void 0),e&&t!==!1&&this.queue(t||"fx",[]),this.each(function(){var e=!0,o=null!=t&&t+"queueHooks",s=K.timers,a=vt.get(this);if(o)a[o]&&a[o].stop&&n(a[o]);else for(o in a)a[o]&&a[o].stop&&te.test(o)&&n(a[o]);for(o=s.length;o--;)s[o].elem!==this||null!=t&&s[o].queue!==t||(s[o].anim.stop(i),e=!1,s.splice(o,1));(e||!i)&&K.dequeue(this,t)})},finish:function(t){return t!==!1&&(t=t||"fx"),this.each(function(){var e,i=vt.get(this),n=i[t+"queue"],o=i[t+"queueHooks"],s=K.timers,a=n?n.length:0;for(i.finish=!0,K.queue(this,t,[]),o&&o.stop&&o.stop.call(this,!0),e=s.length;e--;)s[e].elem===this&&s[e].queue===t&&(s[e].anim.stop(!0),s.splice(e,1));for(e=0;a>e;e++)n[e]&&n[e].finish&&n[e].finish.call(this);delete i.finish})}}),K.each(["toggle","show","hide"],function(t,e){var i=K.fn[e];K.fn[e]=function(t,n,o){return null==t||"boolean"==typeof t?i.apply(this,arguments):this.animate(A(e,!0),t,n,o)}}),K.each({slideDown:A("show"),slideUp:A("hide"),slideToggle:A("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(t,e){K.fn[t]=function(t,i,n){return this.animate(e,t,i,n)}}),K.timers=[],K.fx.tick=function(){var t,e=0,i=K.timers;for(Qt=K.now();e<i.length;e++)t=i[e],t()||i[e]!==t||i.splice(e--,1);i.length||K.fx.stop(),Qt=void 0},K.fx.timer=function(t){K.timers.push(t),t()?K.fx.start():K.timers.pop()},K.fx.interval=13,K.fx.start=function(){Zt||(Zt=setInterval(K.fx.tick,K.fx.interval))},K.fx.stop=function(){clearInterval(Zt),Zt=null},K.fx.speeds={slow:600,fast:200,_default:400},K.fn.delay=function(t,e){return t=K.fx?K.fx.speeds[t]||t:t,e=e||"fx",this.queue(e,function(e,i){var n=setTimeout(e,t);i.stop=function(){clearTimeout(n)}})},function(){var t=Z.createElement("input"),e=Z.createElement("select"),i=e.appendChild(Z.createElement("option"));t.type="checkbox",Q.checkOn=""!==t.value,Q.optSelected=i.selected,e.disabled=!0,Q.optDisabled=!i.disabled,t=Z.createElement("input"),t.value="t",t.type="radio",Q.radioValue="t"===t.value}();var ne,oe,se=K.expr.attrHandle;K.fn.extend({attr:function(t,e){return mt(this,K.attr,t,e,arguments.length>1)},removeAttr:function(t){return this.each(function(){K.removeAttr(this,t)})}}),K.extend({attr:function(t,e,i){var n,o,s=t.nodeType;if(t&&3!==s&&8!==s&&2!==s)return typeof t.getAttribute===Tt?K.prop(t,e,i):(1===s&&K.isXMLDoc(t)||(e=e.toLowerCase(),n=K.attrHooks[e]||(K.expr.match.bool.test(e)?oe:ne)),void 0===i?n&&"get"in n&&null!==(o=n.get(t,e))?o:(o=K.find.attr(t,e),null==o?void 0:o):null!==i?n&&"set"in n&&void 0!==(o=n.set(t,i,e))?o:(t.setAttribute(e,i+""),i):void K.removeAttr(t,e))},removeAttr:function(t,e){var i,n,o=0,s=e&&e.match(ft);if(s&&1===t.nodeType)for(;i=s[o++];)n=K.propFix[i]||i,K.expr.match.bool.test(i)&&(t[n]=!1),t.removeAttribute(i)},attrHooks:{type:{set:function(t,e){if(!Q.radioValue&&"radio"===e&&K.nodeName(t,"input")){var i=t.value;return t.setAttribute("type",e),i&&(t.value=i),e}}}}}),oe={set:function(t,e,i){return e===!1?K.removeAttr(t,i):t.setAttribute(i,i),i}},K.each(K.expr.match.bool.source.match(/\w+/g),function(t,e){var i=se[e]||K.find.attr;se[e]=function(t,e,n){var o,s;return n||(s=se[e],se[e]=o,o=null!=i(t,e,n)?e.toLowerCase():null,se[e]=s),o}});var ae=/^(?:input|select|textarea|button)$/i;K.fn.extend({prop:function(t,e){return mt(this,K.prop,t,e,arguments.length>1)},removeProp:function(t){return this.each(function(){delete this[K.propFix[t]||t]})}}),K.extend({propFix:{"for":"htmlFor","class":"className"},prop:function(t,e,i){var n,o,s,a=t.nodeType;if(t&&3!==a&&8!==a&&2!==a)return s=1!==a||!K.isXMLDoc(t),s&&(e=K.propFix[e]||e,o=K.propHooks[e]),void 0!==i?o&&"set"in o&&void 0!==(n=o.set(t,i,e))?n:t[e]=i:o&&"get"in o&&null!==(n=o.get(t,e))?n:t[e]},propHooks:{tabIndex:{get:function(t){return t.hasAttribute("tabindex")||ae.test(t.nodeName)||t.href?t.tabIndex:-1}}}}),Q.optSelected||(K.propHooks.selected={get:function(t){var e=t.parentNode;return e&&e.parentNode&&e.parentNode.selectedIndex,null}}),K.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){K.propFix[this.toLowerCase()]=this});var re=/[\t\r\n\f]/g;K.fn.extend({addClass:function(t){var e,i,n,o,s,a,r="string"==typeof t&&t,l=0,c=this.length;if(K.isFunction(t))return this.each(function(e){K(this).addClass(t.call(this,e,this.className))});if(r)for(e=(t||"").match(ft)||[];c>l;l++)if(i=this[l],n=1===i.nodeType&&(i.className?(" "+i.className+" ").replace(re," "):" ")){for(s=0;o=e[s++];)n.indexOf(" "+o+" ")<0&&(n+=o+" ");a=K.trim(n),i.className!==a&&(i.className=a)}return this},removeClass:function(t){var e,i,n,o,s,a,r=0===arguments.length||"string"==typeof t&&t,l=0,c=this.length;if(K.isFunction(t))return this.each(function(e){K(this).removeClass(t.call(this,e,this.className))});if(r)for(e=(t||"").match(ft)||[];c>l;l++)if(i=this[l],n=1===i.nodeType&&(i.className?(" "+i.className+" ").replace(re," "):"")){for(s=0;o=e[s++];)for(;n.indexOf(" "+o+" ")>=0;)n=n.replace(" "+o+" "," ");a=t?K.trim(n):"",i.className!==a&&(i.className=a)}return this},toggleClass:function(t,e){var i=typeof t;return"boolean"==typeof e&&"string"===i?e?this.addClass(t):this.removeClass(t):K.isFunction(t)?this.each(function(i){K(this).toggleClass(t.call(this,i,this.className,e),e)}):this.each(function(){if("string"===i)for(var e,n=0,o=K(this),s=t.match(ft)||[];e=s[n++];)o.hasClass(e)?o.removeClass(e):o.addClass(e);else(i===Tt||"boolean"===i)&&(this.className&&vt.set(this,"__className__",this.className),this.className=this.className||t===!1?"":vt.get(this,"__className__")||"")})},hasClass:function(t){for(var e=" "+t+" ",i=0,n=this.length;n>i;i++)if(1===this[i].nodeType&&(" "+this[i].className+" ").replace(re," ").indexOf(e)>=0)return!0;return!1}});var le=/\r/g;K.fn.extend({val:function(t){var e,i,n,o=this[0];{if(arguments.length)return n=K.isFunction(t),this.each(function(i){var o;1===this.nodeType&&(o=n?t.call(this,i,K(this).val()):t,null==o?o="":"number"==typeof o?o+="":K.isArray(o)&&(o=K.map(o,function(t){return null==t?"":t+""})),e=K.valHooks[this.type]||K.valHooks[this.nodeName.toLowerCase()],e&&"set"in e&&void 0!==e.set(this,o,"value")||(this.value=o))});if(o)return e=K.valHooks[o.type]||K.valHooks[o.nodeName.toLowerCase()],e&&"get"in e&&void 0!==(i=e.get(o,"value"))?i:(i=o.value,"string"==typeof i?i.replace(le,""):null==i?"":i)}}}),K.extend({valHooks:{option:{get:function(t){var e=K.find.attr(t,"value");return null!=e?e:K.trim(K.text(t))}},select:{get:function(t){for(var e,i,n=t.options,o=t.selectedIndex,s="select-one"===t.type||0>o,a=s?null:[],r=s?o+1:n.length,l=0>o?r:s?o:0;r>l;l++)if(i=n[l],(i.selected||l===o)&&(Q.optDisabled?!i.disabled:null===i.getAttribute("disabled"))&&(!i.parentNode.disabled||!K.nodeName(i.parentNode,"optgroup"))){if(e=K(i).val(),s)return e;a.push(e)}return a},set:function(t,e){for(var i,n,o=t.options,s=K.makeArray(e),a=o.length;a--;)n=o[a],(n.selected=K.inArray(n.value,s)>=0)&&(i=!0);return i||(t.selectedIndex=-1),s}}}}),K.each(["radio","checkbox"],function(){K.valHooks[this]={set:function(t,e){return K.isArray(e)?t.checked=K.inArray(K(t).val(),e)>=0:void 0}},Q.checkOn||(K.valHooks[this].get=function(t){return null===t.getAttribute("value")?"on":t.value})}),K.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "),function(t,e){K.fn[e]=function(t,i){return arguments.length>0?this.on(e,null,t,i):this.trigger(e)}}),K.fn.extend({hover:function(t,e){return this.mouseenter(t).mouseleave(e||t)},bind:function(t,e,i){return this.on(t,null,e,i)},unbind:function(t,e){return this.off(t,null,e)},delegate:function(t,e,i,n){return this.on(e,t,i,n)},undelegate:function(t,e,i){return 1===arguments.length?this.off(t,"**"):this.off(e,t||"**",i)}});var ce=K.now(),he=/\?/;K.parseJSON=function(t){return JSON.parse(t+"")},K.parseXML=function(t){var e,i;if(!t||"string"!=typeof t)return null;try{i=new DOMParser,e=i.parseFromString(t,"text/xml")}catch(n){e=void 0}return(!e||e.getElementsByTagName("parsererror").length)&&K.error("Invalid XML: "+t),e};var ue=/#.*$/,de=/([?&])_=[^&]*/,fe=/^(.*?):[ \t]*([^\r\n]*)$/gm,pe=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,ge=/^(?:GET|HEAD)$/,me=/^\/\//,ve=/^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/,ye={},be={},we="*/".concat("*"),ke=t.location.href,xe=ve.exec(ke.toLowerCase())||[];K.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:ke,type:"GET",isLocal:pe.test(xe[1]),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":we,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/xml/,html:/html/,json:/json/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":K.parseJSON,"text xml":K.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(t,e){return e?I(I(t,K.ajaxSettings),e):I(K.ajaxSettings,t)},ajaxPrefilter:j(ye),ajaxTransport:j(be),ajax:function(t,e){function i(t,e,i,a){var l,h,v,y,w,x=e;2!==b&&(b=2,r&&clearTimeout(r),n=void 0,s=a||"",k.readyState=t>0?4:0,l=t>=200&&300>t||304===t,i&&(y=O(u,k,i)),y=W(u,y,k,l),l?(u.ifModified&&(w=k.getResponseHeader("Last-Modified"),w&&(K.lastModified[o]=w),w=k.getResponseHeader("etag"),w&&(K.etag[o]=w)),204===t||"HEAD"===u.type?x="nocontent":304===t?x="notmodified":(x=y.state,h=y.data,v=y.error,l=!v)):(v=x,(t||!x)&&(x="error",0>t&&(t=0))),k.status=t,k.statusText=(e||x)+"",l?p.resolveWith(d,[h,x,k]):p.rejectWith(d,[k,x,v]),k.statusCode(m),m=void 0,c&&f.trigger(l?"ajaxSuccess":"ajaxError",[k,u,l?h:v]),g.fireWith(d,[k,x]),c&&(f.trigger("ajaxComplete",[k,u]),--K.active||K.event.trigger("ajaxStop")))}"object"==typeof t&&(e=t,t=void 0),e=e||{};var n,o,s,a,r,l,c,h,u=K.ajaxSetup({},e),d=u.context||u,f=u.context&&(d.nodeType||d.jquery)?K(d):K.event,p=K.Deferred(),g=K.Callbacks("once memory"),m=u.statusCode||{},v={},y={},b=0,w="canceled",k={readyState:0,getResponseHeader:function(t){var e;if(2===b){if(!a)for(a={};e=fe.exec(s);)a[e[1].toLowerCase()]=e[2];e=a[t.toLowerCase()]}return null==e?null:e},getAllResponseHeaders:function(){return 2===b?s:null},setRequestHeader:function(t,e){var i=t.toLowerCase();return b||(t=y[i]=y[i]||t,v[t]=e),this},overrideMimeType:function(t){return b||(u.mimeType=t),this},statusCode:function(t){var e;if(t)if(2>b)for(e in t)m[e]=[m[e],t[e]];else k.always(t[k.status]);return this},abort:function(t){var e=t||w;return n&&n.abort(e),i(0,e),this}};if(p.promise(k).complete=g.add,k.success=k.done,k.error=k.fail,u.url=((t||u.url||ke)+"").replace(ue,"").replace(me,xe[1]+"//"),u.type=e.method||e.type||u.method||u.type,u.dataTypes=K.trim(u.dataType||"*").toLowerCase().match(ft)||[""],null==u.crossDomain&&(l=ve.exec(u.url.toLowerCase()),u.crossDomain=!(!l||l[1]===xe[1]&&l[2]===xe[2]&&(l[3]||("http:"===l[1]?"80":"443"))===(xe[3]||("http:"===xe[1]?"80":"443")))),u.data&&u.processData&&"string"!=typeof u.data&&(u.data=K.param(u.data,u.traditional)),N(ye,u,e,k),2===b)return k;c=K.event&&u.global,c&&0===K.active++&&K.event.trigger("ajaxStart"),u.type=u.type.toUpperCase(),u.hasContent=!ge.test(u.type),o=u.url,u.hasContent||(u.data&&(o=u.url+=(he.test(o)?"&":"?")+u.data,delete u.data),u.cache===!1&&(u.url=de.test(o)?o.replace(de,"$1_="+ce++):o+(he.test(o)?"&":"?")+"_="+ce++)),u.ifModified&&(K.lastModified[o]&&k.setRequestHeader("If-Modified-Since",K.lastModified[o]),K.etag[o]&&k.setRequestHeader("If-None-Match",K.etag[o])),(u.data&&u.hasContent&&u.contentType!==!1||e.contentType)&&k.setRequestHeader("Content-Type",u.contentType),k.setRequestHeader("Accept",u.dataTypes[0]&&u.accepts[u.dataTypes[0]]?u.accepts[u.dataTypes[0]]+("*"!==u.dataTypes[0]?", "+we+"; q=0.01":""):u.accepts["*"]);for(h in u.headers)k.setRequestHeader(h,u.headers[h]);if(u.beforeSend&&(u.beforeSend.call(d,k,u)===!1||2===b))return k.abort();w="abort";for(h in{success:1,error:1,complete:1})k[h](u[h]);if(n=N(be,u,e,k)){k.readyState=1,c&&f.trigger("ajaxSend",[k,u]),u.async&&u.timeout>0&&(r=setTimeout(function(){k.abort("timeout")},u.timeout));try{b=1,n.send(v,i)}catch(x){if(!(2>b))throw x;i(-1,x)}}else i(-1,"No Transport");return k},getJSON:function(t,e,i){return K.get(t,e,i,"json")},getScript:function(t,e){return K.get(t,void 0,e,"script")}}),K.each(["get","post"],function(t,e){K[e]=function(t,i,n,o){return K.isFunction(i)&&(o=o||n,n=i,i=void 0),K.ajax({url:t,type:e,dataType:o,data:i,success:n})}}),K._evalUrl=function(t){return K.ajax({url:t,type:"GET",dataType:"script",async:!1,global:!1,"throws":!0})},K.fn.extend({wrapAll:function(t){var e;return K.isFunction(t)?this.each(function(e){K(this).wrapAll(t.call(this,e))}):(this[0]&&(e=K(t,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&e.insertBefore(this[0]),e.map(function(){for(var t=this;t.firstElementChild;)t=t.firstElementChild;return t}).append(this)),this)},wrapInner:function(t){return K.isFunction(t)?this.each(function(e){K(this).wrapInner(t.call(this,e))}):this.each(function(){var e=K(this),i=e.contents();i.length?i.wrapAll(t):e.append(t)})},wrap:function(t){var e=K.isFunction(t);return this.each(function(i){K(this).wrapAll(e?t.call(this,i):t)})},unwrap:function(){return this.parent().each(function(){K.nodeName(this,"body")||K(this).replaceWith(this.childNodes)}).end()}}),K.expr.filters.hidden=function(t){return t.offsetWidth<=0&&t.offsetHeight<=0},K.expr.filters.visible=function(t){return!K.expr.filters.hidden(t)};var Ce=/%20/g,Se=/\[\]$/,Te=/\r?\n/g,Pe=/^(?:submit|button|image|reset|file)$/i,$e=/^(?:input|select|textarea|keygen)/i;K.param=function(t,e){var i,n=[],o=function(t,e){e=K.isFunction(e)?e():null==e?"":e,n[n.length]=encodeURIComponent(t)+"="+encodeURIComponent(e)};if(void 0===e&&(e=K.ajaxSettings&&K.ajaxSettings.traditional),K.isArray(t)||t.jquery&&!K.isPlainObject(t))K.each(t,function(){o(this.name,this.value)});else for(i in t)H(i,t[i],e,o);return n.join("&").replace(Ce,"+")},K.fn.extend({serialize:function(){return K.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var t=K.prop(this,"elements");return t?K.makeArray(t):this}).filter(function(){var t=this.type;return this.name&&!K(this).is(":disabled")&&$e.test(this.nodeName)&&!Pe.test(t)&&(this.checked||!St.test(t))}).map(function(t,e){var i=K(this).val();return null==i?null:K.isArray(i)?K.map(i,function(t){return{name:e.name,value:t.replace(Te,"\r\n")}}):{name:e.name,value:i.replace(Te,"\r\n")}}).get()}}),K.ajaxSettings.xhr=function(){try{return new XMLHttpRequest}catch(t){}};var Le=0,Ee={},Ae={0:200,1223:204},Fe=K.ajaxSettings.xhr();t.attachEvent&&t.attachEvent("onunload",function(){for(var t in Ee)Ee[t]()}),Q.cors=!!Fe&&"withCredentials"in Fe,Q.ajax=Fe=!!Fe,K.ajaxTransport(function(t){var e;return Q.cors||Fe&&!t.crossDomain?{send:function(i,n){var o,s=t.xhr(),a=++Le;if(s.open(t.type,t.url,t.async,t.username,t.password),t.xhrFields)for(o in t.xhrFields)s[o]=t.xhrFields[o];t.mimeType&&s.overrideMimeType&&s.overrideMimeType(t.mimeType),t.crossDomain||i["X-Requested-With"]||(i["X-Requested-With"]="XMLHttpRequest");for(o in i)s.setRequestHeader(o,i[o]);e=function(t){return function(){e&&(delete Ee[a],e=s.onload=s.onerror=null,"abort"===t?s.abort():"error"===t?n(s.status,s.statusText):n(Ae[s.status]||s.status,s.statusText,"string"==typeof s.responseText?{text:s.responseText}:void 0,s.getAllResponseHeaders()))}},s.onload=e(),s.onerror=e("error"),e=Ee[a]=e("abort");try{s.send(t.hasContent&&t.data||null)}catch(r){if(e)throw r}},abort:function(){e&&e()}}:void 0}),K.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/(?:java|ecma)script/},converters:{"text script":function(t){return K.globalEval(t),t}}}),K.ajaxPrefilter("script",function(t){void 0===t.cache&&(t.cache=!1),t.crossDomain&&(t.type="GET")}),K.ajaxTransport("script",function(t){if(t.crossDomain){var e,i;return{send:function(n,o){e=K("<script>").prop({async:!0,charset:t.scriptCharset,src:t.url}).on("load error",i=function(t){e.remove(),i=null,t&&o("error"===t.type?404:200,t.type)}),Z.head.appendChild(e[0])},abort:function(){i&&i()}}}});var De=[],Me=/(=)\?(?=&|$)|\?\?/;K.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var t=De.pop()||K.expando+"_"+ce++;return this[t]=!0,t}}),K.ajaxPrefilter("json jsonp",function(e,i,n){var o,s,a,r=e.jsonp!==!1&&(Me.test(e.url)?"url":"string"==typeof e.data&&!(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&Me.test(e.data)&&"data");return r||"jsonp"===e.dataTypes[0]?(o=e.jsonpCallback=K.isFunction(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,r?e[r]=e[r].replace(Me,"$1"+o):e.jsonp!==!1&&(e.url+=(he.test(e.url)?"&":"?")+e.jsonp+"="+o),e.converters["script json"]=function(){return a||K.error(o+" was not called"),a[0]},e.dataTypes[0]="json",s=t[o],t[o]=function(){a=arguments},n.always(function(){t[o]=s,e[o]&&(e.jsonpCallback=i.jsonpCallback,De.push(o)),a&&K.isFunction(s)&&s(a[0]),a=s=void 0}),"script"):void 0}),K.parseHTML=function(t,e,i){if(!t||"string"!=typeof t)return null;"boolean"==typeof e&&(i=e,e=!1),e=e||Z;var n=at.exec(t),o=!i&&[];return n?[e.createElement(n[1])]:(n=K.buildFragment([t],e,o),o&&o.length&&K(o).remove(),K.merge([],n.childNodes))};var Re=K.fn.load;K.fn.load=function(t,e,i){if("string"!=typeof t&&Re)return Re.apply(this,arguments);var n,o,s,a=this,r=t.indexOf(" ");return r>=0&&(n=K.trim(t.slice(r)),t=t.slice(0,r)),K.isFunction(e)?(i=e,e=void 0):e&&"object"==typeof e&&(o="POST"),a.length>0&&K.ajax({url:t,type:o,dataType:"html",data:e}).done(function(t){s=arguments,a.html(n?K("<div>").append(K.parseHTML(t)).find(n):t)}).complete(i&&function(t,e){a.each(i,s||[t.responseText,e,t])}),this},K.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(t,e){K.fn[e]=function(t){return this.on(e,t)}}),K.expr.filters.animated=function(t){return K.grep(K.timers,function(e){return t===e.elem}).length};var je=t.document.documentElement;K.offset={setOffset:function(t,e,i){var n,o,s,a,r,l,c,h=K.css(t,"position"),u=K(t),d={};"static"===h&&(t.style.position="relative"),r=u.offset(),s=K.css(t,"top"),l=K.css(t,"left"),c=("absolute"===h||"fixed"===h)&&(s+l).indexOf("auto")>-1,c?(n=u.position(),a=n.top,o=n.left):(a=parseFloat(s)||0,o=parseFloat(l)||0),K.isFunction(e)&&(e=e.call(t,i,r)),null!=e.top&&(d.top=e.top-r.top+a),null!=e.left&&(d.left=e.left-r.left+o),"using"in e?e.using.call(t,d):u.css(d)}},K.fn.extend({offset:function(t){if(arguments.length)return void 0===t?this:this.each(function(e){K.offset.setOffset(this,t,e)});var e,i,n=this[0],o={top:0,left:0},s=n&&n.ownerDocument;if(s)return e=s.documentElement,K.contains(e,n)?(typeof n.getBoundingClientRect!==Tt&&(o=n.getBoundingClientRect()),i=z(s),{top:o.top+i.pageYOffset-e.clientTop,left:o.left+i.pageXOffset-e.clientLeft}):o},position:function(){if(this[0]){var t,e,i=this[0],n={top:0,left:0};return"fixed"===K.css(i,"position")?e=i.getBoundingClientRect():(t=this.offsetParent(),e=this.offset(),K.nodeName(t[0],"html")||(n=t.offset()),n.top+=K.css(t[0],"borderTopWidth",!0),n.left+=K.css(t[0],"borderLeftWidth",!0)),{top:e.top-n.top-K.css(i,"marginTop",!0),left:e.left-n.left-K.css(i,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var t=this.offsetParent||je;t&&!K.nodeName(t,"html")&&"static"===K.css(t,"position");)t=t.offsetParent;return t||je})}}),K.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(e,i){var n="pageYOffset"===i;K.fn[e]=function(o){return mt(this,function(e,o,s){var a=z(e);return void 0===s?a?a[i]:e[o]:void(a?a.scrollTo(n?t.pageXOffset:s,n?s:t.pageYOffset):e[o]=s)},e,o,arguments.length,null)}}),K.each(["top","left"],function(t,e){K.cssHooks[e]=x(Q.pixelPosition,function(t,i){return i?(i=k(t,e),qt.test(i)?K(t).position()[e]+"px":i):void 0})}),K.each({Height:"height",Width:"width"},function(t,e){K.each({padding:"inner"+t,content:e,"":"outer"+t},function(i,n){K.fn[n]=function(n,o){var s=arguments.length&&(i||"boolean"!=typeof n),a=i||(n===!0||o===!0?"margin":"border");return mt(this,function(e,i,n){var o;return K.isWindow(e)?e.document.documentElement["client"+t]:9===e.nodeType?(o=e.documentElement,Math.max(e.body["scroll"+t],o["scroll"+t],e.body["offset"+t],o["offset"+t],o["client"+t])):void 0===n?K.css(e,i,a):K.style(e,i,n,a)},e,s?n:void 0,s,null)}})}),K.fn.size=function(){return this.length},K.fn.andSelf=K.fn.addBack,"function"==typeof define&&define.amd&&define("jquery",[],function(){return K});var Ne=t.jQuery,Ie=t.$;return K.noConflict=function(e){return t.$===K&&(t.$=Ie),e&&t.jQuery===K&&(t.jQuery=Ne),K},typeof e===Tt&&(t.jQuery=t.$=K),K}),function(t){if("function"==typeof define&&define.amd&&define("uikit",function(){var e=window.UIkit||t(window,window.jQuery,window.document);return e.load=function(t,i,n,o){var s,a=t.split(","),r=[],l=(o.config&&o.config.uikit&&o.config.uikit.base?o.config.uikit.base:"").replace(/\/+$/g,"");if(!l)throw new Error("Please define base path to UIkit in the requirejs config.");for(s=0;s<a.length;s+=1){var c=a[s].replace(/\./g,"/");r.push(l+"/components/"+c)}i(r,function(){n(e)})},e}),!window.jQuery)throw new Error("UIkit requires jQuery");window&&window.jQuery&&t(window,window.jQuery,window.document)}(function(t,e,i){"use strict";var n={},o=t.UIkit?Object.create(t.UIkit):void 0;if(n.version="2.24.2",n.noConflict=function(){return o&&(t.UIkit=o,e.UIkit=o,e.fn.uk=o.fn),
n},n.prefix=function(t){return t},n.$=e,n.$doc=n.$(document),n.$win=n.$(window),n.$html=n.$("html"),n.support={},n.support.transition=function(){var t=function(){var t,e=i.body||i.documentElement,n={WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",OTransition:"oTransitionEnd otransitionend",transition:"transitionend"};for(t in n)if(void 0!==e.style[t])return n[t]}();return t&&{end:t}}(),n.support.animation=function(){var t=function(){var t,e=i.body||i.documentElement,n={WebkitAnimation:"webkitAnimationEnd",MozAnimation:"animationend",OAnimation:"oAnimationEnd oanimationend",animation:"animationend"};for(t in n)if(void 0!==e.style[t])return n[t]}();return t&&{end:t}}(),function(){Date.now=Date.now||function(){return(new Date).getTime()};for(var t=["webkit","moz"],e=0;e<t.length&&!window.requestAnimationFrame;++e){var i=t[e];window.requestAnimationFrame=window[i+"RequestAnimationFrame"],window.cancelAnimationFrame=window[i+"CancelAnimationFrame"]||window[i+"CancelRequestAnimationFrame"]}if(/iP(ad|hone|od).*OS 6/.test(window.navigator.userAgent)||!window.requestAnimationFrame||!window.cancelAnimationFrame){var n=0;window.requestAnimationFrame=function(t){var e=Date.now(),i=Math.max(n+16,e);return setTimeout(function(){t(n=i)},i-e)},window.cancelAnimationFrame=clearTimeout}}(),n.support.touch="ontouchstart"in document||t.DocumentTouch&&document instanceof t.DocumentTouch||t.navigator.msPointerEnabled&&t.navigator.msMaxTouchPoints>0||t.navigator.pointerEnabled&&t.navigator.maxTouchPoints>0||!1,n.support.mutationobserver=t.MutationObserver||t.WebKitMutationObserver||null,n.Utils={},n.Utils.isFullscreen=function(){return document.webkitFullscreenElement||document.mozFullScreenElement||document.msFullscreenElement||document.fullscreenElement||!1},n.Utils.str2json=function(t,e){try{return e?JSON.parse(t.replace(/([\$\w]+)\s*:/g,function(t,e){return'"'+e+'":'}).replace(/'([^']+)'/g,function(t,e){return'"'+e+'"'})):new Function("","var json = "+t+"; return JSON.parse(JSON.stringify(json));")()}catch(i){return!1}},n.Utils.debounce=function(t,e,i){var n;return function(){var o=this,s=arguments,a=function(){n=null,i||t.apply(o,s)},r=i&&!n;clearTimeout(n),n=setTimeout(a,e),r&&t.apply(o,s)}},n.Utils.removeCssRules=function(t){var e,i,n,o,s,a,r,l,c,h;t&&setTimeout(function(){try{for(h=document.styleSheets,o=0,r=h.length;r>o;o++){for(n=h[o],i=[],n.cssRules=n.cssRules,e=s=0,l=n.cssRules.length;l>s;e=++s)n.cssRules[e].type===CSSRule.STYLE_RULE&&t.test(n.cssRules[e].selectorText)&&i.unshift(e);for(a=0,c=i.length;c>a;a++)n.deleteRule(i[a])}}catch(u){}},0)},n.Utils.isInView=function(t,i){var o=e(t);if(!o.is(":visible"))return!1;var s=n.$win.scrollLeft(),a=n.$win.scrollTop(),r=o.offset(),l=r.left,c=r.top;return i=e.extend({topoffset:0,leftoffset:0},i),c+o.height()>=a&&c-i.topoffset<=a+n.$win.height()&&l+o.width()>=s&&l-i.leftoffset<=s+n.$win.width()?!0:!1},n.Utils.checkDisplay=function(t,i){var o=n.$("[data-uk-margin], [data-uk-grid-match], [data-uk-grid-margin], [data-uk-check-display]",t||document);return t&&!o.length&&(o=e(t)),o.trigger("display.uk.check"),i&&("string"!=typeof i&&(i='[class*="uk-animation-"]'),o.find(i).each(function(){var t=n.$(this),e=t.attr("class"),i=e.match(/uk\-animation\-(.+)/);t.removeClass(i[0]).width(),t.addClass(i[0])})),o},n.Utils.options=function(t){if(e.isPlainObject(t))return t;var i=t?t.indexOf("{"):-1,o={};if(-1!=i)try{o=n.Utils.str2json(t.substr(i))}catch(s){}return o},n.Utils.animate=function(t,i){var o=e.Deferred();return t=n.$(t),i=i,t.css("display","none").addClass(i).one(n.support.animation.end,function(){t.removeClass(i),o.resolve()}).width(),t.css("display",""),o.promise()},n.Utils.uid=function(t){return(t||"id")+(new Date).getTime()+"RAND"+Math.ceil(1e5*Math.random())},n.Utils.template=function(t,e){for(var i,n,o,s,a=t.replace(/\n/g,"\\n").replace(/\{\{\{\s*(.+?)\s*\}\}\}/g,"{{!$1}}").split(/(\{\{\s*(.+?)\s*\}\})/g),r=0,l=[],c=0;r<a.length;){if(i=a[r],i.match(/\{\{\s*(.+?)\s*\}\}/))switch(r+=1,i=a[r],n=i[0],o=i.substring(i.match(/^(\^|\#|\!|\~|\:)/)?1:0),n){case"~":l.push("for(var $i=0;$i<"+o+".length;$i++) { var $item = "+o+"[$i];"),c++;break;case":":l.push("for(var $key in "+o+") { var $val = "+o+"[$key];"),c++;break;case"#":l.push("if("+o+") {"),c++;break;case"^":l.push("if(!"+o+") {"),c++;break;case"/":l.push("}"),c--;break;case"!":l.push("__ret.push("+o+");");break;default:l.push("__ret.push(escape("+o+"));")}else l.push("__ret.push('"+i.replace(/\'/g,"\\'")+"');");r+=1}return s=new Function("$data",["var __ret = [];","try {","with($data){",c?'__ret = ["Not all blocks are closed correctly."]':l.join(""),"};","}catch(e){__ret = [e.message];}",'return __ret.join("").replace(/\\n\\n/g, "\\n");',"function escape(html) { return String(html).replace(/&/g, '&amp;').replace(/\"/g, '&quot;').replace(/</g, '&lt;').replace(/>/g, '&gt;');}"].join("\n")),e?s(e):s},n.Utils.events={},n.Utils.events.click=n.support.touch?"tap":"click",t.UIkit=n,n.fn=function(t,i){var o=arguments,s=t.match(/^([a-z\-]+)(?:\.([a-z]+))?/i),a=s[1],r=s[2];return n[a]?this.each(function(){var t=e(this),s=t.data(a);s||t.data(a,s=n[a](this,r?void 0:i)),r&&s[r].apply(s,Array.prototype.slice.call(o,1))}):(e.error("UIkit component ["+a+"] does not exist."),this)},e.UIkit=n,e.fn.uk=n.fn,n.langdirection="rtl"==n.$html.attr("dir")?"right":"left",n.components={},n.component=function(t,i){var o=function(i,s){var a=this;return this.UIkit=n,this.element=i?n.$(i):null,this.options=e.extend(!0,{},this.defaults,s),this.plugins={},this.element&&this.element.data(t,this),this.init(),(this.options.plugins.length?this.options.plugins:Object.keys(o.plugins)).forEach(function(t){o.plugins[t].init&&(o.plugins[t].init(a),a.plugins[t]=!0)}),this.trigger("init.uk.component",[t,this]),this};return o.plugins={},e.extend(!0,o.prototype,{defaults:{plugins:[]},boot:function(){},init:function(){},on:function(t,e,i){return n.$(this.element||this).on(t,e,i)},one:function(t,e,i){return n.$(this.element||this).one(t,e,i)},off:function(t){return n.$(this.element||this).off(t)},trigger:function(t,e){return n.$(this.element||this).trigger(t,e)},find:function(t){return n.$(this.element?this.element:[]).find(t)},proxy:function(t,e){var i=this;e.split(" ").forEach(function(e){i[e]||(i[e]=function(){return t[e].apply(t,arguments)})})},mixin:function(t,e){var i=this;e.split(" ").forEach(function(e){i[e]||(i[e]=t[e].bind(i))})},option:function(){return 1==arguments.length?this.options[arguments[0]]||void 0:void(2==arguments.length&&(this.options[arguments[0]]=arguments[1]))}},i),this.components[t]=o,this[t]=function(){var i,o;if(arguments.length)switch(arguments.length){case 1:"string"==typeof arguments[0]||arguments[0].nodeType||arguments[0]instanceof jQuery?i=e(arguments[0]):o=arguments[0];break;case 2:i=e(arguments[0]),o=arguments[1]}return i&&i.data(t)?i.data(t):new n.components[t](i,o)},n.domready&&n.component.boot(t),o},n.plugin=function(t,e,i){this.components[t].plugins[e]=i},n.component.boot=function(t){n.components[t].prototype&&n.components[t].prototype.boot&&!n.components[t].booted&&(n.components[t].prototype.boot.apply(n,[]),n.components[t].booted=!0)},n.component.bootComponents=function(){for(var t in n.components)n.component.boot(t)},n.domObservers=[],n.domready=!1,n.ready=function(t){n.domObservers.push(t),n.domready&&t(document)},n.on=function(t,e,i){return t&&t.indexOf("ready.uk.dom")>-1&&n.domready&&e.apply(n.$doc),n.$doc.on(t,e,i)},n.one=function(t,e,i){return t&&t.indexOf("ready.uk.dom")>-1&&n.domready?(e.apply(n.$doc),n.$doc):n.$doc.one(t,e,i)},n.trigger=function(t,e){return n.$doc.trigger(t,e)},n.domObserve=function(t,e){n.support.mutationobserver&&(e=e||function(){},n.$(t).each(function(){var t=this,i=n.$(t);if(!i.data("observer"))try{var o=new n.support.mutationobserver(n.Utils.debounce(function(n){e.apply(t,[]),i.trigger("changed.uk.dom")},50));o.observe(t,{childList:!0,subtree:!0}),i.data("observer",o)}catch(s){}}))},n.init=function(t){t=t||document,n.domObservers.forEach(function(e){e(t)})},n.on("domready.uk.dom",function(){n.init(),n.domready&&n.Utils.checkDisplay()}),e(function(){n.$body=n.$("body"),n.ready(function(t){n.domObserve("[data-uk-observe]")}),n.on("changed.uk.dom",function(t){n.init(t.target),n.Utils.checkDisplay(t.target)}),n.trigger("beforeready.uk.dom"),n.component.bootComponents(),requestAnimationFrame(function(){var t,e={x:window.pageXOffset,y:window.pageYOffset},i=function(){(e.x!=window.pageXOffset||e.y!=window.pageYOffset)&&(t={x:0,y:0},window.pageXOffset!=e.x&&(t.x=window.pageXOffset>e.x?1:-1),window.pageYOffset!=e.y&&(t.y=window.pageYOffset>e.y?1:-1),e={dir:t,x:window.pageXOffset,y:window.pageYOffset},n.$doc.trigger("scrolling.uk.document",[e])),requestAnimationFrame(i)};return n.support.touch&&n.$html.on("touchmove touchend MSPointerMove MSPointerUp pointermove pointerup",i),(e.x||e.y)&&i(),i}()),n.trigger("domready.uk.dom"),n.support.touch&&navigator.userAgent.match(/(iPad|iPhone|iPod)/g)&&n.$win.on("load orientationchange resize",n.Utils.debounce(function(){var t=function(){return e(".uk-height-viewport").css("height",window.innerHeight),t};return t()}(),100)),n.trigger("afterready.uk.dom"),n.domready=!0}),n.$html.addClass(n.support.touch?"uk-touch":"uk-notouch"),n.support.touch){var s,a=!1,r="uk-hover",l=".uk-overlay, .uk-overlay-hover, .uk-overlay-toggle, .uk-animation-hover, .uk-has-hover";n.$html.on("mouseenter touchstart MSPointerDown pointerdown",l,function(){a&&e("."+r).removeClass(r),a=e(this).addClass(r)}).on("mouseleave touchend MSPointerUp pointerup",function(t){s=e(t.target).parents(l),a&&a.not(s).removeClass(r)})}return n}),function(t){function e(t,e,i,n){return Math.abs(t-e)>=Math.abs(i-n)?t-e>0?"Left":"Right":i-n>0?"Up":"Down"}function i(){c=null,u.last&&(void 0!==u.el&&u.el.trigger("longTap"),u={})}function n(){c&&clearTimeout(c),c=null}function o(){a&&clearTimeout(a),r&&clearTimeout(r),l&&clearTimeout(l),c&&clearTimeout(c),a=r=l=c=null,u={}}function s(t){return t.pointerType==t.MSPOINTER_TYPE_TOUCH&&t.isPrimary}if(!t.fn.swipeLeft){var a,r,l,c,h,u={},d=750;t(function(){var f,p,g,m=0,v=0;"MSGesture"in window&&(h=new MSGesture,h.target=document.body),t(document).on("MSGestureEnd gestureend",function(t){var e=t.originalEvent.velocityX>1?"Right":t.originalEvent.velocityX<-1?"Left":t.originalEvent.velocityY>1?"Down":t.originalEvent.velocityY<-1?"Up":null;e&&void 0!==u.el&&(u.el.trigger("swipe"),u.el.trigger("swipe"+e))}).on("touchstart MSPointerDown pointerdown",function(e){("MSPointerDown"!=e.type||s(e.originalEvent))&&(g="MSPointerDown"==e.type||"pointerdown"==e.type?e:e.originalEvent.touches[0],f=Date.now(),p=f-(u.last||f),u.el=t("tagName"in g.target?g.target:g.target.parentNode),a&&clearTimeout(a),u.x1=g.pageX,u.y1=g.pageY,p>0&&250>=p&&(u.isDoubleTap=!0),u.last=f,c=setTimeout(i,d),!h||"MSPointerDown"!=e.type&&"pointerdown"!=e.type&&"touchstart"!=e.type||h.addPointer(e.originalEvent.pointerId))}).on("touchmove MSPointerMove pointermove",function(t){("MSPointerMove"!=t.type||s(t.originalEvent))&&(g="MSPointerMove"==t.type||"pointermove"==t.type?t:t.originalEvent.touches[0],n(),u.x2=g.pageX,u.y2=g.pageY,m+=Math.abs(u.x1-u.x2),v+=Math.abs(u.y1-u.y2))}).on("touchend MSPointerUp pointerup",function(i){("MSPointerUp"!=i.type||s(i.originalEvent))&&(n(),u.x2&&Math.abs(u.x1-u.x2)>30||u.y2&&Math.abs(u.y1-u.y2)>30?l=setTimeout(function(){void 0!==u.el&&(u.el.trigger("swipe"),u.el.trigger("swipe"+e(u.x1,u.x2,u.y1,u.y2))),u={}},0):"last"in u&&(isNaN(m)||30>m&&30>v?r=setTimeout(function(){var e=t.Event("tap");e.cancelTouch=o,void 0!==u.el&&u.el.trigger(e),u.isDoubleTap?(void 0!==u.el&&u.el.trigger("doubleTap"),u={}):a=setTimeout(function(){a=null,void 0!==u.el&&u.el.trigger("singleTap"),u={}},250)},0):u={},m=v=0))}).on("touchcancel MSPointerCancel",o),t(window).on("scroll",o)}),["swipe","swipeLeft","swipeRight","swipeUp","swipeDown","doubleTap","tap","singleTap","longTap"].forEach(function(e){t.fn[e]=function(i){return t(this).on(e,i)}})}}(jQuery),function(t){"use strict";var e=[];t.component("stackMargin",{defaults:{cls:"uk-margin-small-top"},boot:function(){t.ready(function(e){t.$("[data-uk-margin]",e).each(function(){var e,i=t.$(this);i.data("stackMargin")||(e=t.stackMargin(i,t.Utils.options(i.attr("data-uk-margin"))))})})},init:function(){var i=this;this.columns=[],t.$win.on("resize orientationchange",function(){var e=function(){i.process()};return t.$(function(){e(),t.$win.on("load",e)}),t.Utils.debounce(e,20)}()),t.$html.on("changed.uk.dom",function(t){i.process()}),this.on("display.uk.check",function(t){this.element.is(":visible")&&this.process()}.bind(this)),e.push(this)},process:function(){return this.columns=this.element.children(),t.Utils.stackMargin(this.columns,this.options),this},revert:function(){return this.columns.removeClass(this.options.cls),this}}),function(){var e=[],i=function(t){if(t.is(":visible")){var e=t.parent().width(),i=t.data("width"),n=e/i,o=Math.floor(n*t.data("height"));t.css({height:i>e?o:t.data("height")})}};t.component("responsiveElement",{defaults:{},boot:function(){t.ready(function(e){t.$("iframe.uk-responsive-width, [data-uk-responsive]",e).each(function(){var e,i=t.$(this);i.data("responsiveIframe")||(e=t.responsiveElement(i,{}))})})},init:function(){var t=this.element;t.attr("width")&&t.attr("height")&&(t.data({width:t.attr("width"),height:t.attr("height")}).on("display.uk.check",function(){i(t)}),i(t),e.push(t))}}),t.$win.on("resize load",t.Utils.debounce(function(){e.forEach(function(t){i(t)})},15))}(),t.Utils.stackMargin=function(e,i){i=t.$.extend({cls:"uk-margin-small-top"},i),i.cls=i.cls,e=t.$(e).removeClass(i.cls);var n=!1,o=e.filter(":visible:first"),s=o.length?o.position().top+o.outerHeight()-1:!1;s!==!1&&1!=e.length&&e.each(function(){var e=t.$(this);e.is(":visible")&&(n?e.addClass(i.cls):e.position().top>=s&&(n=e.addClass(i.cls)))})},t.Utils.matchHeights=function(e,i){e=t.$(e).css("min-height",""),i=t.$.extend({row:!0},i);var n=function(e){if(!(e.length<2)){var i=0;e.each(function(){i=Math.max(i,t.$(this).outerHeight())}).each(function(){var e=t.$(this),n=i-("border-box"==e.css("box-sizing")?0:e.outerHeight()-e.height());e.css("min-height",n+"px")})}};i.row?(e.first().width(),setTimeout(function(){var i=!1,o=[];e.each(function(){var e=t.$(this),s=e.offset().top;s!=i&&o.length&&(n(t.$(o)),o=[],s=e.offset().top),o.push(e),i=s}),o.length&&n(t.$(o))},0)):n(e)},function(e){t.Utils.inlineSvg=function(i,n){t.$(i||'img[src$=".svg"]',n||document).each(function(){var i=t.$(this),n=i.attr("src");if(!e[n]){var o=t.$.Deferred();t.$.get(n,{nc:Math.random()},function(e){o.resolve(t.$(e).find("svg"))}),e[n]=o.promise()}e[n].then(function(e){var n=t.$(e).clone();i.attr("id")&&n.attr("id",i.attr("id")),i.attr("class")&&n.attr("class",i.attr("class")),i.attr("style")&&n.attr("style",i.attr("style")),i.attr("width")&&(n.attr("width",i.attr("width")),i.attr("height")||n.removeAttr("height")),i.attr("height")&&(n.attr("height",i.attr("height")),i.attr("width")||n.removeAttr("width")),i.replaceWith(n)})})},t.ready(function(e){t.Utils.inlineSvg("[data-uk-svg]",e)})}({})}(UIkit),function(t){"use strict";function e(e,i){i=t.$.extend({duration:1e3,transition:"easeOutExpo",offset:0,complete:function(){}},i);var n=e.offset().top-i.offset,o=t.$doc.height(),s=window.innerHeight;n+s>o&&(n=o-s),t.$("html,body").stop().animate({scrollTop:n},i.duration,i.transition).promise().done(i.complete)}t.component("smoothScroll",{boot:function(){t.$html.on("click.smooth-scroll.uikit","[data-uk-smooth-scroll]",function(e){var i=t.$(this);if(!i.data("smoothScroll")){t.smoothScroll(i,t.Utils.options(i.attr("data-uk-smooth-scroll")));i.trigger("click")}return!1})},init:function(){var i=this;this.on("click",function(n){n.preventDefault(),e(t.$(this.hash).length?t.$(this.hash):t.$("body"),i.options)})}}),t.Utils.scrollToElement=e,t.$.easing.easeOutExpo||(t.$.easing.easeOutExpo=function(t,e,i,n,o){return e==o?i+n:n*(-Math.pow(2,-10*e/o)+1)+i})}(UIkit),function(t){"use strict";var e=t.$win,i=t.$doc,n=[],o=function(){for(var t=0;t<n.length;t++)window.requestAnimationFrame.apply(window,[n[t].check])};t.component("scrollspy",{defaults:{target:!1,cls:"uk-scrollspy-inview",initcls:"uk-scrollspy-init-inview",topoffset:0,leftoffset:0,repeat:!1,delay:0},boot:function(){i.on("scrolling.uk.document",o),e.on("load resize orientationchange",t.Utils.debounce(o,50)),t.ready(function(e){t.$("[data-uk-scrollspy]",e).each(function(){var e=t.$(this);if(!e.data("scrollspy")){t.scrollspy(e,t.Utils.options(e.attr("data-uk-scrollspy")))}})})},init:function(){var e,i=this,o=this.options.cls.split(/,/),s=function(){var n=i.options.target?i.element.find(i.options.target):i.element,s=1===n.length?1:0,a=0;n.each(function(n){var r=t.$(this),l=r.data("inviewstate"),c=t.Utils.isInView(r,i.options),h=r.data("ukScrollspyCls")||o[a].trim();!c||l||r.data("scrollspy-idle")||(e||(r.addClass(i.options.initcls),i.offset=r.offset(),e=!0,r.trigger("init.uk.scrollspy")),r.data("scrollspy-idle",setTimeout(function(){r.addClass("uk-scrollspy-inview").toggleClass(h).width(),r.trigger("inview.uk.scrollspy"),r.data("scrollspy-idle",!1),r.data("inviewstate",!0)},i.options.delay*s)),s++),!c&&l&&i.options.repeat&&(r.data("scrollspy-idle")&&clearTimeout(r.data("scrollspy-idle")),r.removeClass("uk-scrollspy-inview").toggleClass(h),r.data("inviewstate",!1),r.trigger("outview.uk.scrollspy")),a=o[a+1]?a+1:0})};s(),this.check=s,n.push(this)}});var s=[],a=function(){for(var t=0;t<s.length;t++)window.requestAnimationFrame.apply(window,[s[t].check])};t.component("scrollspynav",{defaults:{cls:"uk-active",closest:!1,topoffset:0,leftoffset:0,smoothscroll:!1},boot:function(){i.on("scrolling.uk.document",a),e.on("resize orientationchange",t.Utils.debounce(a,50)),t.ready(function(e){t.$("[data-uk-scrollspy-nav]",e).each(function(){var e=t.$(this);if(!e.data("scrollspynav")){t.scrollspynav(e,t.Utils.options(e.attr("data-uk-scrollspy-nav")))}})})},init:function(){var i,n=[],o=this.find("a[href^='#']").each(function(){"#"!==this.getAttribute("href").trim()&&n.push(this.getAttribute("href"))}),a=t.$(n.join(",")),r=this.options.cls,l=this.options.closest||this.options.closest,c=this,h=function(){i=[];for(var n=0;n<a.length;n++)t.Utils.isInView(a.eq(n),c.options)&&i.push(a.eq(n));if(i.length){var s,h=e.scrollTop(),u=function(){for(var t=0;t<i.length;t++)if(i[t].offset().top>=h)return i[t]}();if(!u)return;c.options.closest?(o.blur().closest(l).removeClass(r),s=o.filter("a[href='#"+u.attr("id")+"']").closest(l).addClass(r)):s=o.removeClass(r).filter("a[href='#"+u.attr("id")+"']").addClass(r),c.element.trigger("inview.uk.scrollspynav",[u,s])}};this.options.smoothscroll&&t.smoothScroll&&o.each(function(){t.smoothScroll(this,c.options.smoothscroll)}),h(),this.element.data("scrollspynav",this),this.check=h,s.push(this)}})}(UIkit),function(t){"use strict";var e=[];t.component("toggle",{defaults:{target:!1,cls:"uk-hidden",animation:!1,duration:200},boot:function(){t.ready(function(i){t.$("[data-uk-toggle]",i).each(function(){var e=t.$(this);if(!e.data("toggle")){t.toggle(e,t.Utils.options(e.attr("data-uk-toggle")))}}),setTimeout(function(){e.forEach(function(t){t.getToggles()})},0)})},init:function(){var t=this;this.aria=-1!==this.options.cls.indexOf("uk-hidden"),this.getToggles(),this.on("click",function(e){t.element.is('a[href="#"]')&&e.preventDefault(),t.toggle()}),e.push(this)},toggle:function(){if(this.totoggle.length){if(this.options.animation&&t.support.animation){var e=this,i=this.options.animation.split(",");1==i.length&&(i[1]=i[0]),i[0]=i[0].trim(),i[1]=i[1].trim(),this.totoggle.css("animation-duration",this.options.duration+"ms"),this.totoggle.each(function(){var n=t.$(this);n.hasClass(e.options.cls)?(n.toggleClass(e.options.cls),t.Utils.animate(n,i[0]).then(function(){n.css("animation-duration",""),t.Utils.checkDisplay(n)})):t.Utils.animate(this,i[1]+" uk-animation-reverse").then(function(){n.toggleClass(e.options.cls).css("animation-duration",""),t.Utils.checkDisplay(n)})})}else this.totoggle.toggleClass(this.options.cls),t.Utils.checkDisplay(this.totoggle);this.updateAria()}},getToggles:function(){this.totoggle=this.options.target?t.$(this.options.target):[],this.updateAria()},updateAria:function(){this.aria&&this.totoggle.length&&this.totoggle.each(function(){t.$(this).attr("aria-hidden",t.$(this).hasClass("uk-hidden"))})}})}(UIkit),function(t){"use strict";t.component("alert",{defaults:{fade:!0,duration:200,trigger:".uk-alert-close"},boot:function(){t.$html.on("click.alert.uikit","[data-uk-alert]",function(e){var i=t.$(this);if(!i.data("alert")){var n=t.alert(i,t.Utils.options(i.attr("data-uk-alert")));t.$(e.target).is(n.options.trigger)&&(e.preventDefault(),n.close())}})},init:function(){var t=this;this.on("click",this.options.trigger,function(e){e.preventDefault(),t.close()})},close:function(){var t=this.trigger("close.uk.alert"),e=function(){this.trigger("closed.uk.alert").remove()}.bind(this);this.options.fade?t.css("overflow","hidden").css("max-height",t.height()).animate({height:0,opacity:0,"padding-top":0,"padding-bottom":0,"margin-top":0,"margin-bottom":0},this.options.duration,e):e()}})}(UIkit),function(t){"use strict";t.component("buttonRadio",{defaults:{activeClass:"uk-active",target:".uk-button"},boot:function(){t.$html.on("click.buttonradio.uikit","[data-uk-button-radio]",function(e){var i=t.$(this);if(!i.data("buttonRadio")){var n=t.buttonRadio(i,t.Utils.options(i.attr("data-uk-button-radio"))),o=t.$(e.target);o.is(n.options.target)&&o.trigger("click")}})},init:function(){var e=this;this.find(e.options.target).attr("aria-checked","false").filter("."+e.options.activeClass).attr("aria-checked","true"),this.on("click",this.options.target,function(i){var n=t.$(this);n.is('a[href="#"]')&&i.preventDefault(),e.find(e.options.target).not(n).removeClass(e.options.activeClass).blur(),n.addClass(e.options.activeClass),e.find(e.options.target).not(n).attr("aria-checked","false"),n.attr("aria-checked","true"),e.trigger("change.uk.button",[n])})},getSelected:function(){return this.find("."+this.options.activeClass)}}),t.component("buttonCheckbox",{defaults:{activeClass:"uk-active",target:".uk-button"},boot:function(){t.$html.on("click.buttoncheckbox.uikit","[data-uk-button-checkbox]",function(e){var i=t.$(this);if(!i.data("buttonCheckbox")){var n=t.buttonCheckbox(i,t.Utils.options(i.attr("data-uk-button-checkbox"))),o=t.$(e.target);o.is(n.options.target)&&o.trigger("click")}})},init:function(){var e=this;this.find(e.options.target).attr("aria-checked","false").filter("."+e.options.activeClass).attr("aria-checked","true"),this.on("click",this.options.target,function(i){var n=t.$(this);n.is('a[href="#"]')&&i.preventDefault(),n.toggleClass(e.options.activeClass).blur(),n.attr("aria-checked",n.hasClass(e.options.activeClass)),e.trigger("change.uk.button",[n])})},getSelected:function(){return this.find("."+this.options.activeClass)}}),t.component("button",{defaults:{},boot:function(){t.$html.on("click.button.uikit","[data-uk-button]",function(e){var i=t.$(this);if(!i.data("button")){t.button(i,t.Utils.options(i.attr("data-uk-button")));i.trigger("click")}})},init:function(){var t=this;this.element.attr("aria-pressed",this.element.hasClass("uk-active")),this.on("click",function(e){t.element.is('a[href="#"]')&&e.preventDefault(),t.toggle(),t.trigger("change.uk.button",[t.element.blur().hasClass("uk-active")])})},toggle:function(){this.element.toggleClass("uk-active"),this.element.attr("aria-pressed",this.element.hasClass("uk-active"))}})}(UIkit),function(t){"use strict";function e(e,i,n,o){if(e=t.$(e),i=t.$(i),n=n||window.innerWidth,o=o||e.offset(),i.length){var s=i.outerWidth();if(e.css("min-width",s),"right"==t.langdirection){var a=n-(i.offset().left+s),r=n-(e.offset().left+e.outerWidth());e.css("margin-right",a-r)}else e.css("margin-left",i.offset().left-o.left)}}var i,n=!1,o={x:{"bottom-left":"bottom-right","bottom-right":"bottom-left","bottom-center":"bottom-right","top-left":"top-right","top-right":"top-left","top-center":"top-right","left-top":"right","left-bottom":"right-bottom","left-center":"right-center","right-top":"left","right-bottom":"left-bottom","right-center":"left-center"},y:{"bottom-left":"top-left","bottom-right":"top-right","bottom-center":"top-center","top-left":"bottom-left","top-right":"bottom-right","top-center":"bottom-center","left-top":"top-left","left-bottom":"left-bottom","left-center":"top-left","right-top":"top-left","right-bottom":"bottom-left","right-center":"top-left"},xy:{}};t.component("dropdown",{defaults:{mode:"hover",pos:"bottom-left",offset:0,remaintime:800,justify:!1,boundary:t.$win,delay:0,dropdownSelector:".uk-dropdown,.uk-dropdown-blank",hoverDelayIdle:250,preventflip:!1},remainIdle:!1,boot:function(){var e=t.support.touch?"click":"mouseenter";t.$html.on(e+".dropdown.uikit","[data-uk-dropdown]",function(i){var n=t.$(this);if(!n.data("dropdown")){var o=t.dropdown(n,t.Utils.options(n.attr("data-uk-dropdown")));("click"==e||"mouseenter"==e&&"hover"==o.options.mode)&&o.element.trigger(e),o.element.find(o.options.dropdownSelector).length&&i.preventDefault()}})},init:function(){var e=this;this.dropdown=this.find(this.options.dropdownSelector),this.offsetParent=this.dropdown.parents().filter(function(){return-1!==t.$.inArray(t.$(this).css("position"),["relative","fixed","absolute"])}).slice(0,1),this.centered=this.dropdown.hasClass("uk-dropdown-center"),this.justified=this.options.justify?t.$(this.options.justify):!1,this.boundary=t.$(this.options.boundary),this.boundary.length||(this.boundary=t.$win),this.dropdown.hasClass("uk-dropdown-up")&&(this.options.pos="top-left"),this.dropdown.hasClass("uk-dropdown-flip")&&(this.options.pos=this.options.pos.replace("left","right")),this.dropdown.hasClass("uk-dropdown-center")&&(this.options.pos=this.options.pos.replace(/(left|right)/,"center")),this.element.attr("aria-haspopup","true"),this.element.attr("aria-expanded",this.element.hasClass("uk-open")),"click"==this.options.mode||t.support.touch?this.on("click.uikit.dropdown",function(i){var n=t.$(i.target);n.parents(e.options.dropdownSelector).length||((n.is("a[href='#']")||n.parent().is("a[href='#']")||e.dropdown.length&&!e.dropdown.is(":visible"))&&i.preventDefault(),n.blur()),e.element.hasClass("uk-open")?(!e.dropdown.find(i.target).length||n.is(".uk-dropdown-close")||n.parents(".uk-dropdown-close").length)&&e.hide():e.show()}):this.on("mouseenter",function(t){e.trigger("pointerenter.uk.dropdown",[e]),e.remainIdle&&clearTimeout(e.remainIdle),i&&clearTimeout(i),n&&n==e||(i=n&&n!=e?setTimeout(function(){i=setTimeout(e.show.bind(e),e.options.delay)},e.options.hoverDelayIdle):setTimeout(e.show.bind(e),e.options.delay))}).on("mouseleave",function(){i&&clearTimeout(i),e.remainIdle=setTimeout(function(){n&&n==e&&e.hide()},e.options.remaintime),e.trigger("pointerleave.uk.dropdown",[e])}).on("click",function(i){var o=t.$(i.target);return e.remainIdle&&clearTimeout(e.remainIdle),n&&n==e?void((!e.dropdown.find(i.target).length||o.is(".uk-dropdown-close")||o.parents(".uk-dropdown-close").length)&&e.hide()):((o.is("a[href='#']")||o.parent().is("a[href='#']"))&&i.preventDefault(),void e.show())})},show:function(){t.$html.off("click.outer.dropdown"),n&&n!=this&&n.hide(!0),i&&clearTimeout(i),this.trigger("beforeshow.uk.dropdown",[this]),this.checkDimensions(),this.element.addClass("uk-open"),this.element.attr("aria-expanded","true"),this.trigger("show.uk.dropdown",[this]),t.Utils.checkDisplay(this.dropdown,!0),n=this,this.registerOuterClick()},hide:function(t){this.trigger("beforehide.uk.dropdown",[this,t]),this.element.removeClass("uk-open"),this.remainIdle&&clearTimeout(this.remainIdle),this.remainIdle=!1,this.element.attr("aria-expanded","false"),this.trigger("hide.uk.dropdown",[this,t]),n==this&&(n=!1)},registerOuterClick:function(){var e=this;t.$html.off("click.outer.dropdown"),setTimeout(function(){t.$html.on("click.outer.dropdown",function(o){i&&clearTimeout(i);t.$(o.target);n!=e||e.element.find(o.target).length||(e.hide(!0),t.$html.off("click.outer.dropdown"))})},10)},checkDimensions:function(){if(this.dropdown.length){this.dropdown.removeClass("uk-dropdown-top uk-dropdown-bottom uk-dropdown-left uk-dropdown-right uk-dropdown-stack").css({"top-left":"",left:"","margin-left":"","margin-right":""}),this.justified&&this.justified.length&&this.dropdown.css("min-width","");var i,n=t.$.extend({},this.offsetParent.offset(),{width:this.offsetParent[0].offsetWidth,height:this.offsetParent[0].offsetHeight}),s=this.options.offset,a=this.dropdown,r=(a.show().offset()||{left:0,top:0},a.outerWidth()),l=a.outerHeight(),c=this.boundary.width(),h=(this.boundary[0]!==window&&this.boundary.offset()?this.boundary.offset():{top:0,left:0},this.options.pos),u={"bottom-left":{top:0+n.height+s,left:0},"bottom-right":{top:0+n.height+s,left:0+n.width-r},"bottom-center":{top:0+n.height+s,left:0+n.width/2-r/2},"top-left":{top:0-l-s,left:0},"top-right":{top:0-l-s,left:0+n.width-r},"top-center":{top:0-l-s,left:0+n.width/2-r/2},"left-top":{top:0,left:0-r-s},"left-bottom":{top:0+n.height-l,left:0-r-s},"left-center":{top:0+n.height/2-l/2,left:0-r-s},"right-top":{top:0,left:0+n.width+s},"right-bottom":{top:0+n.height-l,left:0+n.width+s},"right-center":{top:0+n.height/2-l/2,left:0+n.width+s}},d={};if(i=h.split("-"),d=u[h]?u[h]:u["bottom-left"],this.justified&&this.justified.length)e(a.css({left:0}),this.justified,c);else if(this.options.preventflip!==!0){var f;switch(this.checkBoundary(n.left+d.left,n.top+d.top,r,l,c)){case"x":"x"!==this.options.preventflip&&(f=o.x[h]||"right-top");break;case"y":"y"!==this.options.preventflip&&(f=o.y[h]||"top-left");break;case"xy":this.options.preventflip||(f=o.xy[h]||"right-bottom")}f&&(i=f.split("-"),d=u[f]?u[f]:u["bottom-left"],this.checkBoundary(n.left+d.left,n.top+d.top,r,l,c)&&(i=h.split("-"),d=u[h]?u[h]:u["bottom-left"]))}r>c&&(a.addClass("uk-dropdown-stack"),this.trigger("stack.uk.dropdown",[this])),a.css(d).css("display","").addClass("uk-dropdown-"+i[0])}},checkBoundary:function(e,i,n,o,s){var a="";return(0>e||e-t.$win.scrollLeft()+n>s)&&(a+="x"),(i-t.$win.scrollTop()<0||i-t.$win.scrollTop()+o>window.innerHeight)&&(a+="y"),a}}),t.component("dropdownOverlay",{defaults:{justify:!1,cls:"",duration:200},boot:function(){t.ready(function(e){t.$("[data-uk-dropdown-overlay]",e).each(function(){var e=t.$(this);e.data("dropdownOverlay")||t.dropdownOverlay(e,t.Utils.options(e.attr("data-uk-dropdown-overlay")))})})},init:function(){var i=this;this.justified=this.options.justify?t.$(this.options.justify):!1,this.overlay=this.element.find("uk-dropdown-overlay"),this.overlay.length||(this.overlay=t.$('<div class="uk-dropdown-overlay"></div>').appendTo(this.element)),this.overlay.addClass(this.options.cls),this.on({"beforeshow.uk.dropdown":function(t,n){i.dropdown=n,i.justified&&i.justified.length&&e(i.overlay.css({display:"block","margin-left":"","margin-right":""}),i.justified,i.justified.outerWidth())},"show.uk.dropdown":function(e,n){var o=i.dropdown.dropdown.outerHeight(!0);i.dropdown.element.removeClass("uk-open"),i.overlay.stop().css("display","block").animate({height:o},i.options.duration,function(){i.dropdown.dropdown.css("visibility",""),i.dropdown.element.addClass("uk-open"),t.Utils.checkDisplay(i.dropdown.dropdown,!0)}),i.pointerleave=!1},"hide.uk.dropdown":function(){i.overlay.stop().animate({height:0},i.options.duration)},"pointerenter.uk.dropdown":function(t,e){clearTimeout(i.remainIdle)},"pointerleave.uk.dropdown":function(t,e){i.pointerleave=!0}}),this.overlay.on({mouseenter:function(){i.remainIdle&&(clearTimeout(i.dropdown.remainIdle),clearTimeout(i.remainIdle))},mouseleave:function(){i.pointerleave&&n&&(i.remainIdle=setTimeout(function(){n&&n.hide()},n.options.remaintime))}})}})}(UIkit),function(t){"use strict";var e=[];t.component("gridMatchHeight",{defaults:{target:!1,row:!0,ignorestacked:!1},boot:function(){t.ready(function(e){t.$("[data-uk-grid-match]",e).each(function(){var e,i=t.$(this);i.data("gridMatchHeight")||(e=t.gridMatchHeight(i,t.Utils.options(i.attr("data-uk-grid-match"))));
})})},init:function(){var i=this;this.columns=this.element.children(),this.elements=this.options.target?this.find(this.options.target):this.columns,this.columns.length&&(t.$win.on("load resize orientationchange",function(){var e=function(){i.match()};return t.$(function(){e()}),t.Utils.debounce(e,50)}()),t.$html.on("changed.uk.dom",function(t){i.columns=i.element.children(),i.elements=i.options.target?i.find(i.options.target):i.columns,i.match()}),this.on("display.uk.check",function(t){this.element.is(":visible")&&this.match()}.bind(this)),e.push(this))},match:function(){var e=this.columns.filter(":visible:first");if(e.length){var i=Math.ceil(100*parseFloat(e.css("width"))/parseFloat(e.parent().css("width")))>=100;return i&&!this.options.ignorestacked?this.revert():t.Utils.matchHeights(this.elements,this.options),this}},revert:function(){return this.elements.css("min-height",""),this}}),t.component("gridMargin",{defaults:{cls:"uk-grid-margin"},boot:function(){t.ready(function(e){t.$("[data-uk-grid-margin]",e).each(function(){var e,i=t.$(this);i.data("gridMargin")||(e=t.gridMargin(i,t.Utils.options(i.attr("data-uk-grid-margin"))))})})},init:function(){t.stackMargin(this.element,this.options)}})}(UIkit),function(t){"use strict";function e(e,i){return i?("object"==typeof e?(e=e instanceof jQuery?e:t.$(e),e.parent().length&&(i.persist=e,i.persist.data("modalPersistParent",e.parent()))):e="string"==typeof e||"number"==typeof e?t.$("<div></div>").html(e):t.$("<div></div>").html("UIkit.modal Error: Unsupported data type: "+typeof e),e.appendTo(i.element.find(".uk-modal-dialog")),i):void 0}var i,n=!1,o=0,s=t.$html;t.component("modal",{defaults:{keyboard:!0,bgclose:!0,minScrollHeight:150,center:!1,modal:!0},scrollable:!1,transition:!1,hasTransitioned:!0,init:function(){if(i||(i=t.$("body")),this.element.length){var e=this;this.paddingdir="padding-"+("left"==t.langdirection?"right":"left"),this.dialog=this.find(".uk-modal-dialog"),this.active=!1,this.element.attr("aria-hidden",this.element.hasClass("uk-open")),this.on("click",".uk-modal-close",function(t){t.preventDefault(),e.hide()}).on("click",function(i){var n=t.$(i.target);n[0]==e.element[0]&&e.options.bgclose&&e.hide()})}},toggle:function(){return this[this.isActive()?"hide":"show"]()},show:function(){if(this.element.length){var e=this;if(!this.isActive())return this.options.modal&&n&&n.hide(!0),this.element.removeClass("uk-open").show(),this.resize(),this.options.modal&&(n=this),this.active=!0,o++,t.support.transition?(this.hasTransitioned=!1,this.element.one(t.support.transition.end,function(){e.hasTransitioned=!0}).addClass("uk-open")):this.element.addClass("uk-open"),s.addClass("uk-modal-page").height(),this.element.attr("aria-hidden","false"),this.element.trigger("show.uk.modal"),t.Utils.checkDisplay(this.dialog,!0),this}},hide:function(e){if(!e&&t.support.transition&&this.hasTransitioned){var i=this;this.one(t.support.transition.end,function(){i._hide()}).removeClass("uk-open")}else this._hide();return this},resize:function(){var t=i.width();if(this.scrollbarwidth=window.innerWidth-t,i.css(this.paddingdir,this.scrollbarwidth),this.element.css("overflow-y",this.scrollbarwidth?"scroll":"auto"),!this.updateScrollable()&&this.options.center){var e=this.dialog.outerHeight(),n=parseInt(this.dialog.css("margin-top"),10)+parseInt(this.dialog.css("margin-bottom"),10);e+n<window.innerHeight?this.dialog.css({top:window.innerHeight/2-e/2-n}):this.dialog.css({top:""})}},updateScrollable:function(){var t=this.dialog.find(".uk-overflow-container:visible:first");if(t.length){t.css("height",0);var e=Math.abs(parseInt(this.dialog.css("margin-top"),10)),i=this.dialog.outerHeight(),n=window.innerHeight,o=n-2*(20>e?20:e)-i;return t.css({"max-height":o<this.options.minScrollHeight?"":o,height:""}),!0}return!1},_hide:function(){this.active=!1,o>0?o--:o=0,this.element.hide().removeClass("uk-open"),this.element.attr("aria-hidden","true"),o||(s.removeClass("uk-modal-page"),i.css(this.paddingdir,"")),n===this&&(n=!1),this.trigger("hide.uk.modal")},isActive:function(){return this.active}}),t.component("modalTrigger",{boot:function(){t.$html.on("click.modal.uikit","[data-uk-modal]",function(e){var i=t.$(this);if(i.is("a")&&e.preventDefault(),!i.data("modalTrigger")){var n=t.modalTrigger(i,t.Utils.options(i.attr("data-uk-modal")));n.show()}}),t.$html.on("keydown.modal.uikit",function(t){n&&27===t.keyCode&&n.options.keyboard&&(t.preventDefault(),n.hide())}),t.$win.on("resize orientationchange",t.Utils.debounce(function(){n&&n.resize()},150))},init:function(){var e=this;this.options=t.$.extend({target:e.element.is("a")?e.element.attr("href"):!1},this.options),this.modal=t.modal(this.options.target,this.options),this.on("click",function(t){t.preventDefault(),e.show()}),this.proxy(this.modal,"show hide isActive")}}),t.modal.dialog=function(i,n){var o=t.modal(t.$(t.modal.dialog.template).appendTo("body"),n);return o.on("hide.uk.modal",function(){o.persist&&(o.persist.appendTo(o.persist.data("modalPersistParent")),o.persist=!1),o.element.remove()}),e(i,o),o},t.modal.dialog.template='<div class="uk-modal"><div class="uk-modal-dialog" style="min-height:0;"></div></div>',t.modal.alert=function(e,i){i=t.$.extend(!0,{bgclose:!1,keyboard:!1,modal:!1,labels:t.modal.labels},i);var n=t.modal.dialog(['<div class="uk-margin uk-modal-content">'+String(e)+"</div>",'<div class="uk-modal-footer uk-text-right"><button class="uk-button uk-button-primary uk-modal-close">'+i.labels.Ok+"</button></div>"].join(""),i);return n.on("show.uk.modal",function(){setTimeout(function(){n.element.find("button:first").focus()},50)}),n.show()},t.modal.confirm=function(e,i,n){i=t.$.isFunction(i)?i:function(){},n=t.$.extend(!0,{bgclose:!1,keyboard:!1,modal:!1,labels:t.modal.labels},n);var o=t.modal.dialog(['<div class="uk-margin uk-modal-content">'+String(e)+"</div>",'<div class="uk-modal-footer uk-text-right"><button class="uk-button uk-modal-close">'+n.labels.Cancel+'</button> <button class="uk-button uk-button-primary js-modal-confirm">'+n.labels.Ok+"</button></div>"].join(""),n);return o.element.find(".js-modal-confirm").on("click",function(){i(),o.hide()}),o.on("show.uk.modal",function(){setTimeout(function(){o.element.find(".js-modal-confirm").focus()},50)}),o.show()},t.modal.prompt=function(e,i,n,o){n=t.$.isFunction(n)?n:function(t){},o=t.$.extend(!0,{bgclose:!1,keyboard:!1,modal:!1,labels:t.modal.labels},o);var s=t.modal.dialog([e?'<div class="uk-modal-content uk-form">'+String(e)+"</div>":"",'<div class="uk-margin-small-top uk-modal-content uk-form"><p><input type="text" class="uk-width-1-1"></p></div>','<div class="uk-modal-footer uk-text-right"><button class="uk-button uk-modal-close">'+o.labels.Cancel+'</button> <button class="uk-button uk-button-primary js-modal-ok">'+o.labels.Ok+"</button></div>"].join(""),o),a=s.element.find("input[type='text']").val(i||"").on("keyup",function(t){13==t.keyCode&&s.element.find(".js-modal-ok").trigger("click")});return s.element.find(".js-modal-ok").on("click",function(){n(a.val())!==!1&&s.hide()}),s.on("show.uk.modal",function(){setTimeout(function(){a.focus()},50)}),s.show()},t.modal.blockUI=function(e,i){var n=t.modal.dialog(['<div class="uk-margin uk-modal-content">'+String(e||'<div class="uk-text-center">...</div>')+"</div>"].join(""),t.$.extend({bgclose:!1,keyboard:!1,modal:!1},i));return n.content=n.element.find(".uk-modal-content:first"),n.show()},t.modal.labels={Ok:"Ok",Cancel:"Cancel"}}(UIkit),function(t){"use strict";function e(e){var i=t.$(e),n="auto";if(i.is(":visible"))n=i.outerHeight();else{var o={position:i.css("position"),visibility:i.css("visibility"),display:i.css("display")};n=i.css({position:"absolute",visibility:"hidden",display:"block"}).outerHeight(),i.css(o)}return n}t.component("nav",{defaults:{toggle:">li.uk-parent > a[href='#']",lists:">li.uk-parent > ul",multiple:!1},boot:function(){t.ready(function(e){t.$("[data-uk-nav]",e).each(function(){var e=t.$(this);if(!e.data("nav")){t.nav(e,t.Utils.options(e.attr("data-uk-nav")))}})})},init:function(){var e=this;this.on("click.uikit.nav",this.options.toggle,function(i){i.preventDefault();var n=t.$(this);e.open(n.parent()[0]==e.element[0]?n:n.parent("li"))}),this.find(this.options.lists).each(function(){var i=t.$(this),n=i.parent(),o=n.hasClass("uk-active");i.wrap('<div style="overflow:hidden;height:0;position:relative;"></div>'),n.data("list-container",i.parent()[o?"removeClass":"addClass"]("uk-hidden")),n.attr("aria-expanded",n.hasClass("uk-open")),o&&e.open(n,!0)})},open:function(i,n){var o=this,s=this.element,a=t.$(i),r=a.data("list-container");this.options.multiple||s.children(".uk-open").not(i).each(function(){var e=t.$(this);e.data("list-container")&&e.data("list-container").stop().animate({height:0},function(){t.$(this).parent().removeClass("uk-open").end().addClass("uk-hidden")})}),a.toggleClass("uk-open"),a.attr("aria-expanded",a.hasClass("uk-open")),r&&(a.hasClass("uk-open")&&r.removeClass("uk-hidden"),n?(r.stop().height(a.hasClass("uk-open")?"auto":0),a.hasClass("uk-open")||r.addClass("uk-hidden"),this.trigger("display.uk.check")):r.stop().animate({height:a.hasClass("uk-open")?e(r.find("ul:first")):0},function(){a.hasClass("uk-open")?r.css("height",""):r.addClass("uk-hidden"),o.trigger("display.uk.check")}))}})}(UIkit),function(t){"use strict";var e={x:window.scrollX,y:window.scrollY},i=(t.$win,t.$doc,t.$html),n={show:function(n){if(n=t.$(n),n.length){var o=t.$("body"),s=n.find(".uk-offcanvas-bar:first"),a="right"==t.langdirection,r=s.hasClass("uk-offcanvas-bar-flip")?-1:1,l=r*(a?-1:1),c=window.innerWidth-o.width();e={x:window.pageXOffset,y:window.pageYOffset},n.addClass("uk-active"),o.css({width:window.innerWidth-c,height:window.innerHeight}).addClass("uk-offcanvas-page"),o.css(a?"margin-right":"margin-left",(a?-1:1)*(s.outerWidth()*l)).width(),i.css("margin-top",-1*e.y),s.addClass("uk-offcanvas-bar-show"),this._initElement(n),s.trigger("show.uk.offcanvas",[n,s]),n.attr("aria-hidden","false")}},hide:function(n){var o=t.$("body"),s=t.$(".uk-offcanvas.uk-active"),a="right"==t.langdirection,r=s.find(".uk-offcanvas-bar:first"),l=function(){o.removeClass("uk-offcanvas-page").css({width:"",height:"","margin-left":"","margin-right":""}),s.removeClass("uk-active"),r.removeClass("uk-offcanvas-bar-show"),i.css("margin-top",""),window.scrollTo(e.x,e.y),r.trigger("hide.uk.offcanvas",[s,r]),s.attr("aria-hidden","true")};s.length&&(t.support.transition&&!n?(o.one(t.support.transition.end,function(){l()}).css(a?"margin-right":"margin-left",""),setTimeout(function(){r.removeClass("uk-offcanvas-bar-show")},0)):l())},_initElement:function(e){e.data("OffcanvasInit")||(e.on("click.uk.offcanvas swipeRight.uk.offcanvas swipeLeft.uk.offcanvas",function(e){var i=t.$(e.target);if(!e.type.match(/swipe/)&&!i.hasClass("uk-offcanvas-close")){if(i.hasClass("uk-offcanvas-bar"))return;if(i.parents(".uk-offcanvas-bar:first").length)return}e.stopImmediatePropagation(),n.hide()}),e.on("click","a[href^='#']",function(e){var i=t.$(this),o=i.attr("href");"#"!=o&&(t.$doc.one("hide.uk.offcanvas",function(){var e;try{e=t.$(o)}catch(n){e=""}e.length||(e=t.$('[name="'+o.replace("#","")+'"]')),e.length&&i.attr("data-uk-smooth-scroll")&&t.Utils.scrollToElement?t.Utils.scrollToElement(e,t.Utils.options(i.attr("data-uk-smooth-scroll")||"{}")):window.location.href=o}),n.hide())}),e.data("OffcanvasInit",!0))}};t.component("offcanvasTrigger",{boot:function(){i.on("click.offcanvas.uikit","[data-uk-offcanvas]",function(e){e.preventDefault();var i=t.$(this);if(!i.data("offcanvasTrigger")){t.offcanvasTrigger(i,t.Utils.options(i.attr("data-uk-offcanvas")));i.trigger("click")}}),i.on("keydown.uk.offcanvas",function(t){27===t.keyCode&&n.hide()})},init:function(){var e=this;this.options=t.$.extend({target:e.element.is("a")?e.element.attr("href"):!1},this.options),this.on("click",function(t){t.preventDefault(),n.show(e.options.target)})}}),t.offcanvas=n}(UIkit),function(t){"use strict";function e(e,i,n){var o,s=t.$.Deferred(),a=e,r=e;return n[0]===i[0]?(s.resolve(),s.promise()):("object"==typeof e&&(a=e[0],r=e[1]||e[0]),t.$body.css("overflow-x","hidden"),o=function(){i&&i.hide().removeClass("uk-active "+r+" uk-animation-reverse"),n.addClass(a).one(t.support.animation.end,function(){n.removeClass(""+a).css({opacity:"",display:""}),s.resolve(),t.$body.css("overflow-x",""),i&&i.css({opacity:"",display:""})}.bind(this)).show()},n.css("animation-duration",this.options.duration+"ms"),i&&i.length?(i.css("animation-duration",this.options.duration+"ms"),i.css("display","none").addClass(r+" uk-animation-reverse").one(t.support.animation.end,function(){o()}.bind(this)).css("display","")):(n.addClass("uk-active"),o()),s.promise())}var i;t.component("switcher",{defaults:{connect:!1,toggle:">*",active:0,animation:!1,duration:200,swiping:!0},animating:!1,boot:function(){t.ready(function(e){t.$("[data-uk-switcher]",e).each(function(){var e=t.$(this);if(!e.data("switcher")){t.switcher(e,t.Utils.options(e.attr("data-uk-switcher")))}})})},init:function(){var e=this;if(this.on("click.uikit.switcher",this.options.toggle,function(t){t.preventDefault(),e.show(this)}),this.options.connect){this.connect=t.$(this.options.connect),this.connect.find(".uk-active").removeClass(".uk-active"),this.connect.length&&(this.connect.children().attr("aria-hidden","true"),this.connect.on("click","[data-uk-switcher-item]",function(i){i.preventDefault();var n=t.$(this).attr("data-uk-switcher-item");if(e.index!=n)switch(n){case"next":case"previous":e.show(e.index+("next"==n?1:-1));break;default:e.show(parseInt(n,10))}}),this.options.swiping&&this.connect.on("swipeRight swipeLeft",function(t){t.preventDefault(),window.getSelection().toString()||e.show(e.index+("swipeLeft"==t.type?1:-1))}));var i=this.find(this.options.toggle),n=i.filter(".uk-active");if(n.length)this.show(n,!1);else{if(this.options.active===!1)return;n=i.eq(this.options.active),this.show(n.length?n:i.eq(0),!1)}i.not(n).attr("aria-expanded","false"),n.attr("aria-expanded","true"),this.on("changed.uk.dom",function(){e.connect=t.$(e.options.connect)})}},show:function(n,o){if(!this.animating){if(isNaN(n))n=t.$(n);else{var s=this.find(this.options.toggle);n=0>n?s.length-1:n,n=s.eq(s[n]?n:0)}var a=this,s=this.find(this.options.toggle),r=t.$(n),l=i[this.options.animation]||function(t,n){if(!a.options.animation)return i.none.apply(a);var o=a.options.animation.split(",");return 1==o.length&&(o[1]=o[0]),o[0]=o[0].trim(),o[1]=o[1].trim(),e.apply(a,[o,t,n])};o!==!1&&t.support.animation||(l=i.none),r.hasClass("uk-disabled")||(s.attr("aria-expanded","false"),r.attr("aria-expanded","true"),s.filter(".uk-active").removeClass("uk-active"),r.addClass("uk-active"),this.options.connect&&this.connect.length&&(this.index=this.find(this.options.toggle).index(r),-1==this.index&&(this.index=0),this.connect.each(function(){var e=t.$(this),i=t.$(e.children()),n=t.$(i.filter(".uk-active")),o=t.$(i.eq(a.index));a.animating=!0,l.apply(a,[n,o]).then(function(){n.removeClass("uk-active"),o.addClass("uk-active"),n.attr("aria-hidden","true"),o.attr("aria-hidden","false"),t.Utils.checkDisplay(o,!0),a.animating=!1})})),this.trigger("show.uk.switcher",[r]))}}}),i={none:function(){var e=t.$.Deferred();return e.resolve(),e.promise()},fade:function(t,i){return e.apply(this,["uk-animation-fade",t,i])},"slide-bottom":function(t,i){return e.apply(this,["uk-animation-slide-bottom",t,i])},"slide-top":function(t,i){return e.apply(this,["uk-animation-slide-top",t,i])},"slide-vertical":function(t,i,n){var o=["uk-animation-slide-top","uk-animation-slide-bottom"];return t&&t.index()>i.index()&&o.reverse(),e.apply(this,[o,t,i])},"slide-left":function(t,i){return e.apply(this,["uk-animation-slide-left",t,i])},"slide-right":function(t,i){return e.apply(this,["uk-animation-slide-right",t,i])},"slide-horizontal":function(t,i,n){var o=["uk-animation-slide-right","uk-animation-slide-left"];return t&&t.index()>i.index()&&o.reverse(),e.apply(this,[o,t,i])},scale:function(t,i){return e.apply(this,["uk-animation-scale-up",t,i])}},t.switcher.animations=i}(UIkit),function(t){"use strict";t.component("tab",{defaults:{target:">li:not(.uk-tab-responsive, .uk-disabled)",connect:!1,active:0,animation:!1,duration:200,swiping:!0},boot:function(){t.ready(function(e){t.$("[data-uk-tab]",e).each(function(){var e=t.$(this);if(!e.data("tab")){t.tab(e,t.Utils.options(e.attr("data-uk-tab")))}})})},init:function(){var e=this;this.current=!1,this.on("click.uikit.tab",this.options.target,function(i){if(i.preventDefault(),!e.switcher||!e.switcher.animating){var n=e.find(e.options.target).not(this);n.removeClass("uk-active").blur(),e.trigger("change.uk.tab",[t.$(this).addClass("uk-active"),e.current]),e.current=t.$(this),e.options.connect||(n.attr("aria-expanded","false"),t.$(this).attr("aria-expanded","true"))}}),this.options.connect&&(this.connect=t.$(this.options.connect)),this.responsivetab=t.$('<li class="uk-tab-responsive uk-active"><a></a></li>').append('<div class="uk-dropdown uk-dropdown-small"><ul class="uk-nav uk-nav-dropdown"></ul><div>'),this.responsivetab.dropdown=this.responsivetab.find(".uk-dropdown"),this.responsivetab.lst=this.responsivetab.dropdown.find("ul"),this.responsivetab.caption=this.responsivetab.find("a:first"),this.element.hasClass("uk-tab-bottom")&&this.responsivetab.dropdown.addClass("uk-dropdown-up"),this.responsivetab.lst.on("click.uikit.tab","a",function(i){i.preventDefault(),i.stopPropagation();var n=t.$(this);e.element.children("li:not(.uk-tab-responsive)").eq(n.data("index")).trigger("click")}),this.on("show.uk.switcher change.uk.tab",function(t,i){e.responsivetab.caption.html(i.text())}),this.element.append(this.responsivetab),this.options.connect&&(this.switcher=t.switcher(this.element,{toggle:">li:not(.uk-tab-responsive)",connect:this.options.connect,active:this.options.active,animation:this.options.animation,duration:this.options.duration,swiping:this.options.swiping})),t.dropdown(this.responsivetab,{mode:"click"}),e.trigger("change.uk.tab",[this.element.find(this.options.target).not(".uk-tab-responsive").filter(".uk-active")]),this.check(),t.$win.on("resize orientationchange",t.Utils.debounce(function(){e.element.is(":visible")&&e.check()},100)),this.on("display.uk.check",function(){e.element.is(":visible")&&e.check()})},check:function(){var e=this.element.children("li:not(.uk-tab-responsive)").removeClass("uk-hidden");if(!e.length)return void this.responsivetab.addClass("uk-hidden");var i,n,o,s=e.eq(0).offset().top+Math.ceil(e.eq(0).height()/2),a=!1;if(this.responsivetab.lst.empty(),e.each(function(){t.$(this).offset().top>s&&(a=!0)}),a)for(var r=0;r<e.length;r++)i=t.$(e.eq(r)),n=i.find("a"),"none"==i.css("float")||i.attr("uk-dropdown")||(i.hasClass("uk-disabled")||(o=i[0].outerHTML.replace("<a ",'<a data-index="'+r+'" '),this.responsivetab.lst.append(o)),i.addClass("uk-hidden"));this.responsivetab[this.responsivetab.lst.children("li").length?"removeClass":"addClass"]("uk-hidden")}})}(UIkit),function(t){"use strict";t.component("cover",{defaults:{automute:!0},boot:function(){t.ready(function(e){t.$("[data-uk-cover]",e).each(function(){var e=t.$(this);if(!e.data("cover")){t.cover(e,t.Utils.options(e.attr("data-uk-cover")))}})})},init:function(){if(this.parent=this.element.parent(),t.$win.on("load resize orientationchange",t.Utils.debounce(function(){this.check()}.bind(this),100)),this.on("display.uk.check",function(t){this.element.is(":visible")&&this.check()}.bind(this)),this.check(),this.element.is("iframe")&&this.options.automute){var e=this.element.attr("src");this.element.attr("src","").on("load",function(){this.contentWindow.postMessage('{ "event": "command", "func": "mute", "method":"setVolume", "value":0}',"*")}).attr("src",[e,e.indexOf("?")>-1?"&":"?","enablejsapi=1&api=1"].join(""))}},check:function(){this.element.css({width:"",height:""}),this.dimension={w:this.element.width(),h:this.element.height()},this.element.attr("width")&&!isNaN(this.element.attr("width"))&&(this.dimension.w=this.element.attr("width")),this.element.attr("height")&&!isNaN(this.element.attr("height"))&&(this.dimension.h=this.element.attr("height")),this.ratio=this.dimension.w/this.dimension.h;var t,e,i=this.parent.width(),n=this.parent.height();i/this.ratio<n?(t=Math.ceil(n*this.ratio),e=n):(t=i,e=Math.ceil(i/this.ratio)),this.element.css({width:t,height:e})}})}(UIkit),function(t){var e;window.UIkit&&(e=t(UIkit)),"function"==typeof define&&define.amd&&define("uikit-slider",["uikit"],function(){return e||t(UIkit)})}(function(t){"use strict";var e,i,n,o,s={};return t.component("slider",{defaults:{center:!1,threshold:10,infinite:!0,autoplay:!1,autoplayInterval:7e3,pauseOnHover:!0,activecls:"uk-active"},boot:function(){t.ready(function(e){setTimeout(function(){t.$("[data-uk-slider]",e).each(function(){var e=t.$(this);e.data("slider")||t.slider(e,t.Utils.options(e.attr("data-uk-slider")))})},0)})},init:function(){var a=this;this.container=this.element.find(".uk-slider"),this.focus=0,t.$win.on("resize load",t.Utils.debounce(function(){a.resize(!0)},100)),this.on("click.uikit.slider","[data-uk-slider-item]",function(e){e.preventDefault();var i=t.$(this).attr("data-uk-slider-item");if(a.focus!=i)switch(a.stop(),i){case"next":case"previous":a["next"==i?"next":"previous"]();break;default:a.updateFocus(parseInt(i,10))}}),this.container.on({"touchstart mousedown":function(r){r.originalEvent&&r.originalEvent.touches&&(r=r.originalEvent.touches[0]),r.button&&2==r.button||!a.active||(a.stop(),n=t.$(r.target).is("a")?t.$(r.target):t.$(r.target).parents("a:first"),o=!1,n.length&&n.one("click",function(t){o&&t.preventDefault()}),i=function(t){o=!0,e=a,s={touchx:parseInt(t.pageX,10),dir:1,focus:a.focus,base:a.options.center?"center":"area"},t.originalEvent&&t.originalEvent.touches&&(t=t.originalEvent.touches[0]),e.element.data({"pointer-start":{x:parseInt(t.pageX,10),y:parseInt(t.pageY,10)},"pointer-pos-start":a.pos}),a.container.addClass("uk-drag"),i=!1},i.x=parseInt(r.pageX,10),i.threshold=a.options.threshold)},mouseenter:function(){a.options.pauseOnHover&&(a.hovering=!0)},mouseleave:function(){a.hovering=!1}}),this.resize(!0),this.on("display.uk.check",function(){a.element.is(":visible")&&a.resize(!0)}),this.element.find("a,img").attr("draggable","false"),this.options.autoplay&&this.start()},resize:function(e){var i,n,o,s,a=this,r=0,l=0;return this.items=this.container.children().filter(":visible"),this.vp=this.element[0].getBoundingClientRect().width,this.container.css({"min-width":"","min-height":""}),this.items.each(function(e){i=t.$(this),s=i.css({left:"",width:""})[0].getBoundingClientRect(),n=s.width,o=i.width(),l=Math.max(l,s.height),i.css({left:r,width:n}).data({idx:e,left:r,width:n,cwidth:o,area:r+n,center:r-(a.vp/2-o/2)}),r+=n}),this.container.css({"min-width":r,"min-height":l}),this.options.infinite&&r<=2*this.vp&&!this.itemsResized?(this.container.children().each(function(t){a.container.append(a.items.eq(t).clone(!0).attr("id",""))}).each(function(t){a.container.append(a.items.eq(t).clone(!0).attr("id",""))}),this.itemsResized=!0,this.resize()):(this.cw=r,this.pos=0,this.active=r>=this.vp,this.container.css({"-ms-transform":"","-webkit-transform":"",transform:""}),void(e&&this.updateFocus(this.focus)))},updatePos:function(t){this.pos=t,this.container.css({"-ms-transform":"translateX("+t+"px)","-webkit-transform":"translateX("+t+"px)",transform:"translateX("+t+"px)"})},updateFocus:function(t,e){if(this.active){e=e||(t>this.focus?1:-1);var i,n,o=this.items.eq(t);if(this.options.infinite&&this.infinite(t,e),this.options.center)this.updatePos(-1*o.data("center")),this.items.filter("."+this.options.activecls).removeClass(this.options.activecls),o.addClass(this.options.activecls);else if(this.options.infinite)this.updatePos(-1*o.data("left"));else{for(i=0,n=t;n<this.items.length;n++)i+=this.items.eq(n).data("width");if(i>this.vp)this.updatePos(-1*o.data("left"));else if(1==e){for(i=0,n=this.items.length-1;n>=0;n--){if(i+=this.items.eq(n).data("width"),i==this.vp){t=n;break}if(i>this.vp){t=n<this.items.length-1?n+1:n;break}}i>this.vp?this.updatePos(-1*(this.container.width()-this.vp)):this.updatePos(-1*this.items.eq(t).data("left"))}}this.focus=t,this.trigger("focusitem.uk.slider",[t,this.items.eq(t),this])}},next:function(){var t=this.items[this.focus+1]?this.focus+1:this.options.infinite?0:this.focus;this.updateFocus(t,1)},previous:function(){var t=this.items[this.focus-1]?this.focus-1:this.options.infinite?this.items[this.focus-1]?this.items-1:this.items.length-1:this.focus;this.updateFocus(t,-1)},start:function(){this.stop();var t=this;this.interval=setInterval(function(){t.hovering||t.next()},this.options.autoplayInterval)},stop:function(){this.interval&&clearInterval(this.interval)},infinite:function(t,e){var i,n=this,o=this.items.eq(t),s=t,a=[],r=0;if(1==e){for(i=0;i<this.items.length&&(s!=t&&(r+=this.items.eq(s).data("width"),a.push(this.items.eq(s))),!(r>this.vp));i++)s=s+1==this.items.length?0:s+1;a.length&&a.forEach(function(t){var e=o.data("area");t.css({left:e}).data({left:e,area:e+t.data("width"),center:e-(n.vp/2-t.data("cwidth")/2)}),o=t})}else{for(i=this.items.length-1;i>-1&&(r+=this.items.eq(s).data("width"),s!=t&&a.push(this.items.eq(s)),!(r>this.vp));i--)s=s-1==-1?this.items.length-1:s-1;a.length&&a.forEach(function(t){var e=o.data("left")-t.data("width");t.css({left:e}).data({left:e,area:e+t.data("width"),center:e-(n.vp/2-t.data("cwidth")/2)}),o=t})}}}),t.$doc.on("mousemove.uikit.slider touchmove.uikit.slider",function(t){if(t.originalEvent&&t.originalEvent.touches&&(t=t.originalEvent.touches[0]),i&&Math.abs(t.pageX-i.x)>i.threshold&&(window.getSelection().toString()?e=i=!1:i(t)),e){var n,o,a,r,l,c,h,u,d,f;if(t.clientX||t.clientY?n=t.clientX:(t.pageX||t.pageY)&&(n=t.pageX-document.body.scrollLeft-document.documentElement.scrollLeft),l=s.focus,o=n-e.element.data("pointer-start").x,a=e.element.data("pointer-pos-start")+o,r=n>e.element.data("pointer-start").x?-1:1,c=e.items.eq(s.focus),1==r)for(h=c.data("left")+Math.abs(o),u=0,d=s.focus;u<e.items.length;u++){if(f=e.items.eq(d),d!=s.focus&&f.data("left")<h&&f.data("area")>h){l=d;break}d=d+1==e.items.length?0:d+1}else for(h=c.data("left")-Math.abs(o),u=0,d=s.focus;u<e.items.length;u++){if(f=e.items.eq(d),d!=s.focus&&f.data("area")<=c.data("left")&&f.data("center")<h){l=d;break}d=d-1==-1?e.items.length-1:d-1}e.options.infinite&&l!=s._focus&&e.infinite(l,r),e.updatePos(a),s.dir=r,s._focus=l,s.touchx=parseInt(t.pageX,10),s.diff=h}}),t.$doc.on("mouseup.uikit.slider touchend.uikit.slider",function(t){if(e){e.container.removeClass("uk-drag"),e.items.eq(s.focus);var n,o,a,r=!1;if(1==s.dir)for(o=0,a=s.focus;o<e.items.length;o++){if(n=e.items.eq(a),a!=s.focus&&n.data("left")>s.diff){r=a;break}a=a+1==e.items.length?0:a+1}else for(o=0,a=s.focus;o<e.items.length;o++){if(n=e.items.eq(a),a!=s.focus&&n.data("left")<s.diff){r=a;break}a=a-1==-1?e.items.length-1:a-1}e.updateFocus(r!==!1?r:s._focus)}e=i=!1}),t.slider}),function(t){var e;window.UIkit&&(e=t(UIkit)),"function"==typeof define&&define.amd&&define("uikit-lightbox",["uikit"],function(){return e||t(UIkit)})}(function(t){"use strict";function e(e){return i?(i.lightbox=e,i):(i=t.$(['<div class="uk-modal">','<div class="uk-modal-dialog uk-modal-dialog-lightbox uk-slidenav-position" style="margin-left:auto;margin-right:auto;width:200px;height:200px;top:'+Math.abs(window.innerHeight/2-200)+'px;">','<a href="#" class="uk-modal-close uk-close uk-close-alt"></a>','<div class="uk-lightbox-content"></div>','<div class="uk-modal-spinner uk-hidden"></div>',"</div>","</div>"].join("")).appendTo("body"),i.dialog=i.find(".uk-modal-dialog:first"),i.content=i.find(".uk-lightbox-content:first"),i.loader=i.find(".uk-modal-spinner:first"),i.closer=i.find(".uk-close.uk-close-alt"),i.modal=t.modal(i,{modal:!1}),i.on("swipeRight swipeLeft",function(t){i.lightbox["swipeLeft"==t.type?"next":"previous"]()}).on("click","[data-lightbox-previous], [data-lightbox-next]",function(e){e.preventDefault(),i.lightbox[t.$(this).is("[data-lightbox-next]")?"next":"previous"]()}),i.on("hide.uk.modal",function(t){i.content.html("")}),t.$win.on("load resize orientationchange",t.Utils.debounce(function(e){i.is(":visible")&&!t.Utils.isFullscreen()&&i.lightbox.fitSize()}.bind(this),100)),i.lightbox=e,i)}var i,n={};return t.component("lightbox",{defaults:{group:!1,duration:400,keyboard:!0},index:0,items:!1,boot:function(){t.$html.on("click","[data-uk-lightbox]",function(e){e.preventDefault();var i=t.$(this);i.data("lightbox")||t.lightbox(i,t.Utils.options(i.attr("data-uk-lightbox"))),i.data("lightbox").show(i)}),t.$doc.on("keyup",function(t){if(i&&i.is(":visible")&&i.lightbox.options.keyboard)switch(t.preventDefault(),t.keyCode){case 37:i.lightbox.previous();break;case 39:i.lightbox.next()}})},init:function(){var e=[];if(this.index=0,this.siblings=[],this.element&&this.element.length){var i=this.options.group?t.$(['[data-uk-lightbox*="'+this.options.group+'"]',"[data-uk-lightbox*='"+this.options.group+"']"].join(",")):this.element;i.each(function(){var i=t.$(this);e.push({source:i.attr("href"),title:i.attr("title"),type:i.attr("data-lightbox-type")||"auto",link:i})}),this.index=i.index(this.element),this.siblings=e}else this.options.group&&this.options.group.length&&(this.siblings=this.options.group);this.trigger("lightbox-init",[this])},show:function(i){this.modal=e(this),this.modal.dialog.stop(),this.modal.content.stop();var n,o,s=this,a=t.$.Deferred();i=i||0,"object"==typeof i&&this.siblings.forEach(function(t,e){i[0]===t.link[0]&&(i=e)}),0>i?i=this.siblings.length-i:this.siblings[i]||(i=0),o=this.siblings[i],n={lightbox:s,source:o.source,type:o.type,index:i,promise:a,title:o.title,item:o,meta:{content:"",width:null,height:null}},this.index=i,this.modal.content.empty(),this.modal.is(":visible")||(this.modal.content.css({width:"",height:""}).empty(),this.modal.modal.show()),this.modal.loader.removeClass("uk-hidden"),a.promise().done(function(){s.data=n,s.fitSize(n)}).fail(function(){n.meta.content='<div class="uk-position-cover uk-flex uk-flex-middle uk-flex-center"><strong>Loading resource failed!</strong></div>',n.meta.width=400,n.meta.height=300,s.data=n,s.fitSize(n)}),s.trigger("showitem.uk.lightbox",[n])},fitSize:function(){var e=this,i=this.data,n=this.modal.dialog.outerWidth()-this.modal.dialog.width(),o=parseInt(this.modal.dialog.css("margin-top"),10),s=parseInt(this.modal.dialog.css("margin-bottom"),10),a=o+s,r=i.meta.content,l=e.options.duration;this.siblings.length>1&&(r=[r,'<a href="#" class="uk-slidenav uk-slidenav-contrast uk-slidenav-previous uk-hidden-touch" data-lightbox-previous></a>','<a href="#" class="uk-slidenav uk-slidenav-contrast uk-slidenav-next uk-hidden-touch" data-lightbox-next></a>'].join(""));var c,h,u=t.$("<div>&nbsp;</div>").css({opacity:0,position:"absolute",top:0,left:0,width:"100%","max-width":e.modal.dialog.css("max-width"),padding:e.modal.dialog.css("padding"),margin:e.modal.dialog.css("margin")}),d=i.meta.width,f=i.meta.height;u.appendTo("body").width(),c=u.width(),h=window.innerHeight-a,u.remove(),this.modal.dialog.find(".uk-modal-caption").remove(),i.title&&(this.modal.dialog.append('<div class="uk-modal-caption">'+i.title+"</div>"),h-=this.modal.dialog.find(".uk-modal-caption").outerHeight()),c<i.meta.width&&(f=Math.floor(f*(c/d)),d=c),f>h&&(f=Math.floor(h),d=Math.ceil(i.meta.width*(h/i.meta.height))),this.modal.content.css("opacity",0).width(d).html(r),"iframe"==i.type&&this.modal.content.find("iframe:first").height(f);var p=f+n,g=Math.floor(window.innerHeight/2-p/2)-a;0>g&&(g=0),this.modal.closer.addClass("uk-hidden"),e.modal.data("mwidth")==d&&e.modal.data("mheight")==f&&(l=0),this.modal.dialog.animate({width:d+n,height:f+n,top:g},l,"swing",function(){e.modal.loader.addClass("uk-hidden"),e.modal.content.css({width:""}).animate({opacity:1},function(){e.modal.closer.removeClass("uk-hidden")}),e.modal.data({mwidth:d,mheight:f})})},next:function(){this.show(this.siblings[this.index+1]?this.index+1:0);
},previous:function(){this.show(this.siblings[this.index-1]?this.index-1:this.siblings.length-1)}}),t.plugin("lightbox","image",{init:function(t){t.on("showitem.uk.lightbox",function(t,e){if("image"==e.type||e.source&&e.source.match(/\.(jpg|jpeg|png|gif|svg)$/i)){var i=function(t,i,n){e.meta={content:'<img class="uk-responsive-width" width="'+i+'" height="'+n+'" src ="'+t+'">',width:i,height:n},e.type="image",e.promise.resolve()};if(n[e.source])i(e.source,n[e.source].width,n[e.source].height);else{var o=new Image;o.onerror=function(){e.promise.reject("Loading image failed")},o.onload=function(){n[e.source]={width:o.width,height:o.height},i(e.source,n[e.source].width,n[e.source].height)},o.src=e.source}}})}}),t.plugin("lightbox","youtube",{init:function(t){var e=/(\/\/.*?youtube\.[a-z]+)\/watch\?v=([^&]+)&?(.*)/,i=/youtu\.be\/(.*)/;t.on("showitem.uk.lightbox",function(t,o){var s,a,r=function(t,e,i){o.meta={content:'<iframe src="//www.youtube.com/embed/'+t+'" width="'+e+'" height="'+i+'" style="max-width:100%;"></iframe>',width:e,height:i},o.type="iframe",o.promise.resolve()};if((a=o.source.match(e))&&(s=a[2]),(a=o.source.match(i))&&(s=a[1]),s){if(n[s])r(s,n[s].width,n[s].height);else{var l=new Image,c=!1;l.onerror=function(){n[s]={width:640,height:320},r(s,n[s].width,n[s].height)},l.onload=function(){120==l.width&&90==l.height?c?(n[s]={width:640,height:320},r(s,n[s].width,n[s].height)):(c=!0,l.src="//img.youtube.com/vi/"+s+"/0.jpg"):(n[s]={width:l.width,height:l.height},r(s,l.width,l.height))},l.src="//img.youtube.com/vi/"+s+"/maxresdefault.jpg"}t.stopImmediatePropagation()}})}}),t.plugin("lightbox","vimeo",{init:function(e){var i,o=/(\/\/.*?)vimeo\.[a-z]+\/([0-9]+).*?/;e.on("showitem.uk.lightbox",function(e,s){var a,r=function(t,e,i){s.meta={content:'<iframe src="//player.vimeo.com/video/'+t+'" width="'+e+'" height="'+i+'" style="width:100%;box-sizing:border-box;"></iframe>',width:e,height:i},s.type="iframe",s.promise.resolve()};(i=s.source.match(o))&&(a=i[2],n[a]?r(a,n[a].width,n[a].height):t.$.ajax({type:"GET",url:"http://vimeo.com/api/oembed.json?url="+encodeURI(s.source),jsonp:"callback",dataType:"jsonp",success:function(t){n[a]={width:t.width,height:t.height},r(a,n[a].width,n[a].height)}}),e.stopImmediatePropagation())})}}),t.plugin("lightbox","video",{init:function(e){e.on("showitem.uk.lightbox",function(e,i){var o=function(t,e,n){i.meta={content:'<video class="uk-responsive-width" src="'+t+'" width="'+e+'" height="'+n+'" controls></video>',width:e,height:n},i.type="video",i.promise.resolve()};if("video"==i.type||i.source.match(/\.(mp4|webm|ogv)$/i))if(n[i.source])o(i.source,n[i.source].width,n[i.source].height);else var s=t.$('<video style="position:fixed;visibility:hidden;top:-10000px;"></video>').attr("src",i.source).appendTo("body"),a=setInterval(function(){s[0].videoWidth&&(clearInterval(a),n[i.source]={width:s[0].videoWidth,height:s[0].videoHeight},o(i.source,n[i.source].width,n[i.source].height),s.remove())},20)})}}),t.lightbox.create=function(e,i){if(e){var n,o=[];return e.forEach(function(e){o.push(t.$.extend({source:"",title:"",type:"auto",link:!1},"string"==typeof e?{source:e}:e))}),n=t.lightbox(t.$.extend({},i,{group:o}))}},t.lightbox}),function(t){var e;window.UIkit&&(e=t(UIkit)),"function"==typeof define&&define.amd&&define("uikit-accordion",["uikit"],function(){return e||t(UIkit)})}(function(t){"use strict";function e(e){var i=t.$(e),n="auto";if(i.is(":visible"))n=i.outerHeight();else{var o={position:i.css("position"),visibility:i.css("visibility"),display:i.css("display")};n=i.css({position:"absolute",visibility:"hidden",display:"block"}).outerHeight(),i.css(o)}return n}return t.component("accordion",{defaults:{showfirst:!0,collapse:!0,animate:!0,easing:"swing",duration:300,toggle:".uk-accordion-title",containers:".uk-accordion-content",clsactive:"uk-active"},boot:function(){t.ready(function(e){setTimeout(function(){t.$("[data-uk-accordion]",e).each(function(){var e=t.$(this);e.data("accordion")||t.accordion(e,t.Utils.options(e.attr("data-uk-accordion")))})},0)})},init:function(){var e=this;this.element.on("click.uikit.accordion",this.options.toggle,function(i){i.preventDefault(),e.toggleItem(t.$(this).data("wrapper"),e.options.animate,e.options.collapse)}),this.update(),this.options.showfirst&&this.toggleItem(this.toggle.eq(0).data("wrapper"),!1,!1)},toggleItem:function(i,n,o){var s=this;i.data("toggle").toggleClass(this.options.clsactive),i.data("content").toggleClass(this.options.clsactive);var a=i.data("toggle").hasClass(this.options.clsactive);o&&(this.toggle.not(i.data("toggle")).removeClass(this.options.clsactive),this.content.not(i.data("content")).removeClass(this.options.clsactive).parent().stop().css("overflow","hidden").animate({height:0},{easing:this.options.easing,duration:n?this.options.duration:0}).attr("aria-expanded","false")),i.stop().css("overflow","hidden"),n?i.animate({height:a?e(i.data("content")):0},{easing:this.options.easing,duration:this.options.duration,complete:function(){a&&(i.css({overflow:"",height:"auto"}),t.Utils.checkDisplay(i.data("content"))),s.trigger("display.uk.check")}}):(i.height(a?"auto":0),a&&(i.css({overflow:""}),t.Utils.checkDisplay(i.data("content"))),this.trigger("display.uk.check")),i.attr("aria-expanded",a),this.element.trigger("toggle.uk.accordion",[a,i.data("toggle"),i.data("content")])},update:function(){var e,i,n,o=this;this.toggle=this.find(this.options.toggle),this.content=this.find(this.options.containers),this.content.each(function(s){e=t.$(this),e.parent().data("wrapper")?i=e.parent():(i=t.$(this).wrap('<div data-wrapper="true" style="overflow:hidden;height:0;position:relative;"></div>').parent(),i.attr("aria-expanded","false")),n=o.toggle.eq(s),i.data("toggle",n),i.data("content",e),n.data("wrapper",i),e.data("wrapper",i)}),this.element.trigger("update.uk.accordion",[this])}}),t.accordion}),function(){"use strict";var t=this,e=t.Chart,i=function(t){this.canvas=t.canvas,this.ctx=t;var e=function(t,e){return t["offset"+e]?t["offset"+e]:document.defaultView.getComputedStyle(t).getPropertyValue(e)},i=this.width=e(t.canvas,"Width"),o=this.height=e(t.canvas,"Height");t.canvas.width=i,t.canvas.height=o;var i=this.width=t.canvas.width,o=this.height=t.canvas.height;return this.aspectRatio=this.width/this.height,n.retinaScale(this),this};i.defaults={global:{animation:!0,animationSteps:60,animationEasing:"easeOutQuart",showScale:!0,scaleOverride:!1,scaleSteps:null,scaleStepWidth:null,scaleStartValue:null,scaleLineColor:"rgba(0,0,0,.1)",scaleLineWidth:1,scaleShowLabels:!0,scaleLabel:"<%=value%>",scaleIntegersOnly:!0,scaleBeginAtZero:!1,scaleFontFamily:"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",scaleFontSize:12,scaleFontStyle:"normal",scaleFontColor:"#666",responsive:!1,maintainAspectRatio:!0,showTooltips:!0,customTooltips:!1,tooltipEvents:["mousemove","touchstart","touchmove","mouseout"],tooltipFillColor:"rgba(0,0,0,0.8)",tooltipFontFamily:"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",tooltipFontSize:14,tooltipFontStyle:"normal",tooltipFontColor:"#fff",tooltipTitleFontFamily:"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",tooltipTitleFontSize:14,tooltipTitleFontStyle:"bold",tooltipTitleFontColor:"#fff",tooltipYPadding:6,tooltipXPadding:6,tooltipCaretSize:8,tooltipCornerRadius:6,tooltipXOffset:10,tooltipTemplate:"<%if (label){%><%=label%>: <%}%><%= value %>",multiTooltipTemplate:"<%= value %>",multiTooltipKeyBackground:"#fff",onAnimationProgress:function(){},onAnimationComplete:function(){}}},i.types={};var n=i.helpers={},o=n.each=function(t,e,i){var n=Array.prototype.slice.call(arguments,3);if(t)if(t.length===+t.length){var o;for(o=0;o<t.length;o++)e.apply(i,[t[o],o].concat(n))}else for(var s in t)e.apply(i,[t[s],s].concat(n))},s=n.clone=function(t){var e={};return o(t,function(i,n){t.hasOwnProperty(n)&&(e[n]=i)}),e},a=n.extend=function(t){return o(Array.prototype.slice.call(arguments,1),function(e){o(e,function(i,n){e.hasOwnProperty(n)&&(t[n]=i)})}),t},r=n.merge=function(){var t=Array.prototype.slice.call(arguments,0);return t.unshift({}),a.apply(null,t)},l=n.indexOf=function(t,e){if(Array.prototype.indexOf)return t.indexOf(e);for(var i=0;i<t.length;i++)if(t[i]===e)return i;return-1},c=(n.where=function(t,e){var i=[];return n.each(t,function(t){e(t)&&i.push(t)}),i},n.findNextWhere=function(t,e,i){i||(i=-1);for(var n=i+1;n<t.length;n++){var o=t[n];if(e(o))return o}},n.findPreviousWhere=function(t,e,i){i||(i=t.length);for(var n=i-1;n>=0;n--){var o=t[n];if(e(o))return o}},n.inherits=function(t){var e=this,i=t&&t.hasOwnProperty("constructor")?t.constructor:function(){return e.apply(this,arguments)},n=function(){this.constructor=i};return n.prototype=e.prototype,i.prototype=new n,i.extend=c,t&&a(i.prototype,t),i.__super__=e.prototype,i}),h=n.noop=function(){},u=n.uid=function(){var t=0;return function(){return"chart-"+t++}}(),d=n.warn=function(t){window.console&&"function"==typeof window.console.warn&&console.warn(t)},f=n.amd="function"==typeof define&&define.amd,p=n.isNumber=function(t){return!isNaN(parseFloat(t))&&isFinite(t)},g=n.max=function(t){return Math.max.apply(Math,t)},m=n.min=function(t){return Math.min.apply(Math,t)},v=(n.cap=function(t,e,i){if(p(e)){if(t>e)return e}else if(p(i)&&i>t)return i;return t},n.getDecimalPlaces=function(t){return t%1!==0&&p(t)?t.toString().split(".")[1].length:0}),y=n.radians=function(t){return t*(Math.PI/180)},b=(n.getAngleFromPoint=function(t,e){var i=e.x-t.x,n=e.y-t.y,o=Math.sqrt(i*i+n*n),s=2*Math.PI+Math.atan2(n,i);return 0>i&&0>n&&(s+=2*Math.PI),{angle:s,distance:o}},n.aliasPixel=function(t){return t%2===0?0:.5}),w=(n.splineCurve=function(t,e,i,n){var o=Math.sqrt(Math.pow(e.x-t.x,2)+Math.pow(e.y-t.y,2)),s=Math.sqrt(Math.pow(i.x-e.x,2)+Math.pow(i.y-e.y,2)),a=n*o/(o+s),r=n*s/(o+s);return{inner:{x:e.x-a*(i.x-t.x),y:e.y-a*(i.y-t.y)},outer:{x:e.x+r*(i.x-t.x),y:e.y+r*(i.y-t.y)}}},n.calculateOrderOfMagnitude=function(t){return Math.floor(Math.log(t)/Math.LN10)}),k=(n.calculateScaleRange=function(t,e,i,n,o){var s=2,a=Math.floor(e/(1.5*i)),r=s>=a,l=g(t),c=m(t);l===c&&(l+=.5,c>=.5&&!n?c-=.5:l+=.5);for(var h=Math.abs(l-c),u=w(h),d=Math.ceil(l/(1*Math.pow(10,u)))*Math.pow(10,u),f=n?0:Math.floor(c/(1*Math.pow(10,u)))*Math.pow(10,u),p=d-f,v=Math.pow(10,u),y=Math.round(p/v);(y>a||a>2*y)&&!r;)if(y>a)v*=2,y=Math.round(p/v),y%1!==0&&(r=!0);else if(o&&u>=0){if(v/2%1!==0)break;v/=2,y=Math.round(p/v)}else v/=2,y=Math.round(p/v);return r&&(y=s,v=p/y),{steps:y,stepValue:v,min:f,max:f+y*v}},n.template=function(t,e){function i(t,e){var i=/\W/.test(t)?new Function("obj","var p=[],print=function(){p.push.apply(p,arguments);};with(obj){p.push('"+t.replace(/[\r\t\n]/g," ").split("<%").join("	").replace(/((^|%>)[^\t]*)'/g,"$1\r").replace(/\t=(.*?)%>/g,"',$1,'").split("	").join("');").split("%>").join("p.push('").split("\r").join("\\'")+"');}return p.join('');"):n[t]=n[t];return e?i(e):i}if(t instanceof Function)return t(e);var n={};return i(t,e)}),x=(n.generateLabels=function(t,e,i,n){var s=new Array(e);return labelTemplateString&&o(s,function(e,o){s[o]=k(t,{value:i+n*(o+1)})}),s},n.easingEffects={linear:function(t){return t},easeInQuad:function(t){return t*t},easeOutQuad:function(t){return-1*t*(t-2)},easeInOutQuad:function(t){return(t/=.5)<1?.5*t*t:-.5*(--t*(t-2)-1)},easeInCubic:function(t){return t*t*t},easeOutCubic:function(t){return 1*((t=t/1-1)*t*t+1)},easeInOutCubic:function(t){return(t/=.5)<1?.5*t*t*t:.5*((t-=2)*t*t+2)},easeInQuart:function(t){return t*t*t*t},easeOutQuart:function(t){return-1*((t=t/1-1)*t*t*t-1)},easeInOutQuart:function(t){return(t/=.5)<1?.5*t*t*t*t:-.5*((t-=2)*t*t*t-2)},easeInQuint:function(t){return 1*(t/=1)*t*t*t*t},easeOutQuint:function(t){return 1*((t=t/1-1)*t*t*t*t+1)},easeInOutQuint:function(t){return(t/=.5)<1?.5*t*t*t*t*t:.5*((t-=2)*t*t*t*t+2)},easeInSine:function(t){return-1*Math.cos(t/1*(Math.PI/2))+1},easeOutSine:function(t){return 1*Math.sin(t/1*(Math.PI/2))},easeInOutSine:function(t){return-.5*(Math.cos(Math.PI*t/1)-1)},easeInExpo:function(t){return 0===t?1:1*Math.pow(2,10*(t/1-1))},easeOutExpo:function(t){return 1===t?1:1*(-Math.pow(2,-10*t/1)+1)},easeInOutExpo:function(t){return 0===t?0:1===t?1:(t/=.5)<1?.5*Math.pow(2,10*(t-1)):.5*(-Math.pow(2,-10*--t)+2)},easeInCirc:function(t){return t>=1?t:-1*(Math.sqrt(1-(t/=1)*t)-1)},easeOutCirc:function(t){return 1*Math.sqrt(1-(t=t/1-1)*t)},easeInOutCirc:function(t){return(t/=.5)<1?-.5*(Math.sqrt(1-t*t)-1):.5*(Math.sqrt(1-(t-=2)*t)+1)},easeInElastic:function(t){var e=1.70158,i=0,n=1;return 0===t?0:1==(t/=1)?1:(i||(i=.3),n<Math.abs(1)?(n=1,e=i/4):e=i/(2*Math.PI)*Math.asin(1/n),-(n*Math.pow(2,10*(t-=1))*Math.sin(2*(1*t-e)*Math.PI/i)))},easeOutElastic:function(t){var e=1.70158,i=0,n=1;return 0===t?0:1==(t/=1)?1:(i||(i=.3),n<Math.abs(1)?(n=1,e=i/4):e=i/(2*Math.PI)*Math.asin(1/n),n*Math.pow(2,-10*t)*Math.sin(2*(1*t-e)*Math.PI/i)+1)},easeInOutElastic:function(t){var e=1.70158,i=0,n=1;return 0===t?0:2==(t/=.5)?1:(i||(i=.3*1.5),n<Math.abs(1)?(n=1,e=i/4):e=i/(2*Math.PI)*Math.asin(1/n),1>t?-.5*n*Math.pow(2,10*(t-=1))*Math.sin(2*(1*t-e)*Math.PI/i):n*Math.pow(2,-10*(t-=1))*Math.sin(2*(1*t-e)*Math.PI/i)*.5+1)},easeInBack:function(t){var e=1.70158;return 1*(t/=1)*t*((e+1)*t-e)},easeOutBack:function(t){var e=1.70158;return 1*((t=t/1-1)*t*((e+1)*t+e)+1)},easeInOutBack:function(t){var e=1.70158;return(t/=.5)<1?.5*t*t*(((e*=1.525)+1)*t-e):.5*((t-=2)*t*(((e*=1.525)+1)*t+e)+2)},easeInBounce:function(t){return 1-x.easeOutBounce(1-t)},easeOutBounce:function(t){return(t/=1)<1/2.75?7.5625*t*t:2/2.75>t?1*(7.5625*(t-=1.5/2.75)*t+.75):2.5/2.75>t?1*(7.5625*(t-=2.25/2.75)*t+.9375):1*(7.5625*(t-=2.625/2.75)*t+.984375)},easeInOutBounce:function(t){return.5>t?.5*x.easeInBounce(2*t):.5*x.easeOutBounce(2*t-1)+.5}}),C=n.requestAnimFrame=function(){return window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.oRequestAnimationFrame||window.msRequestAnimationFrame||function(t){return window.setTimeout(t,1e3/60)}}(),S=n.cancelAnimFrame=function(){return window.cancelAnimationFrame||window.webkitCancelAnimationFrame||window.mozCancelAnimationFrame||window.oCancelAnimationFrame||window.msCancelAnimationFrame||function(t){return window.clearTimeout(t,1e3/60)}}(),T=(n.animationLoop=function(t,e,i,n,o,s){var a=0,r=x[i]||x.linear,l=function(){a++;var i=a/e,c=r(i);t.call(s,c,i,a),n.call(s,c,i),e>a?s.animationFrame=C(l):o.apply(s)};C(l)},n.getRelativePosition=function(t){var e,i,n=t.originalEvent||t,o=t.currentTarget||t.srcElement,s=o.getBoundingClientRect();return n.touches?(e=n.touches[0].clientX-s.left,i=n.touches[0].clientY-s.top):(e=n.clientX-s.left,i=n.clientY-s.top),{x:e,y:i}},n.addEvent=function(t,e,i){t.addEventListener?t.addEventListener(e,i):t.attachEvent?t.attachEvent("on"+e,i):t["on"+e]=i}),P=n.removeEvent=function(t,e,i){t.removeEventListener?t.removeEventListener(e,i,!1):t.detachEvent?t.detachEvent("on"+e,i):t["on"+e]=h},$=(n.bindEvents=function(t,e,i){t.events||(t.events={}),o(e,function(e){t.events[e]=function(){i.apply(t,arguments)},T(t.chart.canvas,e,t.events[e])})},n.unbindEvents=function(t,e){o(e,function(e,i){P(t.chart.canvas,i,e)})}),L=n.getMaximumWidth=function(t){var e=t.parentNode;return e.clientWidth},E=n.getMaximumHeight=function(t){var e=t.parentNode;return e.clientHeight},A=(n.getMaximumSize=n.getMaximumWidth,n.retinaScale=function(t){var e=t.ctx,i=t.canvas.width,n=t.canvas.height;window.devicePixelRatio&&(e.canvas.style.width=i+"px",e.canvas.style.height=n+"px",e.canvas.height=n*window.devicePixelRatio,e.canvas.width=i*window.devicePixelRatio,e.scale(window.devicePixelRatio,window.devicePixelRatio))}),F=n.clear=function(t){t.ctx.clearRect(0,0,t.width,t.height)},D=n.fontString=function(t,e,i){return e+" "+t+"px "+i},M=n.longestText=function(t,e,i){t.font=e;var n=0;return o(i,function(e){var i=t.measureText(e).width;n=i>n?i:n}),n},R=n.drawRoundedRectangle=function(t,e,i,n,o,s){t.beginPath(),t.moveTo(e+s,i),t.lineTo(e+n-s,i),t.quadraticCurveTo(e+n,i,e+n,i+s),t.lineTo(e+n,i+o-s),t.quadraticCurveTo(e+n,i+o,e+n-s,i+o),t.lineTo(e+s,i+o),t.quadraticCurveTo(e,i+o,e,i+o-s),t.lineTo(e,i+s),t.quadraticCurveTo(e,i,e+s,i),t.closePath()};i.instances={},i.Type=function(t,e,n){this.options=e,this.chart=n,this.id=u(),i.instances[this.id]=this,e.responsive&&this.resize(),this.initialize.call(this,t)},a(i.Type.prototype,{initialize:function(){return this},clear:function(){return F(this.chart),this},stop:function(){return S(this.animationFrame),this},resize:function(t){this.stop();var e=this.chart.canvas,i=L(this.chart.canvas),n=this.options.maintainAspectRatio?i/this.chart.aspectRatio:E(this.chart.canvas);return e.width=this.chart.width=i,e.height=this.chart.height=n,A(this.chart),"function"==typeof t&&t.apply(this,Array.prototype.slice.call(arguments,1)),this},reflow:h,render:function(t){return t&&this.reflow(),this.options.animation&&!t?n.animationLoop(this.draw,this.options.animationSteps,this.options.animationEasing,this.options.onAnimationProgress,this.options.onAnimationComplete,this):(this.draw(),this.options.onAnimationComplete.call(this)),this},generateLegend:function(){return k(this.options.legendTemplate,this)},destroy:function(){this.clear(),$(this,this.events);var t=this.chart.canvas;t.width=this.chart.width,t.height=this.chart.height,t.style.removeProperty?(t.style.removeProperty("width"),t.style.removeProperty("height")):(t.style.removeAttribute("width"),t.style.removeAttribute("height")),delete i.instances[this.id]},showTooltip:function(t,e){"undefined"==typeof this.activeElements&&(this.activeElements=[]);var s=function(t){var e=!1;return t.length!==this.activeElements.length?e=!0:(o(t,function(t,i){t!==this.activeElements[i]&&(e=!0)},this),e)}.call(this,t);if(s||e){if(this.activeElements=t,this.draw(),this.options.customTooltips&&this.options.customTooltips(!1),t.length>0)if(this.datasets&&this.datasets.length>1){for(var a,r,c=this.datasets.length-1;c>=0&&(a=this.datasets[c].points||this.datasets[c].bars||this.datasets[c].segments,r=l(a,t[0]),-1===r);c--);var h=[],u=[],d=function(){var t,e,i,o,s,a=[],l=[],c=[];return n.each(this.datasets,function(e){t=e.points||e.bars||e.segments,t[r]&&t[r].hasValue()&&a.push(t[r])}),n.each(a,function(t){l.push(t.x),c.push(t.y),h.push(n.template(this.options.multiTooltipTemplate,t)),u.push({fill:t._saved.fillColor||t.fillColor,stroke:t._saved.strokeColor||t.strokeColor})},this),s=m(c),i=g(c),o=m(l),e=g(l),{x:o>this.chart.width/2?o:e,y:(s+i)/2}}.call(this,r);new i.MultiTooltip({x:d.x,y:d.y,xPadding:this.options.tooltipXPadding,yPadding:this.options.tooltipYPadding,xOffset:this.options.tooltipXOffset,fillColor:this.options.tooltipFillColor,textColor:this.options.tooltipFontColor,fontFamily:this.options.tooltipFontFamily,fontStyle:this.options.tooltipFontStyle,fontSize:this.options.tooltipFontSize,titleTextColor:this.options.tooltipTitleFontColor,titleFontFamily:this.options.tooltipTitleFontFamily,titleFontStyle:this.options.tooltipTitleFontStyle,titleFontSize:this.options.tooltipTitleFontSize,cornerRadius:this.options.tooltipCornerRadius,labels:h,legendColors:u,legendColorBackground:this.options.multiTooltipKeyBackground,title:t[0].label,chart:this.chart,ctx:this.chart.ctx,custom:this.options.customTooltips}).draw()}else o(t,function(t){var e=t.tooltipPosition();new i.Tooltip({x:Math.round(e.x),y:Math.round(e.y),xPadding:this.options.tooltipXPadding,yPadding:this.options.tooltipYPadding,fillColor:this.options.tooltipFillColor,textColor:this.options.tooltipFontColor,fontFamily:this.options.tooltipFontFamily,fontStyle:this.options.tooltipFontStyle,fontSize:this.options.tooltipFontSize,caretHeight:this.options.tooltipCaretSize,cornerRadius:this.options.tooltipCornerRadius,text:k(this.options.tooltipTemplate,t),chart:this.chart,custom:this.options.customTooltips}).draw()},this);return this}},toBase64Image:function(){return this.chart.canvas.toDataURL.apply(this.chart.canvas,arguments)}}),i.Type.extend=function(t){var e=this,n=function(){return e.apply(this,arguments)};if(n.prototype=s(e.prototype),a(n.prototype,t),n.extend=i.Type.extend,t.name||e.prototype.name){var o=t.name||e.prototype.name,l=i.defaults[e.prototype.name]?s(i.defaults[e.prototype.name]):{};i.defaults[o]=a(l,t.defaults),i.types[o]=n,i.prototype[o]=function(t,e){var s=r(i.defaults.global,i.defaults[o],e||{});return new n(t,s,this)}}else d("Name not provided for this chart, so it hasn't been registered");return e},i.Element=function(t){a(this,t),this.initialize.apply(this,arguments),this.save()},a(i.Element.prototype,{initialize:function(){},restore:function(t){return t?o(t,function(t){this[t]=this._saved[t]},this):a(this,this._saved),this},save:function(){return this._saved=s(this),delete this._saved._saved,this},update:function(t){return o(t,function(t,e){this._saved[e]=this[e],this[e]=t},this),this},transition:function(t,e){return o(t,function(t,i){this[i]=(t-this._saved[i])*e+this._saved[i]},this),this},tooltipPosition:function(){return{x:this.x,y:this.y}},hasValue:function(){return p(this.value)}}),i.Element.extend=c,i.Point=i.Element.extend({display:!0,inRange:function(t,e){var i=this.hitDetectionRadius+this.radius;return Math.pow(t-this.x,2)+Math.pow(e-this.y,2)<Math.pow(i,2)},draw:function(){if(this.display){var t=this.ctx;t.beginPath(),t.arc(this.x,this.y,this.radius,0,2*Math.PI),t.closePath(),t.strokeStyle=this.strokeColor,t.lineWidth=this.strokeWidth,t.fillStyle=this.fillColor,t.fill(),t.stroke()}}}),i.Arc=i.Element.extend({inRange:function(t,e){var i=n.getAngleFromPoint(this,{x:t,y:e}),o=i.angle>=this.startAngle&&i.angle<=this.endAngle,s=i.distance>=this.innerRadius&&i.distance<=this.outerRadius;return o&&s},tooltipPosition:function(){var t=this.startAngle+(this.endAngle-this.startAngle)/2,e=(this.outerRadius-this.innerRadius)/2+this.innerRadius;return{x:this.x+Math.cos(t)*e,y:this.y+Math.sin(t)*e}},draw:function(t){var e=this.ctx;e.beginPath(),e.arc(this.x,this.y,this.outerRadius,this.startAngle,this.endAngle),e.arc(this.x,this.y,this.innerRadius,this.endAngle,this.startAngle,!0),e.closePath(),e.strokeStyle=this.strokeColor,e.lineWidth=this.strokeWidth,e.fillStyle=this.fillColor,e.fill(),e.lineJoin="bevel",this.showStroke&&e.stroke()}}),i.Rectangle=i.Element.extend({draw:function(){var t=this.ctx,e=this.width/2,i=this.x-e,n=this.x+e,o=this.base-(this.base-this.y),s=this.strokeWidth/2;this.showStroke&&(i+=s,n-=s,o+=s),t.beginPath(),t.fillStyle=this.fillColor,t.strokeStyle=this.strokeColor,t.lineWidth=this.strokeWidth,t.moveTo(i,this.base),t.lineTo(i,o),t.lineTo(n,o),t.lineTo(n,this.base),t.fill(),this.showStroke&&t.stroke()},height:function(){return this.base-this.y},inRange:function(t,e){return t>=this.x-this.width/2&&t<=this.x+this.width/2&&e>=this.y&&e<=this.base}}),i.Tooltip=i.Element.extend({draw:function(){var t=this.chart.ctx;t.font=D(this.fontSize,this.fontStyle,this.fontFamily),this.xAlign="center",this.yAlign="above";var e=this.caretPadding=2,i=t.measureText(this.text).width+2*this.xPadding,n=this.fontSize+2*this.yPadding,o=n+this.caretHeight+e;this.x+i/2>this.chart.width?this.xAlign="left":this.x-i/2<0&&(this.xAlign="right"),this.y-o<0&&(this.yAlign="below");var s=this.x-i/2,a=this.y-o;if(t.fillStyle=this.fillColor,this.custom)this.custom(this);else{switch(this.yAlign){case"above":t.beginPath(),t.moveTo(this.x,this.y-e),t.lineTo(this.x+this.caretHeight,this.y-(e+this.caretHeight)),t.lineTo(this.x-this.caretHeight,this.y-(e+this.caretHeight)),t.closePath(),t.fill();break;case"below":a=this.y+e+this.caretHeight,t.beginPath(),t.moveTo(this.x,this.y+e),t.lineTo(this.x+this.caretHeight,this.y+e+this.caretHeight),t.lineTo(this.x-this.caretHeight,this.y+e+this.caretHeight),t.closePath(),t.fill()}switch(this.xAlign){case"left":s=this.x-i+(this.cornerRadius+this.caretHeight);break;case"right":s=this.x-(this.cornerRadius+this.caretHeight)}R(t,s,a,i,n,this.cornerRadius),t.fill(),t.fillStyle=this.textColor,t.textAlign="center",t.textBaseline="middle",t.fillText(this.text,s+i/2,a+n/2)}}}),i.MultiTooltip=i.Element.extend({initialize:function(){this.font=D(this.fontSize,this.fontStyle,this.fontFamily),this.titleFont=D(this.titleFontSize,this.titleFontStyle,this.titleFontFamily),this.height=this.labels.length*this.fontSize+(this.labels.length-1)*(this.fontSize/2)+2*this.yPadding+1.5*this.titleFontSize,this.ctx.font=this.titleFont;var t=this.ctx.measureText(this.title).width,e=M(this.ctx,this.font,this.labels)+this.fontSize+3,i=g([e,t]);this.width=i+2*this.xPadding;var n=this.height/2;this.y-n<0?this.y=n:this.y+n>this.chart.height&&(this.y=this.chart.height-n),this.x>this.chart.width/2?this.x-=this.xOffset+this.width:this.x+=this.xOffset},getLineHeight:function(t){var e=this.y-this.height/2+this.yPadding,i=t-1;return 0===t?e+this.titleFontSize/2:e+(1.5*this.fontSize*i+this.fontSize/2)+1.5*this.titleFontSize},draw:function(){if(this.custom)this.custom(this);else{R(this.ctx,this.x,this.y-this.height/2,this.width,this.height,this.cornerRadius);var t=this.ctx;t.fillStyle=this.fillColor,t.fill(),t.closePath(),t.textAlign="left",t.textBaseline="middle",t.fillStyle=this.titleTextColor,t.font=this.titleFont,t.fillText(this.title,this.x+this.xPadding,this.getLineHeight(0)),t.font=this.font,n.each(this.labels,function(e,i){t.fillStyle=this.textColor,t.fillText(e,this.x+this.xPadding+this.fontSize+3,this.getLineHeight(i+1)),t.fillStyle=this.legendColorBackground,t.fillRect(this.x+this.xPadding,this.getLineHeight(i+1)-this.fontSize/2,this.fontSize,this.fontSize),t.fillStyle=this.legendColors[i].fill,t.fillRect(this.x+this.xPadding,this.getLineHeight(i+1)-this.fontSize/2,this.fontSize,this.fontSize)},this)}}}),i.Scale=i.Element.extend({initialize:function(){this.fit()},buildYLabels:function(){this.yLabels=[];for(var t=v(this.stepValue),e=0;e<=this.steps;e++)this.yLabels.push(k(this.templateString,{value:(this.min+e*this.stepValue).toFixed(t)}));this.yLabelWidth=this.display&&this.showLabels?M(this.ctx,this.font,this.yLabels):0},addXLabel:function(t){this.xLabels.push(t),this.valuesCount++,this.fit()},removeXLabel:function(){this.xLabels.shift(),this.valuesCount--,this.fit()},fit:function(){this.startPoint=this.display?this.fontSize:0,this.endPoint=this.display?this.height-1.5*this.fontSize-5:this.height,this.startPoint+=this.padding,this.endPoint-=this.padding;var t,e=this.endPoint-this.startPoint;for(this.calculateYRange(e),this.buildYLabels(),this.calculateXLabelRotation();e>this.endPoint-this.startPoint;)e=this.endPoint-this.startPoint,t=this.yLabelWidth,this.calculateYRange(e),this.buildYLabels(),t<this.yLabelWidth&&this.calculateXLabelRotation()},calculateXLabelRotation:function(){this.ctx.font=this.font;var t,e,i=this.ctx.measureText(this.xLabels[0]).width,n=this.ctx.measureText(this.xLabels[this.xLabels.length-1]).width;if(this.xScalePaddingRight=n/2+3,this.xScalePaddingLeft=i/2>this.yLabelWidth+10?i/2:this.yLabelWidth+10,this.xLabelRotation=0,this.display){var o,s=M(this.ctx,this.font,this.xLabels);this.xLabelWidth=s;for(var a=Math.floor(this.calculateX(1)-this.calculateX(0))-6;this.xLabelWidth>a&&0===this.xLabelRotation||this.xLabelWidth>a&&this.xLabelRotation<=90&&this.xLabelRotation>0;)o=Math.cos(y(this.xLabelRotation)),t=o*i,e=o*n,t+this.fontSize/2>this.yLabelWidth+8&&(this.xScalePaddingLeft=t+this.fontSize/2),this.xScalePaddingRight=this.fontSize/2,this.xLabelRotation++,this.xLabelWidth=o*s;this.xLabelRotation>0&&(this.endPoint-=Math.sin(y(this.xLabelRotation))*s+3)}else this.xLabelWidth=0,this.xScalePaddingRight=this.padding,this.xScalePaddingLeft=this.padding},calculateYRange:h,drawingArea:function(){return this.startPoint-this.endPoint},calculateY:function(t){var e=this.drawingArea()/(this.min-this.max);return this.endPoint-e*(t-this.min)},calculateX:function(t){var e=(this.xLabelRotation>0,this.width-(this.xScalePaddingLeft+this.xScalePaddingRight)),i=e/Math.max(this.valuesCount-(this.offsetGridLines?0:1),1),n=i*t+this.xScalePaddingLeft;return this.offsetGridLines&&(n+=i/2),Math.round(n)},update:function(t){n.extend(this,t),this.fit()},draw:function(){var t=this.ctx,e=(this.endPoint-this.startPoint)/this.steps,i=Math.round(this.xScalePaddingLeft);this.display&&(t.fillStyle=this.textColor,t.font=this.font,o(this.yLabels,function(o,s){var a=this.endPoint-e*s,r=Math.round(a),l=this.showHorizontalLines;t.textAlign="right",t.textBaseline="middle",this.showLabels&&t.fillText(o,i-10,a),0!==s||l||(l=!0),l&&t.beginPath(),s>0?(t.lineWidth=this.gridLineWidth,t.strokeStyle=this.gridLineColor):(t.lineWidth=this.lineWidth,t.strokeStyle=this.lineColor),r+=n.aliasPixel(t.lineWidth),l&&(t.moveTo(i,r),t.lineTo(this.width,r),t.stroke(),t.closePath()),t.lineWidth=this.lineWidth,t.strokeStyle=this.lineColor,t.beginPath(),t.moveTo(i-5,r),t.lineTo(i,r),t.stroke(),t.closePath()},this),o(this.xLabels,function(e,i){var n=this.calculateX(i)+b(this.lineWidth),o=this.calculateX(i-(this.offsetGridLines?.5:0))+b(this.lineWidth),s=this.xLabelRotation>0,a=this.showVerticalLines;0!==i||a||(a=!0),a&&t.beginPath(),i>0?(t.lineWidth=this.gridLineWidth,t.strokeStyle=this.gridLineColor):(t.lineWidth=this.lineWidth,t.strokeStyle=this.lineColor),a&&(t.moveTo(o,this.endPoint),t.lineTo(o,this.startPoint-3),t.stroke(),t.closePath()),t.lineWidth=this.lineWidth,t.strokeStyle=this.lineColor,t.beginPath(),t.moveTo(o,this.endPoint),t.lineTo(o,this.endPoint+5),t.stroke(),t.closePath(),t.save(),t.translate(n,s?this.endPoint+12:this.endPoint+8),t.rotate(-1*y(this.xLabelRotation)),t.font=this.font,t.textAlign=s?"right":"center",t.textBaseline=s?"middle":"top",t.fillText(e,0,0),t.restore()},this))}}),i.RadialScale=i.Element.extend({initialize:function(){this.size=m([this.height,this.width]),this.drawingArea=this.display?this.size/2-(this.fontSize/2+this.backdropPaddingY):this.size/2},calculateCenterOffset:function(t){var e=this.drawingArea/(this.max-this.min);return(t-this.min)*e},update:function(){this.lineArc?this.drawingArea=this.display?this.size/2-(this.fontSize/2+this.backdropPaddingY):this.size/2:this.setScaleSize(),this.buildYLabels()},buildYLabels:function(){this.yLabels=[];for(var t=v(this.stepValue),e=0;e<=this.steps;e++)this.yLabels.push(k(this.templateString,{value:(this.min+e*this.stepValue).toFixed(t)}))},getCircumference:function(){return 2*Math.PI/this.valuesCount},setScaleSize:function(){var t,e,i,n,o,s,a,r,l,c,h,u,d=m([this.height/2-this.pointLabelFontSize-5,this.width/2]),f=this.width,g=0;for(this.ctx.font=D(this.pointLabelFontSize,this.pointLabelFontStyle,this.pointLabelFontFamily),e=0;e<this.valuesCount;e++)t=this.getPointPosition(e,d),i=this.ctx.measureText(k(this.templateString,{value:this.labels[e]})).width+5,0===e||e===this.valuesCount/2?(n=i/2,t.x+n>f&&(f=t.x+n,o=e),t.x-n<g&&(g=t.x-n,a=e)):e<this.valuesCount/2?t.x+i>f&&(f=t.x+i,o=e):e>this.valuesCount/2&&t.x-i<g&&(g=t.x-i,a=e);l=g,c=Math.ceil(f-this.width),s=this.getIndexAngle(o),r=this.getIndexAngle(a),h=c/Math.sin(s+Math.PI/2),u=l/Math.sin(r+Math.PI/2),h=p(h)?h:0,u=p(u)?u:0,this.drawingArea=d-(u+h)/2,this.setCenterPoint(u,h)},setCenterPoint:function(t,e){var i=this.width-e-this.drawingArea,n=t+this.drawingArea;this.xCenter=(n+i)/2,this.yCenter=this.height/2},getIndexAngle:function(t){var e=2*Math.PI/this.valuesCount;return t*e-Math.PI/2},getPointPosition:function(t,e){var i=this.getIndexAngle(t);return{x:Math.cos(i)*e+this.xCenter,y:Math.sin(i)*e+this.yCenter}},draw:function(){if(this.display){var t=this.ctx;if(o(this.yLabels,function(e,i){if(i>0){var n,o=i*(this.drawingArea/this.steps),s=this.yCenter-o;if(this.lineWidth>0)if(t.strokeStyle=this.lineColor,t.lineWidth=this.lineWidth,this.lineArc)t.beginPath(),t.arc(this.xCenter,this.yCenter,o,0,2*Math.PI),t.closePath(),t.stroke();else{t.beginPath();for(var a=0;a<this.valuesCount;a++)n=this.getPointPosition(a,this.calculateCenterOffset(this.min+i*this.stepValue)),0===a?t.moveTo(n.x,n.y):t.lineTo(n.x,n.y);t.closePath(),t.stroke()}if(this.showLabels){if(t.font=D(this.fontSize,this.fontStyle,this.fontFamily),this.showLabelBackdrop){var r=t.measureText(e).width;t.fillStyle=this.backdropColor,t.fillRect(this.xCenter-r/2-this.backdropPaddingX,s-this.fontSize/2-this.backdropPaddingY,r+2*this.backdropPaddingX,this.fontSize+2*this.backdropPaddingY);
}t.textAlign="center",t.textBaseline="middle",t.fillStyle=this.fontColor,t.fillText(e,this.xCenter,s)}}},this),!this.lineArc){t.lineWidth=this.angleLineWidth,t.strokeStyle=this.angleLineColor;for(var e=this.valuesCount-1;e>=0;e--){if(this.angleLineWidth>0){var i=this.getPointPosition(e,this.calculateCenterOffset(this.max));t.beginPath(),t.moveTo(this.xCenter,this.yCenter),t.lineTo(i.x,i.y),t.stroke(),t.closePath()}var n=this.getPointPosition(e,this.calculateCenterOffset(this.max)+5);t.font=D(this.pointLabelFontSize,this.pointLabelFontStyle,this.pointLabelFontFamily),t.fillStyle=this.pointLabelFontColor;var s=this.labels.length,a=this.labels.length/2,r=a/2,l=r>e||e>s-r,c=e===r||e===s-r;t.textAlign=0===e?"center":e===a?"center":a>e?"left":"right",t.textBaseline=c?"middle":l?"bottom":"top",t.fillText(this.labels[e],n.x,n.y)}}}}}),n.addEvent(window,"resize",function(){var t;return function(){clearTimeout(t),t=setTimeout(function(){o(i.instances,function(t){t.options.responsive&&t.resize(t.render,!0)})},50)}}()),f?define(function(){return i}):"object"==typeof module&&module.exports&&(module.exports=i),t.Chart=i,i.noConflict=function(){return t.Chart=e,i}}.call(this),function(){"use strict";var t=this,e=t.Chart,i=e.helpers,n={scaleBeginAtZero:!0,scaleShowGridLines:!0,scaleGridLineColor:"rgba(0,0,0,.05)",scaleGridLineWidth:1,scaleShowHorizontalLines:!0,scaleShowVerticalLines:!0,barShowStroke:!0,barStrokeWidth:2,barValueSpacing:5,barDatasetSpacing:1,legendTemplate:'<ul class="<%=name.toLowerCase()%>-legend"><% for (var i=0; i<datasets.length; i++){%><li><span style="background-color:<%=datasets[i].fillColor%>"></span><%if(datasets[i].label){%><%=datasets[i].label%><%}%></li><%}%></ul>'};e.Type.extend({name:"Bar",defaults:n,initialize:function(t){var n=this.options;this.ScaleClass=e.Scale.extend({offsetGridLines:!0,calculateBarX:function(t,e,i){var o=this.calculateBaseWidth(),s=this.calculateX(i)-o/2,a=this.calculateBarWidth(t);return s+a*e+e*n.barDatasetSpacing+a/2},calculateBaseWidth:function(){return this.calculateX(1)-this.calculateX(0)-2*n.barValueSpacing},calculateBarWidth:function(t){var e=this.calculateBaseWidth()-(t-1)*n.barDatasetSpacing;return e/t}}),this.datasets=[],this.options.showTooltips&&i.bindEvents(this,this.options.tooltipEvents,function(t){var e="mouseout"!==t.type?this.getBarsAtEvent(t):[];this.eachBars(function(t){t.restore(["fillColor","strokeColor"])}),i.each(e,function(t){t.fillColor=t.highlightFill,t.strokeColor=t.highlightStroke}),this.showTooltip(e)}),this.BarClass=e.Rectangle.extend({strokeWidth:this.options.barStrokeWidth,showStroke:this.options.barShowStroke,ctx:this.chart.ctx}),i.each(t.datasets,function(e){var n={label:e.label||null,fillColor:e.fillColor,strokeColor:e.strokeColor,bars:[]};this.datasets.push(n),i.each(e.data,function(i,o){n.bars.push(new this.BarClass({value:i,label:t.labels[o],datasetLabel:e.label,strokeColor:e.strokeColor,fillColor:e.fillColor,highlightFill:e.highlightFill||e.fillColor,highlightStroke:e.highlightStroke||e.strokeColor}))},this)},this),this.buildScale(t.labels),this.BarClass.prototype.base=this.scale.endPoint,this.eachBars(function(t,e,n){i.extend(t,{width:this.scale.calculateBarWidth(this.datasets.length),x:this.scale.calculateBarX(this.datasets.length,n,e),y:this.scale.endPoint}),t.save()},this),this.render()},update:function(){this.scale.update(),i.each(this.activeElements,function(t){t.restore(["fillColor","strokeColor"])}),this.eachBars(function(t){t.save()}),this.render()},eachBars:function(t){i.each(this.datasets,function(e,n){i.each(e.bars,t,this,n)},this)},getBarsAtEvent:function(t){for(var e,n=[],o=i.getRelativePosition(t),s=function(t){n.push(t.bars[e])},a=0;a<this.datasets.length;a++)for(e=0;e<this.datasets[a].bars.length;e++)if(this.datasets[a].bars[e].inRange(o.x,o.y))return i.each(this.datasets,s),n;return n},buildScale:function(t){var e=this,n=function(){var t=[];return e.eachBars(function(e){t.push(e.value)}),t},o={templateString:this.options.scaleLabel,height:this.chart.height,width:this.chart.width,ctx:this.chart.ctx,textColor:this.options.scaleFontColor,fontSize:this.options.scaleFontSize,fontStyle:this.options.scaleFontStyle,fontFamily:this.options.scaleFontFamily,valuesCount:t.length,beginAtZero:this.options.scaleBeginAtZero,integersOnly:this.options.scaleIntegersOnly,calculateYRange:function(t){var e=i.calculateScaleRange(n(),t,this.fontSize,this.beginAtZero,this.integersOnly);i.extend(this,e)},xLabels:t,font:i.fontString(this.options.scaleFontSize,this.options.scaleFontStyle,this.options.scaleFontFamily),lineWidth:this.options.scaleLineWidth,lineColor:this.options.scaleLineColor,showHorizontalLines:this.options.scaleShowHorizontalLines,showVerticalLines:this.options.scaleShowVerticalLines,gridLineWidth:this.options.scaleShowGridLines?this.options.scaleGridLineWidth:0,gridLineColor:this.options.scaleShowGridLines?this.options.scaleGridLineColor:"rgba(0,0,0,0)",padding:this.options.showScale?0:this.options.barShowStroke?this.options.barStrokeWidth:0,showLabels:this.options.scaleShowLabels,display:this.options.showScale};this.options.scaleOverride&&i.extend(o,{calculateYRange:i.noop,steps:this.options.scaleSteps,stepValue:this.options.scaleStepWidth,min:this.options.scaleStartValue,max:this.options.scaleStartValue+this.options.scaleSteps*this.options.scaleStepWidth}),this.scale=new this.ScaleClass(o)},addData:function(t,e){i.each(t,function(t,i){this.datasets[i].bars.push(new this.BarClass({value:t,label:e,x:this.scale.calculateBarX(this.datasets.length,i,this.scale.valuesCount+1),y:this.scale.endPoint,width:this.scale.calculateBarWidth(this.datasets.length),base:this.scale.endPoint,strokeColor:this.datasets[i].strokeColor,fillColor:this.datasets[i].fillColor}))},this),this.scale.addXLabel(e),this.update()},removeData:function(){this.scale.removeXLabel(),i.each(this.datasets,function(t){t.bars.shift()},this),this.update()},reflow:function(){i.extend(this.BarClass.prototype,{y:this.scale.endPoint,base:this.scale.endPoint});var t=i.extend({height:this.chart.height,width:this.chart.width});this.scale.update(t)},draw:function(t){var e=t||1;this.clear(),this.chart.ctx,this.scale.draw(e),i.each(this.datasets,function(t,n){i.each(t.bars,function(t,i){t.hasValue()&&(t.base=this.scale.endPoint,t.transition({x:this.scale.calculateBarX(this.datasets.length,n,i),y:this.scale.calculateY(t.value),width:this.scale.calculateBarWidth(this.datasets.length)},e).draw())},this)},this)}})}.call(this),function(){"use strict";var t=this,e=t.Chart,i=e.helpers,n={segmentShowStroke:!0,segmentStrokeColor:"#fff",segmentStrokeWidth:2,percentageInnerCutout:50,animationSteps:100,animationEasing:"easeOutBounce",animateRotate:!0,animateScale:!1,legendTemplate:'<ul class="<%=name.toLowerCase()%>-legend"><% for (var i=0; i<segments.length; i++){%><li><span style="background-color:<%=segments[i].fillColor%>"></span><%if(segments[i].label){%><%=segments[i].label%><%}%></li><%}%></ul>'};e.Type.extend({name:"Doughnut",defaults:n,initialize:function(t){this.segments=[],this.outerRadius=(i.min([this.chart.width,this.chart.height])-this.options.segmentStrokeWidth/2)/2,this.SegmentArc=e.Arc.extend({ctx:this.chart.ctx,x:this.chart.width/2,y:this.chart.height/2}),this.options.showTooltips&&i.bindEvents(this,this.options.tooltipEvents,function(t){var e="mouseout"!==t.type?this.getSegmentsAtEvent(t):[];i.each(this.segments,function(t){t.restore(["fillColor"])}),i.each(e,function(t){t.fillColor=t.highlightColor}),this.showTooltip(e)}),this.calculateTotal(t),i.each(t,function(t,e){this.addData(t,e,!0)},this),this.render()},getSegmentsAtEvent:function(t){var e=[],n=i.getRelativePosition(t);return i.each(this.segments,function(t){t.inRange(n.x,n.y)&&e.push(t)},this),e},addData:function(t,e,i){var n=e||this.segments.length;this.segments.splice(n,0,new this.SegmentArc({value:t.value,outerRadius:this.options.animateScale?0:this.outerRadius,innerRadius:this.options.animateScale?0:this.outerRadius/100*this.options.percentageInnerCutout,fillColor:t.color,highlightColor:t.highlight||t.color,showStroke:this.options.segmentShowStroke,strokeWidth:this.options.segmentStrokeWidth,strokeColor:this.options.segmentStrokeColor,startAngle:1.5*Math.PI,circumference:this.options.animateRotate?0:this.calculateCircumference(t.value),label:t.label})),i||(this.reflow(),this.update())},calculateCircumference:function(t){return 2*Math.PI*(Math.abs(t)/this.total)},calculateTotal:function(t){this.total=0,i.each(t,function(t){this.total+=Math.abs(t.value)},this)},update:function(){this.calculateTotal(this.segments),i.each(this.activeElements,function(t){t.restore(["fillColor"])}),i.each(this.segments,function(t){t.save()}),this.render()},removeData:function(t){var e=i.isNumber(t)?t:this.segments.length-1;this.segments.splice(e,1),this.reflow(),this.update()},reflow:function(){i.extend(this.SegmentArc.prototype,{x:this.chart.width/2,y:this.chart.height/2}),this.outerRadius=(i.min([this.chart.width,this.chart.height])-this.options.segmentStrokeWidth/2)/2,i.each(this.segments,function(t){t.update({outerRadius:this.outerRadius,innerRadius:this.outerRadius/100*this.options.percentageInnerCutout})},this)},draw:function(t){var e=t?t:1;this.clear(),i.each(this.segments,function(t,i){t.transition({circumference:this.calculateCircumference(t.value),outerRadius:this.outerRadius,innerRadius:this.outerRadius/100*this.options.percentageInnerCutout},e),t.endAngle=t.startAngle+t.circumference,t.draw(),0===i&&(t.startAngle=1.5*Math.PI),i<this.segments.length-1&&(this.segments[i+1].startAngle=t.endAngle)},this)}}),e.types.Doughnut.extend({name:"Pie",defaults:i.merge(n,{percentageInnerCutout:0})})}.call(this),function(){"use strict";var t=this,e=t.Chart,i=e.helpers,n={scaleShowGridLines:!0,scaleGridLineColor:"rgba(0,0,0,.05)",scaleGridLineWidth:1,scaleShowHorizontalLines:!0,scaleShowVerticalLines:!0,bezierCurve:!0,bezierCurveTension:.4,pointDot:!0,pointDotRadius:4,pointDotStrokeWidth:1,pointHitDetectionRadius:20,datasetStroke:!0,datasetStrokeWidth:2,datasetFill:!0,legendTemplate:'<ul class="<%=name.toLowerCase()%>-legend"><% for (var i=0; i<datasets.length; i++){%><li><span style="background-color:<%=datasets[i].strokeColor%>"></span><%if(datasets[i].label){%><%=datasets[i].label%><%}%></li><%}%></ul>'};e.Type.extend({name:"Line",defaults:n,initialize:function(t){this.PointClass=e.Point.extend({strokeWidth:this.options.pointDotStrokeWidth,radius:this.options.pointDotRadius,display:this.options.pointDot,hitDetectionRadius:this.options.pointHitDetectionRadius,ctx:this.chart.ctx,inRange:function(t){return Math.pow(t-this.x,2)<Math.pow(this.radius+this.hitDetectionRadius,2)}}),this.datasets=[],this.options.showTooltips&&i.bindEvents(this,this.options.tooltipEvents,function(t){var e="mouseout"!==t.type?this.getPointsAtEvent(t):[];this.eachPoints(function(t){t.restore(["fillColor","strokeColor"])}),i.each(e,function(t){t.fillColor=t.highlightFill,t.strokeColor=t.highlightStroke}),this.showTooltip(e)}),i.each(t.datasets,function(e){var n={label:e.label||null,fillColor:e.fillColor,strokeColor:e.strokeColor,pointColor:e.pointColor,pointStrokeColor:e.pointStrokeColor,points:[]};this.datasets.push(n),i.each(e.data,function(i,o){n.points.push(new this.PointClass({value:i,label:t.labels[o],datasetLabel:e.label,strokeColor:e.pointStrokeColor,fillColor:e.pointColor,highlightFill:e.pointHighlightFill||e.pointColor,highlightStroke:e.pointHighlightStroke||e.pointStrokeColor}))},this),this.buildScale(t.labels),this.eachPoints(function(t,e){i.extend(t,{x:this.scale.calculateX(e),y:this.scale.endPoint}),t.save()},this)},this),this.render()},update:function(){this.scale.update(),i.each(this.activeElements,function(t){t.restore(["fillColor","strokeColor"])}),this.eachPoints(function(t){t.save()}),this.render()},eachPoints:function(t){i.each(this.datasets,function(e){i.each(e.points,t,this)},this)},getPointsAtEvent:function(t){var e=[],n=i.getRelativePosition(t);return i.each(this.datasets,function(t){i.each(t.points,function(t){t.inRange(n.x,n.y)&&e.push(t)})},this),e},buildScale:function(t){var n=this,o=function(){var t=[];return n.eachPoints(function(e){t.push(e.value)}),t},s={templateString:this.options.scaleLabel,height:this.chart.height,width:this.chart.width,ctx:this.chart.ctx,textColor:this.options.scaleFontColor,fontSize:this.options.scaleFontSize,fontStyle:this.options.scaleFontStyle,fontFamily:this.options.scaleFontFamily,valuesCount:t.length,beginAtZero:this.options.scaleBeginAtZero,integersOnly:this.options.scaleIntegersOnly,calculateYRange:function(t){var e=i.calculateScaleRange(o(),t,this.fontSize,this.beginAtZero,this.integersOnly);i.extend(this,e)},xLabels:t,font:i.fontString(this.options.scaleFontSize,this.options.scaleFontStyle,this.options.scaleFontFamily),lineWidth:this.options.scaleLineWidth,lineColor:this.options.scaleLineColor,showHorizontalLines:this.options.scaleShowHorizontalLines,showVerticalLines:this.options.scaleShowVerticalLines,gridLineWidth:this.options.scaleShowGridLines?this.options.scaleGridLineWidth:0,gridLineColor:this.options.scaleShowGridLines?this.options.scaleGridLineColor:"rgba(0,0,0,0)",padding:this.options.showScale?0:this.options.pointDotRadius+this.options.pointDotStrokeWidth,showLabels:this.options.scaleShowLabels,display:this.options.showScale};this.options.scaleOverride&&i.extend(s,{calculateYRange:i.noop,steps:this.options.scaleSteps,stepValue:this.options.scaleStepWidth,min:this.options.scaleStartValue,max:this.options.scaleStartValue+this.options.scaleSteps*this.options.scaleStepWidth}),this.scale=new e.Scale(s)},addData:function(t,e){i.each(t,function(t,i){this.datasets[i].points.push(new this.PointClass({value:t,label:e,x:this.scale.calculateX(this.scale.valuesCount+1),y:this.scale.endPoint,strokeColor:this.datasets[i].pointStrokeColor,fillColor:this.datasets[i].pointColor}))},this),this.scale.addXLabel(e),this.update()},removeData:function(){this.scale.removeXLabel(),i.each(this.datasets,function(t){t.points.shift()},this),this.update()},reflow:function(){var t=i.extend({height:this.chart.height,width:this.chart.width});this.scale.update(t)},draw:function(t){var e=t||1;this.clear();var n=this.chart.ctx,o=function(t){return null!==t.value},s=function(t,e,n){return i.findNextWhere(e,o,n)||t},a=function(t,e,n){return i.findPreviousWhere(e,o,n)||t};this.scale.draw(e),i.each(this.datasets,function(t){var r=i.where(t.points,o);i.each(t.points,function(t,i){t.hasValue()&&t.transition({y:this.scale.calculateY(t.value),x:this.scale.calculateX(i)},e)},this),this.options.bezierCurve&&i.each(r,function(t,e){var n=e>0&&e<r.length-1?this.options.bezierCurveTension:0;t.controlPoints=i.splineCurve(a(t,r,e),t,s(t,r,e),n),t.controlPoints.outer.y>this.scale.endPoint?t.controlPoints.outer.y=this.scale.endPoint:t.controlPoints.outer.y<this.scale.startPoint&&(t.controlPoints.outer.y=this.scale.startPoint),t.controlPoints.inner.y>this.scale.endPoint?t.controlPoints.inner.y=this.scale.endPoint:t.controlPoints.inner.y<this.scale.startPoint&&(t.controlPoints.inner.y=this.scale.startPoint)},this),n.lineWidth=this.options.datasetStrokeWidth,n.strokeStyle=t.strokeColor,n.beginPath(),i.each(r,function(t,e){if(0===e)n.moveTo(t.x,t.y);else if(this.options.bezierCurve){var i=a(t,r,e);n.bezierCurveTo(i.controlPoints.outer.x,i.controlPoints.outer.y,t.controlPoints.inner.x,t.controlPoints.inner.y,t.x,t.y)}else n.lineTo(t.x,t.y)},this),n.stroke(),this.options.datasetFill&&r.length>0&&(n.lineTo(r[r.length-1].x,this.scale.endPoint),n.lineTo(r[0].x,this.scale.endPoint),n.fillStyle=t.fillColor,n.closePath(),n.fill()),i.each(r,function(t){t.draw()})},this)}})}.call(this),function(){"use strict";var t=this,e=t.Chart,i=e.helpers,n={scaleShowLabelBackdrop:!0,scaleBackdropColor:"rgba(255,255,255,0.75)",scaleBeginAtZero:!0,scaleBackdropPaddingY:2,scaleBackdropPaddingX:2,scaleShowLine:!0,segmentShowStroke:!0,segmentStrokeColor:"#fff",segmentStrokeWidth:2,animationSteps:100,animationEasing:"easeOutBounce",animateRotate:!0,animateScale:!1,legendTemplate:'<ul class="<%=name.toLowerCase()%>-legend"><% for (var i=0; i<segments.length; i++){%><li><span style="background-color:<%=segments[i].fillColor%>"></span><%if(segments[i].label){%><%=segments[i].label%><%}%></li><%}%></ul>'};e.Type.extend({name:"PolarArea",defaults:n,initialize:function(t){this.segments=[],this.SegmentArc=e.Arc.extend({showStroke:this.options.segmentShowStroke,strokeWidth:this.options.segmentStrokeWidth,strokeColor:this.options.segmentStrokeColor,ctx:this.chart.ctx,innerRadius:0,x:this.chart.width/2,y:this.chart.height/2}),this.scale=new e.RadialScale({display:this.options.showScale,fontStyle:this.options.scaleFontStyle,fontSize:this.options.scaleFontSize,fontFamily:this.options.scaleFontFamily,fontColor:this.options.scaleFontColor,showLabels:this.options.scaleShowLabels,showLabelBackdrop:this.options.scaleShowLabelBackdrop,backdropColor:this.options.scaleBackdropColor,backdropPaddingY:this.options.scaleBackdropPaddingY,backdropPaddingX:this.options.scaleBackdropPaddingX,lineWidth:this.options.scaleShowLine?this.options.scaleLineWidth:0,lineColor:this.options.scaleLineColor,lineArc:!0,width:this.chart.width,height:this.chart.height,xCenter:this.chart.width/2,yCenter:this.chart.height/2,ctx:this.chart.ctx,templateString:this.options.scaleLabel,valuesCount:t.length}),this.updateScaleRange(t),this.scale.update(),i.each(t,function(t,e){this.addData(t,e,!0)},this),this.options.showTooltips&&i.bindEvents(this,this.options.tooltipEvents,function(t){var e="mouseout"!==t.type?this.getSegmentsAtEvent(t):[];i.each(this.segments,function(t){t.restore(["fillColor"])}),i.each(e,function(t){t.fillColor=t.highlightColor}),this.showTooltip(e)}),this.render()},getSegmentsAtEvent:function(t){var e=[],n=i.getRelativePosition(t);return i.each(this.segments,function(t){t.inRange(n.x,n.y)&&e.push(t)},this),e},addData:function(t,e,i){var n=e||this.segments.length;this.segments.splice(n,0,new this.SegmentArc({fillColor:t.color,highlightColor:t.highlight||t.color,label:t.label,value:t.value,outerRadius:this.options.animateScale?0:this.scale.calculateCenterOffset(t.value),circumference:this.options.animateRotate?0:this.scale.getCircumference(),startAngle:1.5*Math.PI})),i||(this.reflow(),this.update())},removeData:function(t){var e=i.isNumber(t)?t:this.segments.length-1;this.segments.splice(e,1),this.reflow(),this.update()},calculateTotal:function(t){this.total=0,i.each(t,function(t){this.total+=t.value},this),this.scale.valuesCount=this.segments.length},updateScaleRange:function(t){var e=[];i.each(t,function(t){e.push(t.value)});var n=this.options.scaleOverride?{steps:this.options.scaleSteps,stepValue:this.options.scaleStepWidth,min:this.options.scaleStartValue,max:this.options.scaleStartValue+this.options.scaleSteps*this.options.scaleStepWidth}:i.calculateScaleRange(e,i.min([this.chart.width,this.chart.height])/2,this.options.scaleFontSize,this.options.scaleBeginAtZero,this.options.scaleIntegersOnly);i.extend(this.scale,n,{size:i.min([this.chart.width,this.chart.height]),xCenter:this.chart.width/2,yCenter:this.chart.height/2})},update:function(){this.calculateTotal(this.segments),i.each(this.segments,function(t){t.save()}),this.reflow(),this.render()},reflow:function(){i.extend(this.SegmentArc.prototype,{x:this.chart.width/2,y:this.chart.height/2}),this.updateScaleRange(this.segments),this.scale.update(),i.extend(this.scale,{xCenter:this.chart.width/2,yCenter:this.chart.height/2}),i.each(this.segments,function(t){t.update({outerRadius:this.scale.calculateCenterOffset(t.value)})},this)},draw:function(t){var e=t||1;this.clear(),i.each(this.segments,function(t,i){t.transition({circumference:this.scale.getCircumference(),outerRadius:this.scale.calculateCenterOffset(t.value)},e),t.endAngle=t.startAngle+t.circumference,0===i&&(t.startAngle=1.5*Math.PI),i<this.segments.length-1&&(this.segments[i+1].startAngle=t.endAngle),t.draw()},this),this.scale.draw()}})}.call(this),function(){"use strict";var t=this,e=t.Chart,i=e.helpers;e.Type.extend({name:"Radar",defaults:{scaleShowLine:!0,angleShowLineOut:!0,scaleShowLabels:!1,scaleBeginAtZero:!0,angleLineColor:"rgba(0,0,0,.1)",angleLineWidth:1,pointLabelFontFamily:"'Arial'",pointLabelFontStyle:"normal",pointLabelFontSize:10,pointLabelFontColor:"#666",pointDot:!0,pointDotRadius:3,pointDotStrokeWidth:1,pointHitDetectionRadius:20,datasetStroke:!0,datasetStrokeWidth:2,datasetFill:!0,legendTemplate:'<ul class="<%=name.toLowerCase()%>-legend"><% for (var i=0; i<datasets.length; i++){%><li><span style="background-color:<%=datasets[i].strokeColor%>"></span><%if(datasets[i].label){%><%=datasets[i].label%><%}%></li><%}%></ul>'},initialize:function(t){this.PointClass=e.Point.extend({strokeWidth:this.options.pointDotStrokeWidth,radius:this.options.pointDotRadius,display:this.options.pointDot,hitDetectionRadius:this.options.pointHitDetectionRadius,ctx:this.chart.ctx}),this.datasets=[],this.buildScale(t),this.options.showTooltips&&i.bindEvents(this,this.options.tooltipEvents,function(t){var e="mouseout"!==t.type?this.getPointsAtEvent(t):[];this.eachPoints(function(t){t.restore(["fillColor","strokeColor"])}),i.each(e,function(t){t.fillColor=t.highlightFill,t.strokeColor=t.highlightStroke}),this.showTooltip(e)}),i.each(t.datasets,function(e){var n={label:e.label||null,fillColor:e.fillColor,strokeColor:e.strokeColor,pointColor:e.pointColor,pointStrokeColor:e.pointStrokeColor,points:[]};this.datasets.push(n),i.each(e.data,function(i,o){var s;this.scale.animation||(s=this.scale.getPointPosition(o,this.scale.calculateCenterOffset(i))),n.points.push(new this.PointClass({value:i,label:t.labels[o],datasetLabel:e.label,x:this.options.animation?this.scale.xCenter:s.x,y:this.options.animation?this.scale.yCenter:s.y,strokeColor:e.pointStrokeColor,fillColor:e.pointColor,highlightFill:e.pointHighlightFill||e.pointColor,highlightStroke:e.pointHighlightStroke||e.pointStrokeColor}))},this)},this),this.render()},eachPoints:function(t){i.each(this.datasets,function(e){i.each(e.points,t,this)},this)},getPointsAtEvent:function(t){var e=i.getRelativePosition(t),n=i.getAngleFromPoint({x:this.scale.xCenter,y:this.scale.yCenter},e),o=2*Math.PI/this.scale.valuesCount,s=Math.round((n.angle-1.5*Math.PI)/o),a=[];return(s>=this.scale.valuesCount||0>s)&&(s=0),n.distance<=this.scale.drawingArea&&i.each(this.datasets,function(t){a.push(t.points[s])}),a},buildScale:function(t){this.scale=new e.RadialScale({display:this.options.showScale,fontStyle:this.options.scaleFontStyle,fontSize:this.options.scaleFontSize,fontFamily:this.options.scaleFontFamily,fontColor:this.options.scaleFontColor,showLabels:this.options.scaleShowLabels,showLabelBackdrop:this.options.scaleShowLabelBackdrop,backdropColor:this.options.scaleBackdropColor,backdropPaddingY:this.options.scaleBackdropPaddingY,backdropPaddingX:this.options.scaleBackdropPaddingX,lineWidth:this.options.scaleShowLine?this.options.scaleLineWidth:0,lineColor:this.options.scaleLineColor,angleLineColor:this.options.angleLineColor,angleLineWidth:this.options.angleShowLineOut?this.options.angleLineWidth:0,pointLabelFontColor:this.options.pointLabelFontColor,pointLabelFontSize:this.options.pointLabelFontSize,pointLabelFontFamily:this.options.pointLabelFontFamily,pointLabelFontStyle:this.options.pointLabelFontStyle,height:this.chart.height,width:this.chart.width,xCenter:this.chart.width/2,yCenter:this.chart.height/2,ctx:this.chart.ctx,templateString:this.options.scaleLabel,labels:t.labels,valuesCount:t.datasets[0].data.length}),this.scale.setScaleSize(),this.updateScaleRange(t.datasets),this.scale.buildYLabels()},updateScaleRange:function(t){var e=function(){var e=[];return i.each(t,function(t){t.data?e=e.concat(t.data):i.each(t.points,function(t){e.push(t.value)})}),e}(),n=this.options.scaleOverride?{steps:this.options.scaleSteps,stepValue:this.options.scaleStepWidth,min:this.options.scaleStartValue,max:this.options.scaleStartValue+this.options.scaleSteps*this.options.scaleStepWidth}:i.calculateScaleRange(e,i.min([this.chart.width,this.chart.height])/2,this.options.scaleFontSize,this.options.scaleBeginAtZero,this.options.scaleIntegersOnly);i.extend(this.scale,n)},addData:function(t,e){this.scale.valuesCount++,i.each(t,function(t,i){var n=this.scale.getPointPosition(this.scale.valuesCount,this.scale.calculateCenterOffset(t));this.datasets[i].points.push(new this.PointClass({value:t,label:e,x:n.x,y:n.y,strokeColor:this.datasets[i].pointStrokeColor,fillColor:this.datasets[i].pointColor}))},this),this.scale.labels.push(e),this.reflow(),this.update()},removeData:function(){this.scale.valuesCount--,this.scale.labels.shift(),i.each(this.datasets,function(t){t.points.shift()},this),this.reflow(),this.update()},update:function(){this.eachPoints(function(t){t.save()}),this.reflow(),this.render()},reflow:function(){i.extend(this.scale,{width:this.chart.width,height:this.chart.height,size:i.min([this.chart.width,this.chart.height]),xCenter:this.chart.width/2,yCenter:this.chart.height/2}),this.updateScaleRange(this.datasets),this.scale.setScaleSize(),this.scale.buildYLabels()},draw:function(t){var e=t||1,n=this.chart.ctx;this.clear(),this.scale.draw(),i.each(this.datasets,function(t){i.each(t.points,function(t,i){t.hasValue()&&t.transition(this.scale.getPointPosition(i,this.scale.calculateCenterOffset(t.value)),e)},this),n.lineWidth=this.options.datasetStrokeWidth,n.strokeStyle=t.strokeColor,n.beginPath(),i.each(t.points,function(t,e){0===e?n.moveTo(t.x,t.y):n.lineTo(t.x,t.y)},this),n.closePath(),n.stroke(),n.fillStyle=t.fillColor,n.fill(),i.each(t.points,function(t){t.hasValue()&&t.draw()})},this)}})}.call(this),$(document).ready(function(){tag(),star(),teamToggle(),checkAll(),countCart(),photo(),cartChartTrigger(),mobileTbl(),chart()});var mobileTbl=function(){var t=$("table");t.wrap('<div class="tbl-wrap"></div>')},tag=function(){var t=$(".js-tag");t.on("click",function(){var t=$(this);t.toggleClass("active")})},star=function(){var t=$(".star"),e=$(".js-star-toggle");t.on("click",function(){var t=$(this);t.toggleClass("star_active")}),e.on("click",function(){var e=$(this),i=$(this).text();"Добавить в избранное"==i?e.text("Убрать из избранного"):e.text("Добавить в избранное"),e.prev(t).toggleClass("star_active")})},teamToggle=function(){var t=$(".js-team"),e=$(".js-team-txt"),i=[];e.each(function(){var t=$(this),e=t.outerHeight();i.push(e),t.hide().css({left:0,visibility:"visible"})}),t.each(function(){var n=$(this),o=n.find(e),s=n.index();n.on("click",function(){e.hide(),t.css({"padding-bottom":0}),o.slideDown("400"),n.css({"padding-bottom":i[s]})})})},checkAll=function(){var t=$(".cart-tbl"),e=t.find('input[type="checkbox"]'),i=$("#cart-check-all");i.on("change",function(){e.prop("checked",i.prop("checked"))}),t.find("label.check").click(function(t){t.stopPropagation()})},cartChartTrigger=function(){$("#cart-chart-trigger").on("click",function(){$("#js-cart-chart").toggleClass("on"),$(".cart-chart__link").toggleClass("uk-hidden")})},chart=function(){$(".js-cart-chart-toggle").slideUp(function(){$(this).addClass("uk-hidden")});var t={labels:["Eating","Drinking","Sleeping","Designing","Coding","Cycling","Running"],datasets:[{label:"My First dataset",fillColor:"rgba(220,220,220,0.2)",strokeColor:"rgba(220,220,220,1)",pointColor:"rgba(220,220,220,1)",pointStrokeColor:"#fff",pointHighlightFill:"#fff",pointHighlightStroke:"rgba(220,220,220,1)",data:[65,59,90,81,56,55,40]},{label:"My Second dataset",fillColor:"rgba(151,187,205,0.2)",strokeColor:"rgba(151,187,205,1)",pointColor:"rgba(151,187,205,1)",pointStrokeColor:"#fff",pointHighlightFill:"#fff",pointHighlightStroke:"rgba(151,187,205,1)",data:[28,48,40,19,96,27,100]}]},e=document.getElementById("myChart").getContext("2d");new Chart(e).Radar(t,{scaleShowLine:!0,angleShowLineOut:!0,scaleShowLabels:!1,scaleBeginAtZero:!0,angleLineColor:"rgba(0,0,0,.1)",angleLineWidth:1,pointLabelFontFamily:"'Arial'",pointLabelFontStyle:"normal",pointLabelFontSize:10,pointLabelFontColor:"#666",pointDot:!0,pointDotRadius:3,pointDotStrokeWidth:1,pointHitDetectionRadius:20,datasetStroke:!0,datasetStrokeWidth:2,datasetFill:!0,legendTemplate:'<ul class="<%=name.toLowerCase()%>-legend"><% for (var i=0; i<datasets.length; i++){%><li><span style="background-color:<%=datasets[i].strokeColor%>"></span><%if(datasets[i].label){%><%=datasets[i].label%><%}%></li><%}%></ul>'})},countCart=function(){function t(t){return null==t.which?t.keyCode<32?null:String.fromCharCode(t.keyCode):0!=t.which&&0!=t.charCode?t.which<32?null:String.fromCharCode(t.which):null}var e=$(".js-count"),i=(e.find(".count__dec"),e.find(".count__inc"),e.find("input"));i.val("1"),i.on("keypress",function(e){if(e=e||event,!(e.ctrlKey||e.altKey||e.metaKey)){var i=t(e);if(null!=i)return"0">i||i>"9"?!1:void 0}}),e.on("click",function(t){t=t||event;var e=$(t.target),i=$(this),n=i.find("input"),o=parseInt(i.find("input").val());if(e.hasClass("count__dec")){if(0>=o)return!1;o--}e.hasClass("count__inc")&&o++,n.val(o)})},photo=function(){var t=$("#js-photo"),e=t.find(".catalog-item-photo__big a"),i=t.find(".catalog-item-photo__big img"),n=t.find(".catalog-item-photo__mini");n.on("click",function(t){var n=$(this),o=n.index(),s=n.find("img").data("href");return e.removeClass("active"),e.eq(o).addClass("active"),i.prop("src",s),!1})};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1haW4uanMiXSwibmFtZXMiOlsid2luZG93IiwiTW9kZXJuaXpyIiwiZG9jdW1lbnQiLCJ1bmRlZmluZWQiLCJzZXRDc3MiLCJzdHIiLCJtU3R5bGUiLCJjc3NUZXh0Iiwic2V0Q3NzQWxsIiwic3RyMSIsInN0cjIiLCJwcmVmaXhlcyIsImpvaW4iLCJpcyIsIm9iaiIsInR5cGUiLCJjb250YWlucyIsInN1YnN0ciIsImluZGV4T2YiLCJ0ZXN0UHJvcHMiLCJwcm9wcyIsInByZWZpeGVkIiwiaSIsInByb3AiLCJ0ZXN0RE9NUHJvcHMiLCJlbGVtIiwiaXRlbSIsImJpbmQiLCJ0ZXN0UHJvcHNBbGwiLCJ1Y1Byb3AiLCJjaGFyQXQiLCJ0b1VwcGVyQ2FzZSIsInNsaWNlIiwiY3Nzb21QcmVmaXhlcyIsInNwbGl0Iiwid2ViZm9ybXMiLCJsZW4iLCJsZW5ndGgiLCJhdHRycyIsImlucHV0RWxlbSIsImxpc3QiLCJjcmVhdGVFbGVtZW50IiwiSFRNTERhdGFMaXN0RWxlbWVudCIsImJvb2wiLCJpbnB1dEVsZW1UeXBlIiwiZGVmYXVsdFZpZXciLCJzZXRBdHRyaWJ1dGUiLCJ2YWx1ZSIsInNtaWxlIiwic3R5bGUiLCJ0ZXN0IiwiV2Via2l0QXBwZWFyYW5jZSIsImRvY0VsZW1lbnQiLCJhcHBlbmRDaGlsZCIsImdldENvbXB1dGVkU3R5bGUiLCJvZmZzZXRIZWlnaHQiLCJyZW1vdmVDaGlsZCIsImNoZWNrVmFsaWRpdHkiLCJpbnB1dHMiLCJmZWF0dXJlTmFtZSIsImhhc093blByb3AiLCJ2ZXJzaW9uIiwiZW5hYmxlQ2xhc3NlcyIsImRvY3VtZW50RWxlbWVudCIsIm1vZCIsIm1vZEVsZW0iLCJ0b1N0cmluZyIsIm9tUHJlZml4ZXMiLCJkb21QcmVmaXhlcyIsInRvTG93ZXJDYXNlIiwibnMiLCJzdmciLCJ0ZXN0cyIsImNsYXNzZXMiLCJpbmplY3RFbGVtZW50V2l0aFN0eWxlcyIsInJ1bGUiLCJjYWxsYmFjayIsIm5vZGVzIiwidGVzdG5hbWVzIiwicmV0Iiwibm9kZSIsImRvY092ZXJmbG93IiwiZGl2IiwiYm9keSIsImZha2VCb2R5IiwicGFyc2VJbnQiLCJpZCIsImlubmVySFRNTCIsImJhY2tncm91bmQiLCJvdmVyZmxvdyIsInBhcmVudE5vZGUiLCJ0ZXN0TWVkaWFRdWVyeSIsIm1xIiwibWF0Y2hNZWRpYSIsIm1zTWF0Y2hNZWRpYSIsIm1hdGNoZXMiLCJjdXJyZW50U3R5bGUiLCJpc0V2ZW50U3VwcG9ydGVkIiwiZXZlbnROYW1lIiwiZWxlbWVudCIsIlRBR05BTUVTIiwiaXNTdXBwb3J0ZWQiLCJyZW1vdmVBdHRyaWJ1dGUiLCJzZWxlY3QiLCJjaGFuZ2UiLCJzdWJtaXQiLCJyZXNldCIsImVycm9yIiwibG9hZCIsImFib3J0IiwiX2hhc093blByb3BlcnR5IiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwib2JqZWN0IiwicHJvcGVydHkiLCJjb25zdHJ1Y3RvciIsInByb3RvdHlwZSIsIkZ1bmN0aW9uIiwidGhhdCIsInRhcmdldCIsInRoaXMiLCJUeXBlRXJyb3IiLCJhcmdzIiwiYXJndW1lbnRzIiwiYm91bmQiLCJGIiwic2VsZiIsInJlc3VsdCIsImFwcGx5IiwiY29uY2F0IiwiT2JqZWN0IiwiZ2V0Q29udGV4dCIsImZpbGxUZXh0IiwiV2ViR0xSZW5kZXJpbmdDb250ZXh0IiwiRG9jdW1lbnRUb3VjaCIsIm9mZnNldFRvcCIsIm5hdmlnYXRvciIsInBvc3RNZXNzYWdlIiwib3BlbkRhdGFiYXNlIiwiZG9jdW1lbnRNb2RlIiwiaGlzdG9yeSIsInB1c2hTdGF0ZSIsImJhY2tncm91bmRDb2xvciIsInRleHRTaGFkb3ciLCJvcGFjaXR5Iiwic3RyMyIsImJhY2tncm91bmRJbWFnZSIsIm9mZnNldExlZnQiLCJnZXRFbGVtZW50QnlJZCIsInNoZWV0Iiwic3R5bGVTaGVldCIsImNzc1J1bGVzIiwiY2FuUGxheVR5cGUiLCJCb29sZWFuIiwib2dnIiwicmVwbGFjZSIsImgyNjQiLCJ3ZWJtIiwiZSIsIm1wMyIsIndhdiIsIm00YSIsImxvY2FsU3RvcmFnZSIsInNldEl0ZW0iLCJyZW1vdmVJdGVtIiwic2Vzc2lvblN0b3JhZ2UiLCJXb3JrZXIiLCJhcHBsaWNhdGlvbkNhY2hlIiwiY3JlYXRlRWxlbWVudE5TIiwiY3JlYXRlU1ZHUmVjdCIsImZpcnN0Q2hpbGQiLCJuYW1lc3BhY2VVUkkiLCJmZWF0dXJlIiwicHVzaCIsImlucHV0IiwiYWRkVGVzdCIsImtleSIsImNsYXNzTmFtZSIsImFkZFN0eWxlU2hlZXQiLCJvd25lckRvY3VtZW50IiwicCIsInBhcmVudCIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwiaW5zZXJ0QmVmb3JlIiwibGFzdENoaWxkIiwiZ2V0RWxlbWVudHMiLCJlbGVtZW50cyIsImh0bWw1IiwiZ2V0RXhwYW5kb0RhdGEiLCJkYXRhIiwiZXhwYW5kb0RhdGEiLCJleHBhbmRvIiwiZXhwYW5JRCIsIm5vZGVOYW1lIiwic3VwcG9ydHNVbmtub3duRWxlbWVudHMiLCJjYWNoZSIsImNsb25lTm9kZSIsInNhdmVDbG9uZXMiLCJjcmVhdGVFbGVtIiwiY2FuSGF2ZUNoaWxkcmVuIiwicmVTa2lwIiwidGFnVXJuIiwiZnJhZyIsImNyZWF0ZURvY3VtZW50RnJhZ21lbnQiLCJjbG9uZSIsImVsZW1zIiwibCIsInNoaXZNZXRob2RzIiwiY3JlYXRlRnJhZyIsInNoaXZEb2N1bWVudCIsInNoaXZDU1MiLCJzdXBwb3J0c0h0bWw1U3R5bGVzIiwiaGFzQ1NTIiwib3B0aW9ucyIsImEiLCJjaGlsZE5vZGVzIiwiX3ZlcnNpb24iLCJfcHJlZml4ZXMiLCJfZG9tUHJlZml4ZXMiLCJfY3Nzb21QcmVmaXhlcyIsImhhc0V2ZW50IiwidGVzdFByb3AiLCJ0ZXN0QWxsUHJvcHMiLCJ0ZXN0U3R5bGVzIiwiZ2xvYmFsIiwiZmFjdG9yeSIsIm1vZHVsZSIsImV4cG9ydHMiLCJ3IiwiRXJyb3IiLCJub0dsb2JhbCIsImlzQXJyYXlsaWtlIiwialF1ZXJ5IiwiaXNXaW5kb3ciLCJub2RlVHlwZSIsIndpbm5vdyIsInF1YWxpZmllciIsIm5vdCIsImlzRnVuY3Rpb24iLCJncmVwIiwicmlzU2ltcGxlIiwiZmlsdGVyIiwic2libGluZyIsImN1ciIsImRpciIsImNyZWF0ZU9wdGlvbnMiLCJvcHRpb25zQ2FjaGUiLCJlYWNoIiwibWF0Y2giLCJybm90d2hpdGUiLCJfIiwiZmxhZyIsImNvbXBsZXRlZCIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJyZWFkeSIsIkRhdGEiLCJkZWZpbmVQcm9wZXJ0eSIsImdldCIsInVpZCIsImRhdGFBdHRyIiwibmFtZSIsInJtdWx0aURhc2giLCJnZXRBdHRyaWJ1dGUiLCJyYnJhY2UiLCJwYXJzZUpTT04iLCJkYXRhX3VzZXIiLCJzZXQiLCJyZXR1cm5UcnVlIiwicmV0dXJuRmFsc2UiLCJzYWZlQWN0aXZlRWxlbWVudCIsImFjdGl2ZUVsZW1lbnQiLCJlcnIiLCJtYW5pcHVsYXRpb25UYXJnZXQiLCJjb250ZW50IiwiZGlzYWJsZVNjcmlwdCIsInJlc3RvcmVTY3JpcHQiLCJyc2NyaXB0VHlwZU1hc2tlZCIsImV4ZWMiLCJzZXRHbG9iYWxFdmFsIiwicmVmRWxlbWVudHMiLCJkYXRhX3ByaXYiLCJjbG9uZUNvcHlFdmVudCIsInNyYyIsImRlc3QiLCJwZGF0YU9sZCIsInBkYXRhQ3VyIiwidWRhdGFPbGQiLCJ1ZGF0YUN1ciIsImV2ZW50cyIsImhhc0RhdGEiLCJhY2Nlc3MiLCJoYW5kbGUiLCJldmVudCIsImFkZCIsImV4dGVuZCIsImdldEFsbCIsImNvbnRleHQiLCJ0YWciLCJxdWVyeVNlbGVjdG9yQWxsIiwibWVyZ2UiLCJmaXhJbnB1dCIsInJjaGVja2FibGVUeXBlIiwiY2hlY2tlZCIsImRlZmF1bHRWYWx1ZSIsImFjdHVhbERpc3BsYXkiLCJkb2MiLCJhcHBlbmRUbyIsImRpc3BsYXkiLCJnZXREZWZhdWx0Q29tcHV0ZWRTdHlsZSIsImNzcyIsImRldGFjaCIsImRlZmF1bHREaXNwbGF5IiwiZWxlbWRpc3BsYXkiLCJpZnJhbWUiLCJjb250ZW50RG9jdW1lbnQiLCJ3cml0ZSIsImNsb3NlIiwiY3VyQ1NTIiwiY29tcHV0ZWQiLCJ3aWR0aCIsIm1pbldpZHRoIiwibWF4V2lkdGgiLCJnZXRTdHlsZXMiLCJnZXRQcm9wZXJ0eVZhbHVlIiwicm51bW5vbnB4Iiwicm1hcmdpbiIsImFkZEdldEhvb2tJZiIsImNvbmRpdGlvbkZuIiwiaG9va0ZuIiwidmVuZG9yUHJvcE5hbWUiLCJjYXBOYW1lIiwib3JpZ05hbWUiLCJjc3NQcmVmaXhlcyIsInNldFBvc2l0aXZlTnVtYmVyIiwic3VidHJhY3QiLCJybnVtc3BsaXQiLCJNYXRoIiwibWF4IiwiYXVnbWVudFdpZHRoT3JIZWlnaHQiLCJleHRyYSIsImlzQm9yZGVyQm94Iiwic3R5bGVzIiwidmFsIiwiY3NzRXhwYW5kIiwiZ2V0V2lkdGhPckhlaWdodCIsInZhbHVlSXNCb3JkZXJCb3giLCJvZmZzZXRXaWR0aCIsInN1cHBvcnQiLCJib3hTaXppbmdSZWxpYWJsZSIsInBhcnNlRmxvYXQiLCJzaG93SGlkZSIsInNob3ciLCJoaWRkZW4iLCJ2YWx1ZXMiLCJpbmRleCIsImlzSGlkZGVuIiwiVHdlZW4iLCJlbmQiLCJlYXNpbmciLCJpbml0IiwiY3JlYXRlRnhOb3ciLCJzZXRUaW1lb3V0IiwiZnhOb3ciLCJub3ciLCJnZW5GeCIsImluY2x1ZGVXaWR0aCIsIndoaWNoIiwiaGVpZ2h0IiwiY3JlYXRlVHdlZW4iLCJhbmltYXRpb24iLCJ0d2VlbiIsImNvbGxlY3Rpb24iLCJ0d2VlbmVycyIsImRlZmF1bHRQcmVmaWx0ZXIiLCJvcHRzIiwidG9nZ2xlIiwiaG9va3MiLCJvbGRmaXJlIiwiY2hlY2tEaXNwbGF5IiwiYW5pbSIsIm9yaWciLCJkYXRhU2hvdyIsInF1ZXVlIiwiX3F1ZXVlSG9va3MiLCJ1bnF1ZXVlZCIsImVtcHR5IiwiZmlyZSIsImFsd2F5cyIsIm92ZXJmbG93WCIsIm92ZXJmbG93WSIsInJmeHR5cGVzIiwiaXNFbXB0eU9iamVjdCIsImRvbmUiLCJoaWRlIiwicmVtb3ZlIiwic3RhcnQiLCJwcm9wRmlsdGVyIiwic3BlY2lhbEVhc2luZyIsImNhbWVsQ2FzZSIsImlzQXJyYXkiLCJjc3NIb29rcyIsImV4cGFuZCIsIkFuaW1hdGlvbiIsInByb3BlcnRpZXMiLCJzdG9wcGVkIiwiYW5pbWF0aW9uUHJlZmlsdGVycyIsImRlZmVycmVkIiwiRGVmZXJyZWQiLCJ0aWNrIiwiY3VycmVudFRpbWUiLCJyZW1haW5pbmciLCJzdGFydFRpbWUiLCJkdXJhdGlvbiIsInRlbXAiLCJwZXJjZW50IiwidHdlZW5zIiwicnVuIiwibm90aWZ5V2l0aCIsInJlc29sdmVXaXRoIiwicHJvbWlzZSIsIm9yaWdpbmFsUHJvcGVydGllcyIsIm9yaWdpbmFsT3B0aW9ucyIsInN0b3AiLCJnb3RvRW5kIiwicmVqZWN0V2l0aCIsIm1hcCIsImZ4IiwidGltZXIiLCJwcm9ncmVzcyIsImNvbXBsZXRlIiwiZmFpbCIsImFkZFRvUHJlZmlsdGVyc09yVHJhbnNwb3J0cyIsInN0cnVjdHVyZSIsImRhdGFUeXBlRXhwcmVzc2lvbiIsImZ1bmMiLCJkYXRhVHlwZSIsImRhdGFUeXBlcyIsInVuc2hpZnQiLCJpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyIsImpxWEhSIiwiaW5zcGVjdCIsInNlbGVjdGVkIiwiaW5zcGVjdGVkIiwicHJlZmlsdGVyT3JGYWN0b3J5IiwiZGF0YVR5cGVPclRyYW5zcG9ydCIsInNlZWtpbmdUcmFuc3BvcnQiLCJ0cmFuc3BvcnRzIiwiYWpheEV4dGVuZCIsImRlZXAiLCJmbGF0T3B0aW9ucyIsImFqYXhTZXR0aW5ncyIsImFqYXhIYW5kbGVSZXNwb25zZXMiLCJzIiwicmVzcG9uc2VzIiwiY3QiLCJmaW5hbERhdGFUeXBlIiwiZmlyc3REYXRhVHlwZSIsImNvbnRlbnRzIiwic2hpZnQiLCJtaW1lVHlwZSIsImdldFJlc3BvbnNlSGVhZGVyIiwiY29udmVydGVycyIsImFqYXhDb252ZXJ0IiwicmVzcG9uc2UiLCJpc1N1Y2Nlc3MiLCJjb252MiIsImN1cnJlbnQiLCJjb252IiwidG1wIiwicHJldiIsInJlc3BvbnNlRmllbGRzIiwiZGF0YUZpbHRlciIsInN0YXRlIiwiYnVpbGRQYXJhbXMiLCJwcmVmaXgiLCJ0cmFkaXRpb25hbCIsInYiLCJyYnJhY2tldCIsImdldFdpbmRvdyIsImFyciIsImNsYXNzMnR5cGUiLCJoYXNPd24iLCJzZWxlY3RvciIsImZuIiwicnRyaW0iLCJybXNQcmVmaXgiLCJyZGFzaEFscGhhIiwiZmNhbWVsQ2FzZSIsImFsbCIsImxldHRlciIsImpxdWVyeSIsInRvQXJyYXkiLCJudW0iLCJwdXNoU3RhY2siLCJwcmV2T2JqZWN0IiwiZmlyc3QiLCJlcSIsImxhc3QiLCJqIiwic29ydCIsInNwbGljZSIsImNvcHkiLCJjb3B5SXNBcnJheSIsImlzUGxhaW5PYmplY3QiLCJyYW5kb20iLCJpc1JlYWR5IiwibXNnIiwibm9vcCIsIkFycmF5IiwiaXNOdW1lcmljIiwiZ2xvYmFsRXZhbCIsImNvZGUiLCJzY3JpcHQiLCJpbmRpcmVjdCIsImV2YWwiLCJ0cmltIiwidGV4dCIsImhlYWQiLCJzdHJpbmciLCJtYWtlQXJyYXkiLCJyZXN1bHRzIiwiaW5BcnJheSIsInNlY29uZCIsImludmVydCIsImNhbGxiYWNrSW52ZXJzZSIsImNhbGxiYWNrRXhwZWN0IiwiYXJnIiwiZ3VpZCIsInByb3h5IiwiRGF0ZSIsIlNpenpsZSIsInNlZWQiLCJtIiwiZ3JvdXBzIiwib2xkIiwibmlkIiwibmV3Q29udGV4dCIsIm5ld1NlbGVjdG9yIiwicHJlZmVycmVkRG9jIiwic2V0RG9jdW1lbnQiLCJkb2N1bWVudElzSFRNTCIsInJxdWlja0V4cHIiLCJnZXRFbGVtZW50c0J5Q2xhc3NOYW1lIiwicXNhIiwicmJ1Z2d5UVNBIiwidG9rZW5pemUiLCJyZXNjYXBlIiwidG9TZWxlY3RvciIsInJzaWJsaW5nIiwidGVzdENvbnRleHQiLCJxc2FFcnJvciIsImNyZWF0ZUNhY2hlIiwia2V5cyIsIkV4cHIiLCJjYWNoZUxlbmd0aCIsIm1hcmtGdW5jdGlvbiIsImFzc2VydCIsImFkZEhhbmRsZSIsImhhbmRsZXIiLCJhdHRySGFuZGxlIiwic2libGluZ0NoZWNrIiwiYiIsImRpZmYiLCJzb3VyY2VJbmRleCIsIk1BWF9ORUdBVElWRSIsIm5leHRTaWJsaW5nIiwiY3JlYXRlSW5wdXRQc2V1ZG8iLCJjcmVhdGVCdXR0b25Qc2V1ZG8iLCJjcmVhdGVQb3NpdGlvbmFsUHNldWRvIiwiYXJndW1lbnQiLCJtYXRjaEluZGV4ZXMiLCJzZXRGaWx0ZXJzIiwidG9rZW5zIiwiYWRkQ29tYmluYXRvciIsIm1hdGNoZXIiLCJjb21iaW5hdG9yIiwiYmFzZSIsImNoZWNrTm9uRWxlbWVudHMiLCJkb25lTmFtZSIsInhtbCIsIm9sZENhY2hlIiwib3V0ZXJDYWNoZSIsIm5ld0NhY2hlIiwiZGlycnVucyIsImVsZW1lbnRNYXRjaGVyIiwibWF0Y2hlcnMiLCJtdWx0aXBsZUNvbnRleHRzIiwiY29udGV4dHMiLCJjb25kZW5zZSIsInVubWF0Y2hlZCIsIm5ld1VubWF0Y2hlZCIsIm1hcHBlZCIsInNldE1hdGNoZXIiLCJwcmVGaWx0ZXIiLCJwb3N0RmlsdGVyIiwicG9zdEZpbmRlciIsInBvc3RTZWxlY3RvciIsInByZU1hcCIsInBvc3RNYXAiLCJwcmVleGlzdGluZyIsIm1hdGNoZXJJbiIsIm1hdGNoZXJPdXQiLCJtYXRjaGVyRnJvbVRva2VucyIsImNoZWNrQ29udGV4dCIsImxlYWRpbmdSZWxhdGl2ZSIsInJlbGF0aXZlIiwiaW1wbGljaXRSZWxhdGl2ZSIsIm1hdGNoQ29udGV4dCIsIm1hdGNoQW55Q29udGV4dCIsIm91dGVybW9zdENvbnRleHQiLCJtYXRjaGVyRnJvbUdyb3VwTWF0Y2hlcnMiLCJlbGVtZW50TWF0Y2hlcnMiLCJzZXRNYXRjaGVycyIsImJ5U2V0IiwiYnlFbGVtZW50Iiwic3VwZXJNYXRjaGVyIiwib3V0ZXJtb3N0IiwibWF0Y2hlZENvdW50Iiwic2V0TWF0Y2hlZCIsImNvbnRleHRCYWNrdXAiLCJmaW5kIiwiZGlycnVuc1VuaXF1ZSIsInBvcCIsInVuaXF1ZVNvcnQiLCJnZXRUZXh0IiwiaXNYTUwiLCJjb21waWxlIiwic29ydElucHV0IiwiaGFzRHVwbGljYXRlIiwiZG9jRWxlbSIsInJidWdneU1hdGNoZXMiLCJjbGFzc0NhY2hlIiwidG9rZW5DYWNoZSIsImNvbXBpbGVyQ2FjaGUiLCJzb3J0T3JkZXIiLCJwdXNoX25hdGl2ZSIsImJvb2xlYW5zIiwid2hpdGVzcGFjZSIsImNoYXJhY3RlckVuY29kaW5nIiwiaWRlbnRpZmllciIsImF0dHJpYnV0ZXMiLCJwc2V1ZG9zIiwicndoaXRlc3BhY2UiLCJSZWdFeHAiLCJyY29tbWEiLCJyY29tYmluYXRvcnMiLCJyYXR0cmlidXRlUXVvdGVzIiwicnBzZXVkbyIsInJpZGVudGlmaWVyIiwibWF0Y2hFeHByIiwiSUQiLCJDTEFTUyIsIlRBRyIsIkFUVFIiLCJQU0VVRE8iLCJDSElMRCIsIm5lZWRzQ29udGV4dCIsInJpbnB1dHMiLCJyaGVhZGVyIiwicm5hdGl2ZSIsInJ1bmVzY2FwZSIsImZ1bmVzY2FwZSIsImVzY2FwZWQiLCJlc2NhcGVkV2hpdGVzcGFjZSIsImhpZ2giLCJTdHJpbmciLCJmcm9tQ2hhckNvZGUiLCJ1bmxvYWRIYW5kbGVyIiwiZWxzIiwiaGFzQ29tcGFyZSIsInRvcCIsImFkZEV2ZW50TGlzdGVuZXIiLCJhdHRhY2hFdmVudCIsImNyZWF0ZUNvbW1lbnQiLCJnZXRCeUlkIiwiZ2V0RWxlbWVudHNCeU5hbWUiLCJhdHRySWQiLCJnZXRBdHRyaWJ1dGVOb2RlIiwibWF0Y2hlc1NlbGVjdG9yIiwid2Via2l0TWF0Y2hlc1NlbGVjdG9yIiwibW96TWF0Y2hlc1NlbGVjdG9yIiwib01hdGNoZXNTZWxlY3RvciIsIm1zTWF0Y2hlc1NlbGVjdG9yIiwiZGlzY29ubmVjdGVkTWF0Y2giLCJjb21wYXJlRG9jdW1lbnRQb3NpdGlvbiIsImFkb3duIiwiYnVwIiwiY29tcGFyZSIsInNvcnREZXRhY2hlZCIsImF1cCIsImFwIiwiYnAiLCJleHByIiwiYXR0ciIsInNwZWNpZmllZCIsImR1cGxpY2F0ZXMiLCJkZXRlY3REdXBsaWNhdGVzIiwic29ydFN0YWJsZSIsInRleHRDb250ZW50Iiwibm9kZVZhbHVlIiwic2VsZWN0b3JzIiwiY3JlYXRlUHNldWRvIiwiPiIsIiAiLCIrIiwifiIsImV4Y2VzcyIsInVucXVvdGVkIiwibm9kZU5hbWVTZWxlY3RvciIsInBhdHRlcm4iLCJvcGVyYXRvciIsImNoZWNrIiwid2hhdCIsInNpbXBsZSIsImZvcndhcmQiLCJvZlR5cGUiLCJub2RlSW5kZXgiLCJ1c2VDYWNoZSIsInBzZXVkbyIsImlkeCIsIm1hdGNoZWQiLCJoYXMiLCJpbm5lclRleHQiLCJsYW5nIiwiZWxlbUxhbmciLCJoYXNoIiwibG9jYXRpb24iLCJyb290IiwiZm9jdXMiLCJoYXNGb2N1cyIsImhyZWYiLCJ0YWJJbmRleCIsImVuYWJsZWQiLCJkaXNhYmxlZCIsInNlbGVjdGVkSW5kZXgiLCJoZWFkZXIiLCJidXR0b24iLCJldmVuIiwib2RkIiwibHQiLCJndCIsInJhZGlvIiwiY2hlY2tib3giLCJmaWxlIiwicGFzc3dvcmQiLCJpbWFnZSIsImZpbHRlcnMiLCJwYXJzZU9ubHkiLCJzb0ZhciIsInByZUZpbHRlcnMiLCJjYWNoZWQiLCJ0b2tlbiIsImNvbXBpbGVkIiwiZGl2MSIsInVuaXF1ZSIsImlzWE1MRG9jIiwicm5lZWRzQ29udGV4dCIsInJzaW5nbGVUYWciLCJyb290alF1ZXJ5IiwicGFyc2VIVE1MIiwicnBhcmVudHNwcmV2IiwiZ3VhcmFudGVlZFVuaXF1ZSIsImNoaWxkcmVuIiwibmV4dCIsInVudGlsIiwidHJ1bmNhdGUiLCJuIiwidGFyZ2V0cyIsImNsb3Nlc3QiLCJwb3MiLCJwcmV2QWxsIiwiYWRkQmFjayIsInBhcmVudHMiLCJwYXJlbnRzVW50aWwiLCJuZXh0QWxsIiwibmV4dFVudGlsIiwicHJldlVudGlsIiwic2libGluZ3MiLCJyZXZlcnNlIiwiQ2FsbGJhY2tzIiwibWVtb3J5IiwiZmlyZWQiLCJmaXJpbmciLCJmaXJpbmdTdGFydCIsImZpcmluZ0xlbmd0aCIsImZpcmluZ0luZGV4Iiwic3RhY2siLCJvbmNlIiwic3RvcE9uRmFsc2UiLCJkaXNhYmxlIiwibG9jayIsImxvY2tlZCIsImZpcmVXaXRoIiwidHVwbGVzIiwidGhlbiIsImZucyIsIm5ld0RlZmVyIiwidHVwbGUiLCJyZXR1cm5lZCIsInJlc29sdmUiLCJyZWplY3QiLCJub3RpZnkiLCJwaXBlIiwic3RhdGVTdHJpbmciLCJ3aGVuIiwic3Vib3JkaW5hdGUiLCJwcm9ncmVzc1ZhbHVlcyIsInByb2dyZXNzQ29udGV4dHMiLCJyZXNvbHZlQ29udGV4dHMiLCJyZXNvbHZlVmFsdWVzIiwidXBkYXRlRnVuYyIsInJlYWR5TGlzdCIsInJlYWR5V2FpdCIsImhvbGRSZWFkeSIsImhvbGQiLCJ3YWl0IiwidHJpZ2dlckhhbmRsZXIiLCJvZmYiLCJyZWFkeVN0YXRlIiwiY2hhaW5hYmxlIiwiZW1wdHlHZXQiLCJyYXciLCJidWxrIiwiYWNjZXB0RGF0YSIsIm93bmVyIiwiYWNjZXB0cyIsImRlc2NyaXB0b3IiLCJ1bmxvY2siLCJkZWZpbmVQcm9wZXJ0aWVzIiwic3RvcmVkIiwiY2FtZWwiLCJkaXNjYXJkIiwicmVtb3ZlRGF0YSIsIl9kYXRhIiwiX3JlbW92ZURhdGEiLCJjYW1lbEtleSIsImRlcXVldWUiLCJzdGFydExlbmd0aCIsInNldHRlciIsImNsZWFyUXVldWUiLCJjb3VudCIsImRlZmVyIiwicG51bSIsInNvdXJjZSIsImVsIiwiZnJhZ21lbnQiLCJjaGVja0Nsb25lIiwibm9DbG9uZUNoZWNrZWQiLCJzdHJ1bmRlZmluZWQiLCJmb2N1c2luQnViYmxlcyIsInJrZXlFdmVudCIsInJtb3VzZUV2ZW50IiwicmZvY3VzTW9ycGgiLCJydHlwZW5hbWVzcGFjZSIsInR5cGVzIiwiaGFuZGxlT2JqSW4iLCJldmVudEhhbmRsZSIsInQiLCJoYW5kbGVPYmoiLCJzcGVjaWFsIiwiaGFuZGxlcnMiLCJuYW1lc3BhY2VzIiwib3JpZ1R5cGUiLCJlbGVtRGF0YSIsInRyaWdnZXJlZCIsImRpc3BhdGNoIiwiZGVsZWdhdGVUeXBlIiwiYmluZFR5cGUiLCJuYW1lc3BhY2UiLCJkZWxlZ2F0ZUNvdW50Iiwic2V0dXAiLCJtYXBwZWRUeXBlcyIsIm9yaWdDb3VudCIsInRlYXJkb3duIiwicmVtb3ZlRXZlbnQiLCJ0cmlnZ2VyIiwib25seUhhbmRsZXJzIiwiYnViYmxlVHlwZSIsIm9udHlwZSIsImV2ZW50UGF0aCIsIkV2ZW50IiwiaXNUcmlnZ2VyIiwibmFtZXNwYWNlX3JlIiwibm9CdWJibGUiLCJwYXJlbnRXaW5kb3ciLCJpc1Byb3BhZ2F0aW9uU3RvcHBlZCIsInByZXZlbnREZWZhdWx0IiwiaXNEZWZhdWx0UHJldmVudGVkIiwiX2RlZmF1bHQiLCJmaXgiLCJoYW5kbGVyUXVldWUiLCJkZWxlZ2F0ZVRhcmdldCIsInByZURpc3BhdGNoIiwiY3VycmVudFRhcmdldCIsImlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkIiwic3RvcFByb3BhZ2F0aW9uIiwicG9zdERpc3BhdGNoIiwic2VsIiwiZml4SG9va3MiLCJrZXlIb29rcyIsIm9yaWdpbmFsIiwiY2hhckNvZGUiLCJrZXlDb2RlIiwibW91c2VIb29rcyIsImV2ZW50RG9jIiwicGFnZVgiLCJjbGllbnRYIiwic2Nyb2xsTGVmdCIsImNsaWVudExlZnQiLCJwYWdlWSIsImNsaWVudFkiLCJzY3JvbGxUb3AiLCJjbGllbnRUb3AiLCJvcmlnaW5hbEV2ZW50IiwiZml4SG9vayIsImJsdXIiLCJjbGljayIsImJlZm9yZXVubG9hZCIsInJldHVyblZhbHVlIiwic2ltdWxhdGUiLCJidWJibGUiLCJpc1NpbXVsYXRlZCIsImRlZmF1bHRQcmV2ZW50ZWQiLCJ0aW1lU3RhbXAiLCJzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24iLCJtb3VzZWVudGVyIiwibW91c2VsZWF2ZSIsInBvaW50ZXJlbnRlciIsInBvaW50ZXJsZWF2ZSIsInJlbGF0ZWQiLCJyZWxhdGVkVGFyZ2V0IiwiYXR0YWNoZXMiLCJvbiIsIm9uZSIsIm9yaWdGbiIsInJ4aHRtbFRhZyIsInJ0YWdOYW1lIiwicmh0bWwiLCJybm9Jbm5lcmh0bWwiLCJyY2hlY2tlZCIsInJzY3JpcHRUeXBlIiwicmNsZWFuU2NyaXB0Iiwid3JhcE1hcCIsIm9wdGlvbiIsInRoZWFkIiwiY29sIiwidHIiLCJ0ZCIsIm9wdGdyb3VwIiwidGJvZHkiLCJ0Zm9vdCIsImNvbGdyb3VwIiwiY2FwdGlvbiIsInRoIiwiZGF0YUFuZEV2ZW50cyIsImRlZXBEYXRhQW5kRXZlbnRzIiwic3JjRWxlbWVudHMiLCJkZXN0RWxlbWVudHMiLCJpblBhZ2UiLCJidWlsZEZyYWdtZW50Iiwic2NyaXB0cyIsInNlbGVjdGlvbiIsIndyYXAiLCJjcmVhdGVUZXh0Tm9kZSIsImNsZWFuRGF0YSIsImFwcGVuZCIsImRvbU1hbmlwIiwicHJlcGVuZCIsImJlZm9yZSIsImFmdGVyIiwia2VlcERhdGEiLCJodG1sIiwicmVwbGFjZVdpdGgiLCJyZXBsYWNlQ2hpbGQiLCJoYXNTY3JpcHRzIiwiaU5vQ2xvbmUiLCJfZXZhbFVybCIsInByZXBlbmRUbyIsImluc2VydEFmdGVyIiwicmVwbGFjZUFsbCIsImluc2VydCIsIm9wZW5lciIsImNvbXB1dGVQaXhlbFBvc2l0aW9uQW5kQm94U2l6aW5nUmVsaWFibGUiLCJjb250YWluZXIiLCJkaXZTdHlsZSIsInBpeGVsUG9zaXRpb25WYWwiLCJib3hTaXppbmdSZWxpYWJsZVZhbCIsImJhY2tncm91bmRDbGlwIiwiY2xlYXJDbG9uZVN0eWxlIiwicGl4ZWxQb3NpdGlvbiIsInJlbGlhYmxlTWFyZ2luUmlnaHQiLCJtYXJnaW5EaXYiLCJtYXJnaW5SaWdodCIsInN3YXAiLCJyZGlzcGxheXN3YXAiLCJycmVsTnVtIiwiY3NzU2hvdyIsInBvc2l0aW9uIiwidmlzaWJpbGl0eSIsImNzc05vcm1hbFRyYW5zZm9ybSIsImxldHRlclNwYWNpbmciLCJmb250V2VpZ2h0IiwiY3NzTnVtYmVyIiwiY29sdW1uQ291bnQiLCJmaWxsT3BhY2l0eSIsImZsZXhHcm93IiwiZmxleFNocmluayIsImxpbmVIZWlnaHQiLCJvcmRlciIsIm9ycGhhbnMiLCJ3aWRvd3MiLCJ6SW5kZXgiLCJ6b29tIiwiY3NzUHJvcHMiLCJmbG9hdCIsIm1hcmdpbiIsInBhZGRpbmciLCJib3JkZXIiLCJzdWZmaXgiLCJleHBhbmRlZCIsInBhcnRzIiwidW5pdCIsInByb3BIb29rcyIsImVhc2VkIiwic3RlcCIsImxpbmVhciIsInN3aW5nIiwiY29zIiwiUEkiLCJ0aW1lcklkIiwicmZ4bnVtIiwicnJ1biIsIioiLCJzY2FsZSIsIm1heEl0ZXJhdGlvbnMiLCJ0d2VlbmVyIiwicHJlZmlsdGVyIiwic3BlZWQiLCJvcHQiLCJzcGVlZHMiLCJmYWRlVG8iLCJ0byIsImFuaW1hdGUiLCJvcHRhbGwiLCJkb0FuaW1hdGlvbiIsImZpbmlzaCIsInN0b3BRdWV1ZSIsInRpbWVycyIsImNzc0ZuIiwic2xpZGVEb3duIiwic2xpZGVVcCIsInNsaWRlVG9nZ2xlIiwiZmFkZUluIiwiZmFkZU91dCIsImZhZGVUb2dnbGUiLCJpbnRlcnZhbCIsInNldEludGVydmFsIiwiY2xlYXJJbnRlcnZhbCIsInNsb3ciLCJmYXN0IiwiZGVsYXkiLCJ0aW1lIiwidGltZW91dCIsImNsZWFyVGltZW91dCIsImNoZWNrT24iLCJvcHRTZWxlY3RlZCIsIm9wdERpc2FibGVkIiwicmFkaW9WYWx1ZSIsIm5vZGVIb29rIiwiYm9vbEhvb2siLCJyZW1vdmVBdHRyIiwiblR5cGUiLCJhdHRySG9va3MiLCJwcm9wTmFtZSIsImF0dHJOYW1lcyIsInByb3BGaXgiLCJnZXR0ZXIiLCJyZm9jdXNhYmxlIiwicmVtb3ZlUHJvcCIsImZvciIsImNsYXNzIiwibm90eG1sIiwiaGFzQXR0cmlidXRlIiwicmNsYXNzIiwiYWRkQ2xhc3MiLCJjbGF6eiIsImZpbmFsVmFsdWUiLCJwcm9jZWVkIiwicmVtb3ZlQ2xhc3MiLCJ0b2dnbGVDbGFzcyIsInN0YXRlVmFsIiwiY2xhc3NOYW1lcyIsImhhc0NsYXNzIiwicnJldHVybiIsInZhbEhvb2tzIiwib3B0aW9uU2V0IiwiaG92ZXIiLCJmbk92ZXIiLCJmbk91dCIsInVuYmluZCIsImRlbGVnYXRlIiwidW5kZWxlZ2F0ZSIsIm5vbmNlIiwicnF1ZXJ5IiwiSlNPTiIsInBhcnNlIiwicGFyc2VYTUwiLCJET01QYXJzZXIiLCJwYXJzZUZyb21TdHJpbmciLCJyaGFzaCIsInJ0cyIsInJoZWFkZXJzIiwicmxvY2FsUHJvdG9jb2wiLCJybm9Db250ZW50IiwicnByb3RvY29sIiwicnVybCIsInByZWZpbHRlcnMiLCJhbGxUeXBlcyIsImFqYXhMb2NhdGlvbiIsImFqYXhMb2NQYXJ0cyIsImFjdGl2ZSIsImxhc3RNb2RpZmllZCIsImV0YWciLCJ1cmwiLCJpc0xvY2FsIiwicHJvY2Vzc0RhdGEiLCJhc3luYyIsImNvbnRlbnRUeXBlIiwianNvbiIsIiogdGV4dCIsInRleHQgaHRtbCIsInRleHQganNvbiIsInRleHQgeG1sIiwiYWpheFNldHVwIiwic2V0dGluZ3MiLCJhamF4UHJlZmlsdGVyIiwiYWpheFRyYW5zcG9ydCIsImFqYXgiLCJzdGF0dXMiLCJuYXRpdmVTdGF0dXNUZXh0IiwiaGVhZGVycyIsInN1Y2Nlc3MiLCJtb2RpZmllZCIsInN0YXR1c1RleHQiLCJ0aW1lb3V0VGltZXIiLCJ0cmFuc3BvcnQiLCJyZXNwb25zZUhlYWRlcnNTdHJpbmciLCJpZk1vZGlmaWVkIiwiY2FjaGVVUkwiLCJjYWxsYmFja0NvbnRleHQiLCJzdGF0dXNDb2RlIiwiZmlyZUdsb2JhbHMiLCJnbG9iYWxFdmVudENvbnRleHQiLCJjb21wbGV0ZURlZmVycmVkIiwicmVzcG9uc2VIZWFkZXJzIiwicmVxdWVzdEhlYWRlcnMiLCJyZXF1ZXN0SGVhZGVyc05hbWVzIiwic3RyQWJvcnQiLCJnZXRBbGxSZXNwb25zZUhlYWRlcnMiLCJzZXRSZXF1ZXN0SGVhZGVyIiwibG5hbWUiLCJvdmVycmlkZU1pbWVUeXBlIiwiZmluYWxUZXh0IiwibWV0aG9kIiwiY3Jvc3NEb21haW4iLCJwYXJhbSIsImhhc0NvbnRlbnQiLCJiZWZvcmVTZW5kIiwic2VuZCIsImdldEpTT04iLCJnZXRTY3JpcHQiLCJ0aHJvd3MiLCJ3cmFwQWxsIiwiZmlyc3RFbGVtZW50Q2hpbGQiLCJ3cmFwSW5uZXIiLCJ1bndyYXAiLCJ2aXNpYmxlIiwicjIwIiwickNSTEYiLCJyc3VibWl0dGVyVHlwZXMiLCJyc3VibWl0dGFibGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJzZXJpYWxpemUiLCJzZXJpYWxpemVBcnJheSIsInhociIsIlhNTEh0dHBSZXF1ZXN0IiwieGhySWQiLCJ4aHJDYWxsYmFja3MiLCJ4aHJTdWNjZXNzU3RhdHVzIiwwLDEyMjMsInhoclN1cHBvcnRlZCIsImNvcnMiLCJvcGVuIiwidXNlcm5hbWUiLCJ4aHJGaWVsZHMiLCJvbmxvYWQiLCJvbmVycm9yIiwicmVzcG9uc2VUZXh0IiwidGV4dCBzY3JpcHQiLCJjaGFyc2V0Iiwic2NyaXB0Q2hhcnNldCIsImV2dCIsIm9sZENhbGxiYWNrcyIsInJqc29ucCIsImpzb25wIiwianNvbnBDYWxsYmFjayIsIm9yaWdpbmFsU2V0dGluZ3MiLCJjYWxsYmFja05hbWUiLCJvdmVyd3JpdHRlbiIsInJlc3BvbnNlQ29udGFpbmVyIiwianNvblByb3AiLCJrZWVwU2NyaXB0cyIsInBhcnNlZCIsIl9sb2FkIiwicGFyYW1zIiwiYW5pbWF0ZWQiLCJvZmZzZXQiLCJzZXRPZmZzZXQiLCJjdXJQb3NpdGlvbiIsImN1ckxlZnQiLCJjdXJDU1NUb3AiLCJjdXJUb3AiLCJjdXJPZmZzZXQiLCJjdXJDU1NMZWZ0IiwiY2FsY3VsYXRlUG9zaXRpb24iLCJjdXJFbGVtIiwibGVmdCIsInVzaW5nIiwid2luIiwiYm94IiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwicGFnZVlPZmZzZXQiLCJwYWdlWE9mZnNldCIsIm9mZnNldFBhcmVudCIsInBhcmVudE9mZnNldCIsInNjcm9sbFRvIiwiSGVpZ2h0IiwiV2lkdGgiLCIiLCJkZWZhdWx0RXh0cmEiLCJmdW5jTmFtZSIsInNpemUiLCJhbmRTZWxmIiwiZGVmaW5lIiwiYW1kIiwiX2pRdWVyeSIsIl8kIiwiJCIsIm5vQ29uZmxpY3QiLCJjb3JlIiwidWlraXQiLCJVSWtpdCIsInJlcyIsInJlcSIsImNvbmZpZyIsInJlc291cmNlcyIsInJlc291cmNlIiwiVUkiLCJfVUkiLCJjcmVhdGUiLCJ1ayIsIiRkb2MiLCIkd2luIiwiJGh0bWwiLCJ0cmFuc2l0aW9uIiwidHJhbnNpdGlvbkVuZCIsInRyYW5zRW5kRXZlbnROYW1lcyIsIldlYmtpdFRyYW5zaXRpb24iLCJNb3pUcmFuc2l0aW9uIiwiT1RyYW5zaXRpb24iLCJhbmltYXRpb25FbmQiLCJhbmltRW5kRXZlbnROYW1lcyIsIldlYmtpdEFuaW1hdGlvbiIsIk1vekFuaW1hdGlvbiIsIk9BbmltYXRpb24iLCJnZXRUaW1lIiwidmVuZG9ycyIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsInZwIiwiY2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJ1c2VyQWdlbnQiLCJsYXN0VGltZSIsIm5leHRUaW1lIiwidG91Y2giLCJtc1BvaW50ZXJFbmFibGVkIiwibXNNYXhUb3VjaFBvaW50cyIsInBvaW50ZXJFbmFibGVkIiwibWF4VG91Y2hQb2ludHMiLCJtdXRhdGlvbm9ic2VydmVyIiwiTXV0YXRpb25PYnNlcnZlciIsIldlYktpdE11dGF0aW9uT2JzZXJ2ZXIiLCJVdGlscyIsImlzRnVsbHNjcmVlbiIsIndlYmtpdEZ1bGxzY3JlZW5FbGVtZW50IiwibW96RnVsbFNjcmVlbkVsZW1lbnQiLCJtc0Z1bGxzY3JlZW5FbGVtZW50IiwiZnVsbHNjcmVlbkVsZW1lbnQiLCJzdHIyanNvbiIsIm5vdGV2aWwiLCIkMSIsImRlYm91bmNlIiwiaW1tZWRpYXRlIiwibGF0ZXIiLCJjYWxsTm93IiwicmVtb3ZlQ3NzUnVsZXMiLCJzZWxlY3RvclJlZ0V4IiwiaWR4cyIsInN0eWxlc2hlZXQiLCJfaSIsIl9qIiwiX2siLCJfbGVuIiwiX2xlbjEiLCJfbGVuMiIsIl9yZWYiLCJzdHlsZVNoZWV0cyIsIkNTU1J1bGUiLCJTVFlMRV9SVUxFIiwic2VsZWN0b3JUZXh0IiwiZGVsZXRlUnVsZSIsIl9lcnJvciIsImlzSW5WaWV3IiwiJGVsZW1lbnQiLCJ3aW5kb3dfbGVmdCIsIndpbmRvd190b3AiLCJ0b3BvZmZzZXQiLCJsZWZ0b2Zmc2V0IiwiaW5pdGFuaW1hdGlvbiIsImVsZSIsImNscyIsImQiLCJjZWlsIiwidGVtcGxhdGUiLCJ0b2MiLCJjbWQiLCJvdXRwdXQiLCJvcGVuYmxvY2tzIiwic3Vic3RyaW5nIiwiY29tbWFuZCIsImNvbXBvbmVudCIsIiR0aGlzIiwibGFuZ2RpcmVjdGlvbiIsImNvbXBvbmVudHMiLCJkZWYiLCJkZWZhdWx0cyIsInBsdWdpbnMiLCJmb3JFYWNoIiwicGx1Z2luIiwiYm9vdCIsImExIiwiYTIiLCJhMyIsIm1ldGhvZHMiLCJtaXhpbiIsImRvbXJlYWR5IiwiYm9vdGVkIiwiYm9vdENvbXBvbmVudHMiLCJkb21PYnNlcnZlcnMiLCJkb21PYnNlcnZlIiwib2JzZXJ2ZXIiLCJtdXRhdGlvbnMiLCJvYnNlcnZlIiwiY2hpbGRMaXN0Iiwic3VidHJlZSIsIiRib2R5IiwieCIsInkiLCJpbm5lckhlaWdodCIsImV4Y2x1ZGUiLCJob3ZlcnNldCIsImhvdmVyY2xzIiwic3dpcGVEaXJlY3Rpb24iLCJ4MSIsIngyIiwieTEiLCJ5MiIsImFicyIsImxvbmdUYXAiLCJsb25nVGFwVGltZW91dCIsImNhbmNlbExvbmdUYXAiLCJjYW5jZWxBbGwiLCJ0b3VjaFRpbWVvdXQiLCJ0YXBUaW1lb3V0Iiwic3dpcGVUaW1lb3V0IiwiaXNQcmltYXJ5VG91Y2giLCJwb2ludGVyVHlwZSIsIk1TUE9JTlRFUl9UWVBFX1RPVUNIIiwiaXNQcmltYXJ5Iiwic3dpcGVMZWZ0IiwiZ2VzdHVyZSIsImxvbmdUYXBEZWxheSIsImRlbHRhIiwiZmlyc3RUb3VjaCIsImRlbHRhWCIsImRlbHRhWSIsIk1TR2VzdHVyZSIsInN3aXBlRGlyZWN0aW9uRnJvbVZlbG9jaXR5IiwidmVsb2NpdHlYIiwidmVsb2NpdHlZIiwidG91Y2hlcyIsImlzRG91YmxlVGFwIiwiYWRkUG9pbnRlciIsInBvaW50ZXJJZCIsImlzTmFOIiwiY2FuY2VsVG91Y2giLCJzdGFja3MiLCJzdGFja01hcmdpbiIsImNvbHVtbnMiLCJwcm9jZXNzIiwicmV2ZXJ0IiwiaXdpZHRoIiwicmF0aW8iLCJmbG9vciIsInJlc3BvbnNpdmVFbGVtZW50Iiwic2tpcCIsImZpcnN0dmlzaWJsZSIsIm91dGVySGVpZ2h0IiwiY29sdW1uIiwibWF0Y2hIZWlnaHRzIiwicm93IiwiZ3JvdXAiLCJsYXN0b2Zmc2V0IiwiY2FjaGVTdmdzIiwiaW5saW5lU3ZnIiwiaW1nIiwibmMiLCIkc3ZnIiwic2Nyb2xsVG9FbGVtZW50IiwiZG9jaGVpZ2h0Iiwid2luaGVpZ2h0Iiwic21vb3RoU2Nyb2xsIiwiZWFzZU91dEV4cG8iLCJjIiwicG93Iiwic2Nyb2xsc3BpZXMiLCJjaGVja1Njcm9sbFNweSIsImluaXRjbHMiLCJyZXBlYXQiLCJzY3JvbGxzcHkiLCJpbml0aW52aWV3IiwidG9nZ2xlY2xzIiwiZGVsYXlJZHgiLCJ0b2dnbGVjbHNJZHgiLCJpbnZpZXdzdGF0ZSIsImludmlldyIsInNjcm9sbHNweW5hdnMiLCJjaGVja1Njcm9sbFNweU5hdnMiLCJzbW9vdGhzY3JvbGwiLCJzY3JvbGxzcHluYXYiLCJpbnZpZXdzIiwiaWRzIiwibGlua3MiLCJjbHNBY3RpdmUiLCJjbHNDbG9zZXN0IiwibmF2aXRlbXMiLCJ0b2dnbGVzIiwiZ2V0VG9nZ2xlcyIsImFyaWEiLCJ0b3RvZ2dsZSIsImFuaW1hdGlvbnMiLCJ1cGRhdGVBcmlhIiwiZmFkZSIsImFsZXJ0IiwicmVtb3ZlRWxlbWVudCIsInBhZGRpbmctdG9wIiwicGFkZGluZy1ib3R0b20iLCJtYXJnaW4tdG9wIiwibWFyZ2luLWJvdHRvbSIsImFjdGl2ZUNsYXNzIiwiYnV0dG9uUmFkaW8iLCJnZXRTZWxlY3RlZCIsImJ1dHRvbkNoZWNrYm94IiwianVzdGlmeSIsImp1c3RpZnlUbyIsImJvdW5kYXJ5d2lkdGgiLCJpbm5lcldpZHRoIiwiandpZHRoIiwib3V0ZXJXaWR0aCIsInJpZ2h0MSIsInJpZ2h0MiIsImhvdmVySWRsZSIsImZsaXBzIiwiYm90dG9tLWxlZnQiLCJib3R0b20tcmlnaHQiLCJib3R0b20tY2VudGVyIiwidG9wLWxlZnQiLCJ0b3AtcmlnaHQiLCJ0b3AtY2VudGVyIiwibGVmdC10b3AiLCJsZWZ0LWJvdHRvbSIsImxlZnQtY2VudGVyIiwicmlnaHQtdG9wIiwicmlnaHQtYm90dG9tIiwicmlnaHQtY2VudGVyIiwieHkiLCJtb2RlIiwicmVtYWludGltZSIsImJvdW5kYXJ5IiwiZHJvcGRvd25TZWxlY3RvciIsImhvdmVyRGVsYXlJZGxlIiwicHJldmVudGZsaXAiLCJyZW1haW5JZGxlIiwidHJpZ2dlcmV2ZW50IiwiZHJvcGRvd24iLCJjZW50ZXJlZCIsImp1c3RpZmllZCIsIiR0YXJnZXQiLCJjaGVja0RpbWVuc2lvbnMiLCJyZWdpc3Rlck91dGVyQ2xpY2siLCJmb3JjZSIsIm1hcmdpbi1sZWZ0IiwibWFyZ2luLXJpZ2h0IiwicHAiLCJwb3NvZmZzZXQiLCJkcG9zIiwidmFyaWFudHMiLCJmZHBvcyIsImNoZWNrQm91bmRhcnkiLCJheGlzIiwiZHJvcGRvd25PdmVybGF5Iiwib3ZlcmxheSIsImJlZm9yZXNob3cudWsuZHJvcGRvd24iLCJzaG93LnVrLmRyb3Bkb3duIiwiaCIsImhpZGUudWsuZHJvcGRvd24iLCJwb2ludGVyZW50ZXIudWsuZHJvcGRvd24iLCJwb2ludGVybGVhdmUudWsuZHJvcGRvd24iLCJncmlkcyIsImlnbm9yZXN0YWNrZWQiLCJncmlkIiwiZ3JpZE1hdGNoSGVpZ2h0Iiwic3RhY2tlZCIsImdyaWRNYXJnaW4iLCJzZXRDb250ZW50IiwibW9kYWwiLCJwZXJzaXN0IiwiYWN0aXZlQ291bnQiLCJrZXlib2FyZCIsImJnY2xvc2UiLCJtaW5TY3JvbGxIZWlnaHQiLCJjZW50ZXIiLCJzY3JvbGxhYmxlIiwiaGFzVHJhbnNpdGlvbmVkIiwicGFkZGluZ2RpciIsImRpYWxvZyIsImlzQWN0aXZlIiwicmVzaXplIiwiX2hpZGUiLCJib2R5d2lkdGgiLCJzY3JvbGxiYXJ3aWR0aCIsInVwZGF0ZVNjcm9sbGFibGUiLCJkaCIsInBhZCIsIndoIiwibWF4LWhlaWdodCIsIm1vZGFsVHJpZ2dlciIsImxhYmVscyIsIk9rIiwiY29uZmlybSIsIm9uY29uZmlybSIsIkNhbmNlbCIsInByb21wdCIsIm9uc3VibWl0IiwiYmxvY2tVSSIsImdldEhlaWdodCIsIiRlbGUiLCJsaXN0cyIsIm11bHRpcGxlIiwibmF2IiwibGkiLCJub2FuaW1hdGlvbiIsIiRsaSIsIiRjb250YWluZXIiLCJzY3JvbGxwb3MiLCJzY3JvbGxYIiwic2Nyb2xsWSIsIk9mZmNhbnZhcyIsImJhciIsInJ0bCIsImZsaXAiLCJfaW5pdEVsZW1lbnQiLCJwYW5lbCIsImZpbmFsaXplIiwibGluayIsIm9mZmNhbnZhc1RyaWdnZXIiLCJvZmZjYW52YXMiLCJjb3JlQW5pbWF0aW9uIiwicmVsZWFzZSIsImNsc0luIiwiY2xzT3V0IiwiQW5pbWF0aW9ucyIsImNvbm5lY3QiLCJzd2lwaW5nIiwiYW5pbWF0aW5nIiwic3dpdGNoZXIiLCJnZXRTZWxlY3Rpb24iLCJ0YWIiLCJub25lIiwic2xpZGUtYm90dG9tIiwic2xpZGUtdG9wIiwic2xpZGUtdmVydGljYWwiLCJzbGlkZS1sZWZ0Iiwic2xpZGUtcmlnaHQiLCJzbGlkZS1ob3Jpem9udGFsIiwicmVzcG9uc2l2ZXRhYiIsImxzdCIsImRvcmVzcG9uc2l2ZSIsIm91dGVySFRNTCIsImF1dG9tdXRlIiwiY292ZXIiLCJjb250ZW50V2luZG93IiwiZGltZW5zaW9uIiwiYWRkb24iLCJkcmFnZ2luZyIsImRlbGF5SWRsZSIsImFuY2hvciIsImRyYWdnZWQiLCJzdG9yZSIsInRocmVzaG9sZCIsImluZmluaXRlIiwiYXV0b3BsYXkiLCJhdXRvcGxheUludGVydmFsIiwicGF1c2VPbkhvdmVyIiwiYWN0aXZlY2xzIiwic2xpZGVyIiwidXBkYXRlRm9jdXMiLCJ0b3VjaHN0YXJ0IG1vdXNlZG93biIsInRvdWNoeCIsInBvaW50ZXItc3RhcnQiLCJwb2ludGVyLXBvcy1zdGFydCIsImhvdmVyaW5nIiwiY3dpZHRoIiwibWF4aGVpZ2h0IiwiaXRlbXMiLCJtaW4td2lkdGgiLCJtaW4taGVpZ2h0IiwiYXJlYSIsIml0ZW1zUmVzaXplZCIsImN3IiwiLW1zLXRyYW5zZm9ybSIsIi13ZWJraXQtdHJhbnNmb3JtIiwidHJhbnNmb3JtIiwidXBkYXRlUG9zIiwicHJldmlvdXMiLCJiYXNlaWR4IiwiZGlyZWN0aW9uIiwieiIsIm1vdmUiLCJpdG0iLCJ4RGlmZiIsIl9mb2N1cyIsImdldE1vZGFsIiwibGlnaHRib3giLCJsb2FkZXIiLCJjbG9zZXIiLCJmaXRTaXplIiwiZG9tU2libGluZ3MiLCJ0aXRsZSIsIm1ldGEiLCJkcGFkVG9wIiwiZHBhZEJvdCIsImRwYWQiLCJtYXh3aWR0aCIsIm1heC13aWR0aCIsIm13aWR0aCIsIm1oZWlnaHQiLCJJbWFnZSIsInlvdXR1YmVSZWdFeHAiLCJ5b3V0dWJlUmVnRXhwU2hvcnQiLCJsb3dyZXMiLCJyZWdleCIsImVuY29kZVVSSSIsInZpZCIsImlkbGUiLCJ2aWRlb1dpZHRoIiwidmlkZW9IZWlnaHQiLCJvIiwic2hvd2ZpcnN0IiwiY29sbGFwc2UiLCJjb250YWluZXJzIiwiY2xzYWN0aXZlIiwiYWNjb3JkaW9uIiwidG9nZ2xlSXRlbSIsInVwZGF0ZSIsIndyYXBwZXIiLCIkY29udGVudCIsIiR3cmFwcGVyIiwiJHRvZ2dsZSIsIkNoYXJ0IiwiY2FudmFzIiwiY3R4IiwiYXNwZWN0UmF0aW8iLCJyZXRpbmFTY2FsZSIsImFuaW1hdGlvblN0ZXBzIiwiYW5pbWF0aW9uRWFzaW5nIiwic2hvd1NjYWxlIiwic2NhbGVPdmVycmlkZSIsInNjYWxlU3RlcHMiLCJzY2FsZVN0ZXBXaWR0aCIsInNjYWxlU3RhcnRWYWx1ZSIsInNjYWxlTGluZUNvbG9yIiwic2NhbGVMaW5lV2lkdGgiLCJzY2FsZVNob3dMYWJlbHMiLCJzY2FsZUxhYmVsIiwic2NhbGVJbnRlZ2Vyc09ubHkiLCJzY2FsZUJlZ2luQXRaZXJvIiwic2NhbGVGb250RmFtaWx5Iiwic2NhbGVGb250U2l6ZSIsInNjYWxlRm9udFN0eWxlIiwic2NhbGVGb250Q29sb3IiLCJyZXNwb25zaXZlIiwibWFpbnRhaW5Bc3BlY3RSYXRpbyIsInNob3dUb29sdGlwcyIsImN1c3RvbVRvb2x0aXBzIiwidG9vbHRpcEV2ZW50cyIsInRvb2x0aXBGaWxsQ29sb3IiLCJ0b29sdGlwRm9udEZhbWlseSIsInRvb2x0aXBGb250U2l6ZSIsInRvb2x0aXBGb250U3R5bGUiLCJ0b29sdGlwRm9udENvbG9yIiwidG9vbHRpcFRpdGxlRm9udEZhbWlseSIsInRvb2x0aXBUaXRsZUZvbnRTaXplIiwidG9vbHRpcFRpdGxlRm9udFN0eWxlIiwidG9vbHRpcFRpdGxlRm9udENvbG9yIiwidG9vbHRpcFlQYWRkaW5nIiwidG9vbHRpcFhQYWRkaW5nIiwidG9vbHRpcENhcmV0U2l6ZSIsInRvb2x0aXBDb3JuZXJSYWRpdXMiLCJ0b29sdGlwWE9mZnNldCIsInRvb2x0aXBUZW1wbGF0ZSIsIm11bHRpVG9vbHRpcFRlbXBsYXRlIiwibXVsdGlUb29sdGlwS2V5QmFja2dyb3VuZCIsIm9uQW5pbWF0aW9uUHJvZ3Jlc3MiLCJvbkFuaW1hdGlvbkNvbXBsZXRlIiwiaGVscGVycyIsInIiLCJ3aGVyZSIsImZpbmROZXh0V2hlcmUiLCJmaW5kUHJldmlvdXNXaGVyZSIsImluaGVyaXRzIiwiX19zdXBlcl9fIiwidSIsIndhcm4iLCJjb25zb2xlIiwiZiIsImlzTnVtYmVyIiwiaXNGaW5pdGUiLCJnIiwibWluIiwiY2FwIiwiZ2V0RGVjaW1hbFBsYWNlcyIsIlMiLCJyYWRpYW5zIiwiZ2V0QW5nbGVGcm9tUG9pbnQiLCJzcXJ0IiwiYXRhbjIiLCJhbmdsZSIsImRpc3RhbmNlIiwiYWxpYXNQaXhlbCIsInNwbGluZUN1cnZlIiwiaW5uZXIiLCJvdXRlciIsImNhbGN1bGF0ZU9yZGVyT2ZNYWduaXR1ZGUiLCJsb2ciLCJMTjEwIiwiQyIsImNhbGN1bGF0ZVNjYWxlUmFuZ2UiLCJyb3VuZCIsInN0ZXBzIiwic3RlcFZhbHVlIiwiZ2VuZXJhdGVMYWJlbHMiLCJsYWJlbFRlbXBsYXRlU3RyaW5nIiwiZWFzaW5nRWZmZWN0cyIsImVhc2VJblF1YWQiLCJlYXNlT3V0UXVhZCIsImVhc2VJbk91dFF1YWQiLCJlYXNlSW5DdWJpYyIsImVhc2VPdXRDdWJpYyIsImVhc2VJbk91dEN1YmljIiwiZWFzZUluUXVhcnQiLCJlYXNlT3V0UXVhcnQiLCJlYXNlSW5PdXRRdWFydCIsImVhc2VJblF1aW50IiwiZWFzZU91dFF1aW50IiwiZWFzZUluT3V0UXVpbnQiLCJlYXNlSW5TaW5lIiwiZWFzZU91dFNpbmUiLCJzaW4iLCJlYXNlSW5PdXRTaW5lIiwiZWFzZUluRXhwbyIsImVhc2VJbk91dEV4cG8iLCJlYXNlSW5DaXJjIiwiZWFzZU91dENpcmMiLCJlYXNlSW5PdXRDaXJjIiwiZWFzZUluRWxhc3RpYyIsImFzaW4iLCJlYXNlT3V0RWxhc3RpYyIsImVhc2VJbk91dEVsYXN0aWMiLCJlYXNlSW5CYWNrIiwiZWFzZU91dEJhY2siLCJlYXNlSW5PdXRCYWNrIiwiZWFzZUluQm91bmNlIiwiZWFzZU91dEJvdW5jZSIsImVhc2VJbk91dEJvdW5jZSIsInJlcXVlc3RBbmltRnJhbWUiLCJ3ZWJraXRSZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJtb3pSZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJvUmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwibXNSZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJQIiwiY2FuY2VsQW5pbUZyYW1lIiwid2Via2l0Q2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJtb3pDYW5jZWxBbmltYXRpb25GcmFtZSIsIm9DYW5jZWxBbmltYXRpb25GcmFtZSIsIm1zQ2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJMIiwiYW5pbWF0aW9uTG9vcCIsImFuaW1hdGlvbkZyYW1lIiwiZ2V0UmVsYXRpdmVQb3NpdGlvbiIsInNyY0VsZW1lbnQiLCJhZGRFdmVudCIsImsiLCJkZXRhY2hFdmVudCIsImJpbmRFdmVudHMiLCJjaGFydCIsInVuYmluZEV2ZW50cyIsIlIiLCJnZXRNYXhpbXVtV2lkdGgiLCJjbGllbnRXaWR0aCIsIlQiLCJnZXRNYXhpbXVtSGVpZ2h0IiwiY2xpZW50SGVpZ2h0IiwiQSIsImdldE1heGltdW1TaXplIiwiZGV2aWNlUGl4ZWxSYXRpbyIsIk0iLCJjbGVhciIsImNsZWFyUmVjdCIsIlciLCJmb250U3RyaW5nIiwibG9uZ2VzdFRleHQiLCJmb250IiwibWVhc3VyZVRleHQiLCJCIiwiZHJhd1JvdW5kZWRSZWN0YW5nbGUiLCJiZWdpblBhdGgiLCJtb3ZlVG8iLCJsaW5lVG8iLCJxdWFkcmF0aWNDdXJ2ZVRvIiwiY2xvc2VQYXRoIiwiaW5zdGFuY2VzIiwiVHlwZSIsImluaXRpYWxpemUiLCJyZWZsb3ciLCJyZW5kZXIiLCJkcmF3IiwiZ2VuZXJhdGVMZWdlbmQiLCJsZWdlbmRUZW1wbGF0ZSIsImRlc3Ryb3kiLCJyZW1vdmVQcm9wZXJ0eSIsInNob3dUb29sdGlwIiwiYWN0aXZlRWxlbWVudHMiLCJkYXRhc2V0cyIsInBvaW50cyIsImJhcnMiLCJzZWdtZW50cyIsImhhc1ZhbHVlIiwiZmlsbCIsIl9zYXZlZCIsImZpbGxDb2xvciIsInN0cm9rZSIsInN0cm9rZUNvbG9yIiwiTXVsdGlUb29sdGlwIiwieFBhZGRpbmciLCJ5UGFkZGluZyIsInhPZmZzZXQiLCJ0ZXh0Q29sb3IiLCJmb250RmFtaWx5IiwiZm9udFN0eWxlIiwiZm9udFNpemUiLCJ0aXRsZVRleHRDb2xvciIsInRpdGxlRm9udEZhbWlseSIsInRpdGxlRm9udFN0eWxlIiwidGl0bGVGb250U2l6ZSIsImNvcm5lclJhZGl1cyIsImxlZ2VuZENvbG9ycyIsImxlZ2VuZENvbG9yQmFja2dyb3VuZCIsImxhYmVsIiwiY3VzdG9tIiwidG9vbHRpcFBvc2l0aW9uIiwiVG9vbHRpcCIsImNhcmV0SGVpZ2h0IiwidG9CYXNlNjRJbWFnZSIsInRvRGF0YVVSTCIsIkVsZW1lbnQiLCJzYXZlIiwicmVzdG9yZSIsIlBvaW50IiwiaW5SYW5nZSIsImhpdERldGVjdGlvblJhZGl1cyIsInJhZGl1cyIsImFyYyIsInN0cm9rZVN0eWxlIiwibGluZVdpZHRoIiwic3Ryb2tlV2lkdGgiLCJmaWxsU3R5bGUiLCJBcmMiLCJzdGFydEFuZ2xlIiwiZW5kQW5nbGUiLCJpbm5lclJhZGl1cyIsIm91dGVyUmFkaXVzIiwibGluZUpvaW4iLCJzaG93U3Ryb2tlIiwiUmVjdGFuZ2xlIiwieEFsaWduIiwieUFsaWduIiwiY2FyZXRQYWRkaW5nIiwidGV4dEFsaWduIiwidGV4dEJhc2VsaW5lIiwidGl0bGVGb250IiwiZ2V0TGluZUhlaWdodCIsImZpbGxSZWN0IiwiU2NhbGUiLCJmaXQiLCJidWlsZFlMYWJlbHMiLCJ5TGFiZWxzIiwidGVtcGxhdGVTdHJpbmciLCJ0b0ZpeGVkIiwieUxhYmVsV2lkdGgiLCJzaG93TGFiZWxzIiwiYWRkWExhYmVsIiwieExhYmVscyIsInZhbHVlc0NvdW50IiwicmVtb3ZlWExhYmVsIiwic3RhcnRQb2ludCIsImVuZFBvaW50IiwiY2FsY3VsYXRlWVJhbmdlIiwiY2FsY3VsYXRlWExhYmVsUm90YXRpb24iLCJ4U2NhbGVQYWRkaW5nUmlnaHQiLCJ4U2NhbGVQYWRkaW5nTGVmdCIsInhMYWJlbFJvdGF0aW9uIiwieExhYmVsV2lkdGgiLCJjYWxjdWxhdGVYIiwiZHJhd2luZ0FyZWEiLCJjYWxjdWxhdGVZIiwib2Zmc2V0R3JpZExpbmVzIiwic2hvd0hvcml6b250YWxMaW5lcyIsImdyaWRMaW5lV2lkdGgiLCJncmlkTGluZUNvbG9yIiwibGluZUNvbG9yIiwic2hvd1ZlcnRpY2FsTGluZXMiLCJ0cmFuc2xhdGUiLCJyb3RhdGUiLCJSYWRpYWxTY2FsZSIsImJhY2tkcm9wUGFkZGluZ1kiLCJjYWxjdWxhdGVDZW50ZXJPZmZzZXQiLCJsaW5lQXJjIiwic2V0U2NhbGVTaXplIiwiZ2V0Q2lyY3VtZmVyZW5jZSIsInBvaW50TGFiZWxGb250U2l6ZSIsInBvaW50TGFiZWxGb250U3R5bGUiLCJwb2ludExhYmVsRm9udEZhbWlseSIsImdldFBvaW50UG9zaXRpb24iLCJnZXRJbmRleEFuZ2xlIiwic2V0Q2VudGVyUG9pbnQiLCJ4Q2VudGVyIiwieUNlbnRlciIsInNob3dMYWJlbEJhY2tkcm9wIiwiYmFja2Ryb3BDb2xvciIsImJhY2tkcm9wUGFkZGluZ1giLCJmb250Q29sb3IiLCJhbmdsZUxpbmVXaWR0aCIsImFuZ2xlTGluZUNvbG9yIiwicG9pbnRMYWJlbEZvbnRDb2xvciIsInNjYWxlU2hvd0dyaWRMaW5lcyIsInNjYWxlR3JpZExpbmVDb2xvciIsInNjYWxlR3JpZExpbmVXaWR0aCIsInNjYWxlU2hvd0hvcml6b250YWxMaW5lcyIsInNjYWxlU2hvd1ZlcnRpY2FsTGluZXMiLCJiYXJTaG93U3Ryb2tlIiwiYmFyU3Ryb2tlV2lkdGgiLCJiYXJWYWx1ZVNwYWNpbmciLCJiYXJEYXRhc2V0U3BhY2luZyIsIlNjYWxlQ2xhc3MiLCJjYWxjdWxhdGVCYXJYIiwiY2FsY3VsYXRlQmFzZVdpZHRoIiwiY2FsY3VsYXRlQmFyV2lkdGgiLCJnZXRCYXJzQXRFdmVudCIsImVhY2hCYXJzIiwiaGlnaGxpZ2h0RmlsbCIsImhpZ2hsaWdodFN0cm9rZSIsIkJhckNsYXNzIiwiZGF0YXNldExhYmVsIiwiYnVpbGRTY2FsZSIsImJlZ2luQXRaZXJvIiwiaW50ZWdlcnNPbmx5IiwiYWRkRGF0YSIsInNlZ21lbnRTaG93U3Ryb2tlIiwic2VnbWVudFN0cm9rZUNvbG9yIiwic2VnbWVudFN0cm9rZVdpZHRoIiwicGVyY2VudGFnZUlubmVyQ3V0b3V0IiwiYW5pbWF0ZVJvdGF0ZSIsImFuaW1hdGVTY2FsZSIsIlNlZ21lbnRBcmMiLCJnZXRTZWdtZW50c0F0RXZlbnQiLCJoaWdobGlnaHRDb2xvciIsImNhbGN1bGF0ZVRvdGFsIiwiY29sb3IiLCJoaWdobGlnaHQiLCJjaXJjdW1mZXJlbmNlIiwiY2FsY3VsYXRlQ2lyY3VtZmVyZW5jZSIsInRvdGFsIiwiRG91Z2hudXQiLCJiZXppZXJDdXJ2ZSIsImJlemllckN1cnZlVGVuc2lvbiIsInBvaW50RG90IiwicG9pbnREb3RSYWRpdXMiLCJwb2ludERvdFN0cm9rZVdpZHRoIiwicG9pbnRIaXREZXRlY3Rpb25SYWRpdXMiLCJkYXRhc2V0U3Ryb2tlIiwiZGF0YXNldFN0cm9rZVdpZHRoIiwiZGF0YXNldEZpbGwiLCJQb2ludENsYXNzIiwiZ2V0UG9pbnRzQXRFdmVudCIsImVhY2hQb2ludHMiLCJwb2ludENvbG9yIiwicG9pbnRTdHJva2VDb2xvciIsInBvaW50SGlnaGxpZ2h0RmlsbCIsInBvaW50SGlnaGxpZ2h0U3Ryb2tlIiwiY29udHJvbFBvaW50cyIsImJlemllckN1cnZlVG8iLCJzY2FsZVNob3dMYWJlbEJhY2tkcm9wIiwic2NhbGVCYWNrZHJvcENvbG9yIiwic2NhbGVCYWNrZHJvcFBhZGRpbmdZIiwic2NhbGVCYWNrZHJvcFBhZGRpbmdYIiwic2NhbGVTaG93TGluZSIsInVwZGF0ZVNjYWxlUmFuZ2UiLCJhbmdsZVNob3dMaW5lT3V0Iiwic3RhciIsInRlYW1Ub2dnbGUiLCJjaGVja0FsbCIsImNvdW50Q2FydCIsInBob3RvIiwiY2FydENoYXJ0VHJpZ2dlciIsIm1vYmlsZVRibCIsIiR0YmwiLCIkdGFnIiwiJHN0YXIiLCIkc3RhclRvZ2dsZSIsIiR0eHQiLCIkdGVhbUl0ZW0iLCIkdGVhbUNvbnQiLCIkaGVpZ2h0QXJyIiwiJGhlaWdodCIsIiR0aGlzQ29udCIsIiRpZCIsIiRib3giLCIkY2hlY2tib3hlcyIsIiRjaGVja1RyaWdnZXIiLCJSYWRhciIsImdldENoYXIiLCIkY291bnQiLCIkaW5wdXQiLCJjdHJsS2V5IiwiYWx0S2V5IiwibWV0YUtleSIsImNociIsIiRwaG90b0JveCIsIiRiaWciLCIkYmlnSW1nIiwiJG1pbmkiXSwibWFwcGluZ3MiOiJBQTJCQUEsT0FBT0MsVUFBWSxTQUFXRCxFQUFRRSxFQUFVQyxHQXdRNUMsUUFBU0MsR0FBUUMsR0FDYkMsRUFBT0MsUUFBVUYsRUFNckIsUUFBU0csR0FBV0MsRUFBTUMsR0FDdEIsTUFBT04sR0FBT08sRUFBU0MsS0FBS0gsRUFBTyxNQUFTQyxHQUFRLEtBTXhELFFBQVNHLEdBQUlDLEVBQUtDLEdBQ2QsYUFBY0QsS0FBUUMsRUFNMUIsUUFBU0MsR0FBVVgsRUFBS1ksR0FDcEIsVUFBVyxHQUFLWixHQUFLYSxRQUFR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QUFTLGNBQWUsQ0FFaEMsR0FBVSxHQUFOOXVCLEVBQ0EsT0FBTyxDQUVQQSxLQUdKNm9DLEVBQVEvWixTQUFTLGVBQ2pCOXVCLElBR0p5ckQsRUFBT3pyRCxJQUFJQSxNQU1mcXFELE1BQVEsV0FDUixHQUFJeUIsR0FBWXB6QixFQUFFLGFBQ2RxekIsRUFBT0QsRUFBVXg2QyxLQUFLLDhCQUN0QjA2QyxFQUFVRixFQUFVeDZDLEtBQUssZ0NBQ3pCMjZDLEVBQVFILEVBQVV4NkMsS0FBSyw0QkFDM0IyNkMsR0FBTW5uQyxHQUFHLFFBQVMsU0FBU3R3QixHQUN4QixHQUFJK3BDLEdBQVE3RixFQUFFeG1DLE1BQ1YwTyxFQUFRMjlCLEVBQU0zOUIsUUFDZHdYLEVBQU9tbUIsRUFBTWp0QixLQUFLLE9BQU8vYSxLQUFLLE9BSWpDLE9BSEF3MUQsR0FBS3I5QixZQUFZLFVBQ2pCcTlCLEVBQUtyaUQsR0FBRzlJLEdBQU8wdEIsU0FBUyxVQUN4QjA5QixFQUFRLy9ELEtBQUssTUFBT21zQixJQUNiIiwiZmlsZSI6Im1haW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxyXG4gKiBUaGlyZCBwYXJ0eVxyXG4gKi9cclxuLyohXHJcbiAqIE1vZGVybml6ciB2Mi44LjNcclxuICogd3d3Lm1vZGVybml6ci5jb21cclxuICpcclxuICogQ29weXJpZ2h0IChjKSBGYXJ1ayBBdGVzLCBQYXVsIElyaXNoLCBBbGV4IFNleHRvblxyXG4gKiBBdmFpbGFibGUgdW5kZXIgdGhlIEJTRCBhbmQgTUlUIGxpY2Vuc2VzOiB3d3cubW9kZXJuaXpyLmNvbS9saWNlbnNlL1xyXG4gKi9cclxuXHJcbi8qXHJcbiAqIE1vZGVybml6ciB0ZXN0cyB3aGljaCBuYXRpdmUgQ1NTMyBhbmQgSFRNTDUgZmVhdHVyZXMgYXJlIGF2YWlsYWJsZSBpblxyXG4gKiB0aGUgY3VycmVudCBVQSBhbmQgbWFrZXMgdGhlIHJlc3VsdHMgYXZhaWxhYmxlIHRvIHlvdSBpbiB0d28gd2F5czpcclxuICogYXMgcHJvcGVydGllcyBvbiBhIGdsb2JhbCBNb2Rlcm5penIgb2JqZWN0LCBhbmQgYXMgY2xhc3NlcyBvbiB0aGVcclxuICogPGh0bWw+IGVsZW1lbnQuIFRoaXMgaW5mb3JtYXRpb24gYWxsb3dzIHlvdSB0byBwcm9ncmVzc2l2ZWx5IGVuaGFuY2VcclxuICogeW91ciBwYWdlcyB3aXRoIGEgZ3JhbnVsYXIgbGV2ZWwgb2YgY29udHJvbCBvdmVyIHRoZSBleHBlcmllbmNlLlxyXG4gKlxyXG4gKiBNb2Rlcm5penIgaGFzIGFuIG9wdGlvbmFsIChub3QgaW5jbHVkZWQpIGNvbmRpdGlvbmFsIHJlc291cmNlIGxvYWRlclxyXG4gKiBjYWxsZWQgTW9kZXJuaXpyLmxvYWQoKSwgYmFzZWQgb24gWWVwbm9wZS5qcyAoeWVwbm9wZWpzLmNvbSkuXHJcbiAqIFRvIGdldCBhIGJ1aWxkIHRoYXQgaW5jbHVkZXMgTW9kZXJuaXpyLmxvYWQoKSwgYXMgd2VsbCBhcyBjaG9vc2luZ1xyXG4gKiB3aGljaCB0ZXN0cyB0byBpbmNsdWRlLCBnbyB0byB3d3cubW9kZXJuaXpyLmNvbS9kb3dubG9hZC9cclxuICpcclxuICogQXV0aG9ycyAgICAgICAgRmFydWsgQXRlcywgUGF1bCBJcmlzaCwgQWxleCBTZXh0b25cclxuICogQ29udHJpYnV0b3JzICAgUnlhbiBTZWRkb24sIEJlbiBBbG1hblxyXG4gKi9cclxuXHJcbndpbmRvdy5Nb2Rlcm5penIgPSAoZnVuY3Rpb24oIHdpbmRvdywgZG9jdW1lbnQsIHVuZGVmaW5lZCApIHtcclxuXHJcbiAgICB2YXIgdmVyc2lvbiA9ICcyLjguMycsXHJcblxyXG4gICAgTW9kZXJuaXpyID0ge30sXHJcblxyXG4gICAgLyo+PmNzc2NsYXNzZXMqL1xyXG4gICAgLy8gb3B0aW9uIGZvciBlbmFibGluZyB0aGUgSFRNTCBjbGFzc2VzIHRvIGJlIGFkZGVkXHJcbiAgICBlbmFibGVDbGFzc2VzID0gdHJ1ZSxcclxuICAgIC8qPj5jc3NjbGFzc2VzKi9cclxuXHJcbiAgICBkb2NFbGVtZW50ID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlIG91ciBcIm1vZGVybml6clwiIGVsZW1lbnQgdGhhdCB3ZSBkbyBtb3N0IGZlYXR1cmUgdGVzdHMgb24uXHJcbiAgICAgKi9cclxuICAgIG1vZCA9ICdtb2Rlcm5penInLFxyXG4gICAgbW9kRWxlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQobW9kKSxcclxuICAgIG1TdHlsZSA9IG1vZEVsZW0uc3R5bGUsXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGUgdGhlIGlucHV0IGVsZW1lbnQgZm9yIHZhcmlvdXMgV2ViIEZvcm1zIGZlYXR1cmUgdGVzdHMuXHJcbiAgICAgKi9cclxuICAgIGlucHV0RWxlbSAvKj4+aW5wdXRlbGVtKi8gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbnB1dCcpIC8qPj5pbnB1dGVsZW0qLyAsXHJcblxyXG4gICAgLyo+PnNtaWxlKi9cclxuICAgIHNtaWxlID0gJzopJyxcclxuICAgIC8qPj5zbWlsZSovXHJcblxyXG4gICAgdG9TdHJpbmcgPSB7fS50b1N0cmluZyxcclxuXHJcbiAgICAvLyBUT0RPIDo6IG1ha2UgdGhlIHByZWZpeGVzIG1vcmUgZ3JhbnVsYXJcclxuICAgIC8qPj5wcmVmaXhlcyovXHJcbiAgICAvLyBMaXN0IG9mIHByb3BlcnR5IHZhbHVlcyB0byBzZXQgZm9yIGNzcyB0ZXN0cy4gU2VlIHRpY2tldCAjMjFcclxuICAgIHByZWZpeGVzID0gJyAtd2Via2l0LSAtbW96LSAtby0gLW1zLSAnLnNwbGl0KCcgJyksXHJcbiAgICAvKj4+cHJlZml4ZXMqL1xyXG5cclxuICAgIC8qPj5kb21wcmVmaXhlcyovXHJcbiAgICAvLyBGb2xsb3dpbmcgc3BlYyBpcyB0byBleHBvc2UgdmVuZG9yLXNwZWNpZmljIHN0eWxlIHByb3BlcnRpZXMgYXM6XHJcbiAgICAvLyAgIGVsZW0uc3R5bGUuV2Via2l0Qm9yZGVyUmFkaXVzXHJcbiAgICAvLyBhbmQgdGhlIGZvbGxvd2luZyB3b3VsZCBiZSBpbmNvcnJlY3Q6XHJcbiAgICAvLyAgIGVsZW0uc3R5bGUud2Via2l0Qm9yZGVyUmFkaXVzXHJcblxyXG4gICAgLy8gV2Via2l0IGdob3N0cyB0aGVpciBwcm9wZXJ0aWVzIGluIGxvd2VyY2FzZSBidXQgT3BlcmEgJiBNb3ogZG8gbm90LlxyXG4gICAgLy8gTWljcm9zb2Z0IHVzZXMgYSBsb3dlcmNhc2UgYG1zYCBpbnN0ZWFkIG9mIHRoZSBjb3JyZWN0IGBNc2AgaW4gSUU4K1xyXG4gICAgLy8gICBlcmlrLmVhZS5uZXQvYXJjaGl2ZXMvMjAwOC8wMy8xMC8yMS40OC4xMC9cclxuXHJcbiAgICAvLyBNb3JlIGhlcmU6IGdpdGh1Yi5jb20vTW9kZXJuaXpyL01vZGVybml6ci9pc3N1ZXMvaXNzdWUvMjFcclxuICAgIG9tUHJlZml4ZXMgPSAnV2Via2l0IE1veiBPIG1zJyxcclxuXHJcbiAgICBjc3NvbVByZWZpeGVzID0gb21QcmVmaXhlcy5zcGxpdCgnICcpLFxyXG5cclxuICAgIGRvbVByZWZpeGVzID0gb21QcmVmaXhlcy50b0xvd2VyQ2FzZSgpLnNwbGl0KCcgJyksXHJcbiAgICAvKj4+ZG9tcHJlZml4ZXMqL1xyXG5cclxuICAgIC8qPj5ucyovXHJcbiAgICBucyA9IHsnc3ZnJzogJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJ30sXHJcbiAgICAvKj4+bnMqL1xyXG5cclxuICAgIHRlc3RzID0ge30sXHJcbiAgICBpbnB1dHMgPSB7fSxcclxuICAgIGF0dHJzID0ge30sXHJcblxyXG4gICAgY2xhc3NlcyA9IFtdLFxyXG5cclxuICAgIHNsaWNlID0gY2xhc3Nlcy5zbGljZSxcclxuXHJcbiAgICBmZWF0dXJlTmFtZSwgLy8gdXNlZCBpbiB0ZXN0aW5nIGxvb3BcclxuXHJcblxyXG4gICAgLyo+PnRlc3RzdHlsZXMqL1xyXG4gICAgLy8gSW5qZWN0IGVsZW1lbnQgd2l0aCBzdHlsZSBlbGVtZW50IGFuZCBzb21lIENTUyBydWxlc1xyXG4gICAgaW5qZWN0RWxlbWVudFdpdGhTdHlsZXMgPSBmdW5jdGlvbiggcnVsZSwgY2FsbGJhY2ssIG5vZGVzLCB0ZXN0bmFtZXMgKSB7XHJcblxyXG4gICAgICB2YXIgc3R5bGUsIHJldCwgbm9kZSwgZG9jT3ZlcmZsb3csXHJcbiAgICAgICAgICBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKSxcclxuICAgICAgICAgIC8vIEFmdGVyIHBhZ2UgbG9hZCBpbmplY3RpbmcgYSBmYWtlIGJvZHkgZG9lc24ndCB3b3JrIHNvIGNoZWNrIGlmIGJvZHkgZXhpc3RzXHJcbiAgICAgICAgICBib2R5ID0gZG9jdW1lbnQuYm9keSxcclxuICAgICAgICAgIC8vIElFNiBhbmQgNyB3b24ndCByZXR1cm4gb2Zmc2V0V2lkdGggb3Igb2Zmc2V0SGVpZ2h0IHVubGVzcyBpdCdzIGluIHRoZSBib2R5IGVsZW1lbnQsIHNvIHdlIGZha2UgaXQuXHJcbiAgICAgICAgICBmYWtlQm9keSA9IGJvZHkgfHwgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYm9keScpO1xyXG5cclxuICAgICAgaWYgKCBwYXJzZUludChub2RlcywgMTApICkge1xyXG4gICAgICAgICAgLy8gSW4gb3JkZXIgbm90IHRvIGdpdmUgZmFsc2UgcG9zaXRpdmVzIHdlIGNyZWF0ZSBhIG5vZGUgZm9yIGVhY2ggdGVzdFxyXG4gICAgICAgICAgLy8gVGhpcyBhbHNvIGFsbG93cyB0aGUgbWV0aG9kIHRvIHNjYWxlIGZvciB1bnNwZWNpZmllZCB1c2VzXHJcbiAgICAgICAgICB3aGlsZSAoIG5vZGVzLS0gKSB7XHJcbiAgICAgICAgICAgICAgbm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICAgICAgICAgIG5vZGUuaWQgPSB0ZXN0bmFtZXMgPyB0ZXN0bmFtZXNbbm9kZXNdIDogbW9kICsgKG5vZGVzICsgMSk7XHJcbiAgICAgICAgICAgICAgZGl2LmFwcGVuZENoaWxkKG5vZGUpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyA8c3R5bGU+IGVsZW1lbnRzIGluIElFNi05IGFyZSBjb25zaWRlcmVkICdOb1Njb3BlJyBlbGVtZW50cyBhbmQgdGhlcmVmb3JlIHdpbGwgYmUgcmVtb3ZlZFxyXG4gICAgICAvLyB3aGVuIGluamVjdGVkIHdpdGggaW5uZXJIVE1MLiBUbyBnZXQgYXJvdW5kIHRoaXMgeW91IG5lZWQgdG8gcHJlcGVuZCB0aGUgJ05vU2NvcGUnIGVsZW1lbnRcclxuICAgICAgLy8gd2l0aCBhICdzY29wZWQnIGVsZW1lbnQsIGluIG91ciBjYXNlIHRoZSBzb2Z0LWh5cGhlbiBlbnRpdHkgYXMgaXQgd29uJ3QgbWVzcyB3aXRoIG91ciBtZWFzdXJlbWVudHMuXHJcbiAgICAgIC8vIG1zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L21zNTMzODk3JTI4VlMuODUlMjkuYXNweFxyXG4gICAgICAvLyBEb2N1bWVudHMgc2VydmVkIGFzIHhtbCB3aWxsIHRocm93IGlmIHVzaW5nICZzaHk7IHNvIHVzZSB4bWwgZnJpZW5kbHkgZW5jb2RlZCB2ZXJzaW9uLiBTZWUgaXNzdWUgIzI3N1xyXG4gICAgICBzdHlsZSA9IFsnJiMxNzM7JywnPHN0eWxlIGlkPVwicycsIG1vZCwgJ1wiPicsIHJ1bGUsICc8L3N0eWxlPiddLmpvaW4oJycpO1xyXG4gICAgICBkaXYuaWQgPSBtb2Q7XHJcbiAgICAgIC8vIElFNiB3aWxsIGZhbHNlIHBvc2l0aXZlIG9uIHNvbWUgdGVzdHMgZHVlIHRvIHRoZSBzdHlsZSBlbGVtZW50IGluc2lkZSB0aGUgdGVzdCBkaXYgc29tZWhvdyBpbnRlcmZlcmluZyBvZmZzZXRIZWlnaHQsIHNvIGluc2VydCBpdCBpbnRvIGJvZHkgb3IgZmFrZWJvZHkuXHJcbiAgICAgIC8vIE9wZXJhIHdpbGwgYWN0IGFsbCBxdWlya3kgd2hlbiBpbmplY3RpbmcgZWxlbWVudHMgaW4gZG9jdW1lbnRFbGVtZW50IHdoZW4gcGFnZSBpcyBzZXJ2ZWQgYXMgeG1sLCBuZWVkcyBmYWtlYm9keSB0b28uICMyNzBcclxuICAgICAgKGJvZHkgPyBkaXYgOiBmYWtlQm9keSkuaW5uZXJIVE1MICs9IHN0eWxlO1xyXG4gICAgICBmYWtlQm9keS5hcHBlbmRDaGlsZChkaXYpO1xyXG4gICAgICBpZiAoICFib2R5ICkge1xyXG4gICAgICAgICAgLy9hdm9pZCBjcmFzaGluZyBJRTgsIGlmIGJhY2tncm91bmQgaW1hZ2UgaXMgdXNlZFxyXG4gICAgICAgICAgZmFrZUJvZHkuc3R5bGUuYmFja2dyb3VuZCA9ICcnO1xyXG4gICAgICAgICAgLy9TYWZhcmkgNS4xMy81LjEuNCBPU1ggc3RvcHMgbG9hZGluZyBpZiA6Oi13ZWJraXQtc2Nyb2xsYmFyIGlzIHVzZWQgYW5kIHNjcm9sbGJhcnMgYXJlIHZpc2libGVcclxuICAgICAgICAgIGZha2VCb2R5LnN0eWxlLm92ZXJmbG93ID0gJ2hpZGRlbic7XHJcbiAgICAgICAgICBkb2NPdmVyZmxvdyA9IGRvY0VsZW1lbnQuc3R5bGUub3ZlcmZsb3c7XHJcbiAgICAgICAgICBkb2NFbGVtZW50LnN0eWxlLm92ZXJmbG93ID0gJ2hpZGRlbic7XHJcbiAgICAgICAgICBkb2NFbGVtZW50LmFwcGVuZENoaWxkKGZha2VCb2R5KTtcclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0ID0gY2FsbGJhY2soZGl2LCBydWxlKTtcclxuICAgICAgLy8gSWYgdGhpcyBpcyBkb25lIGFmdGVyIHBhZ2UgbG9hZCB3ZSBkb24ndCB3YW50IHRvIHJlbW92ZSB0aGUgYm9keSBzbyBjaGVjayBpZiBib2R5IGV4aXN0c1xyXG4gICAgICBpZiAoICFib2R5ICkge1xyXG4gICAgICAgICAgZmFrZUJvZHkucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChmYWtlQm9keSk7XHJcbiAgICAgICAgICBkb2NFbGVtZW50LnN0eWxlLm92ZXJmbG93ID0gZG9jT3ZlcmZsb3c7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBkaXYucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChkaXYpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICByZXR1cm4gISFyZXQ7XHJcblxyXG4gICAgfSxcclxuICAgIC8qPj50ZXN0c3R5bGVzKi9cclxuXHJcbiAgICAvKj4+bXEqL1xyXG4gICAgLy8gYWRhcHRlZCBmcm9tIG1hdGNoTWVkaWEgcG9seWZpbGxcclxuICAgIC8vIGJ5IFNjb3R0IEplaGwgYW5kIFBhdWwgSXJpc2hcclxuICAgIC8vIGdpc3QuZ2l0aHViLmNvbS83ODY3NjhcclxuICAgIHRlc3RNZWRpYVF1ZXJ5ID0gZnVuY3Rpb24oIG1xICkge1xyXG5cclxuICAgICAgdmFyIG1hdGNoTWVkaWEgPSB3aW5kb3cubWF0Y2hNZWRpYSB8fCB3aW5kb3cubXNNYXRjaE1lZGlhO1xyXG4gICAgICBpZiAoIG1hdGNoTWVkaWEgKSB7XHJcbiAgICAgICAgcmV0dXJuIG1hdGNoTWVkaWEobXEpICYmIG1hdGNoTWVkaWEobXEpLm1hdGNoZXMgfHwgZmFsc2U7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHZhciBib29sO1xyXG5cclxuICAgICAgaW5qZWN0RWxlbWVudFdpdGhTdHlsZXMoJ0BtZWRpYSAnICsgbXEgKyAnIHsgIycgKyBtb2QgKyAnIHsgcG9zaXRpb246IGFic29sdXRlOyB9IH0nLCBmdW5jdGlvbiggbm9kZSApIHtcclxuICAgICAgICBib29sID0gKHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlID9cclxuICAgICAgICAgICAgICAgICAgZ2V0Q29tcHV0ZWRTdHlsZShub2RlLCBudWxsKSA6XHJcbiAgICAgICAgICAgICAgICAgIG5vZGUuY3VycmVudFN0eWxlKVsncG9zaXRpb24nXSA9PSAnYWJzb2x1dGUnO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIHJldHVybiBib29sO1xyXG5cclxuICAgICB9LFxyXG4gICAgIC8qPj5tcSovXHJcblxyXG5cclxuICAgIC8qPj5oYXNldmVudCovXHJcbiAgICAvL1xyXG4gICAgLy8gaXNFdmVudFN1cHBvcnRlZCBkZXRlcm1pbmVzIGlmIGEgZ2l2ZW4gZWxlbWVudCBzdXBwb3J0cyB0aGUgZ2l2ZW4gZXZlbnRcclxuICAgIC8vIGthbmdheC5naXRodWIuY29tL2lzZXZlbnRzdXBwb3J0ZWQvXHJcbiAgICAvL1xyXG4gICAgLy8gVGhlIGZvbGxvd2luZyByZXN1bHRzIGFyZSBrbm93biBpbmNvcnJlY3RzOlxyXG4gICAgLy8gICBNb2Rlcm5penIuaGFzRXZlbnQoXCJ3ZWJraXRUcmFuc2l0aW9uRW5kXCIsIGVsZW0pIC8vIGZhbHNlIG5lZ2F0aXZlXHJcbiAgICAvLyAgIE1vZGVybml6ci5oYXNFdmVudChcInRleHRJbnB1dFwiKSAvLyBpbiBXZWJraXQuIGdpdGh1Yi5jb20vTW9kZXJuaXpyL01vZGVybml6ci9pc3N1ZXMvMzMzXHJcbiAgICAvLyAgIC4uLlxyXG4gICAgaXNFdmVudFN1cHBvcnRlZCA9IChmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgIHZhciBUQUdOQU1FUyA9IHtcclxuICAgICAgICAnc2VsZWN0JzogJ2lucHV0JywgJ2NoYW5nZSc6ICdpbnB1dCcsXHJcbiAgICAgICAgJ3N1Ym1pdCc6ICdmb3JtJywgJ3Jlc2V0JzogJ2Zvcm0nLFxyXG4gICAgICAgICdlcnJvcic6ICdpbWcnLCAnbG9hZCc6ICdpbWcnLCAnYWJvcnQnOiAnaW1nJ1xyXG4gICAgICB9O1xyXG5cclxuICAgICAgZnVuY3Rpb24gaXNFdmVudFN1cHBvcnRlZCggZXZlbnROYW1lLCBlbGVtZW50ICkge1xyXG5cclxuICAgICAgICBlbGVtZW50ID0gZWxlbWVudCB8fCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFRBR05BTUVTW2V2ZW50TmFtZV0gfHwgJ2RpdicpO1xyXG4gICAgICAgIGV2ZW50TmFtZSA9ICdvbicgKyBldmVudE5hbWU7XHJcblxyXG4gICAgICAgIC8vIFdoZW4gdXNpbmcgYHNldEF0dHJpYnV0ZWAsIElFIHNraXBzIFwidW5sb2FkXCIsIFdlYktpdCBza2lwcyBcInVubG9hZFwiIGFuZCBcInJlc2l6ZVwiLCB3aGVyZWFzIGBpbmAgXCJjYXRjaGVzXCIgdGhvc2VcclxuICAgICAgICB2YXIgaXNTdXBwb3J0ZWQgPSBldmVudE5hbWUgaW4gZWxlbWVudDtcclxuXHJcbiAgICAgICAgaWYgKCAhaXNTdXBwb3J0ZWQgKSB7XHJcbiAgICAgICAgICAvLyBJZiBpdCBoYXMgbm8gYHNldEF0dHJpYnV0ZWAgKGkuZS4gZG9lc24ndCBpbXBsZW1lbnQgTm9kZSBpbnRlcmZhY2UpLCB0cnkgZ2VuZXJpYyBlbGVtZW50XHJcbiAgICAgICAgICBpZiAoICFlbGVtZW50LnNldEF0dHJpYnV0ZSApIHtcclxuICAgICAgICAgICAgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgaWYgKCBlbGVtZW50LnNldEF0dHJpYnV0ZSAmJiBlbGVtZW50LnJlbW92ZUF0dHJpYnV0ZSApIHtcclxuICAgICAgICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoZXZlbnROYW1lLCAnJyk7XHJcbiAgICAgICAgICAgIGlzU3VwcG9ydGVkID0gaXMoZWxlbWVudFtldmVudE5hbWVdLCAnZnVuY3Rpb24nKTtcclxuXHJcbiAgICAgICAgICAgIC8vIElmIHByb3BlcnR5IHdhcyBjcmVhdGVkLCBcInJlbW92ZSBpdFwiIChieSBzZXR0aW5nIHZhbHVlIHRvIGB1bmRlZmluZWRgKVxyXG4gICAgICAgICAgICBpZiAoICFpcyhlbGVtZW50W2V2ZW50TmFtZV0sICd1bmRlZmluZWQnKSApIHtcclxuICAgICAgICAgICAgICBlbGVtZW50W2V2ZW50TmFtZV0gPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoZXZlbnROYW1lKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGVsZW1lbnQgPSBudWxsO1xyXG4gICAgICAgIHJldHVybiBpc1N1cHBvcnRlZDtcclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gaXNFdmVudFN1cHBvcnRlZDtcclxuICAgIH0pKCksXHJcbiAgICAvKj4+aGFzZXZlbnQqL1xyXG5cclxuICAgIC8vIFRPRE8gOjogQWRkIGZsYWcgZm9yIGhhc293bnByb3AgPyBkaWRuJ3QgbGFzdCB0aW1lXHJcblxyXG4gICAgLy8gaGFzT3duUHJvcGVydHkgc2hpbSBieSBrYW5nYXggbmVlZGVkIGZvciBTYWZhcmkgMi4wIHN1cHBvcnRcclxuICAgIF9oYXNPd25Qcm9wZXJ0eSA9ICh7fSkuaGFzT3duUHJvcGVydHksIGhhc093blByb3A7XHJcblxyXG4gICAgaWYgKCAhaXMoX2hhc093blByb3BlcnR5LCAndW5kZWZpbmVkJykgJiYgIWlzKF9oYXNPd25Qcm9wZXJ0eS5jYWxsLCAndW5kZWZpbmVkJykgKSB7XHJcbiAgICAgIGhhc093blByb3AgPSBmdW5jdGlvbiAob2JqZWN0LCBwcm9wZXJ0eSkge1xyXG4gICAgICAgIHJldHVybiBfaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTtcclxuICAgICAgfTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICBoYXNPd25Qcm9wID0gZnVuY3Rpb24gKG9iamVjdCwgcHJvcGVydHkpIHsgLyogeWVzLCB0aGlzIGNhbiBnaXZlIGZhbHNlIHBvc2l0aXZlcy9uZWdhdGl2ZXMsIGJ1dCBtb3N0IG9mIHRoZSB0aW1lIHdlIGRvbid0IGNhcmUgYWJvdXQgdGhvc2UgKi9cclxuICAgICAgICByZXR1cm4gKChwcm9wZXJ0eSBpbiBvYmplY3QpICYmIGlzKG9iamVjdC5jb25zdHJ1Y3Rvci5wcm90b3R5cGVbcHJvcGVydHldLCAndW5kZWZpbmVkJykpO1xyXG4gICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIC8vIEFkYXB0ZWQgZnJvbSBFUzUtc2hpbSBodHRwczovL2dpdGh1Yi5jb20va3Jpc2tvd2FsL2VzNS1zaGltL2Jsb2IvbWFzdGVyL2VzNS1zaGltLmpzXHJcbiAgICAvLyBlczUuZ2l0aHViLmNvbS8jeDE1LjMuNC41XHJcblxyXG4gICAgaWYgKCFGdW5jdGlvbi5wcm90b3R5cGUuYmluZCkge1xyXG4gICAgICBGdW5jdGlvbi5wcm90b3R5cGUuYmluZCA9IGZ1bmN0aW9uIGJpbmQodGhhdCkge1xyXG5cclxuICAgICAgICB2YXIgdGFyZ2V0ID0gdGhpcztcclxuXHJcbiAgICAgICAgaWYgKHR5cGVvZiB0YXJnZXQgIT0gXCJmdW5jdGlvblwiKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBhcmdzID0gc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpLFxyXG4gICAgICAgICAgICBib3VuZCA9IGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzIGluc3RhbmNlb2YgYm91bmQpIHtcclxuXHJcbiAgICAgICAgICAgICAgdmFyIEYgPSBmdW5jdGlvbigpe307XHJcbiAgICAgICAgICAgICAgRi5wcm90b3R5cGUgPSB0YXJnZXQucHJvdG90eXBlO1xyXG4gICAgICAgICAgICAgIHZhciBzZWxmID0gbmV3IEYoKTtcclxuXHJcbiAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IHRhcmdldC5hcHBseShcclxuICAgICAgICAgICAgICAgICAgc2VsZixcclxuICAgICAgICAgICAgICAgICAgYXJncy5jb25jYXQoc2xpY2UuY2FsbChhcmd1bWVudHMpKVxyXG4gICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgaWYgKE9iamVjdChyZXN1bHQpID09PSByZXN1bHQpIHtcclxuICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgcmV0dXJuIHNlbGY7XHJcblxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG5cclxuICAgICAgICAgICAgICByZXR1cm4gdGFyZ2V0LmFwcGx5KFxyXG4gICAgICAgICAgICAgICAgICB0aGF0LFxyXG4gICAgICAgICAgICAgICAgICBhcmdzLmNvbmNhdChzbGljZS5jYWxsKGFyZ3VtZW50cykpXHJcbiAgICAgICAgICAgICAgKTtcclxuXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGJvdW5kO1xyXG4gICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogc2V0Q3NzIGFwcGxpZXMgZ2l2ZW4gc3R5bGVzIHRvIHRoZSBNb2Rlcm5penIgRE9NIG5vZGUuXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIHNldENzcyggc3RyICkge1xyXG4gICAgICAgIG1TdHlsZS5jc3NUZXh0ID0gc3RyO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogc2V0Q3NzQWxsIGV4dHJhcG9sYXRlcyBhbGwgdmVuZG9yLXNwZWNpZmljIGNzcyBzdHJpbmdzLlxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBzZXRDc3NBbGwoIHN0cjEsIHN0cjIgKSB7XHJcbiAgICAgICAgcmV0dXJuIHNldENzcyhwcmVmaXhlcy5qb2luKHN0cjEgKyAnOycpICsgKCBzdHIyIHx8ICcnICkpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogaXMgcmV0dXJucyBhIGJvb2xlYW4gZm9yIGlmIHR5cGVvZiBvYmogaXMgZXhhY3RseSB0eXBlLlxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBpcyggb2JqLCB0eXBlICkge1xyXG4gICAgICAgIHJldHVybiB0eXBlb2Ygb2JqID09PSB0eXBlO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogY29udGFpbnMgcmV0dXJucyBhIGJvb2xlYW4gZm9yIGlmIHN1YnN0ciBpcyBmb3VuZCB3aXRoaW4gc3RyLlxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBjb250YWlucyggc3RyLCBzdWJzdHIgKSB7XHJcbiAgICAgICAgcmV0dXJuICEhfignJyArIHN0cikuaW5kZXhPZihzdWJzdHIpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qPj50ZXN0cHJvcCovXHJcblxyXG4gICAgLy8gdGVzdFByb3BzIGlzIGEgZ2VuZXJpYyBDU1MgLyBET00gcHJvcGVydHkgdGVzdC5cclxuXHJcbiAgICAvLyBJbiB0ZXN0aW5nIHN1cHBvcnQgZm9yIGEgZ2l2ZW4gQ1NTIHByb3BlcnR5LCBpdCdzIGxlZ2l0IHRvIHRlc3Q6XHJcbiAgICAvLyAgICBgZWxlbS5zdHlsZVtzdHlsZU5hbWVdICE9PSB1bmRlZmluZWRgXHJcbiAgICAvLyBJZiB0aGUgcHJvcGVydHkgaXMgc3VwcG9ydGVkIGl0IHdpbGwgcmV0dXJuIGFuIGVtcHR5IHN0cmluZyxcclxuICAgIC8vIGlmIHVuc3VwcG9ydGVkIGl0IHdpbGwgcmV0dXJuIHVuZGVmaW5lZC5cclxuXHJcbiAgICAvLyBXZSdsbCB0YWtlIGFkdmFudGFnZSBvZiB0aGlzIHF1aWNrIHRlc3QgYW5kIHNraXAgc2V0dGluZyBhIHN0eWxlXHJcbiAgICAvLyBvbiBvdXIgbW9kZXJuaXpyIGVsZW1lbnQsIGJ1dCBpbnN0ZWFkIGp1c3QgdGVzdGluZyB1bmRlZmluZWQgdnNcclxuICAgIC8vIGVtcHR5IHN0cmluZy5cclxuXHJcbiAgICAvLyBCZWNhdXNlIHRoZSB0ZXN0aW5nIG9mIHRoZSBDU1MgcHJvcGVydHkgbmFtZXMgKHdpdGggXCItXCIsIGFzXHJcbiAgICAvLyBvcHBvc2VkIHRvIHRoZSBjYW1lbENhc2UgRE9NIHByb3BlcnRpZXMpIGlzIG5vbi1wb3J0YWJsZSBhbmRcclxuICAgIC8vIG5vbi1zdGFuZGFyZCBidXQgd29ya3MgaW4gV2ViS2l0IGFuZCBJRSAoYnV0IG5vdCBHZWNrbyBvciBPcGVyYSksXHJcbiAgICAvLyB3ZSBleHBsaWNpdGx5IHJlamVjdCBwcm9wZXJ0aWVzIHdpdGggZGFzaGVzIHNvIHRoYXQgYXV0aG9yc1xyXG4gICAgLy8gZGV2ZWxvcGluZyBpbiBXZWJLaXQgb3IgSUUgZmlyc3QgZG9uJ3QgZW5kIHVwIHdpdGhcclxuICAgIC8vIGJyb3dzZXItc3BlY2lmaWMgY29udGVudCBieSBhY2NpZGVudC5cclxuXHJcbiAgICBmdW5jdGlvbiB0ZXN0UHJvcHMoIHByb3BzLCBwcmVmaXhlZCApIHtcclxuICAgICAgICBmb3IgKCB2YXIgaSBpbiBwcm9wcyApIHtcclxuICAgICAgICAgICAgdmFyIHByb3AgPSBwcm9wc1tpXTtcclxuICAgICAgICAgICAgaWYgKCAhY29udGFpbnMocHJvcCwgXCItXCIpICYmIG1TdHlsZVtwcm9wXSAhPT0gdW5kZWZpbmVkICkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHByZWZpeGVkID09ICdwZngnID8gcHJvcCA6IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgLyo+PnRlc3Rwcm9wKi9cclxuXHJcbiAgICAvLyBUT0RPIDo6IGFkZCB0ZXN0RE9NUHJvcHNcclxuICAgIC8qKlxyXG4gICAgICogdGVzdERPTVByb3BzIGlzIGEgZ2VuZXJpYyBET00gcHJvcGVydHkgdGVzdDsgaWYgYSBicm93c2VyIHN1cHBvcnRzXHJcbiAgICAgKiAgIGEgY2VydGFpbiBwcm9wZXJ0eSwgaXQgd29uJ3QgcmV0dXJuIHVuZGVmaW5lZCBmb3IgaXQuXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIHRlc3RET01Qcm9wcyggcHJvcHMsIG9iaiwgZWxlbSApIHtcclxuICAgICAgICBmb3IgKCB2YXIgaSBpbiBwcm9wcyApIHtcclxuICAgICAgICAgICAgdmFyIGl0ZW0gPSBvYmpbcHJvcHNbaV1dO1xyXG4gICAgICAgICAgICBpZiAoIGl0ZW0gIT09IHVuZGVmaW5lZCkge1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIHJldHVybiB0aGUgcHJvcGVydHkgbmFtZSBhcyBhIHN0cmluZ1xyXG4gICAgICAgICAgICAgICAgaWYgKGVsZW0gPT09IGZhbHNlKSByZXR1cm4gcHJvcHNbaV07XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gbGV0J3MgYmluZCBhIGZ1bmN0aW9uXHJcbiAgICAgICAgICAgICAgICBpZiAoaXMoaXRlbSwgJ2Z1bmN0aW9uJykpe1xyXG4gICAgICAgICAgICAgICAgICAvLyBkZWZhdWx0IHRvIGF1dG9iaW5kIHVubGVzcyBvdmVycmlkZVxyXG4gICAgICAgICAgICAgICAgICByZXR1cm4gaXRlbS5iaW5kKGVsZW0gfHwgb2JqKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvLyByZXR1cm4gdGhlIHVuYm91bmQgZnVuY3Rpb24gb3Igb2JqIG9yIHZhbHVlXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gaXRlbTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgLyo+PnRlc3RhbGxwcm9wcyovXHJcbiAgICAvKipcclxuICAgICAqIHRlc3RQcm9wc0FsbCB0ZXN0cyBhIGxpc3Qgb2YgRE9NIHByb3BlcnRpZXMgd2Ugd2FudCB0byBjaGVjayBhZ2FpbnN0LlxyXG4gICAgICogICBXZSBzcGVjaWZ5IGxpdGVyYWxseSBBTEwgcG9zc2libGUgKGtub3duIGFuZC9vciBsaWtlbHkpIHByb3BlcnRpZXMgb25cclxuICAgICAqICAgdGhlIGVsZW1lbnQgaW5jbHVkaW5nIHRoZSBub24tdmVuZG9yIHByZWZpeGVkIG9uZSwgZm9yIGZvcndhcmQtXHJcbiAgICAgKiAgIGNvbXBhdGliaWxpdHkuXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIHRlc3RQcm9wc0FsbCggcHJvcCwgcHJlZml4ZWQsIGVsZW0gKSB7XHJcblxyXG4gICAgICAgIHZhciB1Y1Byb3AgID0gcHJvcC5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHByb3Auc2xpY2UoMSksXHJcbiAgICAgICAgICAgIHByb3BzICAgPSAocHJvcCArICcgJyArIGNzc29tUHJlZml4ZXMuam9pbih1Y1Byb3AgKyAnICcpICsgdWNQcm9wKS5zcGxpdCgnICcpO1xyXG5cclxuICAgICAgICAvLyBkaWQgdGhleSBjYWxsIC5wcmVmaXhlZCgnYm94U2l6aW5nJykgb3IgYXJlIHdlIGp1c3QgdGVzdGluZyBhIHByb3A/XHJcbiAgICAgICAgaWYoaXMocHJlZml4ZWQsIFwic3RyaW5nXCIpIHx8IGlzKHByZWZpeGVkLCBcInVuZGVmaW5lZFwiKSkge1xyXG4gICAgICAgICAgcmV0dXJuIHRlc3RQcm9wcyhwcm9wcywgcHJlZml4ZWQpO1xyXG5cclxuICAgICAgICAvLyBvdGhlcndpc2UsIHRoZXkgY2FsbGVkIC5wcmVmaXhlZCgncmVxdWVzdEFuaW1hdGlvbkZyYW1lJywgd2luZG93WywgZWxlbV0pXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHByb3BzID0gKHByb3AgKyAnICcgKyAoZG9tUHJlZml4ZXMpLmpvaW4odWNQcm9wICsgJyAnKSArIHVjUHJvcCkuc3BsaXQoJyAnKTtcclxuICAgICAgICAgIHJldHVybiB0ZXN0RE9NUHJvcHMocHJvcHMsIHByZWZpeGVkLCBlbGVtKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvKj4+dGVzdGFsbHByb3BzKi9cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUZXN0c1xyXG4gICAgICogLS0tLS1cclxuICAgICAqL1xyXG5cclxuICAgIC8vIFRoZSAqbmV3KiBmbGV4Ym94XHJcbiAgICAvLyBkZXYudzMub3JnL2Nzc3dnL2NzczMtZmxleGJveFxyXG5cclxuICAgIHRlc3RzWydmbGV4Ym94J10gPSBmdW5jdGlvbigpIHtcclxuICAgICAgcmV0dXJuIHRlc3RQcm9wc0FsbCgnZmxleFdyYXAnKTtcclxuICAgIH07XHJcblxyXG4gICAgLy8gVGhlICpvbGQqIGZsZXhib3hcclxuICAgIC8vIHd3dy53My5vcmcvVFIvMjAwOS9XRC1jc3MzLWZsZXhib3gtMjAwOTA3MjMvXHJcblxyXG4gICAgdGVzdHNbJ2ZsZXhib3hsZWdhY3knXSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiB0ZXN0UHJvcHNBbGwoJ2JveERpcmVjdGlvbicpO1xyXG4gICAgfTtcclxuXHJcbiAgICAvLyBPbiB0aGUgUzYwIGFuZCBCQiBTdG9ybSwgZ2V0Q29udGV4dCBleGlzdHMsIGJ1dCBhbHdheXMgcmV0dXJucyB1bmRlZmluZWRcclxuICAgIC8vIHNvIHdlIGFjdHVhbGx5IGhhdmUgdG8gY2FsbCBnZXRDb250ZXh0KCkgdG8gdmVyaWZ5XHJcbiAgICAvLyBnaXRodWIuY29tL01vZGVybml6ci9Nb2Rlcm5penIvaXNzdWVzL2lzc3VlLzk3L1xyXG5cclxuICAgIHRlc3RzWydjYW52YXMnXSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciBlbGVtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyk7XHJcbiAgICAgICAgcmV0dXJuICEhKGVsZW0uZ2V0Q29udGV4dCAmJiBlbGVtLmdldENvbnRleHQoJzJkJykpO1xyXG4gICAgfTtcclxuXHJcbiAgICB0ZXN0c1snY2FudmFzdGV4dCddID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgcmV0dXJuICEhKE1vZGVybml6clsnY2FudmFzJ10gJiYgaXMoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJykuZ2V0Q29udGV4dCgnMmQnKS5maWxsVGV4dCwgJ2Z1bmN0aW9uJykpO1xyXG4gICAgfTtcclxuXHJcbiAgICAvLyB3ZWJrLml0LzcwMTE3IGlzIHRyYWNraW5nIGEgbGVnaXQgV2ViR0wgZmVhdHVyZSBkZXRlY3QgcHJvcG9zYWxcclxuXHJcbiAgICAvLyBXZSBkbyBhIHNvZnQgZGV0ZWN0IHdoaWNoIG1heSBmYWxzZSBwb3NpdGl2ZSBpbiBvcmRlciB0byBhdm9pZFxyXG4gICAgLy8gYW4gZXhwZW5zaXZlIGNvbnRleHQgY3JlYXRpb246IGJ1Z3ppbC5sYS83MzI0NDFcclxuXHJcbiAgICB0ZXN0c1snd2ViZ2wnXSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiAhIXdpbmRvdy5XZWJHTFJlbmRlcmluZ0NvbnRleHQ7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qXHJcbiAgICAgKiBUaGUgTW9kZXJuaXpyLnRvdWNoIHRlc3Qgb25seSBpbmRpY2F0ZXMgaWYgdGhlIGJyb3dzZXIgc3VwcG9ydHNcclxuICAgICAqICAgIHRvdWNoIGV2ZW50cywgd2hpY2ggZG9lcyBub3QgbmVjZXNzYXJpbHkgcmVmbGVjdCBhIHRvdWNoc2NyZWVuXHJcbiAgICAgKiAgICBkZXZpY2UsIGFzIGV2aWRlbmNlZCBieSB0YWJsZXRzIHJ1bm5pbmcgV2luZG93cyA3IG9yLCBhbGFzLFxyXG4gICAgICogICAgdGhlIFBhbG0gUHJlIC8gV2ViT1MgKHRvdWNoKSBwaG9uZXMuXHJcbiAgICAgKlxyXG4gICAgICogQWRkaXRpb25hbGx5LCBDaHJvbWUgKGRlc2t0b3ApIHVzZWQgdG8gbGllIGFib3V0IGl0cyBzdXBwb3J0IG9uIHRoaXMsXHJcbiAgICAgKiAgICBidXQgdGhhdCBoYXMgc2luY2UgYmVlbiByZWN0aWZpZWQ6IGNyYnVnLmNvbS8zNjQxNVxyXG4gICAgICpcclxuICAgICAqIFdlIGFsc28gdGVzdCBmb3IgRmlyZWZveCA0IE11bHRpdG91Y2ggU3VwcG9ydC5cclxuICAgICAqXHJcbiAgICAgKiBGb3IgbW9yZSBpbmZvLCBzZWU6IG1vZGVybml6ci5naXRodWIuY29tL01vZGVybml6ci90b3VjaC5odG1sXHJcbiAgICAgKi9cclxuXHJcbiAgICB0ZXN0c1sndG91Y2gnXSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciBib29sO1xyXG5cclxuICAgICAgICBpZigoJ29udG91Y2hzdGFydCcgaW4gd2luZG93KSB8fCB3aW5kb3cuRG9jdW1lbnRUb3VjaCAmJiBkb2N1bWVudCBpbnN0YW5jZW9mIERvY3VtZW50VG91Y2gpIHtcclxuICAgICAgICAgIGJvb2wgPSB0cnVlO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBpbmplY3RFbGVtZW50V2l0aFN0eWxlcyhbJ0BtZWRpYSAoJyxwcmVmaXhlcy5qb2luKCd0b3VjaC1lbmFibGVkKSwoJyksbW9kLCcpJywneyNtb2Rlcm5penJ7dG9wOjlweDtwb3NpdGlvbjphYnNvbHV0ZX19J10uam9pbignJyksIGZ1bmN0aW9uKCBub2RlICkge1xyXG4gICAgICAgICAgICBib29sID0gbm9kZS5vZmZzZXRUb3AgPT09IDk7XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBib29sO1xyXG4gICAgfTtcclxuXHJcblxyXG4gICAgLy8gZ2VvbG9jYXRpb24gaXMgb2Z0ZW4gY29uc2lkZXJlZCBhIHRyaXZpYWwgZmVhdHVyZSBkZXRlY3QuLi5cclxuICAgIC8vIFR1cm5zIG91dCwgaXQncyBxdWl0ZSB0cmlja3kgdG8gZ2V0IHJpZ2h0OlxyXG4gICAgLy9cclxuICAgIC8vIFVzaW5nICEhbmF2aWdhdG9yLmdlb2xvY2F0aW9uIGRvZXMgdHdvIHRoaW5ncyB3ZSBkb24ndCB3YW50LiBJdDpcclxuICAgIC8vICAgMS4gTGVha3MgbWVtb3J5IGluIElFOTogZ2l0aHViLmNvbS9Nb2Rlcm5penIvTW9kZXJuaXpyL2lzc3Vlcy81MTNcclxuICAgIC8vICAgMi4gRGlzYWJsZXMgcGFnZSBjYWNoaW5nIGluIFdlYktpdDogd2Viay5pdC80Mzk1NlxyXG4gICAgLy9cclxuICAgIC8vIE1lYW53aGlsZSwgaW4gRmlyZWZveCA8IDgsIGFuIGFib3V0OmNvbmZpZyBzZXR0aW5nIGNvdWxkIGV4cG9zZVxyXG4gICAgLy8gYSBmYWxzZSBwb3NpdGl2ZSB0aGF0IHdvdWxkIHRocm93IGFuIGV4Y2VwdGlvbjogYnVnemlsLmxhLzY4ODE1OFxyXG5cclxuICAgIHRlc3RzWydnZW9sb2NhdGlvbiddID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgcmV0dXJuICdnZW9sb2NhdGlvbicgaW4gbmF2aWdhdG9yO1xyXG4gICAgfTtcclxuXHJcblxyXG4gICAgdGVzdHNbJ3Bvc3RtZXNzYWdlJ10gPSBmdW5jdGlvbigpIHtcclxuICAgICAgcmV0dXJuICEhd2luZG93LnBvc3RNZXNzYWdlO1xyXG4gICAgfTtcclxuXHJcblxyXG4gICAgLy8gQ2hyb21lIGluY29nbml0byBtb2RlIHVzZWQgdG8gdGhyb3cgYW4gZXhjZXB0aW9uIHdoZW4gdXNpbmcgb3BlbkRhdGFiYXNlXHJcbiAgICAvLyBJdCBkb2Vzbid0IGFueW1vcmUuXHJcbiAgICB0ZXN0c1snd2Vic3FsZGF0YWJhc2UnXSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICByZXR1cm4gISF3aW5kb3cub3BlbkRhdGFiYXNlO1xyXG4gICAgfTtcclxuXHJcbiAgICAvLyBWZW5kb3JzIGhhZCBpbmNvbnNpc3RlbnQgcHJlZml4aW5nIHdpdGggdGhlIGV4cGVyaW1lbnRhbCBJbmRleGVkIERCOlxyXG4gICAgLy8gLSBXZWJraXQncyBpbXBsZW1lbnRhdGlvbiBpcyBhY2Nlc3NpYmxlIHRocm91Z2ggd2Via2l0SW5kZXhlZERCXHJcbiAgICAvLyAtIEZpcmVmb3ggc2hpcHBlZCBtb3pfaW5kZXhlZERCIGJlZm9yZSBGRjRiOSwgYnV0IHNpbmNlIHRoZW4gaGFzIGJlZW4gbW96SW5kZXhlZERCXHJcbiAgICAvLyBGb3Igc3BlZWQsIHdlIGRvbid0IHRlc3QgdGhlIGxlZ2FjeSAoYW5kIGJldGEtb25seSkgaW5kZXhlZERCXHJcbiAgICB0ZXN0c1snaW5kZXhlZERCJ10gPSBmdW5jdGlvbigpIHtcclxuICAgICAgcmV0dXJuICEhdGVzdFByb3BzQWxsKFwiaW5kZXhlZERCXCIsIHdpbmRvdyk7XHJcbiAgICB9O1xyXG5cclxuICAgIC8vIGRvY3VtZW50TW9kZSBsb2dpYyBmcm9tIFlVSSB0byBmaWx0ZXIgb3V0IElFOCBDb21wYXQgTW9kZVxyXG4gICAgLy8gICB3aGljaCBmYWxzZSBwb3NpdGl2ZXMuXHJcbiAgICB0ZXN0c1snaGFzaGNoYW5nZSddID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgIHJldHVybiBpc0V2ZW50U3VwcG9ydGVkKCdoYXNoY2hhbmdlJywgd2luZG93KSAmJiAoZG9jdW1lbnQuZG9jdW1lbnRNb2RlID09PSB1bmRlZmluZWQgfHwgZG9jdW1lbnQuZG9jdW1lbnRNb2RlID4gNyk7XHJcbiAgICB9O1xyXG5cclxuICAgIC8vIFBlciAxLjY6XHJcbiAgICAvLyBUaGlzIHVzZWQgdG8gYmUgTW9kZXJuaXpyLmhpc3RvcnltYW5hZ2VtZW50IGJ1dCB0aGUgbG9uZ2VyXHJcbiAgICAvLyBuYW1lIGhhcyBiZWVuIGRlcHJlY2F0ZWQgaW4gZmF2b3Igb2YgYSBzaG9ydGVyIGFuZCBwcm9wZXJ0eS1tYXRjaGluZyBvbmUuXHJcbiAgICAvLyBUaGUgb2xkIEFQSSBpcyBzdGlsbCBhdmFpbGFibGUgaW4gMS42LCBidXQgYXMgb2YgMi4wIHdpbGwgdGhyb3cgYSB3YXJuaW5nLFxyXG4gICAgLy8gYW5kIGluIHRoZSBmaXJzdCByZWxlYXNlIHRoZXJlYWZ0ZXIgZGlzYXBwZWFyIGVudGlyZWx5LlxyXG4gICAgdGVzdHNbJ2hpc3RvcnknXSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICByZXR1cm4gISEod2luZG93Lmhpc3RvcnkgJiYgaGlzdG9yeS5wdXNoU3RhdGUpO1xyXG4gICAgfTtcclxuXHJcbiAgICB0ZXN0c1snZHJhZ2FuZGRyb3AnXSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgICByZXR1cm4gKCdkcmFnZ2FibGUnIGluIGRpdikgfHwgKCdvbmRyYWdzdGFydCcgaW4gZGl2ICYmICdvbmRyb3AnIGluIGRpdik7XHJcbiAgICB9O1xyXG5cclxuICAgIC8vIEZGMy42IHdhcyBFT0wnZWQgb24gNC8yNC8xMiwgYnV0IHRoZSBFU1IgdmVyc2lvbiBvZiBGRjEwXHJcbiAgICAvLyB3aWxsIGJlIHN1cHBvcnRlZCB1bnRpbCBGRjE5ICgyLzEyLzEzKSwgYXQgd2hpY2ggdGltZSwgRVNSIGJlY29tZXMgRkYxNy5cclxuICAgIC8vIEZGMTAgc3RpbGwgdXNlcyBwcmVmaXhlcywgc28gY2hlY2sgZm9yIGl0IHVudGlsIHRoZW4uXHJcbiAgICAvLyBmb3IgbW9yZSBFU1IgaW5mbywgc2VlOiBtb3ppbGxhLm9yZy9lbi1VUy9maXJlZm94L29yZ2FuaXphdGlvbnMvZmFxL1xyXG4gICAgdGVzdHNbJ3dlYnNvY2tldHMnXSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiAnV2ViU29ja2V0JyBpbiB3aW5kb3cgfHwgJ01veldlYlNvY2tldCcgaW4gd2luZG93O1xyXG4gICAgfTtcclxuXHJcblxyXG4gICAgLy8gY3NzLXRyaWNrcy5jb20vcmdiYS1icm93c2VyLXN1cHBvcnQvXHJcbiAgICB0ZXN0c1sncmdiYSddID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgLy8gU2V0IGFuIHJnYmEoKSBjb2xvciBhbmQgY2hlY2sgdGhlIHJldHVybmVkIHZhbHVlXHJcblxyXG4gICAgICAgIHNldENzcygnYmFja2dyb3VuZC1jb2xvcjpyZ2JhKDE1MCwyNTUsMTUwLC41KScpO1xyXG5cclxuICAgICAgICByZXR1cm4gY29udGFpbnMobVN0eWxlLmJhY2tncm91bmRDb2xvciwgJ3JnYmEnKTtcclxuICAgIH07XHJcblxyXG4gICAgdGVzdHNbJ2hzbGEnXSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIC8vIFNhbWUgYXMgcmdiYSgpLCBpbiBmYWN0LCBicm93c2VycyByZS1tYXAgaHNsYSgpIHRvIHJnYmEoKSBpbnRlcm5hbGx5LFxyXG4gICAgICAgIC8vICAgZXhjZXB0IElFOSB3aG8gcmV0YWlucyBpdCBhcyBoc2xhXHJcblxyXG4gICAgICAgIHNldENzcygnYmFja2dyb3VuZC1jb2xvcjpoc2xhKDEyMCw0MCUsMTAwJSwuNSknKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGNvbnRhaW5zKG1TdHlsZS5iYWNrZ3JvdW5kQ29sb3IsICdyZ2JhJykgfHwgY29udGFpbnMobVN0eWxlLmJhY2tncm91bmRDb2xvciwgJ2hzbGEnKTtcclxuICAgIH07XHJcblxyXG4gICAgdGVzdHNbJ211bHRpcGxlYmdzJ10gPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAvLyBTZXR0aW5nIG11bHRpcGxlIGltYWdlcyBBTkQgYSBjb2xvciBvbiB0aGUgYmFja2dyb3VuZCBzaG9ydGhhbmQgcHJvcGVydHlcclxuICAgICAgICAvLyAgYW5kIHRoZW4gcXVlcnlpbmcgdGhlIHN0eWxlLmJhY2tncm91bmQgcHJvcGVydHkgdmFsdWUgZm9yIHRoZSBudW1iZXIgb2ZcclxuICAgICAgICAvLyAgb2NjdXJyZW5jZXMgb2YgXCJ1cmwoXCIgaXMgYSByZWxpYWJsZSBtZXRob2QgZm9yIGRldGVjdGluZyBBQ1RVQUwgc3VwcG9ydCBmb3IgdGhpcyFcclxuXHJcbiAgICAgICAgc2V0Q3NzKCdiYWNrZ3JvdW5kOnVybChodHRwczovLyksdXJsKGh0dHBzOi8vKSxyZWQgdXJsKGh0dHBzOi8vKScpO1xyXG5cclxuICAgICAgICAvLyBJZiB0aGUgVUEgc3VwcG9ydHMgbXVsdGlwbGUgYmFja2dyb3VuZHMsIHRoZXJlIHNob3VsZCBiZSB0aHJlZSBvY2N1cnJlbmNlc1xyXG4gICAgICAgIC8vICAgb2YgdGhlIHN0cmluZyBcInVybChcIiBpbiB0aGUgcmV0dXJuIHZhbHVlIGZvciBlbGVtU3R5bGUuYmFja2dyb3VuZFxyXG5cclxuICAgICAgICByZXR1cm4gKC8odXJsXFxzKlxcKC4qPyl7M30vKS50ZXN0KG1TdHlsZS5iYWNrZ3JvdW5kKTtcclxuICAgIH07XHJcblxyXG5cclxuXHJcbiAgICAvLyB0aGlzIHdpbGwgZmFsc2UgcG9zaXRpdmUgaW4gT3BlcmEgTWluaVxyXG4gICAgLy8gICBnaXRodWIuY29tL01vZGVybml6ci9Nb2Rlcm5penIvaXNzdWVzLzM5NlxyXG5cclxuICAgIHRlc3RzWydiYWNrZ3JvdW5kc2l6ZSddID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgcmV0dXJuIHRlc3RQcm9wc0FsbCgnYmFja2dyb3VuZFNpemUnKTtcclxuICAgIH07XHJcblxyXG4gICAgdGVzdHNbJ2JvcmRlcmltYWdlJ10gPSBmdW5jdGlvbigpIHtcclxuICAgICAgICByZXR1cm4gdGVzdFByb3BzQWxsKCdib3JkZXJJbWFnZScpO1xyXG4gICAgfTtcclxuXHJcblxyXG4gICAgLy8gU3VwZXIgY29tcHJlaGVuc2l2ZSB0YWJsZSBhYm91dCBhbGwgdGhlIHVuaXF1ZSBpbXBsZW1lbnRhdGlvbnMgb2ZcclxuICAgIC8vIGJvcmRlci1yYWRpdXM6IG11ZGRsZWRyYW1ibGluZ3MuY29tL3RhYmxlLW9mLWNzczMtYm9yZGVyLXJhZGl1cy1jb21wbGlhbmNlXHJcblxyXG4gICAgdGVzdHNbJ2JvcmRlcnJhZGl1cyddID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgcmV0dXJuIHRlc3RQcm9wc0FsbCgnYm9yZGVyUmFkaXVzJyk7XHJcbiAgICB9O1xyXG5cclxuICAgIC8vIFdlYk9TIHVuZm9ydHVuYXRlbHkgZmFsc2UgcG9zaXRpdmVzIG9uIHRoaXMgdGVzdC5cclxuICAgIHRlc3RzWydib3hzaGFkb3cnXSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiB0ZXN0UHJvcHNBbGwoJ2JveFNoYWRvdycpO1xyXG4gICAgfTtcclxuXHJcbiAgICAvLyBGRjMuMCB3aWxsIGZhbHNlIHBvc2l0aXZlIG9uIHRoaXMgdGVzdFxyXG4gICAgdGVzdHNbJ3RleHRzaGFkb3cnXSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKS5zdHlsZS50ZXh0U2hhZG93ID09PSAnJztcclxuICAgIH07XHJcblxyXG5cclxuICAgIHRlc3RzWydvcGFjaXR5J10gPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAvLyBCcm93c2VycyB0aGF0IGFjdHVhbGx5IGhhdmUgQ1NTIE9wYWNpdHkgaW1wbGVtZW50ZWQgaGF2ZSBkb25lIHNvXHJcbiAgICAgICAgLy8gIGFjY29yZGluZyB0byBzcGVjLCB3aGljaCBtZWFucyB0aGVpciByZXR1cm4gdmFsdWVzIGFyZSB3aXRoaW4gdGhlXHJcbiAgICAgICAgLy8gIHJhbmdlIG9mIFswLjAsMS4wXSAtIGluY2x1ZGluZyB0aGUgbGVhZGluZyB6ZXJvLlxyXG5cclxuICAgICAgICBzZXRDc3NBbGwoJ29wYWNpdHk6LjU1Jyk7XHJcblxyXG4gICAgICAgIC8vIFRoZSBub24tbGl0ZXJhbCAuIGluIHRoaXMgcmVnZXggaXMgaW50ZW50aW9uYWw6XHJcbiAgICAgICAgLy8gICBHZXJtYW4gQ2hyb21lIHJldHVybnMgdGhpcyB2YWx1ZSBhcyAwLDU1XHJcbiAgICAgICAgLy8gZ2l0aHViLmNvbS9Nb2Rlcm5penIvTW9kZXJuaXpyL2lzc3Vlcy8jaXNzdWUvNTkvY29tbWVudC81MTY2MzJcclxuICAgICAgICByZXR1cm4gKC9eMC41NSQvKS50ZXN0KG1TdHlsZS5vcGFjaXR5KTtcclxuICAgIH07XHJcblxyXG5cclxuICAgIC8vIE5vdGUsIEFuZHJvaWQgPCA0IHdpbGwgcGFzcyB0aGlzIHRlc3QsIGJ1dCBjYW4gb25seSBhbmltYXRlXHJcbiAgICAvLyAgIGEgc2luZ2xlIHByb3BlcnR5IGF0IGEgdGltZVxyXG4gICAgLy8gICBnb28uZ2wvdjNWNEdwXHJcbiAgICB0ZXN0c1snY3NzYW5pbWF0aW9ucyddID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgcmV0dXJuIHRlc3RQcm9wc0FsbCgnYW5pbWF0aW9uTmFtZScpO1xyXG4gICAgfTtcclxuXHJcblxyXG4gICAgdGVzdHNbJ2Nzc2NvbHVtbnMnXSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiB0ZXN0UHJvcHNBbGwoJ2NvbHVtbkNvdW50Jyk7XHJcbiAgICB9O1xyXG5cclxuXHJcbiAgICB0ZXN0c1snY3NzZ3JhZGllbnRzJ10gPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBGb3IgQ1NTIEdyYWRpZW50cyBzeW50YXgsIHBsZWFzZSBzZWU6XHJcbiAgICAgICAgICogd2Via2l0Lm9yZy9ibG9nLzE3NS9pbnRyb2R1Y2luZy1jc3MtZ3JhZGllbnRzL1xyXG4gICAgICAgICAqIGRldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9DU1MvLW1vei1saW5lYXItZ3JhZGllbnRcclxuICAgICAgICAgKiBkZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vQ1NTLy1tb3otcmFkaWFsLWdyYWRpZW50XHJcbiAgICAgICAgICogZGV2LnczLm9yZy9jc3N3Zy9jc3MzLWltYWdlcy8jZ3JhZGllbnRzLVxyXG4gICAgICAgICAqL1xyXG5cclxuICAgICAgICB2YXIgc3RyMSA9ICdiYWNrZ3JvdW5kLWltYWdlOicsXHJcbiAgICAgICAgICAgIHN0cjIgPSAnZ3JhZGllbnQobGluZWFyLGxlZnQgdG9wLHJpZ2h0IGJvdHRvbSxmcm9tKCM5ZjkpLHRvKHdoaXRlKSk7JyxcclxuICAgICAgICAgICAgc3RyMyA9ICdsaW5lYXItZ3JhZGllbnQobGVmdCB0b3AsIzlmOSwgd2hpdGUpOyc7XHJcblxyXG4gICAgICAgIHNldENzcyhcclxuICAgICAgICAgICAgIC8vIGxlZ2FjeSB3ZWJraXQgc3ludGF4IChGSVhNRTogcmVtb3ZlIHdoZW4gc3ludGF4IG5vdCBpbiB1c2UgYW55bW9yZSlcclxuICAgICAgICAgICAgICAoc3RyMSArICctd2Via2l0LSAnLnNwbGl0KCcgJykuam9pbihzdHIyICsgc3RyMSkgK1xyXG4gICAgICAgICAgICAgLy8gc3RhbmRhcmQgc3ludGF4ICAgICAgICAgICAgIC8vIHRyYWlsaW5nICdiYWNrZ3JvdW5kLWltYWdlOidcclxuICAgICAgICAgICAgICBwcmVmaXhlcy5qb2luKHN0cjMgKyBzdHIxKSkuc2xpY2UoMCwgLXN0cjEubGVuZ3RoKVxyXG4gICAgICAgICk7XHJcblxyXG4gICAgICAgIHJldHVybiBjb250YWlucyhtU3R5bGUuYmFja2dyb3VuZEltYWdlLCAnZ3JhZGllbnQnKTtcclxuICAgIH07XHJcblxyXG5cclxuICAgIHRlc3RzWydjc3NyZWZsZWN0aW9ucyddID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgcmV0dXJuIHRlc3RQcm9wc0FsbCgnYm94UmVmbGVjdCcpO1xyXG4gICAgfTtcclxuXHJcblxyXG4gICAgdGVzdHNbJ2Nzc3RyYW5zZm9ybXMnXSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiAhIXRlc3RQcm9wc0FsbCgndHJhbnNmb3JtJyk7XHJcbiAgICB9O1xyXG5cclxuXHJcbiAgICB0ZXN0c1snY3NzdHJhbnNmb3JtczNkJ10gPSBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgdmFyIHJldCA9ICEhdGVzdFByb3BzQWxsKCdwZXJzcGVjdGl2ZScpO1xyXG5cclxuICAgICAgICAvLyBXZWJraXQncyAzRCB0cmFuc2Zvcm1zIGFyZSBwYXNzZWQgb2ZmIHRvIHRoZSBicm93c2VyJ3Mgb3duIGdyYXBoaWNzIHJlbmRlcmVyLlxyXG4gICAgICAgIC8vICAgSXQgd29ya3MgZmluZSBpbiBTYWZhcmkgb24gTGVvcGFyZCBhbmQgU25vdyBMZW9wYXJkLCBidXQgbm90IGluIENocm9tZSBpblxyXG4gICAgICAgIC8vICAgc29tZSBjb25kaXRpb25zLiBBcyBhIHJlc3VsdCwgV2Via2l0IHR5cGljYWxseSByZWNvZ25pemVzIHRoZSBzeW50YXggYnV0XHJcbiAgICAgICAgLy8gICB3aWxsIHNvbWV0aW1lcyB0aHJvdyBhIGZhbHNlIHBvc2l0aXZlLCB0aHVzIHdlIG11c3QgZG8gYSBtb3JlIHRob3JvdWdoIGNoZWNrOlxyXG4gICAgICAgIGlmICggcmV0ICYmICd3ZWJraXRQZXJzcGVjdGl2ZScgaW4gZG9jRWxlbWVudC5zdHlsZSApIHtcclxuXHJcbiAgICAgICAgICAvLyBXZWJraXQgYWxsb3dzIHRoaXMgbWVkaWEgcXVlcnkgdG8gc3VjY2VlZCBvbmx5IGlmIHRoZSBmZWF0dXJlIGlzIGVuYWJsZWQuXHJcbiAgICAgICAgICAvLyBgQG1lZGlhICh0cmFuc2Zvcm0tM2QpLCgtd2Via2l0LXRyYW5zZm9ybS0zZCl7IC4uLiB9YFxyXG4gICAgICAgICAgaW5qZWN0RWxlbWVudFdpdGhTdHlsZXMoJ0BtZWRpYSAodHJhbnNmb3JtLTNkKSwoLXdlYmtpdC10cmFuc2Zvcm0tM2QpeyNtb2Rlcm5penJ7bGVmdDo5cHg7cG9zaXRpb246YWJzb2x1dGU7aGVpZ2h0OjNweDt9fScsIGZ1bmN0aW9uKCBub2RlLCBydWxlICkge1xyXG4gICAgICAgICAgICByZXQgPSBub2RlLm9mZnNldExlZnQgPT09IDkgJiYgbm9kZS5vZmZzZXRIZWlnaHQgPT09IDM7XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJldDtcclxuICAgIH07XHJcblxyXG5cclxuICAgIHRlc3RzWydjc3N0cmFuc2l0aW9ucyddID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgcmV0dXJuIHRlc3RQcm9wc0FsbCgndHJhbnNpdGlvbicpO1xyXG4gICAgfTtcclxuXHJcblxyXG4gICAgLyo+PmZvbnRmYWNlKi9cclxuICAgIC8vIEBmb250LWZhY2UgZGV0ZWN0aW9uIHJvdXRpbmUgYnkgRGllZ28gUGVyaW5pXHJcbiAgICAvLyBqYXZhc2NyaXB0Lm53Ym94LmNvbS9DU1NTdXBwb3J0L1xyXG5cclxuICAgIC8vIGZhbHNlIHBvc2l0aXZlczpcclxuICAgIC8vICAgV2ViT1MgZ2l0aHViLmNvbS9Nb2Rlcm5penIvTW9kZXJuaXpyL2lzc3Vlcy8zNDJcclxuICAgIC8vICAgV1A3ICAgZ2l0aHViLmNvbS9Nb2Rlcm5penIvTW9kZXJuaXpyL2lzc3Vlcy81MzhcclxuICAgIHRlc3RzWydmb250ZmFjZSddID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdmFyIGJvb2w7XHJcblxyXG4gICAgICAgIGluamVjdEVsZW1lbnRXaXRoU3R5bGVzKCdAZm9udC1mYWNlIHtmb250LWZhbWlseTpcImZvbnRcIjtzcmM6dXJsKFwiaHR0cHM6Ly9cIil9JywgZnVuY3Rpb24oIG5vZGUsIHJ1bGUgKSB7XHJcbiAgICAgICAgICB2YXIgc3R5bGUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc21vZGVybml6cicpLFxyXG4gICAgICAgICAgICAgIHNoZWV0ID0gc3R5bGUuc2hlZXQgfHwgc3R5bGUuc3R5bGVTaGVldCxcclxuICAgICAgICAgICAgICBjc3NUZXh0ID0gc2hlZXQgPyAoc2hlZXQuY3NzUnVsZXMgJiYgc2hlZXQuY3NzUnVsZXNbMF0gPyBzaGVldC5jc3NSdWxlc1swXS5jc3NUZXh0IDogc2hlZXQuY3NzVGV4dCB8fCAnJykgOiAnJztcclxuXHJcbiAgICAgICAgICBib29sID0gL3NyYy9pLnRlc3QoY3NzVGV4dCkgJiYgY3NzVGV4dC5pbmRleE9mKHJ1bGUuc3BsaXQoJyAnKVswXSkgPT09IDA7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHJldHVybiBib29sO1xyXG4gICAgfTtcclxuICAgIC8qPj5mb250ZmFjZSovXHJcblxyXG4gICAgLy8gQ1NTIGdlbmVyYXRlZCBjb250ZW50IGRldGVjdGlvblxyXG4gICAgdGVzdHNbJ2dlbmVyYXRlZGNvbnRlbnQnXSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciBib29sO1xyXG5cclxuICAgICAgICBpbmplY3RFbGVtZW50V2l0aFN0eWxlcyhbJyMnLG1vZCwne2ZvbnQ6MC8wIGF9IycsbW9kLCc6YWZ0ZXJ7Y29udGVudDpcIicsc21pbGUsJ1wiO3Zpc2liaWxpdHk6aGlkZGVuO2ZvbnQ6M3B4LzEgYX0nXS5qb2luKCcnKSwgZnVuY3Rpb24oIG5vZGUgKSB7XHJcbiAgICAgICAgICBib29sID0gbm9kZS5vZmZzZXRIZWlnaHQgPj0gMztcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGJvb2w7XHJcbiAgICB9O1xyXG5cclxuXHJcblxyXG4gICAgLy8gVGhlc2UgdGVzdHMgZXZhbHVhdGUgc3VwcG9ydCBvZiB0aGUgdmlkZW8vYXVkaW8gZWxlbWVudHMsIGFzIHdlbGwgYXNcclxuICAgIC8vIHRlc3Rpbmcgd2hhdCB0eXBlcyBvZiBjb250ZW50IHRoZXkgc3VwcG9ydC5cclxuICAgIC8vXHJcbiAgICAvLyBXZSdyZSB1c2luZyB0aGUgQm9vbGVhbiBjb25zdHJ1Y3RvciBoZXJlLCBzbyB0aGF0IHdlIGNhbiBleHRlbmQgdGhlIHZhbHVlXHJcbiAgICAvLyBlLmcuICBNb2Rlcm5penIudmlkZW8gICAgIC8vIHRydWVcclxuICAgIC8vICAgICAgIE1vZGVybml6ci52aWRlby5vZ2cgLy8gJ3Byb2JhYmx5J1xyXG4gICAgLy9cclxuICAgIC8vIENvZGVjIHZhbHVlcyBmcm9tIDogZ2l0aHViLmNvbS9OaWVsc0xlZW5oZWVyL2h0bWw1dGVzdC9ibG9iLzkxMDZhOC9pbmRleC5odG1sI0w4NDVcclxuICAgIC8vICAgICAgICAgICAgICAgICAgICAgdGh4IHRvIE5pZWxzTGVlbmhlZXIgYW5kIHpjb3JwYW5cclxuXHJcbiAgICAvLyBOb3RlOiBpbiBzb21lIG9sZGVyIGJyb3dzZXJzLCBcIm5vXCIgd2FzIGEgcmV0dXJuIHZhbHVlIGluc3RlYWQgb2YgZW1wdHkgc3RyaW5nLlxyXG4gICAgLy8gICBJdCB3YXMgbGl2ZSBpbiBGRjMuNS4wIGFuZCAzLjUuMSwgYnV0IGZpeGVkIGluIDMuNS4yXHJcbiAgICAvLyAgIEl0IHdhcyBhbHNvIGxpdmUgaW4gU2FmYXJpIDQuMC4wIC0gNC4wLjQsIGJ1dCBmaXhlZCBpbiA0LjAuNVxyXG5cclxuICAgIHRlc3RzWyd2aWRlbyddID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdmFyIGVsZW0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd2aWRlbycpLFxyXG4gICAgICAgICAgICBib29sID0gZmFsc2U7XHJcblxyXG4gICAgICAgIC8vIElFOSBSdW5uaW5nIG9uIFdpbmRvd3MgU2VydmVyIFNLVSBjYW4gY2F1c2UgYW4gZXhjZXB0aW9uIHRvIGJlIHRocm93biwgYnVnICMyMjRcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBpZiAoIGJvb2wgPSAhIWVsZW0uY2FuUGxheVR5cGUgKSB7XHJcbiAgICAgICAgICAgICAgICBib29sICAgICAgPSBuZXcgQm9vbGVhbihib29sKTtcclxuICAgICAgICAgICAgICAgIGJvb2wub2dnICA9IGVsZW0uY2FuUGxheVR5cGUoJ3ZpZGVvL29nZzsgY29kZWNzPVwidGhlb3JhXCInKSAgICAgIC5yZXBsYWNlKC9ebm8kLywnJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gV2l0aG91dCBRdWlja1RpbWUsIHRoaXMgdmFsdWUgd2lsbCBiZSBgdW5kZWZpbmVkYC4gZ2l0aHViLmNvbS9Nb2Rlcm5penIvTW9kZXJuaXpyL2lzc3Vlcy81NDZcclxuICAgICAgICAgICAgICAgIGJvb2wuaDI2NCA9IGVsZW0uY2FuUGxheVR5cGUoJ3ZpZGVvL21wNDsgY29kZWNzPVwiYXZjMS40MkUwMUVcIicpIC5yZXBsYWNlKC9ebm8kLywnJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgYm9vbC53ZWJtID0gZWxlbS5jYW5QbGF5VHlwZSgndmlkZW8vd2VibTsgY29kZWNzPVwidnA4LCB2b3JiaXNcIicpLnJlcGxhY2UoL15ubyQvLCcnKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICB9IGNhdGNoKGUpIHsgfVxyXG5cclxuICAgICAgICByZXR1cm4gYm9vbDtcclxuICAgIH07XHJcblxyXG4gICAgdGVzdHNbJ2F1ZGlvJ10gPSBmdW5jdGlvbigpIHtcclxuICAgICAgICB2YXIgZWxlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2F1ZGlvJyksXHJcbiAgICAgICAgICAgIGJvb2wgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgaWYgKCBib29sID0gISFlbGVtLmNhblBsYXlUeXBlICkge1xyXG4gICAgICAgICAgICAgICAgYm9vbCAgICAgID0gbmV3IEJvb2xlYW4oYm9vbCk7XHJcbiAgICAgICAgICAgICAgICBib29sLm9nZyAgPSBlbGVtLmNhblBsYXlUeXBlKCdhdWRpby9vZ2c7IGNvZGVjcz1cInZvcmJpc1wiJykucmVwbGFjZSgvXm5vJC8sJycpO1xyXG4gICAgICAgICAgICAgICAgYm9vbC5tcDMgID0gZWxlbS5jYW5QbGF5VHlwZSgnYXVkaW8vbXBlZzsnKSAgICAgICAgICAgICAgIC5yZXBsYWNlKC9ebm8kLywnJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gTWltZXR5cGVzIGFjY2VwdGVkOlxyXG4gICAgICAgICAgICAgICAgLy8gICBkZXZlbG9wZXIubW96aWxsYS5vcmcvRW4vTWVkaWFfZm9ybWF0c19zdXBwb3J0ZWRfYnlfdGhlX2F1ZGlvX2FuZF92aWRlb19lbGVtZW50c1xyXG4gICAgICAgICAgICAgICAgLy8gICBiaXQubHkvaXBob25lb3Njb2RlY3NcclxuICAgICAgICAgICAgICAgIGJvb2wud2F2ICA9IGVsZW0uY2FuUGxheVR5cGUoJ2F1ZGlvL3dhdjsgY29kZWNzPVwiMVwiJykgICAgIC5yZXBsYWNlKC9ebm8kLywnJyk7XHJcbiAgICAgICAgICAgICAgICBib29sLm00YSAgPSAoIGVsZW0uY2FuUGxheVR5cGUoJ2F1ZGlvL3gtbTRhOycpICAgICAgICAgICAgfHxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlbS5jYW5QbGF5VHlwZSgnYXVkaW8vYWFjOycpKSAgICAgICAgICAgICAucmVwbGFjZSgvXm5vJC8sJycpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBjYXRjaChlKSB7IH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGJvb2w7XHJcbiAgICB9O1xyXG5cclxuXHJcbiAgICAvLyBJbiBGRjQsIGlmIGRpc2FibGVkLCB3aW5kb3cubG9jYWxTdG9yYWdlIHNob3VsZCA9PT0gbnVsbC5cclxuXHJcbiAgICAvLyBOb3JtYWxseSwgd2UgY291bGQgbm90IHRlc3QgdGhhdCBkaXJlY3RseSBhbmQgbmVlZCB0byBkbyBhXHJcbiAgICAvLyAgIGAoJ2xvY2FsU3RvcmFnZScgaW4gd2luZG93KSAmJiBgIHRlc3QgZmlyc3QgYmVjYXVzZSBvdGhlcndpc2UgRmlyZWZveCB3aWxsXHJcbiAgICAvLyAgIHRocm93IGJ1Z3ppbC5sYS8zNjU3NzIgaWYgY29va2llcyBhcmUgZGlzYWJsZWRcclxuXHJcbiAgICAvLyBBbHNvIGluIGlPUzUgUHJpdmF0ZSBCcm93c2luZyBtb2RlLCBhdHRlbXB0aW5nIHRvIHVzZSBsb2NhbFN0b3JhZ2Uuc2V0SXRlbVxyXG4gICAgLy8gd2lsbCB0aHJvdyB0aGUgZXhjZXB0aW9uOlxyXG4gICAgLy8gICBRVU9UQV9FWENFRURFRF9FUlJST1IgRE9NIEV4Y2VwdGlvbiAyMi5cclxuICAgIC8vIFBlY3VsaWFybHksIGdldEl0ZW0gYW5kIHJlbW92ZUl0ZW0gY2FsbHMgZG8gbm90IHRocm93LlxyXG5cclxuICAgIC8vIEJlY2F1c2Ugd2UgYXJlIGZvcmNlZCB0byB0cnkvY2F0Y2ggdGhpcywgd2UnbGwgZ28gYWdncmVzc2l2ZS5cclxuXHJcbiAgICAvLyBKdXN0IEZXSVc6IElFOCBDb21wYXQgbW9kZSBzdXBwb3J0cyB0aGVzZSBmZWF0dXJlcyBjb21wbGV0ZWx5OlxyXG4gICAgLy8gICB3d3cucXVpcmtzbW9kZS5vcmcvZG9tL2h0bWw1Lmh0bWxcclxuICAgIC8vIEJ1dCBJRTggZG9lc24ndCBzdXBwb3J0IGVpdGhlciB3aXRoIGxvY2FsIGZpbGVzXHJcblxyXG4gICAgdGVzdHNbJ2xvY2Fsc3RvcmFnZSddID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0obW9kLCBtb2QpO1xyXG4gICAgICAgICAgICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbShtb2QpO1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9IGNhdGNoKGUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgdGVzdHNbJ3Nlc3Npb25zdG9yYWdlJ10gPSBmdW5jdGlvbigpIHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBzZXNzaW9uU3RvcmFnZS5zZXRJdGVtKG1vZCwgbW9kKTtcclxuICAgICAgICAgICAgc2Vzc2lvblN0b3JhZ2UucmVtb3ZlSXRlbShtb2QpO1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9IGNhdGNoKGUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG5cclxuICAgIHRlc3RzWyd3ZWJ3b3JrZXJzJ10gPSBmdW5jdGlvbigpIHtcclxuICAgICAgICByZXR1cm4gISF3aW5kb3cuV29ya2VyO1xyXG4gICAgfTtcclxuXHJcblxyXG4gICAgdGVzdHNbJ2FwcGxpY2F0aW9uY2FjaGUnXSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiAhIXdpbmRvdy5hcHBsaWNhdGlvbkNhY2hlO1xyXG4gICAgfTtcclxuXHJcblxyXG4gICAgLy8gVGhhbmtzIHRvIEVyaWsgRGFobHN0cm9tXHJcbiAgICB0ZXN0c1snc3ZnJ10gPSBmdW5jdGlvbigpIHtcclxuICAgICAgICByZXR1cm4gISFkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMgJiYgISFkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMobnMuc3ZnLCAnc3ZnJykuY3JlYXRlU1ZHUmVjdDtcclxuICAgIH07XHJcblxyXG4gICAgLy8gc3BlY2lmaWNhbGx5IGZvciBTVkcgaW5saW5lIGluIEhUTUwsIG5vdCB3aXRoaW4gWEhUTUxcclxuICAgIC8vIHRlc3QgcGFnZTogcGF1bGlyaXNoLmNvbS9kZW1vL2lubGluZS1zdmdcclxuICAgIHRlc3RzWydpbmxpbmVzdmcnXSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICB2YXIgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgIGRpdi5pbm5lckhUTUwgPSAnPHN2Zy8+JztcclxuICAgICAgcmV0dXJuIChkaXYuZmlyc3RDaGlsZCAmJiBkaXYuZmlyc3RDaGlsZC5uYW1lc3BhY2VVUkkpID09IG5zLnN2ZztcclxuICAgIH07XHJcblxyXG4gICAgLy8gU1ZHIFNNSUwgYW5pbWF0aW9uXHJcbiAgICB0ZXN0c1snc21pbCddID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgcmV0dXJuICEhZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TICYmIC9TVkdBbmltYXRlLy50ZXN0KHRvU3RyaW5nLmNhbGwoZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKG5zLnN2ZywgJ2FuaW1hdGUnKSkpO1xyXG4gICAgfTtcclxuXHJcbiAgICAvLyBUaGlzIHRlc3QgaXMgb25seSBmb3IgY2xpcCBwYXRocyBpbiBTVkcgcHJvcGVyLCBub3QgY2xpcCBwYXRocyBvbiBIVE1MIGNvbnRlbnRcclxuICAgIC8vIGRlbW86IHNydWZhY3VsdHkuc3J1LmVkdS9kYXZpZC5kYWlsZXkvc3ZnL25ld3N0dWZmL2NsaXBQYXRoNC5zdmdcclxuXHJcbiAgICAvLyBIb3dldmVyIHJlYWQgdGhlIGNvbW1lbnRzIHRvIGRpZyBpbnRvIGFwcGx5aW5nIFNWRyBjbGlwcGF0aHMgdG8gSFRNTCBjb250ZW50IGhlcmU6XHJcbiAgICAvLyAgIGdpdGh1Yi5jb20vTW9kZXJuaXpyL01vZGVybml6ci9pc3N1ZXMvMjEzI2lzc3VlY29tbWVudC0xMTQ5NDkxXHJcbiAgICB0ZXN0c1snc3ZnY2xpcHBhdGhzJ10gPSBmdW5jdGlvbigpIHtcclxuICAgICAgICByZXR1cm4gISFkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMgJiYgL1NWR0NsaXBQYXRoLy50ZXN0KHRvU3RyaW5nLmNhbGwoZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKG5zLnN2ZywgJ2NsaXBQYXRoJykpKTtcclxuICAgIH07XHJcblxyXG4gICAgLyo+PndlYmZvcm1zKi9cclxuICAgIC8vIGlucHV0IGZlYXR1cmVzIGFuZCBpbnB1dCB0eXBlcyBnbyBkaXJlY3RseSBvbnRvIHRoZSByZXQgb2JqZWN0LCBieXBhc3NpbmcgdGhlIHRlc3RzIGxvb3AuXHJcbiAgICAvLyBIb2xkIHRoaXMgZ3V5IHRvIGV4ZWN1dGUgaW4gYSBtb21lbnQuXHJcbiAgICBmdW5jdGlvbiB3ZWJmb3JtcygpIHtcclxuICAgICAgICAvKj4+aW5wdXQqL1xyXG4gICAgICAgIC8vIFJ1biB0aHJvdWdoIEhUTUw1J3MgbmV3IGlucHV0IGF0dHJpYnV0ZXMgdG8gc2VlIGlmIHRoZSBVQSB1bmRlcnN0YW5kcyBhbnkuXHJcbiAgICAgICAgLy8gV2UncmUgdXNpbmcgZiB3aGljaCBpcyB0aGUgPGlucHV0PiBlbGVtZW50IGNyZWF0ZWQgZWFybHkgb25cclxuICAgICAgICAvLyBNaWtlIFRheWxyIGhhcyBjcmVhdGVkIGEgY29tcHJlaGVuc2l2ZSByZXNvdXJjZSBmb3IgdGVzdGluZyB0aGVzZSBhdHRyaWJ1dGVzXHJcbiAgICAgICAgLy8gICB3aGVuIGFwcGxpZWQgdG8gYWxsIGlucHV0IHR5cGVzOlxyXG4gICAgICAgIC8vICAgbWlrZXRheWxyLmNvbS9jb2RlL2lucHV0LXR5cGUtYXR0ci5odG1sXHJcbiAgICAgICAgLy8gc3BlYzogd3d3LndoYXR3Zy5vcmcvc3BlY3Mvd2ViLWFwcHMvY3VycmVudC13b3JrL211bHRpcGFnZS90aGUtaW5wdXQtZWxlbWVudC5odG1sI2lucHV0LXR5cGUtYXR0ci1zdW1tYXJ5XHJcblxyXG4gICAgICAgIC8vIE9ubHkgaW5wdXQgcGxhY2Vob2xkZXIgaXMgdGVzdGVkIHdoaWxlIHRleHRhcmVhJ3MgcGxhY2Vob2xkZXIgaXMgbm90LlxyXG4gICAgICAgIC8vIEN1cnJlbnRseSBTYWZhcmkgNCBhbmQgT3BlcmEgMTEgaGF2ZSBzdXBwb3J0IG9ubHkgZm9yIHRoZSBpbnB1dCBwbGFjZWhvbGRlclxyXG4gICAgICAgIC8vIEJvdGggdGVzdHMgYXJlIGF2YWlsYWJsZSBpbiBmZWF0dXJlLWRldGVjdHMvZm9ybXMtcGxhY2Vob2xkZXIuanNcclxuICAgICAgICBNb2Rlcm5penJbJ2lucHV0J10gPSAoZnVuY3Rpb24oIHByb3BzICkge1xyXG4gICAgICAgICAgICBmb3IgKCB2YXIgaSA9IDAsIGxlbiA9IHByb3BzLmxlbmd0aDsgaSA8IGxlbjsgaSsrICkge1xyXG4gICAgICAgICAgICAgICAgYXR0cnNbIHByb3BzW2ldIF0gPSAhIShwcm9wc1tpXSBpbiBpbnB1dEVsZW0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChhdHRycy5saXN0KXtcclxuICAgICAgICAgICAgICAvLyBzYWZhcmkgZmFsc2UgcG9zaXRpdmUncyBvbiBkYXRhbGlzdDogd2Viay5pdC83NDI1MlxyXG4gICAgICAgICAgICAgIC8vIHNlZSBhbHNvIGdpdGh1Yi5jb20vTW9kZXJuaXpyL01vZGVybml6ci9pc3N1ZXMvMTQ2XHJcbiAgICAgICAgICAgICAgYXR0cnMubGlzdCA9ICEhKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RhdGFsaXN0JykgJiYgd2luZG93LkhUTUxEYXRhTGlzdEVsZW1lbnQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBhdHRycztcclxuICAgICAgICB9KSgnYXV0b2NvbXBsZXRlIGF1dG9mb2N1cyBsaXN0IHBsYWNlaG9sZGVyIG1heCBtaW4gbXVsdGlwbGUgcGF0dGVybiByZXF1aXJlZCBzdGVwJy5zcGxpdCgnICcpKTtcclxuICAgICAgICAvKj4+aW5wdXQqL1xyXG5cclxuICAgICAgICAvKj4+aW5wdXR0eXBlcyovXHJcbiAgICAgICAgLy8gUnVuIHRocm91Z2ggSFRNTDUncyBuZXcgaW5wdXQgdHlwZXMgdG8gc2VlIGlmIHRoZSBVQSB1bmRlcnN0YW5kcyBhbnkuXHJcbiAgICAgICAgLy8gICBUaGlzIGlzIHB1dCBiZWhpbmQgdGhlIHRlc3RzIHJ1bmxvb3AgYmVjYXVzZSBpdCBkb2Vzbid0IHJldHVybiBhXHJcbiAgICAgICAgLy8gICB0cnVlL2ZhbHNlIGxpa2UgYWxsIHRoZSBvdGhlciB0ZXN0czsgaW5zdGVhZCwgaXQgcmV0dXJucyBhbiBvYmplY3RcclxuICAgICAgICAvLyAgIGNvbnRhaW5pbmcgZWFjaCBpbnB1dCB0eXBlIHdpdGggaXRzIGNvcnJlc3BvbmRpbmcgdHJ1ZS9mYWxzZSB2YWx1ZVxyXG5cclxuICAgICAgICAvLyBCaWcgdGhhbmtzIHRvIEBtaWtldGF5bHIgZm9yIHRoZSBodG1sNSBmb3JtcyBleHBlcnRpc2UuIG1pa2V0YXlsci5jb20vXHJcbiAgICAgICAgTW9kZXJuaXpyWydpbnB1dHR5cGVzJ10gPSAoZnVuY3Rpb24ocHJvcHMpIHtcclxuXHJcbiAgICAgICAgICAgIGZvciAoIHZhciBpID0gMCwgYm9vbCwgaW5wdXRFbGVtVHlwZSwgZGVmYXVsdFZpZXcsIGxlbiA9IHByb3BzLmxlbmd0aDsgaSA8IGxlbjsgaSsrICkge1xyXG5cclxuICAgICAgICAgICAgICAgIGlucHV0RWxlbS5zZXRBdHRyaWJ1dGUoJ3R5cGUnLCBpbnB1dEVsZW1UeXBlID0gcHJvcHNbaV0pO1xyXG4gICAgICAgICAgICAgICAgYm9vbCA9IGlucHV0RWxlbS50eXBlICE9PSAndGV4dCc7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gV2UgZmlyc3QgY2hlY2sgdG8gc2VlIGlmIHRoZSB0eXBlIHdlIGdpdmUgaXQgc3RpY2tzLi5cclxuICAgICAgICAgICAgICAgIC8vIElmIHRoZSB0eXBlIGRvZXMsIHdlIGZlZWQgaXQgYSB0ZXh0dWFsIHZhbHVlLCB3aGljaCBzaG91bGRuJ3QgYmUgdmFsaWQuXHJcbiAgICAgICAgICAgICAgICAvLyBJZiB0aGUgdmFsdWUgZG9lc24ndCBzdGljaywgd2Uga25vdyB0aGVyZSdzIGlucHV0IHNhbml0aXphdGlvbiB3aGljaCBpbmZlcnMgYSBjdXN0b20gVUlcclxuICAgICAgICAgICAgICAgIGlmICggYm9vbCApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaW5wdXRFbGVtLnZhbHVlICAgICAgICAgPSBzbWlsZTtcclxuICAgICAgICAgICAgICAgICAgICBpbnB1dEVsZW0uc3R5bGUuY3NzVGV4dCA9ICdwb3NpdGlvbjphYnNvbHV0ZTt2aXNpYmlsaXR5OmhpZGRlbjsnO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoIC9ecmFuZ2UkLy50ZXN0KGlucHV0RWxlbVR5cGUpICYmIGlucHV0RWxlbS5zdHlsZS5XZWJraXRBcHBlYXJhbmNlICE9PSB1bmRlZmluZWQgKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgZG9jRWxlbWVudC5hcHBlbmRDaGlsZChpbnB1dEVsZW0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdFZpZXcgPSBkb2N1bWVudC5kZWZhdWx0VmlldztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAvLyBTYWZhcmkgMi00IGFsbG93cyB0aGUgc21pbGV5IGFzIGEgdmFsdWUsIGRlc3BpdGUgbWFraW5nIGEgc2xpZGVyXHJcbiAgICAgICAgICAgICAgICAgICAgICBib29sID0gIGRlZmF1bHRWaWV3LmdldENvbXB1dGVkU3R5bGUgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdFZpZXcuZ2V0Q29tcHV0ZWRTdHlsZShpbnB1dEVsZW0sIG51bGwpLldlYmtpdEFwcGVhcmFuY2UgIT09ICd0ZXh0ZmllbGQnICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIE1vYmlsZSBhbmRyb2lkIHdlYiBicm93c2VyIGhhcyBmYWxzZSBwb3NpdGl2ZSwgc28gbXVzdFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBjaGVjayB0aGUgaGVpZ2h0IHRvIHNlZSBpZiB0aGUgd2lkZ2V0IGlzIGFjdHVhbGx5IHRoZXJlLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoaW5wdXRFbGVtLm9mZnNldEhlaWdodCAhPT0gMCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgZG9jRWxlbWVudC5yZW1vdmVDaGlsZChpbnB1dEVsZW0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCAvXihzZWFyY2h8dGVsKSQvLnRlc3QoaW5wdXRFbGVtVHlwZSkgKXtcclxuICAgICAgICAgICAgICAgICAgICAgIC8vIFNwZWMgZG9lc24ndCBkZWZpbmUgYW55IHNwZWNpYWwgcGFyc2luZyBvciBkZXRlY3RhYmxlIFVJXHJcbiAgICAgICAgICAgICAgICAgICAgICAvLyAgIGJlaGF2aW9ycyBzbyB3ZSBwYXNzIHRoZXNlIHRocm91Z2ggYXMgdHJ1ZVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgIC8vIEludGVyZXN0aW5nbHksIG9wZXJhIGZhaWxzIHRoZSBlYXJsaWVyIHRlc3QsIHNvIGl0IGRvZXNuJ3RcclxuICAgICAgICAgICAgICAgICAgICAgIC8vICBldmVuIG1ha2UgaXQgaGVyZS5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICggL14odXJsfGVtYWlsKSQvLnRlc3QoaW5wdXRFbGVtVHlwZSkgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAvLyBSZWFsIHVybCBhbmQgZW1haWwgc3VwcG9ydCBjb21lcyB3aXRoIHByZWJha2VkIHZhbGlkYXRpb24uXHJcbiAgICAgICAgICAgICAgICAgICAgICBib29sID0gaW5wdXRFbGVtLmNoZWNrVmFsaWRpdHkgJiYgaW5wdXRFbGVtLmNoZWNrVmFsaWRpdHkoKSA9PT0gZmFsc2U7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAvLyBJZiB0aGUgdXBncmFkZWQgaW5wdXQgY29tcG9udGVudCByZWplY3RzIHRoZSA6KSB0ZXh0LCB3ZSBnb3QgYSB3aW5uZXJcclxuICAgICAgICAgICAgICAgICAgICAgIGJvb2wgPSBpbnB1dEVsZW0udmFsdWUgIT0gc21pbGU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlucHV0c1sgcHJvcHNbaV0gXSA9ICEhYm9vbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gaW5wdXRzO1xyXG4gICAgICAgIH0pKCdzZWFyY2ggdGVsIHVybCBlbWFpbCBkYXRldGltZSBkYXRlIG1vbnRoIHdlZWsgdGltZSBkYXRldGltZS1sb2NhbCBudW1iZXIgcmFuZ2UgY29sb3InLnNwbGl0KCcgJykpO1xyXG4gICAgICAgIC8qPj5pbnB1dHR5cGVzKi9cclxuICAgIH1cclxuICAgIC8qPj53ZWJmb3JtcyovXHJcblxyXG5cclxuICAgIC8vIEVuZCBvZiB0ZXN0IGRlZmluaXRpb25zXHJcbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cclxuXHJcblxyXG4gICAgLy8gUnVuIHRocm91Z2ggYWxsIHRlc3RzIGFuZCBkZXRlY3QgdGhlaXIgc3VwcG9ydCBpbiB0aGUgY3VycmVudCBVQS5cclxuICAgIC8vIHRvZG86IGh5cG90aGV0aWNhbGx5IHdlIGNvdWxkIGJlIGRvaW5nIGFuIGFycmF5IG9mIHRlc3RzIGFuZCB1c2UgYSBiYXNpYyBsb29wIGhlcmUuXHJcbiAgICBmb3IgKCB2YXIgZmVhdHVyZSBpbiB0ZXN0cyApIHtcclxuICAgICAgICBpZiAoIGhhc093blByb3AodGVzdHMsIGZlYXR1cmUpICkge1xyXG4gICAgICAgICAgICAvLyBydW4gdGhlIHRlc3QsIHRocm93IHRoZSByZXR1cm4gdmFsdWUgaW50byB0aGUgTW9kZXJuaXpyLFxyXG4gICAgICAgICAgICAvLyAgIHRoZW4gYmFzZWQgb24gdGhhdCBib29sZWFuLCBkZWZpbmUgYW4gYXBwcm9wcmlhdGUgY2xhc3NOYW1lXHJcbiAgICAgICAgICAgIC8vICAgYW5kIHB1c2ggaXQgaW50byBhbiBhcnJheSBvZiBjbGFzc2VzIHdlJ2xsIGpvaW4gbGF0ZXIuXHJcbiAgICAgICAgICAgIGZlYXR1cmVOYW1lICA9IGZlYXR1cmUudG9Mb3dlckNhc2UoKTtcclxuICAgICAgICAgICAgTW9kZXJuaXpyW2ZlYXR1cmVOYW1lXSA9IHRlc3RzW2ZlYXR1cmVdKCk7XHJcblxyXG4gICAgICAgICAgICBjbGFzc2VzLnB1c2goKE1vZGVybml6cltmZWF0dXJlTmFtZV0gPyAnJyA6ICduby0nKSArIGZlYXR1cmVOYW1lKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyo+PndlYmZvcm1zKi9cclxuICAgIC8vIGlucHV0IHRlc3RzIG5lZWQgdG8gcnVuLlxyXG4gICAgTW9kZXJuaXpyLmlucHV0IHx8IHdlYmZvcm1zKCk7XHJcbiAgICAvKj4+d2ViZm9ybXMqL1xyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqIGFkZFRlc3QgYWxsb3dzIHRoZSB1c2VyIHRvIGRlZmluZSB0aGVpciBvd24gZmVhdHVyZSB0ZXN0c1xyXG4gICAgICogdGhlIHJlc3VsdCB3aWxsIGJlIGFkZGVkIG9udG8gdGhlIE1vZGVybml6ciBvYmplY3QsXHJcbiAgICAgKiBhcyB3ZWxsIGFzIGFuIGFwcHJvcHJpYXRlIGNsYXNzTmFtZSBzZXQgb24gdGhlIGh0bWwgZWxlbWVudFxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBmZWF0dXJlIC0gU3RyaW5nIG5hbWluZyB0aGUgZmVhdHVyZVxyXG4gICAgICogQHBhcmFtIHRlc3QgLSBGdW5jdGlvbiByZXR1cm5pbmcgdHJ1ZSBpZiBmZWF0dXJlIGlzIHN1cHBvcnRlZCwgZmFsc2UgaWYgbm90XHJcbiAgICAgKi9cclxuICAgICBNb2Rlcm5penIuYWRkVGVzdCA9IGZ1bmN0aW9uICggZmVhdHVyZSwgdGVzdCApIHtcclxuICAgICAgIGlmICggdHlwZW9mIGZlYXR1cmUgPT0gJ29iamVjdCcgKSB7XHJcbiAgICAgICAgIGZvciAoIHZhciBrZXkgaW4gZmVhdHVyZSApIHtcclxuICAgICAgICAgICBpZiAoIGhhc093blByb3AoIGZlYXR1cmUsIGtleSApICkge1xyXG4gICAgICAgICAgICAgTW9kZXJuaXpyLmFkZFRlc3QoIGtleSwgZmVhdHVyZVsga2V5IF0gKTtcclxuICAgICAgICAgICB9XHJcbiAgICAgICAgIH1cclxuICAgICAgIH0gZWxzZSB7XHJcblxyXG4gICAgICAgICBmZWF0dXJlID0gZmVhdHVyZS50b0xvd2VyQ2FzZSgpO1xyXG5cclxuICAgICAgICAgaWYgKCBNb2Rlcm5penJbZmVhdHVyZV0gIT09IHVuZGVmaW5lZCApIHtcclxuICAgICAgICAgICAvLyB3ZSdyZSBnb2luZyB0byBxdWl0IGlmIHlvdSdyZSB0cnlpbmcgdG8gb3ZlcndyaXRlIGFuIGV4aXN0aW5nIHRlc3RcclxuICAgICAgICAgICAvLyBpZiB3ZSB3ZXJlIHRvIGFsbG93IGl0LCB3ZSdkIGRvIHRoaXM6XHJcbiAgICAgICAgICAgLy8gICB2YXIgcmUgPSBuZXcgUmVnRXhwKFwiXFxcXGIobm8tKT9cIiArIGZlYXR1cmUgKyBcIlxcXFxiXCIpO1xyXG4gICAgICAgICAgIC8vICAgZG9jRWxlbWVudC5jbGFzc05hbWUgPSBkb2NFbGVtZW50LmNsYXNzTmFtZS5yZXBsYWNlKCByZSwgJycgKTtcclxuICAgICAgICAgICAvLyBidXQsIG5vIHJseSwgc3R1ZmYgJ2VtLlxyXG4gICAgICAgICAgIHJldHVybiBNb2Rlcm5penI7XHJcbiAgICAgICAgIH1cclxuXHJcbiAgICAgICAgIHRlc3QgPSB0eXBlb2YgdGVzdCA9PSAnZnVuY3Rpb24nID8gdGVzdCgpIDogdGVzdDtcclxuXHJcbiAgICAgICAgIGlmICh0eXBlb2YgZW5hYmxlQ2xhc3NlcyAhPT0gXCJ1bmRlZmluZWRcIiAmJiBlbmFibGVDbGFzc2VzKSB7XHJcbiAgICAgICAgICAgZG9jRWxlbWVudC5jbGFzc05hbWUgKz0gJyAnICsgKHRlc3QgPyAnJyA6ICduby0nKSArIGZlYXR1cmU7XHJcbiAgICAgICAgIH1cclxuICAgICAgICAgTW9kZXJuaXpyW2ZlYXR1cmVdID0gdGVzdDtcclxuXHJcbiAgICAgICB9XHJcblxyXG4gICAgICAgcmV0dXJuIE1vZGVybml6cjsgLy8gYWxsb3cgY2hhaW5pbmcuXHJcbiAgICAgfTtcclxuXHJcblxyXG4gICAgLy8gUmVzZXQgbW9kRWxlbS5jc3NUZXh0IHRvIG5vdGhpbmcgdG8gcmVkdWNlIG1lbW9yeSBmb290cHJpbnQuXHJcbiAgICBzZXRDc3MoJycpO1xyXG4gICAgbW9kRWxlbSA9IGlucHV0RWxlbSA9IG51bGw7XHJcblxyXG4gICAgLyo+PnNoaXYqL1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcHJlc2VydmUgSFRNTDUgU2hpdiBwcmV2My43LjEgfCBAYWZhcmthcyBAamRhbHRvbiBAam9uX25lYWwgQHJlbSB8IE1JVC9HUEwyIExpY2Vuc2VkXHJcbiAgICAgKi9cclxuICAgIDsoZnVuY3Rpb24od2luZG93LCBkb2N1bWVudCkge1xyXG4gICAgICAgIC8qanNoaW50IGV2aWw6dHJ1ZSAqL1xyXG4gICAgICAgIC8qKiB2ZXJzaW9uICovXHJcbiAgICAgICAgdmFyIHZlcnNpb24gPSAnMy43LjAnO1xyXG5cclxuICAgICAgICAvKiogUHJlc2V0IG9wdGlvbnMgKi9cclxuICAgICAgICB2YXIgb3B0aW9ucyA9IHdpbmRvdy5odG1sNSB8fCB7fTtcclxuXHJcbiAgICAgICAgLyoqIFVzZWQgdG8gc2tpcCBwcm9ibGVtIGVsZW1lbnRzICovXHJcbiAgICAgICAgdmFyIHJlU2tpcCA9IC9ePHxeKD86YnV0dG9ufG1hcHxzZWxlY3R8dGV4dGFyZWF8b2JqZWN0fGlmcmFtZXxvcHRpb258b3B0Z3JvdXApJC9pO1xyXG5cclxuICAgICAgICAvKiogTm90IGFsbCBlbGVtZW50cyBjYW4gYmUgY2xvbmVkIGluIElFICoqL1xyXG4gICAgICAgIHZhciBzYXZlQ2xvbmVzID0gL14oPzphfGJ8Y29kZXxkaXZ8ZmllbGRzZXR8aDF8aDJ8aDN8aDR8aDV8aDZ8aXxsYWJlbHxsaXxvbHxwfHF8c3BhbnxzdHJvbmd8c3R5bGV8dGFibGV8dGJvZHl8dGR8dGh8dHJ8dWwpJC9pO1xyXG5cclxuICAgICAgICAvKiogRGV0ZWN0IHdoZXRoZXIgdGhlIGJyb3dzZXIgc3VwcG9ydHMgZGVmYXVsdCBodG1sNSBzdHlsZXMgKi9cclxuICAgICAgICB2YXIgc3VwcG9ydHNIdG1sNVN0eWxlcztcclxuXHJcbiAgICAgICAgLyoqIE5hbWUgb2YgdGhlIGV4cGFuZG8sIHRvIHdvcmsgd2l0aCBtdWx0aXBsZSBkb2N1bWVudHMgb3IgdG8gcmUtc2hpdiBvbmUgZG9jdW1lbnQgKi9cclxuICAgICAgICB2YXIgZXhwYW5kbyA9ICdfaHRtbDVzaGl2JztcclxuXHJcbiAgICAgICAgLyoqIFRoZSBpZCBmb3IgdGhlIHRoZSBkb2N1bWVudHMgZXhwYW5kbyAqL1xyXG4gICAgICAgIHZhciBleHBhbklEID0gMDtcclxuXHJcbiAgICAgICAgLyoqIENhY2hlZCBkYXRhIGZvciBlYWNoIGRvY3VtZW50ICovXHJcbiAgICAgICAgdmFyIGV4cGFuZG9EYXRhID0ge307XHJcblxyXG4gICAgICAgIC8qKiBEZXRlY3Qgd2hldGhlciB0aGUgYnJvd3NlciBzdXBwb3J0cyB1bmtub3duIGVsZW1lbnRzICovXHJcbiAgICAgICAgdmFyIHN1cHBvcnRzVW5rbm93bkVsZW1lbnRzO1xyXG5cclxuICAgICAgICAoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICB2YXIgYSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcclxuICAgICAgICAgICAgYS5pbm5lckhUTUwgPSAnPHh5ej48L3h5ej4nO1xyXG4gICAgICAgICAgICAvL2lmIHRoZSBoaWRkZW4gcHJvcGVydHkgaXMgaW1wbGVtZW50ZWQgd2UgY2FuIGFzc3VtZSwgdGhhdCB0aGUgYnJvd3NlciBzdXBwb3J0cyBiYXNpYyBIVE1MNSBTdHlsZXNcclxuICAgICAgICAgICAgc3VwcG9ydHNIdG1sNVN0eWxlcyA9ICgnaGlkZGVuJyBpbiBhKTtcclxuXHJcbiAgICAgICAgICAgIHN1cHBvcnRzVW5rbm93bkVsZW1lbnRzID0gYS5jaGlsZE5vZGVzLmxlbmd0aCA9PSAxIHx8IChmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAvLyBhc3NpZ24gYSBmYWxzZSBwb3NpdGl2ZSBpZiB1bmFibGUgdG8gc2hpdlxyXG4gICAgICAgICAgICAgIChkb2N1bWVudC5jcmVhdGVFbGVtZW50KSgnYScpO1xyXG4gICAgICAgICAgICAgIHZhciBmcmFnID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpO1xyXG4gICAgICAgICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgICAgICB0eXBlb2YgZnJhZy5jbG9uZU5vZGUgPT0gJ3VuZGVmaW5lZCcgfHxcclxuICAgICAgICAgICAgICAgIHR5cGVvZiBmcmFnLmNyZWF0ZURvY3VtZW50RnJhZ21lbnQgPT0gJ3VuZGVmaW5lZCcgfHxcclxuICAgICAgICAgICAgICAgIHR5cGVvZiBmcmFnLmNyZWF0ZUVsZW1lbnQgPT0gJ3VuZGVmaW5lZCdcclxuICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICB9KCkpO1xyXG4gICAgICAgICAgfSBjYXRjaChlKSB7XHJcbiAgICAgICAgICAgIC8vIGFzc2lnbiBhIGZhbHNlIHBvc2l0aXZlIGlmIGRldGVjdGlvbiBmYWlscyA9PiB1bmFibGUgdG8gc2hpdlxyXG4gICAgICAgICAgICBzdXBwb3J0c0h0bWw1U3R5bGVzID0gdHJ1ZTtcclxuICAgICAgICAgICAgc3VwcG9ydHNVbmtub3duRWxlbWVudHMgPSB0cnVlO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICB9KCkpO1xyXG5cclxuICAgICAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQ3JlYXRlcyBhIHN0eWxlIHNoZWV0IHdpdGggdGhlIGdpdmVuIENTUyB0ZXh0IGFuZCBhZGRzIGl0IHRvIHRoZSBkb2N1bWVudC5cclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqIEBwYXJhbSB7RG9jdW1lbnR9IG93bmVyRG9jdW1lbnQgVGhlIGRvY3VtZW50LlxyXG4gICAgICAgICAqIEBwYXJhbSB7U3RyaW5nfSBjc3NUZXh0IFRoZSBDU1MgdGV4dC5cclxuICAgICAgICAgKiBAcmV0dXJucyB7U3R5bGVTaGVldH0gVGhlIHN0eWxlIGVsZW1lbnQuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZnVuY3Rpb24gYWRkU3R5bGVTaGVldChvd25lckRvY3VtZW50LCBjc3NUZXh0KSB7XHJcbiAgICAgICAgICB2YXIgcCA9IG93bmVyRG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpLFxyXG4gICAgICAgICAgcGFyZW50ID0gb3duZXJEb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaGVhZCcpWzBdIHx8IG93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xyXG5cclxuICAgICAgICAgIHAuaW5uZXJIVE1MID0gJ3g8c3R5bGU+JyArIGNzc1RleHQgKyAnPC9zdHlsZT4nO1xyXG4gICAgICAgICAgcmV0dXJuIHBhcmVudC5pbnNlcnRCZWZvcmUocC5sYXN0Q2hpbGQsIHBhcmVudC5maXJzdENoaWxkKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFJldHVybnMgdGhlIHZhbHVlIG9mIGBodG1sNS5lbGVtZW50c2AgYXMgYW4gYXJyYXkuXHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKiBAcmV0dXJucyB7QXJyYXl9IEFuIGFycmF5IG9mIHNoaXZlZCBlbGVtZW50IG5vZGUgbmFtZXMuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZnVuY3Rpb24gZ2V0RWxlbWVudHMoKSB7XHJcbiAgICAgICAgICB2YXIgZWxlbWVudHMgPSBodG1sNS5lbGVtZW50cztcclxuICAgICAgICAgIHJldHVybiB0eXBlb2YgZWxlbWVudHMgPT0gJ3N0cmluZycgPyBlbGVtZW50cy5zcGxpdCgnICcpIDogZWxlbWVudHM7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBSZXR1cm5zIHRoZSBkYXRhIGFzc29jaWF0ZWQgdG8gdGhlIGdpdmVuIGRvY3VtZW50XHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKiBAcGFyYW0ge0RvY3VtZW50fSBvd25lckRvY3VtZW50IFRoZSBkb2N1bWVudC5cclxuICAgICAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBBbiBvYmplY3Qgb2YgZGF0YS5cclxuICAgICAgICAgKi9cclxuICAgICAgICBmdW5jdGlvbiBnZXRFeHBhbmRvRGF0YShvd25lckRvY3VtZW50KSB7XHJcbiAgICAgICAgICB2YXIgZGF0YSA9IGV4cGFuZG9EYXRhW293bmVyRG9jdW1lbnRbZXhwYW5kb11dO1xyXG4gICAgICAgICAgaWYgKCFkYXRhKSB7XHJcbiAgICAgICAgICAgIGRhdGEgPSB7fTtcclxuICAgICAgICAgICAgZXhwYW5JRCsrO1xyXG4gICAgICAgICAgICBvd25lckRvY3VtZW50W2V4cGFuZG9dID0gZXhwYW5JRDtcclxuICAgICAgICAgICAgZXhwYW5kb0RhdGFbZXhwYW5JRF0gPSBkYXRhO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgcmV0dXJuIGRhdGE7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiByZXR1cm5zIGEgc2hpdmVkIGVsZW1lbnQgZm9yIHRoZSBnaXZlbiBub2RlTmFtZSBhbmQgZG9jdW1lbnRcclxuICAgICAgICAgKiBAbWVtYmVyT2YgaHRtbDVcclxuICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ30gbm9kZU5hbWUgbmFtZSBvZiB0aGUgZWxlbWVudFxyXG4gICAgICAgICAqIEBwYXJhbSB7RG9jdW1lbnR9IG93bmVyRG9jdW1lbnQgVGhlIGNvbnRleHQgZG9jdW1lbnQuXHJcbiAgICAgICAgICogQHJldHVybnMge09iamVjdH0gVGhlIHNoaXZlZCBlbGVtZW50LlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGZ1bmN0aW9uIGNyZWF0ZUVsZW1lbnQobm9kZU5hbWUsIG93bmVyRG9jdW1lbnQsIGRhdGEpe1xyXG4gICAgICAgICAgaWYgKCFvd25lckRvY3VtZW50KSB7XHJcbiAgICAgICAgICAgIG93bmVyRG9jdW1lbnQgPSBkb2N1bWVudDtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGlmKHN1cHBvcnRzVW5rbm93bkVsZW1lbnRzKXtcclxuICAgICAgICAgICAgcmV0dXJuIG93bmVyRG9jdW1lbnQuY3JlYXRlRWxlbWVudChub2RlTmFtZSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBpZiAoIWRhdGEpIHtcclxuICAgICAgICAgICAgZGF0YSA9IGdldEV4cGFuZG9EYXRhKG93bmVyRG9jdW1lbnQpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgdmFyIG5vZGU7XHJcblxyXG4gICAgICAgICAgaWYgKGRhdGEuY2FjaGVbbm9kZU5hbWVdKSB7XHJcbiAgICAgICAgICAgIG5vZGUgPSBkYXRhLmNhY2hlW25vZGVOYW1lXS5jbG9uZU5vZGUoKTtcclxuICAgICAgICAgIH0gZWxzZSBpZiAoc2F2ZUNsb25lcy50ZXN0KG5vZGVOYW1lKSkge1xyXG4gICAgICAgICAgICBub2RlID0gKGRhdGEuY2FjaGVbbm9kZU5hbWVdID0gZGF0YS5jcmVhdGVFbGVtKG5vZGVOYW1lKSkuY2xvbmVOb2RlKCk7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBub2RlID0gZGF0YS5jcmVhdGVFbGVtKG5vZGVOYW1lKTtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAvLyBBdm9pZCBhZGRpbmcgc29tZSBlbGVtZW50cyB0byBmcmFnbWVudHMgaW4gSUUgPCA5IGJlY2F1c2VcclxuICAgICAgICAgIC8vICogQXR0cmlidXRlcyBsaWtlIGBuYW1lYCBvciBgdHlwZWAgY2Fubm90IGJlIHNldC9jaGFuZ2VkIG9uY2UgYW4gZWxlbWVudFxyXG4gICAgICAgICAgLy8gICBpcyBpbnNlcnRlZCBpbnRvIGEgZG9jdW1lbnQvZnJhZ21lbnRcclxuICAgICAgICAgIC8vICogTGluayBlbGVtZW50cyB3aXRoIGBzcmNgIGF0dHJpYnV0ZXMgdGhhdCBhcmUgaW5hY2Nlc3NpYmxlLCBhcyB3aXRoXHJcbiAgICAgICAgICAvLyAgIGEgNDAzIHJlc3BvbnNlLCB3aWxsIGNhdXNlIHRoZSB0YWIvd2luZG93IHRvIGNyYXNoXHJcbiAgICAgICAgICAvLyAqIFNjcmlwdCBlbGVtZW50cyBhcHBlbmRlZCB0byBmcmFnbWVudHMgd2lsbCBleGVjdXRlIHdoZW4gdGhlaXIgYHNyY2BcclxuICAgICAgICAgIC8vICAgb3IgYHRleHRgIHByb3BlcnR5IGlzIHNldFxyXG4gICAgICAgICAgcmV0dXJuIG5vZGUuY2FuSGF2ZUNoaWxkcmVuICYmICFyZVNraXAudGVzdChub2RlTmFtZSkgJiYgIW5vZGUudGFnVXJuID8gZGF0YS5mcmFnLmFwcGVuZENoaWxkKG5vZGUpIDogbm9kZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIHJldHVybnMgYSBzaGl2ZWQgRG9jdW1lbnRGcmFnbWVudCBmb3IgdGhlIGdpdmVuIGRvY3VtZW50XHJcbiAgICAgICAgICogQG1lbWJlck9mIGh0bWw1XHJcbiAgICAgICAgICogQHBhcmFtIHtEb2N1bWVudH0gb3duZXJEb2N1bWVudCBUaGUgY29udGV4dCBkb2N1bWVudC5cclxuICAgICAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgc2hpdmVkIERvY3VtZW50RnJhZ21lbnQuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZnVuY3Rpb24gY3JlYXRlRG9jdW1lbnRGcmFnbWVudChvd25lckRvY3VtZW50LCBkYXRhKXtcclxuICAgICAgICAgIGlmICghb3duZXJEb2N1bWVudCkge1xyXG4gICAgICAgICAgICBvd25lckRvY3VtZW50ID0gZG9jdW1lbnQ7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBpZihzdXBwb3J0c1Vua25vd25FbGVtZW50cyl7XHJcbiAgICAgICAgICAgIHJldHVybiBvd25lckRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGRhdGEgPSBkYXRhIHx8IGdldEV4cGFuZG9EYXRhKG93bmVyRG9jdW1lbnQpO1xyXG4gICAgICAgICAgdmFyIGNsb25lID0gZGF0YS5mcmFnLmNsb25lTm9kZSgpLFxyXG4gICAgICAgICAgaSA9IDAsXHJcbiAgICAgICAgICBlbGVtcyA9IGdldEVsZW1lbnRzKCksXHJcbiAgICAgICAgICBsID0gZWxlbXMubGVuZ3RoO1xyXG4gICAgICAgICAgZm9yKDtpPGw7aSsrKXtcclxuICAgICAgICAgICAgY2xvbmUuY3JlYXRlRWxlbWVudChlbGVtc1tpXSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICByZXR1cm4gY2xvbmU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBTaGl2cyB0aGUgYGNyZWF0ZUVsZW1lbnRgIGFuZCBgY3JlYXRlRG9jdW1lbnRGcmFnbWVudGAgbWV0aG9kcyBvZiB0aGUgZG9jdW1lbnQuXHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKiBAcGFyYW0ge0RvY3VtZW50fERvY3VtZW50RnJhZ21lbnR9IG93bmVyRG9jdW1lbnQgVGhlIGRvY3VtZW50LlxyXG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhIG9mIHRoZSBkb2N1bWVudC5cclxuICAgICAgICAgKi9cclxuICAgICAgICBmdW5jdGlvbiBzaGl2TWV0aG9kcyhvd25lckRvY3VtZW50LCBkYXRhKSB7XHJcbiAgICAgICAgICBpZiAoIWRhdGEuY2FjaGUpIHtcclxuICAgICAgICAgICAgZGF0YS5jYWNoZSA9IHt9O1xyXG4gICAgICAgICAgICBkYXRhLmNyZWF0ZUVsZW0gPSBvd25lckRvY3VtZW50LmNyZWF0ZUVsZW1lbnQ7XHJcbiAgICAgICAgICAgIGRhdGEuY3JlYXRlRnJhZyA9IG93bmVyRG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudDtcclxuICAgICAgICAgICAgZGF0YS5mcmFnID0gZGF0YS5jcmVhdGVGcmFnKCk7XHJcbiAgICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICAgIG93bmVyRG9jdW1lbnQuY3JlYXRlRWxlbWVudCA9IGZ1bmN0aW9uKG5vZGVOYW1lKSB7XHJcbiAgICAgICAgICAgIC8vYWJvcnQgc2hpdlxyXG4gICAgICAgICAgICBpZiAoIWh0bWw1LnNoaXZNZXRob2RzKSB7XHJcbiAgICAgICAgICAgICAgcmV0dXJuIGRhdGEuY3JlYXRlRWxlbShub2RlTmFtZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZUVsZW1lbnQobm9kZU5hbWUsIG93bmVyRG9jdW1lbnQsIGRhdGEpO1xyXG4gICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICBvd25lckRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQgPSBGdW5jdGlvbignaCxmJywgJ3JldHVybiBmdW5jdGlvbigpeycgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3ZhciBuPWYuY2xvbmVOb2RlKCksYz1uLmNyZWF0ZUVsZW1lbnQ7JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnaC5zaGl2TWV0aG9kcyYmKCcgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gdW5yb2xsIHRoZSBgY3JlYXRlRWxlbWVudGAgY2FsbHNcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdldEVsZW1lbnRzKCkuam9pbigpLnJlcGxhY2UoL1tcXHdcXC1dKy9nLCBmdW5jdGlvbihub2RlTmFtZSkge1xyXG4gICAgICAgICAgICBkYXRhLmNyZWF0ZUVsZW0obm9kZU5hbWUpO1xyXG4gICAgICAgICAgICBkYXRhLmZyYWcuY3JlYXRlRWxlbWVudChub2RlTmFtZSk7XHJcbiAgICAgICAgICAgIHJldHVybiAnYyhcIicgKyBub2RlTmFtZSArICdcIiknO1xyXG4gICAgICAgICAgfSkgK1xyXG4gICAgICAgICAgICAnKTtyZXR1cm4gbn0nXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICkoaHRtbDUsIGRhdGEuZnJhZyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogU2hpdnMgdGhlIGdpdmVuIGRvY3VtZW50LlxyXG4gICAgICAgICAqIEBtZW1iZXJPZiBodG1sNVxyXG4gICAgICAgICAqIEBwYXJhbSB7RG9jdW1lbnR9IG93bmVyRG9jdW1lbnQgVGhlIGRvY3VtZW50IHRvIHNoaXYuXHJcbiAgICAgICAgICogQHJldHVybnMge0RvY3VtZW50fSBUaGUgc2hpdmVkIGRvY3VtZW50LlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGZ1bmN0aW9uIHNoaXZEb2N1bWVudChvd25lckRvY3VtZW50KSB7XHJcbiAgICAgICAgICBpZiAoIW93bmVyRG9jdW1lbnQpIHtcclxuICAgICAgICAgICAgb3duZXJEb2N1bWVudCA9IGRvY3VtZW50O1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgdmFyIGRhdGEgPSBnZXRFeHBhbmRvRGF0YShvd25lckRvY3VtZW50KTtcclxuXHJcbiAgICAgICAgICBpZiAoaHRtbDUuc2hpdkNTUyAmJiAhc3VwcG9ydHNIdG1sNVN0eWxlcyAmJiAhZGF0YS5oYXNDU1MpIHtcclxuICAgICAgICAgICAgZGF0YS5oYXNDU1MgPSAhIWFkZFN0eWxlU2hlZXQob3duZXJEb2N1bWVudCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gY29ycmVjdHMgYmxvY2sgZGlzcGxheSBub3QgZGVmaW5lZCBpbiBJRTYvNy84LzlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2FydGljbGUsYXNpZGUsZGlhbG9nLGZpZ2NhcHRpb24sZmlndXJlLGZvb3RlcixoZWFkZXIsaGdyb3VwLG1haW4sbmF2LHNlY3Rpb257ZGlzcGxheTpibG9ja30nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBhZGRzIHN0eWxpbmcgbm90IHByZXNlbnQgaW4gSUU2LzcvOC85XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ21hcmt7YmFja2dyb3VuZDojRkYwO2NvbG9yOiMwMDB9JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaGlkZXMgbm9uLXJlbmRlcmVkIGVsZW1lbnRzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3RlbXBsYXRle2Rpc3BsYXk6bm9uZX0nXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGlmICghc3VwcG9ydHNVbmtub3duRWxlbWVudHMpIHtcclxuICAgICAgICAgICAgc2hpdk1ldGhvZHMob3duZXJEb2N1bWVudCwgZGF0YSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICByZXR1cm4gb3duZXJEb2N1bWVudDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUaGUgYGh0bWw1YCBvYmplY3QgaXMgZXhwb3NlZCBzbyB0aGF0IG1vcmUgZWxlbWVudHMgY2FuIGJlIHNoaXZlZCBhbmRcclxuICAgICAgICAgKiBleGlzdGluZyBzaGl2aW5nIGNhbiBiZSBkZXRlY3RlZCBvbiBpZnJhbWVzLlxyXG4gICAgICAgICAqIEB0eXBlIE9iamVjdFxyXG4gICAgICAgICAqIEBleGFtcGxlXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiAvLyBvcHRpb25zIGNhbiBiZSBjaGFuZ2VkIGJlZm9yZSB0aGUgc2NyaXB0IGlzIGluY2x1ZGVkXHJcbiAgICAgICAgICogaHRtbDUgPSB7ICdlbGVtZW50cyc6ICdtYXJrIHNlY3Rpb24nLCAnc2hpdkNTUyc6IGZhbHNlLCAnc2hpdk1ldGhvZHMnOiBmYWxzZSB9O1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHZhciBodG1sNSA9IHtcclxuXHJcbiAgICAgICAgICAvKipcclxuICAgICAgICAgICAqIEFuIGFycmF5IG9yIHNwYWNlIHNlcGFyYXRlZCBzdHJpbmcgb2Ygbm9kZSBuYW1lcyBvZiB0aGUgZWxlbWVudHMgdG8gc2hpdi5cclxuICAgICAgICAgICAqIEBtZW1iZXJPZiBodG1sNVxyXG4gICAgICAgICAgICogQHR5cGUgQXJyYXl8U3RyaW5nXHJcbiAgICAgICAgICAgKi9cclxuICAgICAgICAgICdlbGVtZW50cyc6IG9wdGlvbnMuZWxlbWVudHMgfHwgJ2FiYnIgYXJ0aWNsZSBhc2lkZSBhdWRpbyBiZGkgY2FudmFzIGRhdGEgZGF0YWxpc3QgZGV0YWlscyBkaWFsb2cgZmlnY2FwdGlvbiBmaWd1cmUgZm9vdGVyIGhlYWRlciBoZ3JvdXAgbWFpbiBtYXJrIG1ldGVyIG5hdiBvdXRwdXQgcHJvZ3Jlc3Mgc2VjdGlvbiBzdW1tYXJ5IHRlbXBsYXRlIHRpbWUgdmlkZW8nLFxyXG5cclxuICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICogY3VycmVudCB2ZXJzaW9uIG9mIGh0bWw1c2hpdlxyXG4gICAgICAgICAgICovXHJcbiAgICAgICAgICAndmVyc2lvbic6IHZlcnNpb24sXHJcblxyXG4gICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgKiBBIGZsYWcgdG8gaW5kaWNhdGUgdGhhdCB0aGUgSFRNTDUgc3R5bGUgc2hlZXQgc2hvdWxkIGJlIGluc2VydGVkLlxyXG4gICAgICAgICAgICogQG1lbWJlck9mIGh0bWw1XHJcbiAgICAgICAgICAgKiBAdHlwZSBCb29sZWFuXHJcbiAgICAgICAgICAgKi9cclxuICAgICAgICAgICdzaGl2Q1NTJzogKG9wdGlvbnMuc2hpdkNTUyAhPT0gZmFsc2UpLFxyXG5cclxuICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICogSXMgZXF1YWwgdG8gdHJ1ZSBpZiBhIGJyb3dzZXIgc3VwcG9ydHMgY3JlYXRpbmcgdW5rbm93bi9IVE1MNSBlbGVtZW50c1xyXG4gICAgICAgICAgICogQG1lbWJlck9mIGh0bWw1XHJcbiAgICAgICAgICAgKiBAdHlwZSBib29sZWFuXHJcbiAgICAgICAgICAgKi9cclxuICAgICAgICAgICdzdXBwb3J0c1Vua25vd25FbGVtZW50cyc6IHN1cHBvcnRzVW5rbm93bkVsZW1lbnRzLFxyXG5cclxuICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICogQSBmbGFnIHRvIGluZGljYXRlIHRoYXQgdGhlIGRvY3VtZW50J3MgYGNyZWF0ZUVsZW1lbnRgIGFuZCBgY3JlYXRlRG9jdW1lbnRGcmFnbWVudGBcclxuICAgICAgICAgICAqIG1ldGhvZHMgc2hvdWxkIGJlIG92ZXJ3cml0dGVuLlxyXG4gICAgICAgICAgICogQG1lbWJlck9mIGh0bWw1XHJcbiAgICAgICAgICAgKiBAdHlwZSBCb29sZWFuXHJcbiAgICAgICAgICAgKi9cclxuICAgICAgICAgICdzaGl2TWV0aG9kcyc6IChvcHRpb25zLnNoaXZNZXRob2RzICE9PSBmYWxzZSksXHJcblxyXG4gICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgKiBBIHN0cmluZyB0byBkZXNjcmliZSB0aGUgdHlwZSBvZiBgaHRtbDVgIG9iamVjdCAoXCJkZWZhdWx0XCIgb3IgXCJkZWZhdWx0IHByaW50XCIpLlxyXG4gICAgICAgICAgICogQG1lbWJlck9mIGh0bWw1XHJcbiAgICAgICAgICAgKiBAdHlwZSBTdHJpbmdcclxuICAgICAgICAgICAqL1xyXG4gICAgICAgICAgJ3R5cGUnOiAnZGVmYXVsdCcsXHJcblxyXG4gICAgICAgICAgLy8gc2hpdnMgdGhlIGRvY3VtZW50IGFjY29yZGluZyB0byB0aGUgc3BlY2lmaWVkIGBodG1sNWAgb2JqZWN0IG9wdGlvbnNcclxuICAgICAgICAgICdzaGl2RG9jdW1lbnQnOiBzaGl2RG9jdW1lbnQsXHJcblxyXG4gICAgICAgICAgLy9jcmVhdGVzIGEgc2hpdmVkIGVsZW1lbnRcclxuICAgICAgICAgIGNyZWF0ZUVsZW1lbnQ6IGNyZWF0ZUVsZW1lbnQsXHJcblxyXG4gICAgICAgICAgLy9jcmVhdGVzIGEgc2hpdmVkIGRvY3VtZW50RnJhZ21lbnRcclxuICAgICAgICAgIGNyZWF0ZURvY3VtZW50RnJhZ21lbnQ6IGNyZWF0ZURvY3VtZW50RnJhZ21lbnRcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cclxuXHJcbiAgICAgICAgLy8gZXhwb3NlIGh0bWw1XHJcbiAgICAgICAgd2luZG93Lmh0bWw1ID0gaHRtbDU7XHJcblxyXG4gICAgICAgIC8vIHNoaXYgdGhlIGRvY3VtZW50XHJcbiAgICAgICAgc2hpdkRvY3VtZW50KGRvY3VtZW50KTtcclxuXHJcbiAgICB9KHRoaXMsIGRvY3VtZW50KSk7XHJcbiAgICAvKj4+c2hpdiovXHJcblxyXG4gICAgLy8gQXNzaWduIHByaXZhdGUgcHJvcGVydGllcyB0byB0aGUgcmV0dXJuIG9iamVjdCB3aXRoIHByZWZpeFxyXG4gICAgTW9kZXJuaXpyLl92ZXJzaW9uICAgICAgPSB2ZXJzaW9uO1xyXG5cclxuICAgIC8vIGV4cG9zZSB0aGVzZSBmb3IgdGhlIHBsdWdpbiBBUEkuIExvb2sgaW4gdGhlIHNvdXJjZSBmb3IgaG93IHRvIGpvaW4oKSB0aGVtIGFnYWluc3QgeW91ciBpbnB1dFxyXG4gICAgLyo+PnByZWZpeGVzKi9cclxuICAgIE1vZGVybml6ci5fcHJlZml4ZXMgICAgID0gcHJlZml4ZXM7XHJcbiAgICAvKj4+cHJlZml4ZXMqL1xyXG4gICAgLyo+PmRvbXByZWZpeGVzKi9cclxuICAgIE1vZGVybml6ci5fZG9tUHJlZml4ZXMgID0gZG9tUHJlZml4ZXM7XHJcbiAgICBNb2Rlcm5penIuX2Nzc29tUHJlZml4ZXMgID0gY3Nzb21QcmVmaXhlcztcclxuICAgIC8qPj5kb21wcmVmaXhlcyovXHJcblxyXG4gICAgLyo+Pm1xKi9cclxuICAgIC8vIE1vZGVybml6ci5tcSB0ZXN0cyBhIGdpdmVuIG1lZGlhIHF1ZXJ5LCBsaXZlIGFnYWluc3QgdGhlIGN1cnJlbnQgc3RhdGUgb2YgdGhlIHdpbmRvd1xyXG4gICAgLy8gQSBmZXcgaW1wb3J0YW50IG5vdGVzOlxyXG4gICAgLy8gICAqIElmIGEgYnJvd3NlciBkb2VzIG5vdCBzdXBwb3J0IG1lZGlhIHF1ZXJpZXMgYXQgYWxsIChlZy4gb2xkSUUpIHRoZSBtcSgpIHdpbGwgYWx3YXlzIHJldHVybiBmYWxzZVxyXG4gICAgLy8gICAqIEEgbWF4LXdpZHRoIG9yIG9yaWVudGF0aW9uIHF1ZXJ5IHdpbGwgYmUgZXZhbHVhdGVkIGFnYWluc3QgdGhlIGN1cnJlbnQgc3RhdGUsIHdoaWNoIG1heSBjaGFuZ2UgbGF0ZXIuXHJcbiAgICAvLyAgICogWW91IG11c3Qgc3BlY2lmeSB2YWx1ZXMuIEVnLiBJZiB5b3UgYXJlIHRlc3Rpbmcgc3VwcG9ydCBmb3IgdGhlIG1pbi13aWR0aCBtZWRpYSBxdWVyeSB1c2U6XHJcbiAgICAvLyAgICAgICBNb2Rlcm5penIubXEoJyhtaW4td2lkdGg6MCknKVxyXG4gICAgLy8gdXNhZ2U6XHJcbiAgICAvLyBNb2Rlcm5penIubXEoJ29ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOjc2OCknKVxyXG4gICAgTW9kZXJuaXpyLm1xICAgICAgICAgICAgPSB0ZXN0TWVkaWFRdWVyeTtcclxuICAgIC8qPj5tcSovXHJcblxyXG4gICAgLyo+Pmhhc2V2ZW50Ki9cclxuICAgIC8vIE1vZGVybml6ci5oYXNFdmVudCgpIGRldGVjdHMgc3VwcG9ydCBmb3IgYSBnaXZlbiBldmVudCwgd2l0aCBhbiBvcHRpb25hbCBlbGVtZW50IHRvIHRlc3Qgb25cclxuICAgIC8vIE1vZGVybml6ci5oYXNFdmVudCgnZ2VzdHVyZXN0YXJ0JywgZWxlbSlcclxuICAgIE1vZGVybml6ci5oYXNFdmVudCAgICAgID0gaXNFdmVudFN1cHBvcnRlZDtcclxuICAgIC8qPj5oYXNldmVudCovXHJcblxyXG4gICAgLyo+PnRlc3Rwcm9wKi9cclxuICAgIC8vIE1vZGVybml6ci50ZXN0UHJvcCgpIGludmVzdGlnYXRlcyB3aGV0aGVyIGEgZ2l2ZW4gc3R5bGUgcHJvcGVydHkgaXMgcmVjb2duaXplZFxyXG4gICAgLy8gTm90ZSB0aGF0IHRoZSBwcm9wZXJ0eSBuYW1lcyBtdXN0IGJlIHByb3ZpZGVkIGluIHRoZSBjYW1lbENhc2UgdmFyaWFudC5cclxuICAgIC8vIE1vZGVybml6ci50ZXN0UHJvcCgncG9pbnRlckV2ZW50cycpXHJcbiAgICBNb2Rlcm5penIudGVzdFByb3AgICAgICA9IGZ1bmN0aW9uKHByb3Ape1xyXG4gICAgICAgIHJldHVybiB0ZXN0UHJvcHMoW3Byb3BdKTtcclxuICAgIH07XHJcbiAgICAvKj4+dGVzdHByb3AqL1xyXG5cclxuICAgIC8qPj50ZXN0YWxscHJvcHMqL1xyXG4gICAgLy8gTW9kZXJuaXpyLnRlc3RBbGxQcm9wcygpIGludmVzdGlnYXRlcyB3aGV0aGVyIGEgZ2l2ZW4gc3R5bGUgcHJvcGVydHksXHJcbiAgICAvLyAgIG9yIGFueSBvZiBpdHMgdmVuZG9yLXByZWZpeGVkIHZhcmlhbnRzLCBpcyByZWNvZ25pemVkXHJcbiAgICAvLyBOb3RlIHRoYXQgdGhlIHByb3BlcnR5IG5hbWVzIG11c3QgYmUgcHJvdmlkZWQgaW4gdGhlIGNhbWVsQ2FzZSB2YXJpYW50LlxyXG4gICAgLy8gTW9kZXJuaXpyLnRlc3RBbGxQcm9wcygnYm94U2l6aW5nJylcclxuICAgIE1vZGVybml6ci50ZXN0QWxsUHJvcHMgID0gdGVzdFByb3BzQWxsO1xyXG4gICAgLyo+PnRlc3RhbGxwcm9wcyovXHJcblxyXG5cclxuICAgIC8qPj50ZXN0c3R5bGVzKi9cclxuICAgIC8vIE1vZGVybml6ci50ZXN0U3R5bGVzKCkgYWxsb3dzIHlvdSB0byBhZGQgY3VzdG9tIHN0eWxlcyB0byB0aGUgZG9jdW1lbnQgYW5kIHRlc3QgYW4gZWxlbWVudCBhZnRlcndhcmRzXHJcbiAgICAvLyBNb2Rlcm5penIudGVzdFN0eWxlcygnI21vZGVybml6ciB7IHBvc2l0aW9uOmFic29sdXRlIH0nLCBmdW5jdGlvbihlbGVtLCBydWxlKXsgLi4uIH0pXHJcbiAgICBNb2Rlcm5penIudGVzdFN0eWxlcyAgICA9IGluamVjdEVsZW1lbnRXaXRoU3R5bGVzO1xyXG4gICAgLyo+PnRlc3RzdHlsZXMqL1xyXG5cclxuXHJcbiAgICAvKj4+cHJlZml4ZWQqL1xyXG4gICAgLy8gTW9kZXJuaXpyLnByZWZpeGVkKCkgcmV0dXJucyB0aGUgcHJlZml4ZWQgb3Igbm9ucHJlZml4ZWQgcHJvcGVydHkgbmFtZSB2YXJpYW50IG9mIHlvdXIgaW5wdXRcclxuICAgIC8vIE1vZGVybml6ci5wcmVmaXhlZCgnYm94U2l6aW5nJykgLy8gJ01vekJveFNpemluZydcclxuXHJcbiAgICAvLyBQcm9wZXJ0aWVzIG11c3QgYmUgcGFzc2VkIGFzIGRvbS1zdHlsZSBjYW1lbGNhc2UsIHJhdGhlciB0aGFuIGBib3gtc2l6aW5nYCBoeXBlbnRhdGVkIHN0eWxlLlxyXG4gICAgLy8gUmV0dXJuIHZhbHVlcyB3aWxsIGFsc28gYmUgdGhlIGNhbWVsQ2FzZSB2YXJpYW50LCBpZiB5b3UgbmVlZCB0byB0cmFuc2xhdGUgdGhhdCB0byBoeXBlbmF0ZWQgc3R5bGUgdXNlOlxyXG4gICAgLy9cclxuICAgIC8vICAgICBzdHIucmVwbGFjZSgvKFtBLVpdKS9nLCBmdW5jdGlvbihzdHIsbTEpeyByZXR1cm4gJy0nICsgbTEudG9Mb3dlckNhc2UoKTsgfSkucmVwbGFjZSgvXm1zLS8sJy1tcy0nKTtcclxuXHJcbiAgICAvLyBJZiB5b3UncmUgdHJ5aW5nIHRvIGFzY2VydGFpbiB3aGljaCB0cmFuc2l0aW9uIGVuZCBldmVudCB0byBiaW5kIHRvLCB5b3UgbWlnaHQgZG8gc29tZXRoaW5nIGxpa2UuLi5cclxuICAgIC8vXHJcbiAgICAvLyAgICAgdmFyIHRyYW5zRW5kRXZlbnROYW1lcyA9IHtcclxuICAgIC8vICAgICAgICdXZWJraXRUcmFuc2l0aW9uJyA6ICd3ZWJraXRUcmFuc2l0aW9uRW5kJyxcclxuICAgIC8vICAgICAgICdNb3pUcmFuc2l0aW9uJyAgICA6ICd0cmFuc2l0aW9uZW5kJyxcclxuICAgIC8vICAgICAgICdPVHJhbnNpdGlvbicgICAgICA6ICdvVHJhbnNpdGlvbkVuZCcsXHJcbiAgICAvLyAgICAgICAnbXNUcmFuc2l0aW9uJyAgICAgOiAnTVNUcmFuc2l0aW9uRW5kJyxcclxuICAgIC8vICAgICAgICd0cmFuc2l0aW9uJyAgICAgICA6ICd0cmFuc2l0aW9uZW5kJ1xyXG4gICAgLy8gICAgIH0sXHJcbiAgICAvLyAgICAgdHJhbnNFbmRFdmVudE5hbWUgPSB0cmFuc0VuZEV2ZW50TmFtZXNbIE1vZGVybml6ci5wcmVmaXhlZCgndHJhbnNpdGlvbicpIF07XHJcblxyXG4gICAgTW9kZXJuaXpyLnByZWZpeGVkICAgICAgPSBmdW5jdGlvbihwcm9wLCBvYmosIGVsZW0pe1xyXG4gICAgICBpZighb2JqKSB7XHJcbiAgICAgICAgcmV0dXJuIHRlc3RQcm9wc0FsbChwcm9wLCAncGZ4Jyk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgLy8gVGVzdGluZyBET00gcHJvcGVydHkgZS5nLiBNb2Rlcm5penIucHJlZml4ZWQoJ3JlcXVlc3RBbmltYXRpb25GcmFtZScsIHdpbmRvdykgLy8gJ21velJlcXVlc3RBbmltYXRpb25GcmFtZSdcclxuICAgICAgICByZXR1cm4gdGVzdFByb3BzQWxsKHByb3AsIG9iaiwgZWxlbSk7XHJcbiAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKj4+cHJlZml4ZWQqL1xyXG5cclxuXHJcbiAgICAvKj4+Y3NzY2xhc3NlcyovXHJcbiAgICAvLyBSZW1vdmUgXCJuby1qc1wiIGNsYXNzIGZyb20gPGh0bWw+IGVsZW1lbnQsIGlmIGl0IGV4aXN0czpcclxuICAgIGRvY0VsZW1lbnQuY2xhc3NOYW1lID0gZG9jRWxlbWVudC5jbGFzc05hbWUucmVwbGFjZSgvKF58XFxzKW5vLWpzKFxcc3wkKS8sICckMSQyJykgK1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFkZCB0aGUgbmV3IGNsYXNzZXMgdG8gdGhlIDxodG1sPiBlbGVtZW50LlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKGVuYWJsZUNsYXNzZXMgPyAnIGpzICcgKyBjbGFzc2VzLmpvaW4oJyAnKSA6ICcnKTtcclxuICAgIC8qPj5jc3NjbGFzc2VzKi9cclxuXHJcbiAgICByZXR1cm4gTW9kZXJuaXpyO1xyXG5cclxufSkodGhpcywgdGhpcy5kb2N1bWVudCk7XHJcbi8qIVxyXG4gKiBqUXVlcnkgSmF2YVNjcmlwdCBMaWJyYXJ5IHYyLjEuNFxyXG4gKiBodHRwOi8vanF1ZXJ5LmNvbS9cclxuICpcclxuICogSW5jbHVkZXMgU2l6emxlLmpzXHJcbiAqIGh0dHA6Ly9zaXp6bGVqcy5jb20vXHJcbiAqXHJcbiAqIENvcHlyaWdodCAyMDA1LCAyMDE0IGpRdWVyeSBGb3VuZGF0aW9uLCBJbmMuIGFuZCBvdGhlciBjb250cmlidXRvcnNcclxuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlXHJcbiAqIGh0dHA6Ly9qcXVlcnkub3JnL2xpY2Vuc2VcclxuICpcclxuICogRGF0ZTogMjAxNS0wNC0yOFQxNjowMVpcclxuICovXHJcblxyXG4oZnVuY3Rpb24oIGdsb2JhbCwgZmFjdG9yeSApIHtcclxuXHJcblx0aWYgKCB0eXBlb2YgbW9kdWxlID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBtb2R1bGUuZXhwb3J0cyA9PT0gXCJvYmplY3RcIiApIHtcclxuXHRcdC8vIEZvciBDb21tb25KUyBhbmQgQ29tbW9uSlMtbGlrZSBlbnZpcm9ubWVudHMgd2hlcmUgYSBwcm9wZXIgYHdpbmRvd2BcclxuXHRcdC8vIGlzIHByZXNlbnQsIGV4ZWN1dGUgdGhlIGZhY3RvcnkgYW5kIGdldCBqUXVlcnkuXHJcblx0XHQvLyBGb3IgZW52aXJvbm1lbnRzIHRoYXQgZG8gbm90IGhhdmUgYSBgd2luZG93YCB3aXRoIGEgYGRvY3VtZW50YFxyXG5cdFx0Ly8gKHN1Y2ggYXMgTm9kZS5qcyksIGV4cG9zZSBhIGZhY3RvcnkgYXMgbW9kdWxlLmV4cG9ydHMuXHJcblx0XHQvLyBUaGlzIGFjY2VudHVhdGVzIHRoZSBuZWVkIGZvciB0aGUgY3JlYXRpb24gb2YgYSByZWFsIGB3aW5kb3dgLlxyXG5cdFx0Ly8gZS5nLiB2YXIgalF1ZXJ5ID0gcmVxdWlyZShcImpxdWVyeVwiKSh3aW5kb3cpO1xyXG5cdFx0Ly8gU2VlIHRpY2tldCAjMTQ1NDkgZm9yIG1vcmUgaW5mby5cclxuXHRcdG1vZHVsZS5leHBvcnRzID0gZ2xvYmFsLmRvY3VtZW50ID9cclxuXHRcdFx0ZmFjdG9yeSggZ2xvYmFsLCB0cnVlICkgOlxyXG5cdFx0XHRmdW5jdGlvbiggdyApIHtcclxuXHRcdFx0XHRpZiAoICF3LmRvY3VtZW50ICkge1xyXG5cdFx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKCBcImpRdWVyeSByZXF1aXJlcyBhIHdpbmRvdyB3aXRoIGEgZG9jdW1lbnRcIiApO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRyZXR1cm4gZmFjdG9yeSggdyApO1xyXG5cdFx0XHR9O1xyXG5cdH0gZWxzZSB7XHJcblx0XHRmYWN0b3J5KCBnbG9iYWwgKTtcclxuXHR9XHJcblxyXG4vLyBQYXNzIHRoaXMgaWYgd2luZG93IGlzIG5vdCBkZWZpbmVkIHlldFxyXG59KHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cgOiB0aGlzLCBmdW5jdGlvbiggd2luZG93LCBub0dsb2JhbCApIHtcclxuXHJcbi8vIFN1cHBvcnQ6IEZpcmVmb3ggMTgrXHJcbi8vIENhbid0IGJlIGluIHN0cmljdCBtb2RlLCBzZXZlcmFsIGxpYnMgaW5jbHVkaW5nIEFTUC5ORVQgdHJhY2VcclxuLy8gdGhlIHN0YWNrIHZpYSBhcmd1bWVudHMuY2FsbGVyLmNhbGxlZSBhbmQgRmlyZWZveCBkaWVzIGlmXHJcbi8vIHlvdSB0cnkgdG8gdHJhY2UgdGhyb3VnaCBcInVzZSBzdHJpY3RcIiBjYWxsIGNoYWlucy4gKCMxMzMzNSlcclxuLy9cclxuXHJcbnZhciBhcnIgPSBbXTtcclxuXHJcbnZhciBzbGljZSA9IGFyci5zbGljZTtcclxuXHJcbnZhciBjb25jYXQgPSBhcnIuY29uY2F0O1xyXG5cclxudmFyIHB1c2ggPSBhcnIucHVzaDtcclxuXHJcbnZhciBpbmRleE9mID0gYXJyLmluZGV4T2Y7XHJcblxyXG52YXIgY2xhc3MydHlwZSA9IHt9O1xyXG5cclxudmFyIHRvU3RyaW5nID0gY2xhc3MydHlwZS50b1N0cmluZztcclxuXHJcbnZhciBoYXNPd24gPSBjbGFzczJ0eXBlLmhhc093blByb3BlcnR5O1xyXG5cclxudmFyIHN1cHBvcnQgPSB7fTtcclxuXHJcblxyXG5cclxudmFyXHJcblx0Ly8gVXNlIHRoZSBjb3JyZWN0IGRvY3VtZW50IGFjY29yZGluZ2x5IHdpdGggd2luZG93IGFyZ3VtZW50IChzYW5kYm94KVxyXG5cdGRvY3VtZW50ID0gd2luZG93LmRvY3VtZW50LFxyXG5cclxuXHR2ZXJzaW9uID0gXCIyLjEuNFwiLFxyXG5cclxuXHQvLyBEZWZpbmUgYSBsb2NhbCBjb3B5IG9mIGpRdWVyeVxyXG5cdGpRdWVyeSA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCApIHtcclxuXHRcdC8vIFRoZSBqUXVlcnkgb2JqZWN0IGlzIGFjdHVhbGx5IGp1c3QgdGhlIGluaXQgY29uc3RydWN0b3IgJ2VuaGFuY2VkJ1xyXG5cdFx0Ly8gTmVlZCBpbml0IGlmIGpRdWVyeSBpcyBjYWxsZWQgKGp1c3QgYWxsb3cgZXJyb3IgdG8gYmUgdGhyb3duIGlmIG5vdCBpbmNsdWRlZClcclxuXHRcdHJldHVybiBuZXcgalF1ZXJ5LmZuLmluaXQoIHNlbGVjdG9yLCBjb250ZXh0ICk7XHJcblx0fSxcclxuXHJcblx0Ly8gU3VwcG9ydDogQW5kcm9pZDw0LjFcclxuXHQvLyBNYWtlIHN1cmUgd2UgdHJpbSBCT00gYW5kIE5CU1BcclxuXHRydHJpbSA9IC9eW1xcc1xcdUZFRkZcXHhBMF0rfFtcXHNcXHVGRUZGXFx4QTBdKyQvZyxcclxuXHJcblx0Ly8gTWF0Y2hlcyBkYXNoZWQgc3RyaW5nIGZvciBjYW1lbGl6aW5nXHJcblx0cm1zUHJlZml4ID0gL14tbXMtLyxcclxuXHRyZGFzaEFscGhhID0gLy0oW1xcZGEtel0pL2dpLFxyXG5cclxuXHQvLyBVc2VkIGJ5IGpRdWVyeS5jYW1lbENhc2UgYXMgY2FsbGJhY2sgdG8gcmVwbGFjZSgpXHJcblx0ZmNhbWVsQ2FzZSA9IGZ1bmN0aW9uKCBhbGwsIGxldHRlciApIHtcclxuXHRcdHJldHVybiBsZXR0ZXIudG9VcHBlckNhc2UoKTtcclxuXHR9O1xyXG5cclxualF1ZXJ5LmZuID0galF1ZXJ5LnByb3RvdHlwZSA9IHtcclxuXHQvLyBUaGUgY3VycmVudCB2ZXJzaW9uIG9mIGpRdWVyeSBiZWluZyB1c2VkXHJcblx0anF1ZXJ5OiB2ZXJzaW9uLFxyXG5cclxuXHRjb25zdHJ1Y3RvcjogalF1ZXJ5LFxyXG5cclxuXHQvLyBTdGFydCB3aXRoIGFuIGVtcHR5IHNlbGVjdG9yXHJcblx0c2VsZWN0b3I6IFwiXCIsXHJcblxyXG5cdC8vIFRoZSBkZWZhdWx0IGxlbmd0aCBvZiBhIGpRdWVyeSBvYmplY3QgaXMgMFxyXG5cdGxlbmd0aDogMCxcclxuXHJcblx0dG9BcnJheTogZnVuY3Rpb24oKSB7XHJcblx0XHRyZXR1cm4gc2xpY2UuY2FsbCggdGhpcyApO1xyXG5cdH0sXHJcblxyXG5cdC8vIEdldCB0aGUgTnRoIGVsZW1lbnQgaW4gdGhlIG1hdGNoZWQgZWxlbWVudCBzZXQgT1JcclxuXHQvLyBHZXQgdGhlIHdob2xlIG1hdGNoZWQgZWxlbWVudCBzZXQgYXMgYSBjbGVhbiBhcnJheVxyXG5cdGdldDogZnVuY3Rpb24oIG51bSApIHtcclxuXHRcdHJldHVybiBudW0gIT0gbnVsbCA/XHJcblxyXG5cdFx0XHQvLyBSZXR1cm4ganVzdCB0aGUgb25lIGVsZW1lbnQgZnJvbSB0aGUgc2V0XHJcblx0XHRcdCggbnVtIDwgMCA/IHRoaXNbIG51bSArIHRoaXMubGVuZ3RoIF0gOiB0aGlzWyBudW0gXSApIDpcclxuXHJcblx0XHRcdC8vIFJldHVybiBhbGwgdGhlIGVsZW1lbnRzIGluIGEgY2xlYW4gYXJyYXlcclxuXHRcdFx0c2xpY2UuY2FsbCggdGhpcyApO1xyXG5cdH0sXHJcblxyXG5cdC8vIFRha2UgYW4gYXJyYXkgb2YgZWxlbWVudHMgYW5kIHB1c2ggaXQgb250byB0aGUgc3RhY2tcclxuXHQvLyAocmV0dXJuaW5nIHRoZSBuZXcgbWF0Y2hlZCBlbGVtZW50IHNldClcclxuXHRwdXNoU3RhY2s6IGZ1bmN0aW9uKCBlbGVtcyApIHtcclxuXHJcblx0XHQvLyBCdWlsZCBhIG5ldyBqUXVlcnkgbWF0Y2hlZCBlbGVtZW50IHNldFxyXG5cdFx0dmFyIHJldCA9IGpRdWVyeS5tZXJnZSggdGhpcy5jb25zdHJ1Y3RvcigpLCBlbGVtcyApO1xyXG5cclxuXHRcdC8vIEFkZCB0aGUgb2xkIG9iamVjdCBvbnRvIHRoZSBzdGFjayAoYXMgYSByZWZlcmVuY2UpXHJcblx0XHRyZXQucHJldk9iamVjdCA9IHRoaXM7XHJcblx0XHRyZXQuY29udGV4dCA9IHRoaXMuY29udGV4dDtcclxuXHJcblx0XHQvLyBSZXR1cm4gdGhlIG5ld2x5LWZvcm1lZCBlbGVtZW50IHNldFxyXG5cdFx0cmV0dXJuIHJldDtcclxuXHR9LFxyXG5cclxuXHQvLyBFeGVjdXRlIGEgY2FsbGJhY2sgZm9yIGV2ZXJ5IGVsZW1lbnQgaW4gdGhlIG1hdGNoZWQgc2V0LlxyXG5cdC8vIChZb3UgY2FuIHNlZWQgdGhlIGFyZ3VtZW50cyB3aXRoIGFuIGFycmF5IG9mIGFyZ3MsIGJ1dCB0aGlzIGlzXHJcblx0Ly8gb25seSB1c2VkIGludGVybmFsbHkuKVxyXG5cdGVhY2g6IGZ1bmN0aW9uKCBjYWxsYmFjaywgYXJncyApIHtcclxuXHRcdHJldHVybiBqUXVlcnkuZWFjaCggdGhpcywgY2FsbGJhY2ssIGFyZ3MgKTtcclxuXHR9LFxyXG5cclxuXHRtYXA6IGZ1bmN0aW9uKCBjYWxsYmFjayApIHtcclxuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggalF1ZXJ5Lm1hcCh0aGlzLCBmdW5jdGlvbiggZWxlbSwgaSApIHtcclxuXHRcdFx0cmV0dXJuIGNhbGxiYWNrLmNhbGwoIGVsZW0sIGksIGVsZW0gKTtcclxuXHRcdH0pKTtcclxuXHR9LFxyXG5cclxuXHRzbGljZTogZnVuY3Rpb24oKSB7XHJcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIHNsaWNlLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKSApO1xyXG5cdH0sXHJcblxyXG5cdGZpcnN0OiBmdW5jdGlvbigpIHtcclxuXHRcdHJldHVybiB0aGlzLmVxKCAwICk7XHJcblx0fSxcclxuXHJcblx0bGFzdDogZnVuY3Rpb24oKSB7XHJcblx0XHRyZXR1cm4gdGhpcy5lcSggLTEgKTtcclxuXHR9LFxyXG5cclxuXHRlcTogZnVuY3Rpb24oIGkgKSB7XHJcblx0XHR2YXIgbGVuID0gdGhpcy5sZW5ndGgsXHJcblx0XHRcdGogPSAraSArICggaSA8IDAgPyBsZW4gOiAwICk7XHJcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGogPj0gMCAmJiBqIDwgbGVuID8gWyB0aGlzW2pdIF0gOiBbXSApO1xyXG5cdH0sXHJcblxyXG5cdGVuZDogZnVuY3Rpb24oKSB7XHJcblx0XHRyZXR1cm4gdGhpcy5wcmV2T2JqZWN0IHx8IHRoaXMuY29uc3RydWN0b3IobnVsbCk7XHJcblx0fSxcclxuXHJcblx0Ly8gRm9yIGludGVybmFsIHVzZSBvbmx5LlxyXG5cdC8vIEJlaGF2ZXMgbGlrZSBhbiBBcnJheSdzIG1ldGhvZCwgbm90IGxpa2UgYSBqUXVlcnkgbWV0aG9kLlxyXG5cdHB1c2g6IHB1c2gsXHJcblx0c29ydDogYXJyLnNvcnQsXHJcblx0c3BsaWNlOiBhcnIuc3BsaWNlXHJcbn07XHJcblxyXG5qUXVlcnkuZXh0ZW5kID0galF1ZXJ5LmZuLmV4dGVuZCA9IGZ1bmN0aW9uKCkge1xyXG5cdHZhciBvcHRpb25zLCBuYW1lLCBzcmMsIGNvcHksIGNvcHlJc0FycmF5LCBjbG9uZSxcclxuXHRcdHRhcmdldCA9IGFyZ3VtZW50c1swXSB8fCB7fSxcclxuXHRcdGkgPSAxLFxyXG5cdFx0bGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aCxcclxuXHRcdGRlZXAgPSBmYWxzZTtcclxuXHJcblx0Ly8gSGFuZGxlIGEgZGVlcCBjb3B5IHNpdHVhdGlvblxyXG5cdGlmICggdHlwZW9mIHRhcmdldCA9PT0gXCJib29sZWFuXCIgKSB7XHJcblx0XHRkZWVwID0gdGFyZ2V0O1xyXG5cclxuXHRcdC8vIFNraXAgdGhlIGJvb2xlYW4gYW5kIHRoZSB0YXJnZXRcclxuXHRcdHRhcmdldCA9IGFyZ3VtZW50c1sgaSBdIHx8IHt9O1xyXG5cdFx0aSsrO1xyXG5cdH1cclxuXHJcblx0Ly8gSGFuZGxlIGNhc2Ugd2hlbiB0YXJnZXQgaXMgYSBzdHJpbmcgb3Igc29tZXRoaW5nIChwb3NzaWJsZSBpbiBkZWVwIGNvcHkpXHJcblx0aWYgKCB0eXBlb2YgdGFyZ2V0ICE9PSBcIm9iamVjdFwiICYmICFqUXVlcnkuaXNGdW5jdGlvbih0YXJnZXQpICkge1xyXG5cdFx0dGFyZ2V0ID0ge307XHJcblx0fVxyXG5cclxuXHQvLyBFeHRlbmQgalF1ZXJ5IGl0c2VsZiBpZiBvbmx5IG9uZSBhcmd1bWVudCBpcyBwYXNzZWRcclxuXHRpZiAoIGkgPT09IGxlbmd0aCApIHtcclxuXHRcdHRhcmdldCA9IHRoaXM7XHJcblx0XHRpLS07XHJcblx0fVxyXG5cclxuXHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcclxuXHRcdC8vIE9ubHkgZGVhbCB3aXRoIG5vbi1udWxsL3VuZGVmaW5lZCB2YWx1ZXNcclxuXHRcdGlmICggKG9wdGlvbnMgPSBhcmd1bWVudHNbIGkgXSkgIT0gbnVsbCApIHtcclxuXHRcdFx0Ly8gRXh0ZW5kIHRoZSBiYXNlIG9iamVjdFxyXG5cdFx0XHRmb3IgKCBuYW1lIGluIG9wdGlvbnMgKSB7XHJcblx0XHRcdFx0c3JjID0gdGFyZ2V0WyBuYW1lIF07XHJcblx0XHRcdFx0Y29weSA9IG9wdGlvbnNbIG5hbWUgXTtcclxuXHJcblx0XHRcdFx0Ly8gUHJldmVudCBuZXZlci1lbmRpbmcgbG9vcFxyXG5cdFx0XHRcdGlmICggdGFyZ2V0ID09PSBjb3B5ICkge1xyXG5cdFx0XHRcdFx0Y29udGludWU7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHQvLyBSZWN1cnNlIGlmIHdlJ3JlIG1lcmdpbmcgcGxhaW4gb2JqZWN0cyBvciBhcnJheXNcclxuXHRcdFx0XHRpZiAoIGRlZXAgJiYgY29weSAmJiAoIGpRdWVyeS5pc1BsYWluT2JqZWN0KGNvcHkpIHx8IChjb3B5SXNBcnJheSA9IGpRdWVyeS5pc0FycmF5KGNvcHkpKSApICkge1xyXG5cdFx0XHRcdFx0aWYgKCBjb3B5SXNBcnJheSApIHtcclxuXHRcdFx0XHRcdFx0Y29weUlzQXJyYXkgPSBmYWxzZTtcclxuXHRcdFx0XHRcdFx0Y2xvbmUgPSBzcmMgJiYgalF1ZXJ5LmlzQXJyYXkoc3JjKSA/IHNyYyA6IFtdO1xyXG5cclxuXHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdGNsb25lID0gc3JjICYmIGpRdWVyeS5pc1BsYWluT2JqZWN0KHNyYykgPyBzcmMgOiB7fTtcclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHQvLyBOZXZlciBtb3ZlIG9yaWdpbmFsIG9iamVjdHMsIGNsb25lIHRoZW1cclxuXHRcdFx0XHRcdHRhcmdldFsgbmFtZSBdID0galF1ZXJ5LmV4dGVuZCggZGVlcCwgY2xvbmUsIGNvcHkgKTtcclxuXHJcblx0XHRcdFx0Ly8gRG9uJ3QgYnJpbmcgaW4gdW5kZWZpbmVkIHZhbHVlc1xyXG5cdFx0XHRcdH0gZWxzZSBpZiAoIGNvcHkgIT09IHVuZGVmaW5lZCApIHtcclxuXHRcdFx0XHRcdHRhcmdldFsgbmFtZSBdID0gY29weTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdC8vIFJldHVybiB0aGUgbW9kaWZpZWQgb2JqZWN0XHJcblx0cmV0dXJuIHRhcmdldDtcclxufTtcclxuXHJcbmpRdWVyeS5leHRlbmQoe1xyXG5cdC8vIFVuaXF1ZSBmb3IgZWFjaCBjb3B5IG9mIGpRdWVyeSBvbiB0aGUgcGFnZVxyXG5cdGV4cGFuZG86IFwialF1ZXJ5XCIgKyAoIHZlcnNpb24gKyBNYXRoLnJhbmRvbSgpICkucmVwbGFjZSggL1xcRC9nLCBcIlwiICksXHJcblxyXG5cdC8vIEFzc3VtZSBqUXVlcnkgaXMgcmVhZHkgd2l0aG91dCB0aGUgcmVhZHkgbW9kdWxlXHJcblx0aXNSZWFkeTogdHJ1ZSxcclxuXHJcblx0ZXJyb3I6IGZ1bmN0aW9uKCBtc2cgKSB7XHJcblx0XHR0aHJvdyBuZXcgRXJyb3IoIG1zZyApO1xyXG5cdH0sXHJcblxyXG5cdG5vb3A6IGZ1bmN0aW9uKCkge30sXHJcblxyXG5cdGlzRnVuY3Rpb246IGZ1bmN0aW9uKCBvYmogKSB7XHJcblx0XHRyZXR1cm4galF1ZXJ5LnR5cGUob2JqKSA9PT0gXCJmdW5jdGlvblwiO1xyXG5cdH0sXHJcblxyXG5cdGlzQXJyYXk6IEFycmF5LmlzQXJyYXksXHJcblxyXG5cdGlzV2luZG93OiBmdW5jdGlvbiggb2JqICkge1xyXG5cdFx0cmV0dXJuIG9iaiAhPSBudWxsICYmIG9iaiA9PT0gb2JqLndpbmRvdztcclxuXHR9LFxyXG5cclxuXHRpc051bWVyaWM6IGZ1bmN0aW9uKCBvYmogKSB7XHJcblx0XHQvLyBwYXJzZUZsb2F0IE5hTnMgbnVtZXJpYy1jYXN0IGZhbHNlIHBvc2l0aXZlcyAobnVsbHx0cnVlfGZhbHNlfFwiXCIpXHJcblx0XHQvLyAuLi5idXQgbWlzaW50ZXJwcmV0cyBsZWFkaW5nLW51bWJlciBzdHJpbmdzLCBwYXJ0aWN1bGFybHkgaGV4IGxpdGVyYWxzIChcIjB4Li4uXCIpXHJcblx0XHQvLyBzdWJ0cmFjdGlvbiBmb3JjZXMgaW5maW5pdGllcyB0byBOYU5cclxuXHRcdC8vIGFkZGluZyAxIGNvcnJlY3RzIGxvc3Mgb2YgcHJlY2lzaW9uIGZyb20gcGFyc2VGbG9hdCAoIzE1MTAwKVxyXG5cdFx0cmV0dXJuICFqUXVlcnkuaXNBcnJheSggb2JqICkgJiYgKG9iaiAtIHBhcnNlRmxvYXQoIG9iaiApICsgMSkgPj0gMDtcclxuXHR9LFxyXG5cclxuXHRpc1BsYWluT2JqZWN0OiBmdW5jdGlvbiggb2JqICkge1xyXG5cdFx0Ly8gTm90IHBsYWluIG9iamVjdHM6XHJcblx0XHQvLyAtIEFueSBvYmplY3Qgb3IgdmFsdWUgd2hvc2UgaW50ZXJuYWwgW1tDbGFzc11dIHByb3BlcnR5IGlzIG5vdCBcIltvYmplY3QgT2JqZWN0XVwiXHJcblx0XHQvLyAtIERPTSBub2Rlc1xyXG5cdFx0Ly8gLSB3aW5kb3dcclxuXHRcdGlmICggalF1ZXJ5LnR5cGUoIG9iaiApICE9PSBcIm9iamVjdFwiIHx8IG9iai5ub2RlVHlwZSB8fCBqUXVlcnkuaXNXaW5kb3coIG9iaiApICkge1xyXG5cdFx0XHRyZXR1cm4gZmFsc2U7XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKCBvYmouY29uc3RydWN0b3IgJiZcclxuXHRcdFx0XHQhaGFzT3duLmNhbGwoIG9iai5jb25zdHJ1Y3Rvci5wcm90b3R5cGUsIFwiaXNQcm90b3R5cGVPZlwiICkgKSB7XHJcblx0XHRcdHJldHVybiBmYWxzZTtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBJZiB0aGUgZnVuY3Rpb24gaGFzbid0IHJldHVybmVkIGFscmVhZHksIHdlJ3JlIGNvbmZpZGVudCB0aGF0XHJcblx0XHQvLyB8b2JqfCBpcyBhIHBsYWluIG9iamVjdCwgY3JlYXRlZCBieSB7fSBvciBjb25zdHJ1Y3RlZCB3aXRoIG5ldyBPYmplY3RcclxuXHRcdHJldHVybiB0cnVlO1xyXG5cdH0sXHJcblxyXG5cdGlzRW1wdHlPYmplY3Q6IGZ1bmN0aW9uKCBvYmogKSB7XHJcblx0XHR2YXIgbmFtZTtcclxuXHRcdGZvciAoIG5hbWUgaW4gb2JqICkge1xyXG5cdFx0XHRyZXR1cm4gZmFsc2U7XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gdHJ1ZTtcclxuXHR9LFxyXG5cclxuXHR0eXBlOiBmdW5jdGlvbiggb2JqICkge1xyXG5cdFx0aWYgKCBvYmogPT0gbnVsbCApIHtcclxuXHRcdFx0cmV0dXJuIG9iaiArIFwiXCI7XHJcblx0XHR9XHJcblx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkPDQuMCwgaU9TPDYgKGZ1bmN0aW9uaXNoIFJlZ0V4cClcclxuXHRcdHJldHVybiB0eXBlb2Ygb2JqID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBvYmogPT09IFwiZnVuY3Rpb25cIiA/XHJcblx0XHRcdGNsYXNzMnR5cGVbIHRvU3RyaW5nLmNhbGwob2JqKSBdIHx8IFwib2JqZWN0XCIgOlxyXG5cdFx0XHR0eXBlb2Ygb2JqO1xyXG5cdH0sXHJcblxyXG5cdC8vIEV2YWx1YXRlcyBhIHNjcmlwdCBpbiBhIGdsb2JhbCBjb250ZXh0XHJcblx0Z2xvYmFsRXZhbDogZnVuY3Rpb24oIGNvZGUgKSB7XHJcblx0XHR2YXIgc2NyaXB0LFxyXG5cdFx0XHRpbmRpcmVjdCA9IGV2YWw7XHJcblxyXG5cdFx0Y29kZSA9IGpRdWVyeS50cmltKCBjb2RlICk7XHJcblxyXG5cdFx0aWYgKCBjb2RlICkge1xyXG5cdFx0XHQvLyBJZiB0aGUgY29kZSBpbmNsdWRlcyBhIHZhbGlkLCBwcm9sb2d1ZSBwb3NpdGlvblxyXG5cdFx0XHQvLyBzdHJpY3QgbW9kZSBwcmFnbWEsIGV4ZWN1dGUgY29kZSBieSBpbmplY3RpbmcgYVxyXG5cdFx0XHQvLyBzY3JpcHQgdGFnIGludG8gdGhlIGRvY3VtZW50LlxyXG5cdFx0XHRpZiAoIGNvZGUuaW5kZXhPZihcInVzZSBzdHJpY3RcIikgPT09IDEgKSB7XHJcblx0XHRcdFx0c2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNjcmlwdFwiKTtcclxuXHRcdFx0XHRzY3JpcHQudGV4dCA9IGNvZGU7XHJcblx0XHRcdFx0ZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZCggc2NyaXB0ICkucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggc2NyaXB0ICk7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdC8vIE90aGVyd2lzZSwgYXZvaWQgdGhlIERPTSBub2RlIGNyZWF0aW9uLCBpbnNlcnRpb25cclxuXHRcdFx0Ly8gYW5kIHJlbW92YWwgYnkgdXNpbmcgYW4gaW5kaXJlY3QgZ2xvYmFsIGV2YWxcclxuXHRcdFx0XHRpbmRpcmVjdCggY29kZSApO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fSxcclxuXHJcblx0Ly8gQ29udmVydCBkYXNoZWQgdG8gY2FtZWxDYXNlOyB1c2VkIGJ5IHRoZSBjc3MgYW5kIGRhdGEgbW9kdWxlc1xyXG5cdC8vIFN1cHBvcnQ6IElFOS0xMStcclxuXHQvLyBNaWNyb3NvZnQgZm9yZ290IHRvIGh1bXAgdGhlaXIgdmVuZG9yIHByZWZpeCAoIzk1NzIpXHJcblx0Y2FtZWxDYXNlOiBmdW5jdGlvbiggc3RyaW5nICkge1xyXG5cdFx0cmV0dXJuIHN0cmluZy5yZXBsYWNlKCBybXNQcmVmaXgsIFwibXMtXCIgKS5yZXBsYWNlKCByZGFzaEFscGhhLCBmY2FtZWxDYXNlICk7XHJcblx0fSxcclxuXHJcblx0bm9kZU5hbWU6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lICkge1xyXG5cdFx0cmV0dXJuIGVsZW0ubm9kZU5hbWUgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBuYW1lLnRvTG93ZXJDYXNlKCk7XHJcblx0fSxcclxuXHJcblx0Ly8gYXJncyBpcyBmb3IgaW50ZXJuYWwgdXNhZ2Ugb25seVxyXG5cdGVhY2g6IGZ1bmN0aW9uKCBvYmosIGNhbGxiYWNrLCBhcmdzICkge1xyXG5cdFx0dmFyIHZhbHVlLFxyXG5cdFx0XHRpID0gMCxcclxuXHRcdFx0bGVuZ3RoID0gb2JqLmxlbmd0aCxcclxuXHRcdFx0aXNBcnJheSA9IGlzQXJyYXlsaWtlKCBvYmogKTtcclxuXHJcblx0XHRpZiAoIGFyZ3MgKSB7XHJcblx0XHRcdGlmICggaXNBcnJheSApIHtcclxuXHRcdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcclxuXHRcdFx0XHRcdHZhbHVlID0gY2FsbGJhY2suYXBwbHkoIG9ialsgaSBdLCBhcmdzICk7XHJcblxyXG5cdFx0XHRcdFx0aWYgKCB2YWx1ZSA9PT0gZmFsc2UgKSB7XHJcblx0XHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRmb3IgKCBpIGluIG9iaiApIHtcclxuXHRcdFx0XHRcdHZhbHVlID0gY2FsbGJhY2suYXBwbHkoIG9ialsgaSBdLCBhcmdzICk7XHJcblxyXG5cdFx0XHRcdFx0aWYgKCB2YWx1ZSA9PT0gZmFsc2UgKSB7XHJcblx0XHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cclxuXHRcdC8vIEEgc3BlY2lhbCwgZmFzdCwgY2FzZSBmb3IgdGhlIG1vc3QgY29tbW9uIHVzZSBvZiBlYWNoXHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRpZiAoIGlzQXJyYXkgKSB7XHJcblx0XHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XHJcblx0XHRcdFx0XHR2YWx1ZSA9IGNhbGxiYWNrLmNhbGwoIG9ialsgaSBdLCBpLCBvYmpbIGkgXSApO1xyXG5cclxuXHRcdFx0XHRcdGlmICggdmFsdWUgPT09IGZhbHNlICkge1xyXG5cdFx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0Zm9yICggaSBpbiBvYmogKSB7XHJcblx0XHRcdFx0XHR2YWx1ZSA9IGNhbGxiYWNrLmNhbGwoIG9ialsgaSBdLCBpLCBvYmpbIGkgXSApO1xyXG5cclxuXHRcdFx0XHRcdGlmICggdmFsdWUgPT09IGZhbHNlICkge1xyXG5cdFx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gb2JqO1xyXG5cdH0sXHJcblxyXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQ8NC4xXHJcblx0dHJpbTogZnVuY3Rpb24oIHRleHQgKSB7XHJcblx0XHRyZXR1cm4gdGV4dCA9PSBudWxsID9cclxuXHRcdFx0XCJcIiA6XHJcblx0XHRcdCggdGV4dCArIFwiXCIgKS5yZXBsYWNlKCBydHJpbSwgXCJcIiApO1xyXG5cdH0sXHJcblxyXG5cdC8vIHJlc3VsdHMgaXMgZm9yIGludGVybmFsIHVzYWdlIG9ubHlcclxuXHRtYWtlQXJyYXk6IGZ1bmN0aW9uKCBhcnIsIHJlc3VsdHMgKSB7XHJcblx0XHR2YXIgcmV0ID0gcmVzdWx0cyB8fCBbXTtcclxuXHJcblx0XHRpZiAoIGFyciAhPSBudWxsICkge1xyXG5cdFx0XHRpZiAoIGlzQXJyYXlsaWtlKCBPYmplY3QoYXJyKSApICkge1xyXG5cdFx0XHRcdGpRdWVyeS5tZXJnZSggcmV0LFxyXG5cdFx0XHRcdFx0dHlwZW9mIGFyciA9PT0gXCJzdHJpbmdcIiA/XHJcblx0XHRcdFx0XHRbIGFyciBdIDogYXJyXHJcblx0XHRcdFx0KTtcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRwdXNoLmNhbGwoIHJldCwgYXJyICk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gcmV0O1xyXG5cdH0sXHJcblxyXG5cdGluQXJyYXk6IGZ1bmN0aW9uKCBlbGVtLCBhcnIsIGkgKSB7XHJcblx0XHRyZXR1cm4gYXJyID09IG51bGwgPyAtMSA6IGluZGV4T2YuY2FsbCggYXJyLCBlbGVtLCBpICk7XHJcblx0fSxcclxuXHJcblx0bWVyZ2U6IGZ1bmN0aW9uKCBmaXJzdCwgc2Vjb25kICkge1xyXG5cdFx0dmFyIGxlbiA9ICtzZWNvbmQubGVuZ3RoLFxyXG5cdFx0XHRqID0gMCxcclxuXHRcdFx0aSA9IGZpcnN0Lmxlbmd0aDtcclxuXHJcblx0XHRmb3IgKCA7IGogPCBsZW47IGorKyApIHtcclxuXHRcdFx0Zmlyc3RbIGkrKyBdID0gc2Vjb25kWyBqIF07XHJcblx0XHR9XHJcblxyXG5cdFx0Zmlyc3QubGVuZ3RoID0gaTtcclxuXHJcblx0XHRyZXR1cm4gZmlyc3Q7XHJcblx0fSxcclxuXHJcblx0Z3JlcDogZnVuY3Rpb24oIGVsZW1zLCBjYWxsYmFjaywgaW52ZXJ0ICkge1xyXG5cdFx0dmFyIGNhbGxiYWNrSW52ZXJzZSxcclxuXHRcdFx0bWF0Y2hlcyA9IFtdLFxyXG5cdFx0XHRpID0gMCxcclxuXHRcdFx0bGVuZ3RoID0gZWxlbXMubGVuZ3RoLFxyXG5cdFx0XHRjYWxsYmFja0V4cGVjdCA9ICFpbnZlcnQ7XHJcblxyXG5cdFx0Ly8gR28gdGhyb3VnaCB0aGUgYXJyYXksIG9ubHkgc2F2aW5nIHRoZSBpdGVtc1xyXG5cdFx0Ly8gdGhhdCBwYXNzIHRoZSB2YWxpZGF0b3IgZnVuY3Rpb25cclxuXHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xyXG5cdFx0XHRjYWxsYmFja0ludmVyc2UgPSAhY2FsbGJhY2soIGVsZW1zWyBpIF0sIGkgKTtcclxuXHRcdFx0aWYgKCBjYWxsYmFja0ludmVyc2UgIT09IGNhbGxiYWNrRXhwZWN0ICkge1xyXG5cdFx0XHRcdG1hdGNoZXMucHVzaCggZWxlbXNbIGkgXSApO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIG1hdGNoZXM7XHJcblx0fSxcclxuXHJcblx0Ly8gYXJnIGlzIGZvciBpbnRlcm5hbCB1c2FnZSBvbmx5XHJcblx0bWFwOiBmdW5jdGlvbiggZWxlbXMsIGNhbGxiYWNrLCBhcmcgKSB7XHJcblx0XHR2YXIgdmFsdWUsXHJcblx0XHRcdGkgPSAwLFxyXG5cdFx0XHRsZW5ndGggPSBlbGVtcy5sZW5ndGgsXHJcblx0XHRcdGlzQXJyYXkgPSBpc0FycmF5bGlrZSggZWxlbXMgKSxcclxuXHRcdFx0cmV0ID0gW107XHJcblxyXG5cdFx0Ly8gR28gdGhyb3VnaCB0aGUgYXJyYXksIHRyYW5zbGF0aW5nIGVhY2ggb2YgdGhlIGl0ZW1zIHRvIHRoZWlyIG5ldyB2YWx1ZXNcclxuXHRcdGlmICggaXNBcnJheSApIHtcclxuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XHJcblx0XHRcdFx0dmFsdWUgPSBjYWxsYmFjayggZWxlbXNbIGkgXSwgaSwgYXJnICk7XHJcblxyXG5cdFx0XHRcdGlmICggdmFsdWUgIT0gbnVsbCApIHtcclxuXHRcdFx0XHRcdHJldC5wdXNoKCB2YWx1ZSApO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cclxuXHRcdC8vIEdvIHRocm91Z2ggZXZlcnkga2V5IG9uIHRoZSBvYmplY3QsXHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRmb3IgKCBpIGluIGVsZW1zICkge1xyXG5cdFx0XHRcdHZhbHVlID0gY2FsbGJhY2soIGVsZW1zWyBpIF0sIGksIGFyZyApO1xyXG5cclxuXHRcdFx0XHRpZiAoIHZhbHVlICE9IG51bGwgKSB7XHJcblx0XHRcdFx0XHRyZXQucHVzaCggdmFsdWUgKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHQvLyBGbGF0dGVuIGFueSBuZXN0ZWQgYXJyYXlzXHJcblx0XHRyZXR1cm4gY29uY2F0LmFwcGx5KCBbXSwgcmV0ICk7XHJcblx0fSxcclxuXHJcblx0Ly8gQSBnbG9iYWwgR1VJRCBjb3VudGVyIGZvciBvYmplY3RzXHJcblx0Z3VpZDogMSxcclxuXHJcblx0Ly8gQmluZCBhIGZ1bmN0aW9uIHRvIGEgY29udGV4dCwgb3B0aW9uYWxseSBwYXJ0aWFsbHkgYXBwbHlpbmcgYW55XHJcblx0Ly8gYXJndW1lbnRzLlxyXG5cdHByb3h5OiBmdW5jdGlvbiggZm4sIGNvbnRleHQgKSB7XHJcblx0XHR2YXIgdG1wLCBhcmdzLCBwcm94eTtcclxuXHJcblx0XHRpZiAoIHR5cGVvZiBjb250ZXh0ID09PSBcInN0cmluZ1wiICkge1xyXG5cdFx0XHR0bXAgPSBmblsgY29udGV4dCBdO1xyXG5cdFx0XHRjb250ZXh0ID0gZm47XHJcblx0XHRcdGZuID0gdG1wO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIFF1aWNrIGNoZWNrIHRvIGRldGVybWluZSBpZiB0YXJnZXQgaXMgY2FsbGFibGUsIGluIHRoZSBzcGVjXHJcblx0XHQvLyB0aGlzIHRocm93cyBhIFR5cGVFcnJvciwgYnV0IHdlIHdpbGwganVzdCByZXR1cm4gdW5kZWZpbmVkLlxyXG5cdFx0aWYgKCAhalF1ZXJ5LmlzRnVuY3Rpb24oIGZuICkgKSB7XHJcblx0XHRcdHJldHVybiB1bmRlZmluZWQ7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gU2ltdWxhdGVkIGJpbmRcclxuXHRcdGFyZ3MgPSBzbGljZS5jYWxsKCBhcmd1bWVudHMsIDIgKTtcclxuXHRcdHByb3h5ID0gZnVuY3Rpb24oKSB7XHJcblx0XHRcdHJldHVybiBmbi5hcHBseSggY29udGV4dCB8fCB0aGlzLCBhcmdzLmNvbmNhdCggc2xpY2UuY2FsbCggYXJndW1lbnRzICkgKSApO1xyXG5cdFx0fTtcclxuXHJcblx0XHQvLyBTZXQgdGhlIGd1aWQgb2YgdW5pcXVlIGhhbmRsZXIgdG8gdGhlIHNhbWUgb2Ygb3JpZ2luYWwgaGFuZGxlciwgc28gaXQgY2FuIGJlIHJlbW92ZWRcclxuXHRcdHByb3h5Lmd1aWQgPSBmbi5ndWlkID0gZm4uZ3VpZCB8fCBqUXVlcnkuZ3VpZCsrO1xyXG5cclxuXHRcdHJldHVybiBwcm94eTtcclxuXHR9LFxyXG5cclxuXHRub3c6IERhdGUubm93LFxyXG5cclxuXHQvLyBqUXVlcnkuc3VwcG9ydCBpcyBub3QgdXNlZCBpbiBDb3JlIGJ1dCBvdGhlciBwcm9qZWN0cyBhdHRhY2ggdGhlaXJcclxuXHQvLyBwcm9wZXJ0aWVzIHRvIGl0IHNvIGl0IG5lZWRzIHRvIGV4aXN0LlxyXG5cdHN1cHBvcnQ6IHN1cHBvcnRcclxufSk7XHJcblxyXG4vLyBQb3B1bGF0ZSB0aGUgY2xhc3MydHlwZSBtYXBcclxualF1ZXJ5LmVhY2goXCJCb29sZWFuIE51bWJlciBTdHJpbmcgRnVuY3Rpb24gQXJyYXkgRGF0ZSBSZWdFeHAgT2JqZWN0IEVycm9yXCIuc3BsaXQoXCIgXCIpLCBmdW5jdGlvbihpLCBuYW1lKSB7XHJcblx0Y2xhc3MydHlwZVsgXCJbb2JqZWN0IFwiICsgbmFtZSArIFwiXVwiIF0gPSBuYW1lLnRvTG93ZXJDYXNlKCk7XHJcbn0pO1xyXG5cclxuZnVuY3Rpb24gaXNBcnJheWxpa2UoIG9iaiApIHtcclxuXHJcblx0Ly8gU3VwcG9ydDogaU9TIDguMiAobm90IHJlcHJvZHVjaWJsZSBpbiBzaW11bGF0b3IpXHJcblx0Ly8gYGluYCBjaGVjayB1c2VkIHRvIHByZXZlbnQgSklUIGVycm9yIChnaC0yMTQ1KVxyXG5cdC8vIGhhc093biBpc24ndCB1c2VkIGhlcmUgZHVlIHRvIGZhbHNlIG5lZ2F0aXZlc1xyXG5cdC8vIHJlZ2FyZGluZyBOb2RlbGlzdCBsZW5ndGggaW4gSUVcclxuXHR2YXIgbGVuZ3RoID0gXCJsZW5ndGhcIiBpbiBvYmogJiYgb2JqLmxlbmd0aCxcclxuXHRcdHR5cGUgPSBqUXVlcnkudHlwZSggb2JqICk7XHJcblxyXG5cdGlmICggdHlwZSA9PT0gXCJmdW5jdGlvblwiIHx8IGpRdWVyeS5pc1dpbmRvdyggb2JqICkgKSB7XHJcblx0XHRyZXR1cm4gZmFsc2U7XHJcblx0fVxyXG5cclxuXHRpZiAoIG9iai5ub2RlVHlwZSA9PT0gMSAmJiBsZW5ndGggKSB7XHJcblx0XHRyZXR1cm4gdHJ1ZTtcclxuXHR9XHJcblxyXG5cdHJldHVybiB0eXBlID09PSBcImFycmF5XCIgfHwgbGVuZ3RoID09PSAwIHx8XHJcblx0XHR0eXBlb2YgbGVuZ3RoID09PSBcIm51bWJlclwiICYmIGxlbmd0aCA+IDAgJiYgKCBsZW5ndGggLSAxICkgaW4gb2JqO1xyXG59XHJcbnZhciBTaXp6bGUgPVxyXG4vKiFcclxuICogU2l6emxlIENTUyBTZWxlY3RvciBFbmdpbmUgdjIuMi4wLXByZVxyXG4gKiBodHRwOi8vc2l6emxlanMuY29tL1xyXG4gKlxyXG4gKiBDb3B5cmlnaHQgMjAwOCwgMjAxNCBqUXVlcnkgRm91bmRhdGlvbiwgSW5jLiBhbmQgb3RoZXIgY29udHJpYnV0b3JzXHJcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZVxyXG4gKiBodHRwOi8vanF1ZXJ5Lm9yZy9saWNlbnNlXHJcbiAqXHJcbiAqIERhdGU6IDIwMTQtMTItMTZcclxuICovXHJcbihmdW5jdGlvbiggd2luZG93ICkge1xyXG5cclxudmFyIGksXHJcblx0c3VwcG9ydCxcclxuXHRFeHByLFxyXG5cdGdldFRleHQsXHJcblx0aXNYTUwsXHJcblx0dG9rZW5pemUsXHJcblx0Y29tcGlsZSxcclxuXHRzZWxlY3QsXHJcblx0b3V0ZXJtb3N0Q29udGV4dCxcclxuXHRzb3J0SW5wdXQsXHJcblx0aGFzRHVwbGljYXRlLFxyXG5cclxuXHQvLyBMb2NhbCBkb2N1bWVudCB2YXJzXHJcblx0c2V0RG9jdW1lbnQsXHJcblx0ZG9jdW1lbnQsXHJcblx0ZG9jRWxlbSxcclxuXHRkb2N1bWVudElzSFRNTCxcclxuXHRyYnVnZ3lRU0EsXHJcblx0cmJ1Z2d5TWF0Y2hlcyxcclxuXHRtYXRjaGVzLFxyXG5cdGNvbnRhaW5zLFxyXG5cclxuXHQvLyBJbnN0YW5jZS1zcGVjaWZpYyBkYXRhXHJcblx0ZXhwYW5kbyA9IFwic2l6emxlXCIgKyAxICogbmV3IERhdGUoKSxcclxuXHRwcmVmZXJyZWREb2MgPSB3aW5kb3cuZG9jdW1lbnQsXHJcblx0ZGlycnVucyA9IDAsXHJcblx0ZG9uZSA9IDAsXHJcblx0Y2xhc3NDYWNoZSA9IGNyZWF0ZUNhY2hlKCksXHJcblx0dG9rZW5DYWNoZSA9IGNyZWF0ZUNhY2hlKCksXHJcblx0Y29tcGlsZXJDYWNoZSA9IGNyZWF0ZUNhY2hlKCksXHJcblx0c29ydE9yZGVyID0gZnVuY3Rpb24oIGEsIGIgKSB7XHJcblx0XHRpZiAoIGEgPT09IGIgKSB7XHJcblx0XHRcdGhhc0R1cGxpY2F0ZSA9IHRydWU7XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gMDtcclxuXHR9LFxyXG5cclxuXHQvLyBHZW5lcmFsLXB1cnBvc2UgY29uc3RhbnRzXHJcblx0TUFYX05FR0FUSVZFID0gMSA8PCAzMSxcclxuXHJcblx0Ly8gSW5zdGFuY2UgbWV0aG9kc1xyXG5cdGhhc093biA9ICh7fSkuaGFzT3duUHJvcGVydHksXHJcblx0YXJyID0gW10sXHJcblx0cG9wID0gYXJyLnBvcCxcclxuXHRwdXNoX25hdGl2ZSA9IGFyci5wdXNoLFxyXG5cdHB1c2ggPSBhcnIucHVzaCxcclxuXHRzbGljZSA9IGFyci5zbGljZSxcclxuXHQvLyBVc2UgYSBzdHJpcHBlZC1kb3duIGluZGV4T2YgYXMgaXQncyBmYXN0ZXIgdGhhbiBuYXRpdmVcclxuXHQvLyBodHRwOi8vanNwZXJmLmNvbS90aG9yLWluZGV4b2YtdnMtZm9yLzVcclxuXHRpbmRleE9mID0gZnVuY3Rpb24oIGxpc3QsIGVsZW0gKSB7XHJcblx0XHR2YXIgaSA9IDAsXHJcblx0XHRcdGxlbiA9IGxpc3QubGVuZ3RoO1xyXG5cdFx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XHJcblx0XHRcdGlmICggbGlzdFtpXSA9PT0gZWxlbSApIHtcclxuXHRcdFx0XHRyZXR1cm4gaTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIC0xO1xyXG5cdH0sXHJcblxyXG5cdGJvb2xlYW5zID0gXCJjaGVja2VkfHNlbGVjdGVkfGFzeW5jfGF1dG9mb2N1c3xhdXRvcGxheXxjb250cm9sc3xkZWZlcnxkaXNhYmxlZHxoaWRkZW58aXNtYXB8bG9vcHxtdWx0aXBsZXxvcGVufHJlYWRvbmx5fHJlcXVpcmVkfHNjb3BlZFwiLFxyXG5cclxuXHQvLyBSZWd1bGFyIGV4cHJlc3Npb25zXHJcblxyXG5cdC8vIFdoaXRlc3BhY2UgY2hhcmFjdGVycyBodHRwOi8vd3d3LnczLm9yZy9UUi9jc3MzLXNlbGVjdG9ycy8jd2hpdGVzcGFjZVxyXG5cdHdoaXRlc3BhY2UgPSBcIltcXFxceDIwXFxcXHRcXFxcclxcXFxuXFxcXGZdXCIsXHJcblx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvY3NzMy1zeW50YXgvI2NoYXJhY3RlcnNcclxuXHRjaGFyYWN0ZXJFbmNvZGluZyA9IFwiKD86XFxcXFxcXFwufFtcXFxcdy1dfFteXFxcXHgwMC1cXFxceGEwXSkrXCIsXHJcblxyXG5cdC8vIExvb3NlbHkgbW9kZWxlZCBvbiBDU1MgaWRlbnRpZmllciBjaGFyYWN0ZXJzXHJcblx0Ly8gQW4gdW5xdW90ZWQgdmFsdWUgc2hvdWxkIGJlIGEgQ1NTIGlkZW50aWZpZXIgaHR0cDovL3d3dy53My5vcmcvVFIvY3NzMy1zZWxlY3RvcnMvI2F0dHJpYnV0ZS1zZWxlY3RvcnNcclxuXHQvLyBQcm9wZXIgc3ludGF4OiBodHRwOi8vd3d3LnczLm9yZy9UUi9DU1MyMS9zeW5kYXRhLmh0bWwjdmFsdWUtZGVmLWlkZW50aWZpZXJcclxuXHRpZGVudGlmaWVyID0gY2hhcmFjdGVyRW5jb2RpbmcucmVwbGFjZSggXCJ3XCIsIFwidyNcIiApLFxyXG5cclxuXHQvLyBBdHRyaWJ1dGUgc2VsZWN0b3JzOiBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI2F0dHJpYnV0ZS1zZWxlY3RvcnNcclxuXHRhdHRyaWJ1dGVzID0gXCJcXFxcW1wiICsgd2hpdGVzcGFjZSArIFwiKihcIiArIGNoYXJhY3RlckVuY29kaW5nICsgXCIpKD86XCIgKyB3aGl0ZXNwYWNlICtcclxuXHRcdC8vIE9wZXJhdG9yIChjYXB0dXJlIDIpXHJcblx0XHRcIiooWypeJHwhfl0/PSlcIiArIHdoaXRlc3BhY2UgK1xyXG5cdFx0Ly8gXCJBdHRyaWJ1dGUgdmFsdWVzIG11c3QgYmUgQ1NTIGlkZW50aWZpZXJzIFtjYXB0dXJlIDVdIG9yIHN0cmluZ3MgW2NhcHR1cmUgMyBvciBjYXB0dXJlIDRdXCJcclxuXHRcdFwiKig/OicoKD86XFxcXFxcXFwufFteXFxcXFxcXFwnXSkqKSd8XFxcIigoPzpcXFxcXFxcXC58W15cXFxcXFxcXFxcXCJdKSopXFxcInwoXCIgKyBpZGVudGlmaWVyICsgXCIpKXwpXCIgKyB3aGl0ZXNwYWNlICtcclxuXHRcdFwiKlxcXFxdXCIsXHJcblxyXG5cdHBzZXVkb3MgPSBcIjooXCIgKyBjaGFyYWN0ZXJFbmNvZGluZyArIFwiKSg/OlxcXFwoKFwiICtcclxuXHRcdC8vIFRvIHJlZHVjZSB0aGUgbnVtYmVyIG9mIHNlbGVjdG9ycyBuZWVkaW5nIHRva2VuaXplIGluIHRoZSBwcmVGaWx0ZXIsIHByZWZlciBhcmd1bWVudHM6XHJcblx0XHQvLyAxLiBxdW90ZWQgKGNhcHR1cmUgMzsgY2FwdHVyZSA0IG9yIGNhcHR1cmUgNSlcclxuXHRcdFwiKCcoKD86XFxcXFxcXFwufFteXFxcXFxcXFwnXSkqKSd8XFxcIigoPzpcXFxcXFxcXC58W15cXFxcXFxcXFxcXCJdKSopXFxcIil8XCIgK1xyXG5cdFx0Ly8gMi4gc2ltcGxlIChjYXB0dXJlIDYpXHJcblx0XHRcIigoPzpcXFxcXFxcXC58W15cXFxcXFxcXCgpW1xcXFxdXXxcIiArIGF0dHJpYnV0ZXMgKyBcIikqKXxcIiArXHJcblx0XHQvLyAzLiBhbnl0aGluZyBlbHNlIChjYXB0dXJlIDIpXHJcblx0XHRcIi4qXCIgK1xyXG5cdFx0XCIpXFxcXCl8KVwiLFxyXG5cclxuXHQvLyBMZWFkaW5nIGFuZCBub24tZXNjYXBlZCB0cmFpbGluZyB3aGl0ZXNwYWNlLCBjYXB0dXJpbmcgc29tZSBub24td2hpdGVzcGFjZSBjaGFyYWN0ZXJzIHByZWNlZGluZyB0aGUgbGF0dGVyXHJcblx0cndoaXRlc3BhY2UgPSBuZXcgUmVnRXhwKCB3aGl0ZXNwYWNlICsgXCIrXCIsIFwiZ1wiICksXHJcblx0cnRyaW0gPSBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgKyBcIit8KCg/Ol58W15cXFxcXFxcXF0pKD86XFxcXFxcXFwuKSopXCIgKyB3aGl0ZXNwYWNlICsgXCIrJFwiLCBcImdcIiApLFxyXG5cclxuXHRyY29tbWEgPSBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgKyBcIiosXCIgKyB3aGl0ZXNwYWNlICsgXCIqXCIgKSxcclxuXHRyY29tYmluYXRvcnMgPSBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgKyBcIiooWz4rfl18XCIgKyB3aGl0ZXNwYWNlICsgXCIpXCIgKyB3aGl0ZXNwYWNlICsgXCIqXCIgKSxcclxuXHJcblx0cmF0dHJpYnV0ZVF1b3RlcyA9IG5ldyBSZWdFeHAoIFwiPVwiICsgd2hpdGVzcGFjZSArIFwiKihbXlxcXFxdJ1xcXCJdKj8pXCIgKyB3aGl0ZXNwYWNlICsgXCIqXFxcXF1cIiwgXCJnXCIgKSxcclxuXHJcblx0cnBzZXVkbyA9IG5ldyBSZWdFeHAoIHBzZXVkb3MgKSxcclxuXHRyaWRlbnRpZmllciA9IG5ldyBSZWdFeHAoIFwiXlwiICsgaWRlbnRpZmllciArIFwiJFwiICksXHJcblxyXG5cdG1hdGNoRXhwciA9IHtcclxuXHRcdFwiSURcIjogbmV3IFJlZ0V4cCggXCJeIyhcIiArIGNoYXJhY3RlckVuY29kaW5nICsgXCIpXCIgKSxcclxuXHRcdFwiQ0xBU1NcIjogbmV3IFJlZ0V4cCggXCJeXFxcXC4oXCIgKyBjaGFyYWN0ZXJFbmNvZGluZyArIFwiKVwiICksXHJcblx0XHRcIlRBR1wiOiBuZXcgUmVnRXhwKCBcIl4oXCIgKyBjaGFyYWN0ZXJFbmNvZGluZy5yZXBsYWNlKCBcIndcIiwgXCJ3KlwiICkgKyBcIilcIiApLFxyXG5cdFx0XCJBVFRSXCI6IG5ldyBSZWdFeHAoIFwiXlwiICsgYXR0cmlidXRlcyApLFxyXG5cdFx0XCJQU0VVRE9cIjogbmV3IFJlZ0V4cCggXCJeXCIgKyBwc2V1ZG9zICksXHJcblx0XHRcIkNISUxEXCI6IG5ldyBSZWdFeHAoIFwiXjoob25seXxmaXJzdHxsYXN0fG50aHxudGgtbGFzdCktKGNoaWxkfG9mLXR5cGUpKD86XFxcXChcIiArIHdoaXRlc3BhY2UgK1xyXG5cdFx0XHRcIiooZXZlbnxvZGR8KChbKy1dfCkoXFxcXGQqKW58KVwiICsgd2hpdGVzcGFjZSArIFwiKig/OihbKy1dfClcIiArIHdoaXRlc3BhY2UgK1xyXG5cdFx0XHRcIiooXFxcXGQrKXwpKVwiICsgd2hpdGVzcGFjZSArIFwiKlxcXFwpfClcIiwgXCJpXCIgKSxcclxuXHRcdFwiYm9vbFwiOiBuZXcgUmVnRXhwKCBcIl4oPzpcIiArIGJvb2xlYW5zICsgXCIpJFwiLCBcImlcIiApLFxyXG5cdFx0Ly8gRm9yIHVzZSBpbiBsaWJyYXJpZXMgaW1wbGVtZW50aW5nIC5pcygpXHJcblx0XHQvLyBXZSB1c2UgdGhpcyBmb3IgUE9TIG1hdGNoaW5nIGluIGBzZWxlY3RgXHJcblx0XHRcIm5lZWRzQ29udGV4dFwiOiBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgKyBcIipbPit+XXw6KGV2ZW58b2RkfGVxfGd0fGx0fG50aHxmaXJzdHxsYXN0KSg/OlxcXFwoXCIgK1xyXG5cdFx0XHR3aGl0ZXNwYWNlICsgXCIqKCg/Oi1cXFxcZCk/XFxcXGQqKVwiICsgd2hpdGVzcGFjZSArIFwiKlxcXFwpfCkoPz1bXi1dfCQpXCIsIFwiaVwiIClcclxuXHR9LFxyXG5cclxuXHRyaW5wdXRzID0gL14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWF8YnV0dG9uKSQvaSxcclxuXHRyaGVhZGVyID0gL15oXFxkJC9pLFxyXG5cclxuXHRybmF0aXZlID0gL15bXntdK1xce1xccypcXFtuYXRpdmUgXFx3LyxcclxuXHJcblx0Ly8gRWFzaWx5LXBhcnNlYWJsZS9yZXRyaWV2YWJsZSBJRCBvciBUQUcgb3IgQ0xBU1Mgc2VsZWN0b3JzXHJcblx0cnF1aWNrRXhwciA9IC9eKD86IyhbXFx3LV0rKXwoXFx3Kyl8XFwuKFtcXHctXSspKSQvLFxyXG5cclxuXHRyc2libGluZyA9IC9bK35dLyxcclxuXHRyZXNjYXBlID0gLyd8XFxcXC9nLFxyXG5cclxuXHQvLyBDU1MgZXNjYXBlcyBodHRwOi8vd3d3LnczLm9yZy9UUi9DU1MyMS9zeW5kYXRhLmh0bWwjZXNjYXBlZC1jaGFyYWN0ZXJzXHJcblx0cnVuZXNjYXBlID0gbmV3IFJlZ0V4cCggXCJcXFxcXFxcXChbXFxcXGRhLWZdezEsNn1cIiArIHdoaXRlc3BhY2UgKyBcIj98KFwiICsgd2hpdGVzcGFjZSArIFwiKXwuKVwiLCBcImlnXCIgKSxcclxuXHRmdW5lc2NhcGUgPSBmdW5jdGlvbiggXywgZXNjYXBlZCwgZXNjYXBlZFdoaXRlc3BhY2UgKSB7XHJcblx0XHR2YXIgaGlnaCA9IFwiMHhcIiArIGVzY2FwZWQgLSAweDEwMDAwO1xyXG5cdFx0Ly8gTmFOIG1lYW5zIG5vbi1jb2RlcG9pbnRcclxuXHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3g8MjRcclxuXHRcdC8vIFdvcmthcm91bmQgZXJyb25lb3VzIG51bWVyaWMgaW50ZXJwcmV0YXRpb24gb2YgK1wiMHhcIlxyXG5cdFx0cmV0dXJuIGhpZ2ggIT09IGhpZ2ggfHwgZXNjYXBlZFdoaXRlc3BhY2UgP1xyXG5cdFx0XHRlc2NhcGVkIDpcclxuXHRcdFx0aGlnaCA8IDAgP1xyXG5cdFx0XHRcdC8vIEJNUCBjb2RlcG9pbnRcclxuXHRcdFx0XHRTdHJpbmcuZnJvbUNoYXJDb2RlKCBoaWdoICsgMHgxMDAwMCApIDpcclxuXHRcdFx0XHQvLyBTdXBwbGVtZW50YWwgUGxhbmUgY29kZXBvaW50IChzdXJyb2dhdGUgcGFpcilcclxuXHRcdFx0XHRTdHJpbmcuZnJvbUNoYXJDb2RlKCBoaWdoID4+IDEwIHwgMHhEODAwLCBoaWdoICYgMHgzRkYgfCAweERDMDAgKTtcclxuXHR9LFxyXG5cclxuXHQvLyBVc2VkIGZvciBpZnJhbWVzXHJcblx0Ly8gU2VlIHNldERvY3VtZW50KClcclxuXHQvLyBSZW1vdmluZyB0aGUgZnVuY3Rpb24gd3JhcHBlciBjYXVzZXMgYSBcIlBlcm1pc3Npb24gRGVuaWVkXCJcclxuXHQvLyBlcnJvciBpbiBJRVxyXG5cdHVubG9hZEhhbmRsZXIgPSBmdW5jdGlvbigpIHtcclxuXHRcdHNldERvY3VtZW50KCk7XHJcblx0fTtcclxuXHJcbi8vIE9wdGltaXplIGZvciBwdXNoLmFwcGx5KCBfLCBOb2RlTGlzdCApXHJcbnRyeSB7XHJcblx0cHVzaC5hcHBseShcclxuXHRcdChhcnIgPSBzbGljZS5jYWxsKCBwcmVmZXJyZWREb2MuY2hpbGROb2RlcyApKSxcclxuXHRcdHByZWZlcnJlZERvYy5jaGlsZE5vZGVzXHJcblx0KTtcclxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkPDQuMFxyXG5cdC8vIERldGVjdCBzaWxlbnRseSBmYWlsaW5nIHB1c2guYXBwbHlcclxuXHRhcnJbIHByZWZlcnJlZERvYy5jaGlsZE5vZGVzLmxlbmd0aCBdLm5vZGVUeXBlO1xyXG59IGNhdGNoICggZSApIHtcclxuXHRwdXNoID0geyBhcHBseTogYXJyLmxlbmd0aCA/XHJcblxyXG5cdFx0Ly8gTGV2ZXJhZ2Ugc2xpY2UgaWYgcG9zc2libGVcclxuXHRcdGZ1bmN0aW9uKCB0YXJnZXQsIGVscyApIHtcclxuXHRcdFx0cHVzaF9uYXRpdmUuYXBwbHkoIHRhcmdldCwgc2xpY2UuY2FsbChlbHMpICk7XHJcblx0XHR9IDpcclxuXHJcblx0XHQvLyBTdXBwb3J0OiBJRTw5XHJcblx0XHQvLyBPdGhlcndpc2UgYXBwZW5kIGRpcmVjdGx5XHJcblx0XHRmdW5jdGlvbiggdGFyZ2V0LCBlbHMgKSB7XHJcblx0XHRcdHZhciBqID0gdGFyZ2V0Lmxlbmd0aCxcclxuXHRcdFx0XHRpID0gMDtcclxuXHRcdFx0Ly8gQ2FuJ3QgdHJ1c3QgTm9kZUxpc3QubGVuZ3RoXHJcblx0XHRcdHdoaWxlICggKHRhcmdldFtqKytdID0gZWxzW2krK10pICkge31cclxuXHRcdFx0dGFyZ2V0Lmxlbmd0aCA9IGogLSAxO1xyXG5cdFx0fVxyXG5cdH07XHJcbn1cclxuXHJcbmZ1bmN0aW9uIFNpenpsZSggc2VsZWN0b3IsIGNvbnRleHQsIHJlc3VsdHMsIHNlZWQgKSB7XHJcblx0dmFyIG1hdGNoLCBlbGVtLCBtLCBub2RlVHlwZSxcclxuXHRcdC8vIFFTQSB2YXJzXHJcblx0XHRpLCBncm91cHMsIG9sZCwgbmlkLCBuZXdDb250ZXh0LCBuZXdTZWxlY3RvcjtcclxuXHJcblx0aWYgKCAoIGNvbnRleHQgPyBjb250ZXh0Lm93bmVyRG9jdW1lbnQgfHwgY29udGV4dCA6IHByZWZlcnJlZERvYyApICE9PSBkb2N1bWVudCApIHtcclxuXHRcdHNldERvY3VtZW50KCBjb250ZXh0ICk7XHJcblx0fVxyXG5cclxuXHRjb250ZXh0ID0gY29udGV4dCB8fCBkb2N1bWVudDtcclxuXHRyZXN1bHRzID0gcmVzdWx0cyB8fCBbXTtcclxuXHRub2RlVHlwZSA9IGNvbnRleHQubm9kZVR5cGU7XHJcblxyXG5cdGlmICggdHlwZW9mIHNlbGVjdG9yICE9PSBcInN0cmluZ1wiIHx8ICFzZWxlY3RvciB8fFxyXG5cdFx0bm9kZVR5cGUgIT09IDEgJiYgbm9kZVR5cGUgIT09IDkgJiYgbm9kZVR5cGUgIT09IDExICkge1xyXG5cclxuXHRcdHJldHVybiByZXN1bHRzO1xyXG5cdH1cclxuXHJcblx0aWYgKCAhc2VlZCAmJiBkb2N1bWVudElzSFRNTCApIHtcclxuXHJcblx0XHQvLyBUcnkgdG8gc2hvcnRjdXQgZmluZCBvcGVyYXRpb25zIHdoZW4gcG9zc2libGUgKGUuZy4sIG5vdCB1bmRlciBEb2N1bWVudEZyYWdtZW50KVxyXG5cdFx0aWYgKCBub2RlVHlwZSAhPT0gMTEgJiYgKG1hdGNoID0gcnF1aWNrRXhwci5leGVjKCBzZWxlY3RvciApKSApIHtcclxuXHRcdFx0Ly8gU3BlZWQtdXA6IFNpenpsZShcIiNJRFwiKVxyXG5cdFx0XHRpZiAoIChtID0gbWF0Y2hbMV0pICkge1xyXG5cdFx0XHRcdGlmICggbm9kZVR5cGUgPT09IDkgKSB7XHJcblx0XHRcdFx0XHRlbGVtID0gY29udGV4dC5nZXRFbGVtZW50QnlJZCggbSApO1xyXG5cdFx0XHRcdFx0Ly8gQ2hlY2sgcGFyZW50Tm9kZSB0byBjYXRjaCB3aGVuIEJsYWNrYmVycnkgNC42IHJldHVybnNcclxuXHRcdFx0XHRcdC8vIG5vZGVzIHRoYXQgYXJlIG5vIGxvbmdlciBpbiB0aGUgZG9jdW1lbnQgKGpRdWVyeSAjNjk2MylcclxuXHRcdFx0XHRcdGlmICggZWxlbSAmJiBlbGVtLnBhcmVudE5vZGUgKSB7XHJcblx0XHRcdFx0XHRcdC8vIEhhbmRsZSB0aGUgY2FzZSB3aGVyZSBJRSwgT3BlcmEsIGFuZCBXZWJraXQgcmV0dXJuIGl0ZW1zXHJcblx0XHRcdFx0XHRcdC8vIGJ5IG5hbWUgaW5zdGVhZCBvZiBJRFxyXG5cdFx0XHRcdFx0XHRpZiAoIGVsZW0uaWQgPT09IG0gKSB7XHJcblx0XHRcdFx0XHRcdFx0cmVzdWx0cy5wdXNoKCBlbGVtICk7XHJcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHQvLyBDb250ZXh0IGlzIG5vdCBhIGRvY3VtZW50XHJcblx0XHRcdFx0XHRpZiAoIGNvbnRleHQub3duZXJEb2N1bWVudCAmJiAoZWxlbSA9IGNvbnRleHQub3duZXJEb2N1bWVudC5nZXRFbGVtZW50QnlJZCggbSApKSAmJlxyXG5cdFx0XHRcdFx0XHRjb250YWlucyggY29udGV4dCwgZWxlbSApICYmIGVsZW0uaWQgPT09IG0gKSB7XHJcblx0XHRcdFx0XHRcdHJlc3VsdHMucHVzaCggZWxlbSApO1xyXG5cdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBTcGVlZC11cDogU2l6emxlKFwiVEFHXCIpXHJcblx0XHRcdH0gZWxzZSBpZiAoIG1hdGNoWzJdICkge1xyXG5cdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHNlbGVjdG9yICkgKTtcclxuXHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcclxuXHJcblx0XHRcdC8vIFNwZWVkLXVwOiBTaXp6bGUoXCIuQ0xBU1NcIilcclxuXHRcdFx0fSBlbHNlIGlmICggKG0gPSBtYXRjaFszXSkgJiYgc3VwcG9ydC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICkge1xyXG5cdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSggbSApICk7XHJcblx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHQvLyBRU0EgcGF0aFxyXG5cdFx0aWYgKCBzdXBwb3J0LnFzYSAmJiAoIXJidWdneVFTQSB8fCAhcmJ1Z2d5UVNBLnRlc3QoIHNlbGVjdG9yICkpICkge1xyXG5cdFx0XHRuaWQgPSBvbGQgPSBleHBhbmRvO1xyXG5cdFx0XHRuZXdDb250ZXh0ID0gY29udGV4dDtcclxuXHRcdFx0bmV3U2VsZWN0b3IgPSBub2RlVHlwZSAhPT0gMSAmJiBzZWxlY3RvcjtcclxuXHJcblx0XHRcdC8vIHFTQSB3b3JrcyBzdHJhbmdlbHkgb24gRWxlbWVudC1yb290ZWQgcXVlcmllc1xyXG5cdFx0XHQvLyBXZSBjYW4gd29yayBhcm91bmQgdGhpcyBieSBzcGVjaWZ5aW5nIGFuIGV4dHJhIElEIG9uIHRoZSByb290XHJcblx0XHRcdC8vIGFuZCB3b3JraW5nIHVwIGZyb20gdGhlcmUgKFRoYW5rcyB0byBBbmRyZXcgRHVwb250IGZvciB0aGUgdGVjaG5pcXVlKVxyXG5cdFx0XHQvLyBJRSA4IGRvZXNuJ3Qgd29yayBvbiBvYmplY3QgZWxlbWVudHNcclxuXHRcdFx0aWYgKCBub2RlVHlwZSA9PT0gMSAmJiBjb250ZXh0Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgIT09IFwib2JqZWN0XCIgKSB7XHJcblx0XHRcdFx0Z3JvdXBzID0gdG9rZW5pemUoIHNlbGVjdG9yICk7XHJcblxyXG5cdFx0XHRcdGlmICggKG9sZCA9IGNvbnRleHQuZ2V0QXR0cmlidXRlKFwiaWRcIikpICkge1xyXG5cdFx0XHRcdFx0bmlkID0gb2xkLnJlcGxhY2UoIHJlc2NhcGUsIFwiXFxcXCQmXCIgKTtcclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0Y29udGV4dC5zZXRBdHRyaWJ1dGUoIFwiaWRcIiwgbmlkICk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdG5pZCA9IFwiW2lkPSdcIiArIG5pZCArIFwiJ10gXCI7XHJcblxyXG5cdFx0XHRcdGkgPSBncm91cHMubGVuZ3RoO1xyXG5cdFx0XHRcdHdoaWxlICggaS0tICkge1xyXG5cdFx0XHRcdFx0Z3JvdXBzW2ldID0gbmlkICsgdG9TZWxlY3RvciggZ3JvdXBzW2ldICk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdG5ld0NvbnRleHQgPSByc2libGluZy50ZXN0KCBzZWxlY3RvciApICYmIHRlc3RDb250ZXh0KCBjb250ZXh0LnBhcmVudE5vZGUgKSB8fCBjb250ZXh0O1xyXG5cdFx0XHRcdG5ld1NlbGVjdG9yID0gZ3JvdXBzLmpvaW4oXCIsXCIpO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRpZiAoIG5ld1NlbGVjdG9yICkge1xyXG5cdFx0XHRcdHRyeSB7XHJcblx0XHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLFxyXG5cdFx0XHRcdFx0XHRuZXdDb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwoIG5ld1NlbGVjdG9yIClcclxuXHRcdFx0XHRcdCk7XHJcblx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcclxuXHRcdFx0XHR9IGNhdGNoKHFzYUVycm9yKSB7XHJcblx0XHRcdFx0fSBmaW5hbGx5IHtcclxuXHRcdFx0XHRcdGlmICggIW9sZCApIHtcclxuXHRcdFx0XHRcdFx0Y29udGV4dC5yZW1vdmVBdHRyaWJ1dGUoXCJpZFwiKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdC8vIEFsbCBvdGhlcnNcclxuXHRyZXR1cm4gc2VsZWN0KCBzZWxlY3Rvci5yZXBsYWNlKCBydHJpbSwgXCIkMVwiICksIGNvbnRleHQsIHJlc3VsdHMsIHNlZWQgKTtcclxufVxyXG5cclxuLyoqXHJcbiAqIENyZWF0ZSBrZXktdmFsdWUgY2FjaGVzIG9mIGxpbWl0ZWQgc2l6ZVxyXG4gKiBAcmV0dXJucyB7RnVuY3Rpb24oc3RyaW5nLCBPYmplY3QpfSBSZXR1cm5zIHRoZSBPYmplY3QgZGF0YSBhZnRlciBzdG9yaW5nIGl0IG9uIGl0c2VsZiB3aXRoXHJcbiAqXHRwcm9wZXJ0eSBuYW1lIHRoZSAoc3BhY2Utc3VmZml4ZWQpIHN0cmluZyBhbmQgKGlmIHRoZSBjYWNoZSBpcyBsYXJnZXIgdGhhbiBFeHByLmNhY2hlTGVuZ3RoKVxyXG4gKlx0ZGVsZXRpbmcgdGhlIG9sZGVzdCBlbnRyeVxyXG4gKi9cclxuZnVuY3Rpb24gY3JlYXRlQ2FjaGUoKSB7XHJcblx0dmFyIGtleXMgPSBbXTtcclxuXHJcblx0ZnVuY3Rpb24gY2FjaGUoIGtleSwgdmFsdWUgKSB7XHJcblx0XHQvLyBVc2UgKGtleSArIFwiIFwiKSB0byBhdm9pZCBjb2xsaXNpb24gd2l0aCBuYXRpdmUgcHJvdG90eXBlIHByb3BlcnRpZXMgKHNlZSBJc3N1ZSAjMTU3KVxyXG5cdFx0aWYgKCBrZXlzLnB1c2goIGtleSArIFwiIFwiICkgPiBFeHByLmNhY2hlTGVuZ3RoICkge1xyXG5cdFx0XHQvLyBPbmx5IGtlZXAgdGhlIG1vc3QgcmVjZW50IGVudHJpZXNcclxuXHRcdFx0ZGVsZXRlIGNhY2hlWyBrZXlzLnNoaWZ0KCkgXTtcclxuXHRcdH1cclxuXHRcdHJldHVybiAoY2FjaGVbIGtleSArIFwiIFwiIF0gPSB2YWx1ZSk7XHJcblx0fVxyXG5cdHJldHVybiBjYWNoZTtcclxufVxyXG5cclxuLyoqXHJcbiAqIE1hcmsgYSBmdW5jdGlvbiBmb3Igc3BlY2lhbCB1c2UgYnkgU2l6emxlXHJcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBmdW5jdGlvbiB0byBtYXJrXHJcbiAqL1xyXG5mdW5jdGlvbiBtYXJrRnVuY3Rpb24oIGZuICkge1xyXG5cdGZuWyBleHBhbmRvIF0gPSB0cnVlO1xyXG5cdHJldHVybiBmbjtcclxufVxyXG5cclxuLyoqXHJcbiAqIFN1cHBvcnQgdGVzdGluZyB1c2luZyBhbiBlbGVtZW50XHJcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFBhc3NlZCB0aGUgY3JlYXRlZCBkaXYgYW5kIGV4cGVjdHMgYSBib29sZWFuIHJlc3VsdFxyXG4gKi9cclxuZnVuY3Rpb24gYXNzZXJ0KCBmbiApIHtcclxuXHR2YXIgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuXHJcblx0dHJ5IHtcclxuXHRcdHJldHVybiAhIWZuKCBkaXYgKTtcclxuXHR9IGNhdGNoIChlKSB7XHJcblx0XHRyZXR1cm4gZmFsc2U7XHJcblx0fSBmaW5hbGx5IHtcclxuXHRcdC8vIFJlbW92ZSBmcm9tIGl0cyBwYXJlbnQgYnkgZGVmYXVsdFxyXG5cdFx0aWYgKCBkaXYucGFyZW50Tm9kZSApIHtcclxuXHRcdFx0ZGl2LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIGRpdiApO1xyXG5cdFx0fVxyXG5cdFx0Ly8gcmVsZWFzZSBtZW1vcnkgaW4gSUVcclxuXHRcdGRpdiA9IG51bGw7XHJcblx0fVxyXG59XHJcblxyXG4vKipcclxuICogQWRkcyB0aGUgc2FtZSBoYW5kbGVyIGZvciBhbGwgb2YgdGhlIHNwZWNpZmllZCBhdHRyc1xyXG4gKiBAcGFyYW0ge1N0cmluZ30gYXR0cnMgUGlwZS1zZXBhcmF0ZWQgbGlzdCBvZiBhdHRyaWJ1dGVzXHJcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGhhbmRsZXIgVGhlIG1ldGhvZCB0aGF0IHdpbGwgYmUgYXBwbGllZFxyXG4gKi9cclxuZnVuY3Rpb24gYWRkSGFuZGxlKCBhdHRycywgaGFuZGxlciApIHtcclxuXHR2YXIgYXJyID0gYXR0cnMuc3BsaXQoXCJ8XCIpLFxyXG5cdFx0aSA9IGF0dHJzLmxlbmd0aDtcclxuXHJcblx0d2hpbGUgKCBpLS0gKSB7XHJcblx0XHRFeHByLmF0dHJIYW5kbGVbIGFycltpXSBdID0gaGFuZGxlcjtcclxuXHR9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDaGVja3MgZG9jdW1lbnQgb3JkZXIgb2YgdHdvIHNpYmxpbmdzXHJcbiAqIEBwYXJhbSB7RWxlbWVudH0gYVxyXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGJcclxuICogQHJldHVybnMge051bWJlcn0gUmV0dXJucyBsZXNzIHRoYW4gMCBpZiBhIHByZWNlZGVzIGIsIGdyZWF0ZXIgdGhhbiAwIGlmIGEgZm9sbG93cyBiXHJcbiAqL1xyXG5mdW5jdGlvbiBzaWJsaW5nQ2hlY2soIGEsIGIgKSB7XHJcblx0dmFyIGN1ciA9IGIgJiYgYSxcclxuXHRcdGRpZmYgPSBjdXIgJiYgYS5ub2RlVHlwZSA9PT0gMSAmJiBiLm5vZGVUeXBlID09PSAxICYmXHJcblx0XHRcdCggfmIuc291cmNlSW5kZXggfHwgTUFYX05FR0FUSVZFICkgLVxyXG5cdFx0XHQoIH5hLnNvdXJjZUluZGV4IHx8IE1BWF9ORUdBVElWRSApO1xyXG5cclxuXHQvLyBVc2UgSUUgc291cmNlSW5kZXggaWYgYXZhaWxhYmxlIG9uIGJvdGggbm9kZXNcclxuXHRpZiAoIGRpZmYgKSB7XHJcblx0XHRyZXR1cm4gZGlmZjtcclxuXHR9XHJcblxyXG5cdC8vIENoZWNrIGlmIGIgZm9sbG93cyBhXHJcblx0aWYgKCBjdXIgKSB7XHJcblx0XHR3aGlsZSAoIChjdXIgPSBjdXIubmV4dFNpYmxpbmcpICkge1xyXG5cdFx0XHRpZiAoIGN1ciA9PT0gYiApIHtcclxuXHRcdFx0XHRyZXR1cm4gLTE7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdHJldHVybiBhID8gMSA6IC0xO1xyXG59XHJcblxyXG4vKipcclxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRvIHVzZSBpbiBwc2V1ZG9zIGZvciBpbnB1dCB0eXBlc1xyXG4gKiBAcGFyYW0ge1N0cmluZ30gdHlwZVxyXG4gKi9cclxuZnVuY3Rpb24gY3JlYXRlSW5wdXRQc2V1ZG8oIHR5cGUgKSB7XHJcblx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0dmFyIG5hbWUgPSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XHJcblx0XHRyZXR1cm4gbmFtZSA9PT0gXCJpbnB1dFwiICYmIGVsZW0udHlwZSA9PT0gdHlwZTtcclxuXHR9O1xyXG59XHJcblxyXG4vKipcclxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRvIHVzZSBpbiBwc2V1ZG9zIGZvciBidXR0b25zXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlXHJcbiAqL1xyXG5mdW5jdGlvbiBjcmVhdGVCdXR0b25Qc2V1ZG8oIHR5cGUgKSB7XHJcblx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0dmFyIG5hbWUgPSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XHJcblx0XHRyZXR1cm4gKG5hbWUgPT09IFwiaW5wdXRcIiB8fCBuYW1lID09PSBcImJ1dHRvblwiKSAmJiBlbGVtLnR5cGUgPT09IHR5cGU7XHJcblx0fTtcclxufVxyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgcG9zaXRpb25hbHNcclxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm5cclxuICovXHJcbmZ1bmN0aW9uIGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oIGZuICkge1xyXG5cdHJldHVybiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIGFyZ3VtZW50ICkge1xyXG5cdFx0YXJndW1lbnQgPSArYXJndW1lbnQ7XHJcblx0XHRyZXR1cm4gbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWVkLCBtYXRjaGVzICkge1xyXG5cdFx0XHR2YXIgaixcclxuXHRcdFx0XHRtYXRjaEluZGV4ZXMgPSBmbiggW10sIHNlZWQubGVuZ3RoLCBhcmd1bWVudCApLFxyXG5cdFx0XHRcdGkgPSBtYXRjaEluZGV4ZXMubGVuZ3RoO1xyXG5cclxuXHRcdFx0Ly8gTWF0Y2ggZWxlbWVudHMgZm91bmQgYXQgdGhlIHNwZWNpZmllZCBpbmRleGVzXHJcblx0XHRcdHdoaWxlICggaS0tICkge1xyXG5cdFx0XHRcdGlmICggc2VlZFsgKGogPSBtYXRjaEluZGV4ZXNbaV0pIF0gKSB7XHJcblx0XHRcdFx0XHRzZWVkW2pdID0gIShtYXRjaGVzW2pdID0gc2VlZFtqXSk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHR9KTtcclxufVxyXG5cclxuLyoqXHJcbiAqIENoZWNrcyBhIG5vZGUgZm9yIHZhbGlkaXR5IGFzIGEgU2l6emxlIGNvbnRleHRcclxuICogQHBhcmFtIHtFbGVtZW50fE9iamVjdD19IGNvbnRleHRcclxuICogQHJldHVybnMge0VsZW1lbnR8T2JqZWN0fEJvb2xlYW59IFRoZSBpbnB1dCBub2RlIGlmIGFjY2VwdGFibGUsIG90aGVyd2lzZSBhIGZhbHN5IHZhbHVlXHJcbiAqL1xyXG5mdW5jdGlvbiB0ZXN0Q29udGV4dCggY29udGV4dCApIHtcclxuXHRyZXR1cm4gY29udGV4dCAmJiB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBjb250ZXh0O1xyXG59XHJcblxyXG4vLyBFeHBvc2Ugc3VwcG9ydCB2YXJzIGZvciBjb252ZW5pZW5jZVxyXG5zdXBwb3J0ID0gU2l6emxlLnN1cHBvcnQgPSB7fTtcclxuXHJcbi8qKlxyXG4gKiBEZXRlY3RzIFhNTCBub2Rlc1xyXG4gKiBAcGFyYW0ge0VsZW1lbnR8T2JqZWN0fSBlbGVtIEFuIGVsZW1lbnQgb3IgYSBkb2N1bWVudFxyXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gVHJ1ZSBpZmYgZWxlbSBpcyBhIG5vbi1IVE1MIFhNTCBub2RlXHJcbiAqL1xyXG5pc1hNTCA9IFNpenpsZS5pc1hNTCA9IGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdC8vIGRvY3VtZW50RWxlbWVudCBpcyB2ZXJpZmllZCBmb3IgY2FzZXMgd2hlcmUgaXQgZG9lc24ndCB5ZXQgZXhpc3RcclxuXHQvLyAoc3VjaCBhcyBsb2FkaW5nIGlmcmFtZXMgaW4gSUUgLSAjNDgzMylcclxuXHR2YXIgZG9jdW1lbnRFbGVtZW50ID0gZWxlbSAmJiAoZWxlbS5vd25lckRvY3VtZW50IHx8IGVsZW0pLmRvY3VtZW50RWxlbWVudDtcclxuXHRyZXR1cm4gZG9jdW1lbnRFbGVtZW50ID8gZG9jdW1lbnRFbGVtZW50Lm5vZGVOYW1lICE9PSBcIkhUTUxcIiA6IGZhbHNlO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIFNldHMgZG9jdW1lbnQtcmVsYXRlZCB2YXJpYWJsZXMgb25jZSBiYXNlZCBvbiB0aGUgY3VycmVudCBkb2N1bWVudFxyXG4gKiBAcGFyYW0ge0VsZW1lbnR8T2JqZWN0fSBbZG9jXSBBbiBlbGVtZW50IG9yIGRvY3VtZW50IG9iamVjdCB0byB1c2UgdG8gc2V0IHRoZSBkb2N1bWVudFxyXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjdXJyZW50IGRvY3VtZW50XHJcbiAqL1xyXG5zZXREb2N1bWVudCA9IFNpenpsZS5zZXREb2N1bWVudCA9IGZ1bmN0aW9uKCBub2RlICkge1xyXG5cdHZhciBoYXNDb21wYXJlLCBwYXJlbnQsXHJcblx0XHRkb2MgPSBub2RlID8gbm9kZS5vd25lckRvY3VtZW50IHx8IG5vZGUgOiBwcmVmZXJyZWREb2M7XHJcblxyXG5cdC8vIElmIG5vIGRvY3VtZW50IGFuZCBkb2N1bWVudEVsZW1lbnQgaXMgYXZhaWxhYmxlLCByZXR1cm5cclxuXHRpZiAoIGRvYyA9PT0gZG9jdW1lbnQgfHwgZG9jLm5vZGVUeXBlICE9PSA5IHx8ICFkb2MuZG9jdW1lbnRFbGVtZW50ICkge1xyXG5cdFx0cmV0dXJuIGRvY3VtZW50O1xyXG5cdH1cclxuXHJcblx0Ly8gU2V0IG91ciBkb2N1bWVudFxyXG5cdGRvY3VtZW50ID0gZG9jO1xyXG5cdGRvY0VsZW0gPSBkb2MuZG9jdW1lbnRFbGVtZW50O1xyXG5cdHBhcmVudCA9IGRvYy5kZWZhdWx0VmlldztcclxuXHJcblx0Ly8gU3VwcG9ydDogSUU+OFxyXG5cdC8vIElmIGlmcmFtZSBkb2N1bWVudCBpcyBhc3NpZ25lZCB0byBcImRvY3VtZW50XCIgdmFyaWFibGUgYW5kIGlmIGlmcmFtZSBoYXMgYmVlbiByZWxvYWRlZCxcclxuXHQvLyBJRSB3aWxsIHRocm93IFwicGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvciB3aGVuIGFjY2Vzc2luZyBcImRvY3VtZW50XCIgdmFyaWFibGUsIHNlZSBqUXVlcnkgIzEzOTM2XHJcblx0Ly8gSUU2LTggZG8gbm90IHN1cHBvcnQgdGhlIGRlZmF1bHRWaWV3IHByb3BlcnR5IHNvIHBhcmVudCB3aWxsIGJlIHVuZGVmaW5lZFxyXG5cdGlmICggcGFyZW50ICYmIHBhcmVudCAhPT0gcGFyZW50LnRvcCApIHtcclxuXHRcdC8vIElFMTEgZG9lcyBub3QgaGF2ZSBhdHRhY2hFdmVudCwgc28gYWxsIG11c3Qgc3VmZmVyXHJcblx0XHRpZiAoIHBhcmVudC5hZGRFdmVudExpc3RlbmVyICkge1xyXG5cdFx0XHRwYXJlbnQuYWRkRXZlbnRMaXN0ZW5lciggXCJ1bmxvYWRcIiwgdW5sb2FkSGFuZGxlciwgZmFsc2UgKTtcclxuXHRcdH0gZWxzZSBpZiAoIHBhcmVudC5hdHRhY2hFdmVudCApIHtcclxuXHRcdFx0cGFyZW50LmF0dGFjaEV2ZW50KCBcIm9udW5sb2FkXCIsIHVubG9hZEhhbmRsZXIgKTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdC8qIFN1cHBvcnQgdGVzdHNcclxuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXHJcblx0ZG9jdW1lbnRJc0hUTUwgPSAhaXNYTUwoIGRvYyApO1xyXG5cclxuXHQvKiBBdHRyaWJ1dGVzXHJcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xyXG5cclxuXHQvLyBTdXBwb3J0OiBJRTw4XHJcblx0Ly8gVmVyaWZ5IHRoYXQgZ2V0QXR0cmlidXRlIHJlYWxseSByZXR1cm5zIGF0dHJpYnV0ZXMgYW5kIG5vdCBwcm9wZXJ0aWVzXHJcblx0Ly8gKGV4Y2VwdGluZyBJRTggYm9vbGVhbnMpXHJcblx0c3VwcG9ydC5hdHRyaWJ1dGVzID0gYXNzZXJ0KGZ1bmN0aW9uKCBkaXYgKSB7XHJcblx0XHRkaXYuY2xhc3NOYW1lID0gXCJpXCI7XHJcblx0XHRyZXR1cm4gIWRpdi5nZXRBdHRyaWJ1dGUoXCJjbGFzc05hbWVcIik7XHJcblx0fSk7XHJcblxyXG5cdC8qIGdldEVsZW1lbnQocylCeSpcclxuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXHJcblxyXG5cdC8vIENoZWNrIGlmIGdldEVsZW1lbnRzQnlUYWdOYW1lKFwiKlwiKSByZXR1cm5zIG9ubHkgZWxlbWVudHNcclxuXHRzdXBwb3J0LmdldEVsZW1lbnRzQnlUYWdOYW1lID0gYXNzZXJ0KGZ1bmN0aW9uKCBkaXYgKSB7XHJcblx0XHRkaXYuYXBwZW5kQ2hpbGQoIGRvYy5jcmVhdGVDb21tZW50KFwiXCIpICk7XHJcblx0XHRyZXR1cm4gIWRpdi5nZXRFbGVtZW50c0J5VGFnTmFtZShcIipcIikubGVuZ3RoO1xyXG5cdH0pO1xyXG5cclxuXHQvLyBTdXBwb3J0OiBJRTw5XHJcblx0c3VwcG9ydC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lID0gcm5hdGl2ZS50ZXN0KCBkb2MuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSApO1xyXG5cclxuXHQvLyBTdXBwb3J0OiBJRTwxMFxyXG5cdC8vIENoZWNrIGlmIGdldEVsZW1lbnRCeUlkIHJldHVybnMgZWxlbWVudHMgYnkgbmFtZVxyXG5cdC8vIFRoZSBicm9rZW4gZ2V0RWxlbWVudEJ5SWQgbWV0aG9kcyBkb24ndCBwaWNrIHVwIHByb2dyYW1hdGljYWxseS1zZXQgbmFtZXMsXHJcblx0Ly8gc28gdXNlIGEgcm91bmRhYm91dCBnZXRFbGVtZW50c0J5TmFtZSB0ZXN0XHJcblx0c3VwcG9ydC5nZXRCeUlkID0gYXNzZXJ0KGZ1bmN0aW9uKCBkaXYgKSB7XHJcblx0XHRkb2NFbGVtLmFwcGVuZENoaWxkKCBkaXYgKS5pZCA9IGV4cGFuZG87XHJcblx0XHRyZXR1cm4gIWRvYy5nZXRFbGVtZW50c0J5TmFtZSB8fCAhZG9jLmdldEVsZW1lbnRzQnlOYW1lKCBleHBhbmRvICkubGVuZ3RoO1xyXG5cdH0pO1xyXG5cclxuXHQvLyBJRCBmaW5kIGFuZCBmaWx0ZXJcclxuXHRpZiAoIHN1cHBvcnQuZ2V0QnlJZCApIHtcclxuXHRcdEV4cHIuZmluZFtcIklEXCJdID0gZnVuY3Rpb24oIGlkLCBjb250ZXh0ICkge1xyXG5cdFx0XHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRCeUlkICE9PSBcInVuZGVmaW5lZFwiICYmIGRvY3VtZW50SXNIVE1MICkge1xyXG5cdFx0XHRcdHZhciBtID0gY29udGV4dC5nZXRFbGVtZW50QnlJZCggaWQgKTtcclxuXHRcdFx0XHQvLyBDaGVjayBwYXJlbnROb2RlIHRvIGNhdGNoIHdoZW4gQmxhY2tiZXJyeSA0LjYgcmV0dXJuc1xyXG5cdFx0XHRcdC8vIG5vZGVzIHRoYXQgYXJlIG5vIGxvbmdlciBpbiB0aGUgZG9jdW1lbnQgIzY5NjNcclxuXHRcdFx0XHRyZXR1cm4gbSAmJiBtLnBhcmVudE5vZGUgPyBbIG0gXSA6IFtdO1xyXG5cdFx0XHR9XHJcblx0XHR9O1xyXG5cdFx0RXhwci5maWx0ZXJbXCJJRFwiXSA9IGZ1bmN0aW9uKCBpZCApIHtcclxuXHRcdFx0dmFyIGF0dHJJZCA9IGlkLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XHJcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcclxuXHRcdFx0XHRyZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUoXCJpZFwiKSA9PT0gYXR0cklkO1xyXG5cdFx0XHR9O1xyXG5cdFx0fTtcclxuXHR9IGVsc2Uge1xyXG5cdFx0Ly8gU3VwcG9ydDogSUU2LzdcclxuXHRcdC8vIGdldEVsZW1lbnRCeUlkIGlzIG5vdCByZWxpYWJsZSBhcyBhIGZpbmQgc2hvcnRjdXRcclxuXHRcdGRlbGV0ZSBFeHByLmZpbmRbXCJJRFwiXTtcclxuXHJcblx0XHRFeHByLmZpbHRlcltcIklEXCJdID0gIGZ1bmN0aW9uKCBpZCApIHtcclxuXHRcdFx0dmFyIGF0dHJJZCA9IGlkLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XHJcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcclxuXHRcdFx0XHR2YXIgbm9kZSA9IHR5cGVvZiBlbGVtLmdldEF0dHJpYnV0ZU5vZGUgIT09IFwidW5kZWZpbmVkXCIgJiYgZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKFwiaWRcIik7XHJcblx0XHRcdFx0cmV0dXJuIG5vZGUgJiYgbm9kZS52YWx1ZSA9PT0gYXR0cklkO1xyXG5cdFx0XHR9O1xyXG5cdFx0fTtcclxuXHR9XHJcblxyXG5cdC8vIFRhZ1xyXG5cdEV4cHIuZmluZFtcIlRBR1wiXSA9IHN1cHBvcnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgP1xyXG5cdFx0ZnVuY3Rpb24oIHRhZywgY29udGV4dCApIHtcclxuXHRcdFx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiApIHtcclxuXHRcdFx0XHRyZXR1cm4gY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggdGFnICk7XHJcblxyXG5cdFx0XHQvLyBEb2N1bWVudEZyYWdtZW50IG5vZGVzIGRvbid0IGhhdmUgZ0VCVE5cclxuXHRcdFx0fSBlbHNlIGlmICggc3VwcG9ydC5xc2EgKSB7XHJcblx0XHRcdFx0cmV0dXJuIGNvbnRleHQucXVlcnlTZWxlY3RvckFsbCggdGFnICk7XHJcblx0XHRcdH1cclxuXHRcdH0gOlxyXG5cclxuXHRcdGZ1bmN0aW9uKCB0YWcsIGNvbnRleHQgKSB7XHJcblx0XHRcdHZhciBlbGVtLFxyXG5cdFx0XHRcdHRtcCA9IFtdLFxyXG5cdFx0XHRcdGkgPSAwLFxyXG5cdFx0XHRcdC8vIEJ5IGhhcHB5IGNvaW5jaWRlbmNlLCBhIChicm9rZW4pIGdFQlROIGFwcGVhcnMgb24gRG9jdW1lbnRGcmFnbWVudCBub2RlcyB0b29cclxuXHRcdFx0XHRyZXN1bHRzID0gY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggdGFnICk7XHJcblxyXG5cdFx0XHQvLyBGaWx0ZXIgb3V0IHBvc3NpYmxlIGNvbW1lbnRzXHJcblx0XHRcdGlmICggdGFnID09PSBcIipcIiApIHtcclxuXHRcdFx0XHR3aGlsZSAoIChlbGVtID0gcmVzdWx0c1tpKytdKSApIHtcclxuXHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcclxuXHRcdFx0XHRcdFx0dG1wLnB1c2goIGVsZW0gKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdHJldHVybiB0bXA7XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuIHJlc3VsdHM7XHJcblx0XHR9O1xyXG5cclxuXHQvLyBDbGFzc1xyXG5cdEV4cHIuZmluZFtcIkNMQVNTXCJdID0gc3VwcG9ydC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICYmIGZ1bmN0aW9uKCBjbGFzc05hbWUsIGNvbnRleHQgKSB7XHJcblx0XHRpZiAoIGRvY3VtZW50SXNIVE1MICkge1xyXG5cdFx0XHRyZXR1cm4gY29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCBjbGFzc05hbWUgKTtcclxuXHRcdH1cclxuXHR9O1xyXG5cclxuXHQvKiBRU0EvbWF0Y2hlc1NlbGVjdG9yXHJcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xyXG5cclxuXHQvLyBRU0EgYW5kIG1hdGNoZXNTZWxlY3RvciBzdXBwb3J0XHJcblxyXG5cdC8vIG1hdGNoZXNTZWxlY3Rvcig6YWN0aXZlKSByZXBvcnRzIGZhbHNlIHdoZW4gdHJ1ZSAoSUU5L09wZXJhIDExLjUpXHJcblx0cmJ1Z2d5TWF0Y2hlcyA9IFtdO1xyXG5cclxuXHQvLyBxU2EoOmZvY3VzKSByZXBvcnRzIGZhbHNlIHdoZW4gdHJ1ZSAoQ2hyb21lIDIxKVxyXG5cdC8vIFdlIGFsbG93IHRoaXMgYmVjYXVzZSBvZiBhIGJ1ZyBpbiBJRTgvOSB0aGF0IHRocm93cyBhbiBlcnJvclxyXG5cdC8vIHdoZW5ldmVyIGBkb2N1bWVudC5hY3RpdmVFbGVtZW50YCBpcyBhY2Nlc3NlZCBvbiBhbiBpZnJhbWVcclxuXHQvLyBTbywgd2UgYWxsb3cgOmZvY3VzIHRvIHBhc3MgdGhyb3VnaCBRU0EgYWxsIHRoZSB0aW1lIHRvIGF2b2lkIHRoZSBJRSBlcnJvclxyXG5cdC8vIFNlZSBodHRwOi8vYnVncy5qcXVlcnkuY29tL3RpY2tldC8xMzM3OFxyXG5cdHJidWdneVFTQSA9IFtdO1xyXG5cclxuXHRpZiAoIChzdXBwb3J0LnFzYSA9IHJuYXRpdmUudGVzdCggZG9jLnF1ZXJ5U2VsZWN0b3JBbGwgKSkgKSB7XHJcblx0XHQvLyBCdWlsZCBRU0EgcmVnZXhcclxuXHRcdC8vIFJlZ2V4IHN0cmF0ZWd5IGFkb3B0ZWQgZnJvbSBEaWVnbyBQZXJpbmlcclxuXHRcdGFzc2VydChmdW5jdGlvbiggZGl2ICkge1xyXG5cdFx0XHQvLyBTZWxlY3QgaXMgc2V0IHRvIGVtcHR5IHN0cmluZyBvbiBwdXJwb3NlXHJcblx0XHRcdC8vIFRoaXMgaXMgdG8gdGVzdCBJRSdzIHRyZWF0bWVudCBvZiBub3QgZXhwbGljaXRseVxyXG5cdFx0XHQvLyBzZXR0aW5nIGEgYm9vbGVhbiBjb250ZW50IGF0dHJpYnV0ZSxcclxuXHRcdFx0Ly8gc2luY2UgaXRzIHByZXNlbmNlIHNob3VsZCBiZSBlbm91Z2hcclxuXHRcdFx0Ly8gaHR0cDovL2J1Z3MuanF1ZXJ5LmNvbS90aWNrZXQvMTIzNTlcclxuXHRcdFx0ZG9jRWxlbS5hcHBlbmRDaGlsZCggZGl2ICkuaW5uZXJIVE1MID0gXCI8YSBpZD0nXCIgKyBleHBhbmRvICsgXCInPjwvYT5cIiArXHJcblx0XHRcdFx0XCI8c2VsZWN0IGlkPSdcIiArIGV4cGFuZG8gKyBcIi1cXGZdJyBtc2FsbG93Y2FwdHVyZT0nJz5cIiArXHJcblx0XHRcdFx0XCI8b3B0aW9uIHNlbGVjdGVkPScnPjwvb3B0aW9uPjwvc2VsZWN0PlwiO1xyXG5cclxuXHRcdFx0Ly8gU3VwcG9ydDogSUU4LCBPcGVyYSAxMS0xMi4xNlxyXG5cdFx0XHQvLyBOb3RoaW5nIHNob3VsZCBiZSBzZWxlY3RlZCB3aGVuIGVtcHR5IHN0cmluZ3MgZm9sbG93IF49IG9yICQ9IG9yICo9XHJcblx0XHRcdC8vIFRoZSB0ZXN0IGF0dHJpYnV0ZSBtdXN0IGJlIHVua25vd24gaW4gT3BlcmEgYnV0IFwic2FmZVwiIGZvciBXaW5SVFxyXG5cdFx0XHQvLyBodHRwOi8vbXNkbi5taWNyb3NvZnQuY29tL2VuLXVzL2xpYnJhcnkvaWUvaGg0NjUzODguYXNweCNhdHRyaWJ1dGVfc2VjdGlvblxyXG5cdFx0XHRpZiAoIGRpdi5xdWVyeVNlbGVjdG9yQWxsKFwiW21zYWxsb3djYXB0dXJlXj0nJ11cIikubGVuZ3RoICkge1xyXG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIlsqXiRdPVwiICsgd2hpdGVzcGFjZSArIFwiKig/OicnfFxcXCJcXFwiKVwiICk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIFN1cHBvcnQ6IElFOFxyXG5cdFx0XHQvLyBCb29sZWFuIGF0dHJpYnV0ZXMgYW5kIFwidmFsdWVcIiBhcmUgbm90IHRyZWF0ZWQgY29ycmVjdGx5XHJcblx0XHRcdGlmICggIWRpdi5xdWVyeVNlbGVjdG9yQWxsKFwiW3NlbGVjdGVkXVwiKS5sZW5ndGggKSB7XHJcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiXFxcXFtcIiArIHdoaXRlc3BhY2UgKyBcIiooPzp2YWx1ZXxcIiArIGJvb2xlYW5zICsgXCIpXCIgKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lPDI5LCBBbmRyb2lkPDQuMissIFNhZmFyaTw3LjArLCBpT1M8Ny4wKywgUGhhbnRvbUpTPDEuOS43K1xyXG5cdFx0XHRpZiAoICFkaXYucXVlcnlTZWxlY3RvckFsbCggXCJbaWR+PVwiICsgZXhwYW5kbyArIFwiLV1cIiApLmxlbmd0aCApIHtcclxuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaChcIn49XCIpO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBXZWJraXQvT3BlcmEgLSA6Y2hlY2tlZCBzaG91bGQgcmV0dXJuIHNlbGVjdGVkIG9wdGlvbiBlbGVtZW50c1xyXG5cdFx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi8yMDExL1JFQy1jc3MzLXNlbGVjdG9ycy0yMDExMDkyOS8jY2hlY2tlZFxyXG5cdFx0XHQvLyBJRTggdGhyb3dzIGVycm9yIGhlcmUgYW5kIHdpbGwgbm90IHNlZSBsYXRlciB0ZXN0c1xyXG5cdFx0XHRpZiAoICFkaXYucXVlcnlTZWxlY3RvckFsbChcIjpjaGVja2VkXCIpLmxlbmd0aCApIHtcclxuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaChcIjpjaGVja2VkXCIpO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBTdXBwb3J0OiBTYWZhcmkgOCssIGlPUyA4K1xyXG5cdFx0XHQvLyBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTM2ODUxXHJcblx0XHRcdC8vIEluLXBhZ2UgYHNlbGVjdG9yI2lkIHNpYmluZy1jb21iaW5hdG9yIHNlbGVjdG9yYCBmYWlsc1xyXG5cdFx0XHRpZiAoICFkaXYucXVlcnlTZWxlY3RvckFsbCggXCJhI1wiICsgZXhwYW5kbyArIFwiKypcIiApLmxlbmd0aCApIHtcclxuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaChcIi4jLitbK35dXCIpO1xyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHJcblx0XHRhc3NlcnQoZnVuY3Rpb24oIGRpdiApIHtcclxuXHRcdFx0Ly8gU3VwcG9ydDogV2luZG93cyA4IE5hdGl2ZSBBcHBzXHJcblx0XHRcdC8vIFRoZSB0eXBlIGFuZCBuYW1lIGF0dHJpYnV0ZXMgYXJlIHJlc3RyaWN0ZWQgZHVyaW5nIC5pbm5lckhUTUwgYXNzaWdubWVudFxyXG5cdFx0XHR2YXIgaW5wdXQgPSBkb2MuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xyXG5cdFx0XHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwidHlwZVwiLCBcImhpZGRlblwiICk7XHJcblx0XHRcdGRpdi5hcHBlbmRDaGlsZCggaW5wdXQgKS5zZXRBdHRyaWJ1dGUoIFwibmFtZVwiLCBcIkRcIiApO1xyXG5cclxuXHRcdFx0Ly8gU3VwcG9ydDogSUU4XHJcblx0XHRcdC8vIEVuZm9yY2UgY2FzZS1zZW5zaXRpdml0eSBvZiBuYW1lIGF0dHJpYnV0ZVxyXG5cdFx0XHRpZiAoIGRpdi5xdWVyeVNlbGVjdG9yQWxsKFwiW25hbWU9ZF1cIikubGVuZ3RoICkge1xyXG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIm5hbWVcIiArIHdoaXRlc3BhY2UgKyBcIipbKl4kfCF+XT89XCIgKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gRkYgMy41IC0gOmVuYWJsZWQvOmRpc2FibGVkIGFuZCBoaWRkZW4gZWxlbWVudHMgKGhpZGRlbiBlbGVtZW50cyBhcmUgc3RpbGwgZW5hYmxlZClcclxuXHRcdFx0Ly8gSUU4IHRocm93cyBlcnJvciBoZXJlIGFuZCB3aWxsIG5vdCBzZWUgbGF0ZXIgdGVzdHNcclxuXHRcdFx0aWYgKCAhZGl2LnF1ZXJ5U2VsZWN0b3JBbGwoXCI6ZW5hYmxlZFwiKS5sZW5ndGggKSB7XHJcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiOmVuYWJsZWRcIiwgXCI6ZGlzYWJsZWRcIiApO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBPcGVyYSAxMC0xMSBkb2VzIG5vdCB0aHJvdyBvbiBwb3N0LWNvbW1hIGludmFsaWQgcHNldWRvc1xyXG5cdFx0XHRkaXYucXVlcnlTZWxlY3RvckFsbChcIiosOnhcIik7XHJcblx0XHRcdHJidWdneVFTQS5wdXNoKFwiLC4qOlwiKTtcclxuXHRcdH0pO1xyXG5cdH1cclxuXHJcblx0aWYgKCAoc3VwcG9ydC5tYXRjaGVzU2VsZWN0b3IgPSBybmF0aXZlLnRlc3QoIChtYXRjaGVzID0gZG9jRWxlbS5tYXRjaGVzIHx8XHJcblx0XHRkb2NFbGVtLndlYmtpdE1hdGNoZXNTZWxlY3RvciB8fFxyXG5cdFx0ZG9jRWxlbS5tb3pNYXRjaGVzU2VsZWN0b3IgfHxcclxuXHRcdGRvY0VsZW0ub01hdGNoZXNTZWxlY3RvciB8fFxyXG5cdFx0ZG9jRWxlbS5tc01hdGNoZXNTZWxlY3RvcikgKSkgKSB7XHJcblxyXG5cdFx0YXNzZXJ0KGZ1bmN0aW9uKCBkaXYgKSB7XHJcblx0XHRcdC8vIENoZWNrIHRvIHNlZSBpZiBpdCdzIHBvc3NpYmxlIHRvIGRvIG1hdGNoZXNTZWxlY3RvclxyXG5cdFx0XHQvLyBvbiBhIGRpc2Nvbm5lY3RlZCBub2RlIChJRSA5KVxyXG5cdFx0XHRzdXBwb3J0LmRpc2Nvbm5lY3RlZE1hdGNoID0gbWF0Y2hlcy5jYWxsKCBkaXYsIFwiZGl2XCIgKTtcclxuXHJcblx0XHRcdC8vIFRoaXMgc2hvdWxkIGZhaWwgd2l0aCBhbiBleGNlcHRpb25cclxuXHRcdFx0Ly8gR2Vja28gZG9lcyBub3QgZXJyb3IsIHJldHVybnMgZmFsc2UgaW5zdGVhZFxyXG5cdFx0XHRtYXRjaGVzLmNhbGwoIGRpdiwgXCJbcyE9JyddOnhcIiApO1xyXG5cdFx0XHRyYnVnZ3lNYXRjaGVzLnB1c2goIFwiIT1cIiwgcHNldWRvcyApO1xyXG5cdFx0fSk7XHJcblx0fVxyXG5cclxuXHRyYnVnZ3lRU0EgPSByYnVnZ3lRU0EubGVuZ3RoICYmIG5ldyBSZWdFeHAoIHJidWdneVFTQS5qb2luKFwifFwiKSApO1xyXG5cdHJidWdneU1hdGNoZXMgPSByYnVnZ3lNYXRjaGVzLmxlbmd0aCAmJiBuZXcgUmVnRXhwKCByYnVnZ3lNYXRjaGVzLmpvaW4oXCJ8XCIpICk7XHJcblxyXG5cdC8qIENvbnRhaW5zXHJcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xyXG5cdGhhc0NvbXBhcmUgPSBybmF0aXZlLnRlc3QoIGRvY0VsZW0uY29tcGFyZURvY3VtZW50UG9zaXRpb24gKTtcclxuXHJcblx0Ly8gRWxlbWVudCBjb250YWlucyBhbm90aGVyXHJcblx0Ly8gUHVycG9zZWZ1bGx5IGRvZXMgbm90IGltcGxlbWVudCBpbmNsdXNpdmUgZGVzY2VuZGVudFxyXG5cdC8vIEFzIGluLCBhbiBlbGVtZW50IGRvZXMgbm90IGNvbnRhaW4gaXRzZWxmXHJcblx0Y29udGFpbnMgPSBoYXNDb21wYXJlIHx8IHJuYXRpdmUudGVzdCggZG9jRWxlbS5jb250YWlucyApID9cclxuXHRcdGZ1bmN0aW9uKCBhLCBiICkge1xyXG5cdFx0XHR2YXIgYWRvd24gPSBhLm5vZGVUeXBlID09PSA5ID8gYS5kb2N1bWVudEVsZW1lbnQgOiBhLFxyXG5cdFx0XHRcdGJ1cCA9IGIgJiYgYi5wYXJlbnROb2RlO1xyXG5cdFx0XHRyZXR1cm4gYSA9PT0gYnVwIHx8ICEhKCBidXAgJiYgYnVwLm5vZGVUeXBlID09PSAxICYmIChcclxuXHRcdFx0XHRhZG93bi5jb250YWlucyA/XHJcblx0XHRcdFx0XHRhZG93bi5jb250YWlucyggYnVwICkgOlxyXG5cdFx0XHRcdFx0YS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiAmJiBhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBidXAgKSAmIDE2XHJcblx0XHRcdCkpO1xyXG5cdFx0fSA6XHJcblx0XHRmdW5jdGlvbiggYSwgYiApIHtcclxuXHRcdFx0aWYgKCBiICkge1xyXG5cdFx0XHRcdHdoaWxlICggKGIgPSBiLnBhcmVudE5vZGUpICkge1xyXG5cdFx0XHRcdFx0aWYgKCBiID09PSBhICkge1xyXG5cdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cdFx0fTtcclxuXHJcblx0LyogU29ydGluZ1xyXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cclxuXHJcblx0Ly8gRG9jdW1lbnQgb3JkZXIgc29ydGluZ1xyXG5cdHNvcnRPcmRlciA9IGhhc0NvbXBhcmUgP1xyXG5cdGZ1bmN0aW9uKCBhLCBiICkge1xyXG5cclxuXHRcdC8vIEZsYWcgZm9yIGR1cGxpY2F0ZSByZW1vdmFsXHJcblx0XHRpZiAoIGEgPT09IGIgKSB7XHJcblx0XHRcdGhhc0R1cGxpY2F0ZSA9IHRydWU7XHJcblx0XHRcdHJldHVybiAwO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIFNvcnQgb24gbWV0aG9kIGV4aXN0ZW5jZSBpZiBvbmx5IG9uZSBpbnB1dCBoYXMgY29tcGFyZURvY3VtZW50UG9zaXRpb25cclxuXHRcdHZhciBjb21wYXJlID0gIWEuY29tcGFyZURvY3VtZW50UG9zaXRpb24gLSAhYi5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbjtcclxuXHRcdGlmICggY29tcGFyZSApIHtcclxuXHRcdFx0cmV0dXJuIGNvbXBhcmU7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gQ2FsY3VsYXRlIHBvc2l0aW9uIGlmIGJvdGggaW5wdXRzIGJlbG9uZyB0byB0aGUgc2FtZSBkb2N1bWVudFxyXG5cdFx0Y29tcGFyZSA9ICggYS5vd25lckRvY3VtZW50IHx8IGEgKSA9PT0gKCBiLm93bmVyRG9jdW1lbnQgfHwgYiApID9cclxuXHRcdFx0YS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggYiApIDpcclxuXHJcblx0XHRcdC8vIE90aGVyd2lzZSB3ZSBrbm93IHRoZXkgYXJlIGRpc2Nvbm5lY3RlZFxyXG5cdFx0XHQxO1xyXG5cclxuXHRcdC8vIERpc2Nvbm5lY3RlZCBub2Rlc1xyXG5cdFx0aWYgKCBjb21wYXJlICYgMSB8fFxyXG5cdFx0XHQoIXN1cHBvcnQuc29ydERldGFjaGVkICYmIGIuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGEgKSA9PT0gY29tcGFyZSkgKSB7XHJcblxyXG5cdFx0XHQvLyBDaG9vc2UgdGhlIGZpcnN0IGVsZW1lbnQgdGhhdCBpcyByZWxhdGVkIHRvIG91ciBwcmVmZXJyZWQgZG9jdW1lbnRcclxuXHRcdFx0aWYgKCBhID09PSBkb2MgfHwgYS5vd25lckRvY3VtZW50ID09PSBwcmVmZXJyZWREb2MgJiYgY29udGFpbnMocHJlZmVycmVkRG9jLCBhKSApIHtcclxuXHRcdFx0XHRyZXR1cm4gLTE7XHJcblx0XHRcdH1cclxuXHRcdFx0aWYgKCBiID09PSBkb2MgfHwgYi5vd25lckRvY3VtZW50ID09PSBwcmVmZXJyZWREb2MgJiYgY29udGFpbnMocHJlZmVycmVkRG9jLCBiKSApIHtcclxuXHRcdFx0XHRyZXR1cm4gMTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gTWFpbnRhaW4gb3JpZ2luYWwgb3JkZXJcclxuXHRcdFx0cmV0dXJuIHNvcnRJbnB1dCA/XHJcblx0XHRcdFx0KCBpbmRleE9mKCBzb3J0SW5wdXQsIGEgKSAtIGluZGV4T2YoIHNvcnRJbnB1dCwgYiApICkgOlxyXG5cdFx0XHRcdDA7XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIGNvbXBhcmUgJiA0ID8gLTEgOiAxO1xyXG5cdH0gOlxyXG5cdGZ1bmN0aW9uKCBhLCBiICkge1xyXG5cdFx0Ly8gRXhpdCBlYXJseSBpZiB0aGUgbm9kZXMgYXJlIGlkZW50aWNhbFxyXG5cdFx0aWYgKCBhID09PSBiICkge1xyXG5cdFx0XHRoYXNEdXBsaWNhdGUgPSB0cnVlO1xyXG5cdFx0XHRyZXR1cm4gMDtcclxuXHRcdH1cclxuXHJcblx0XHR2YXIgY3VyLFxyXG5cdFx0XHRpID0gMCxcclxuXHRcdFx0YXVwID0gYS5wYXJlbnROb2RlLFxyXG5cdFx0XHRidXAgPSBiLnBhcmVudE5vZGUsXHJcblx0XHRcdGFwID0gWyBhIF0sXHJcblx0XHRcdGJwID0gWyBiIF07XHJcblxyXG5cdFx0Ly8gUGFyZW50bGVzcyBub2RlcyBhcmUgZWl0aGVyIGRvY3VtZW50cyBvciBkaXNjb25uZWN0ZWRcclxuXHRcdGlmICggIWF1cCB8fCAhYnVwICkge1xyXG5cdFx0XHRyZXR1cm4gYSA9PT0gZG9jID8gLTEgOlxyXG5cdFx0XHRcdGIgPT09IGRvYyA/IDEgOlxyXG5cdFx0XHRcdGF1cCA/IC0xIDpcclxuXHRcdFx0XHRidXAgPyAxIDpcclxuXHRcdFx0XHRzb3J0SW5wdXQgP1xyXG5cdFx0XHRcdCggaW5kZXhPZiggc29ydElucHV0LCBhICkgLSBpbmRleE9mKCBzb3J0SW5wdXQsIGIgKSApIDpcclxuXHRcdFx0XHQwO1xyXG5cclxuXHRcdC8vIElmIHRoZSBub2RlcyBhcmUgc2libGluZ3MsIHdlIGNhbiBkbyBhIHF1aWNrIGNoZWNrXHJcblx0XHR9IGVsc2UgaWYgKCBhdXAgPT09IGJ1cCApIHtcclxuXHRcdFx0cmV0dXJuIHNpYmxpbmdDaGVjayggYSwgYiApO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIE90aGVyd2lzZSB3ZSBuZWVkIGZ1bGwgbGlzdHMgb2YgdGhlaXIgYW5jZXN0b3JzIGZvciBjb21wYXJpc29uXHJcblx0XHRjdXIgPSBhO1xyXG5cdFx0d2hpbGUgKCAoY3VyID0gY3VyLnBhcmVudE5vZGUpICkge1xyXG5cdFx0XHRhcC51bnNoaWZ0KCBjdXIgKTtcclxuXHRcdH1cclxuXHRcdGN1ciA9IGI7XHJcblx0XHR3aGlsZSAoIChjdXIgPSBjdXIucGFyZW50Tm9kZSkgKSB7XHJcblx0XHRcdGJwLnVuc2hpZnQoIGN1ciApO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIFdhbGsgZG93biB0aGUgdHJlZSBsb29raW5nIGZvciBhIGRpc2NyZXBhbmN5XHJcblx0XHR3aGlsZSAoIGFwW2ldID09PSBicFtpXSApIHtcclxuXHRcdFx0aSsrO1xyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiBpID9cclxuXHRcdFx0Ly8gRG8gYSBzaWJsaW5nIGNoZWNrIGlmIHRoZSBub2RlcyBoYXZlIGEgY29tbW9uIGFuY2VzdG9yXHJcblx0XHRcdHNpYmxpbmdDaGVjayggYXBbaV0sIGJwW2ldICkgOlxyXG5cclxuXHRcdFx0Ly8gT3RoZXJ3aXNlIG5vZGVzIGluIG91ciBkb2N1bWVudCBzb3J0IGZpcnN0XHJcblx0XHRcdGFwW2ldID09PSBwcmVmZXJyZWREb2MgPyAtMSA6XHJcblx0XHRcdGJwW2ldID09PSBwcmVmZXJyZWREb2MgPyAxIDpcclxuXHRcdFx0MDtcclxuXHR9O1xyXG5cclxuXHRyZXR1cm4gZG9jO1xyXG59O1xyXG5cclxuU2l6emxlLm1hdGNoZXMgPSBmdW5jdGlvbiggZXhwciwgZWxlbWVudHMgKSB7XHJcblx0cmV0dXJuIFNpenpsZSggZXhwciwgbnVsbCwgbnVsbCwgZWxlbWVudHMgKTtcclxufTtcclxuXHJcblNpenpsZS5tYXRjaGVzU2VsZWN0b3IgPSBmdW5jdGlvbiggZWxlbSwgZXhwciApIHtcclxuXHQvLyBTZXQgZG9jdW1lbnQgdmFycyBpZiBuZWVkZWRcclxuXHRpZiAoICggZWxlbS5vd25lckRvY3VtZW50IHx8IGVsZW0gKSAhPT0gZG9jdW1lbnQgKSB7XHJcblx0XHRzZXREb2N1bWVudCggZWxlbSApO1xyXG5cdH1cclxuXHJcblx0Ly8gTWFrZSBzdXJlIHRoYXQgYXR0cmlidXRlIHNlbGVjdG9ycyBhcmUgcXVvdGVkXHJcblx0ZXhwciA9IGV4cHIucmVwbGFjZSggcmF0dHJpYnV0ZVF1b3RlcywgXCI9JyQxJ11cIiApO1xyXG5cclxuXHRpZiAoIHN1cHBvcnQubWF0Y2hlc1NlbGVjdG9yICYmIGRvY3VtZW50SXNIVE1MICYmXHJcblx0XHQoICFyYnVnZ3lNYXRjaGVzIHx8ICFyYnVnZ3lNYXRjaGVzLnRlc3QoIGV4cHIgKSApICYmXHJcblx0XHQoICFyYnVnZ3lRU0EgICAgIHx8ICFyYnVnZ3lRU0EudGVzdCggZXhwciApICkgKSB7XHJcblxyXG5cdFx0dHJ5IHtcclxuXHRcdFx0dmFyIHJldCA9IG1hdGNoZXMuY2FsbCggZWxlbSwgZXhwciApO1xyXG5cclxuXHRcdFx0Ly8gSUUgOSdzIG1hdGNoZXNTZWxlY3RvciByZXR1cm5zIGZhbHNlIG9uIGRpc2Nvbm5lY3RlZCBub2Rlc1xyXG5cdFx0XHRpZiAoIHJldCB8fCBzdXBwb3J0LmRpc2Nvbm5lY3RlZE1hdGNoIHx8XHJcblx0XHRcdFx0XHQvLyBBcyB3ZWxsLCBkaXNjb25uZWN0ZWQgbm9kZXMgYXJlIHNhaWQgdG8gYmUgaW4gYSBkb2N1bWVudFxyXG5cdFx0XHRcdFx0Ly8gZnJhZ21lbnQgaW4gSUUgOVxyXG5cdFx0XHRcdFx0ZWxlbS5kb2N1bWVudCAmJiBlbGVtLmRvY3VtZW50Lm5vZGVUeXBlICE9PSAxMSApIHtcclxuXHRcdFx0XHRyZXR1cm4gcmV0O1xyXG5cdFx0XHR9XHJcblx0XHR9IGNhdGNoIChlKSB7fVxyXG5cdH1cclxuXHJcblx0cmV0dXJuIFNpenpsZSggZXhwciwgZG9jdW1lbnQsIG51bGwsIFsgZWxlbSBdICkubGVuZ3RoID4gMDtcclxufTtcclxuXHJcblNpenpsZS5jb250YWlucyA9IGZ1bmN0aW9uKCBjb250ZXh0LCBlbGVtICkge1xyXG5cdC8vIFNldCBkb2N1bWVudCB2YXJzIGlmIG5lZWRlZFxyXG5cdGlmICggKCBjb250ZXh0Lm93bmVyRG9jdW1lbnQgfHwgY29udGV4dCApICE9PSBkb2N1bWVudCApIHtcclxuXHRcdHNldERvY3VtZW50KCBjb250ZXh0ICk7XHJcblx0fVxyXG5cdHJldHVybiBjb250YWlucyggY29udGV4dCwgZWxlbSApO1xyXG59O1xyXG5cclxuU2l6emxlLmF0dHIgPSBmdW5jdGlvbiggZWxlbSwgbmFtZSApIHtcclxuXHQvLyBTZXQgZG9jdW1lbnQgdmFycyBpZiBuZWVkZWRcclxuXHRpZiAoICggZWxlbS5vd25lckRvY3VtZW50IHx8IGVsZW0gKSAhPT0gZG9jdW1lbnQgKSB7XHJcblx0XHRzZXREb2N1bWVudCggZWxlbSApO1xyXG5cdH1cclxuXHJcblx0dmFyIGZuID0gRXhwci5hdHRySGFuZGxlWyBuYW1lLnRvTG93ZXJDYXNlKCkgXSxcclxuXHRcdC8vIERvbid0IGdldCBmb29sZWQgYnkgT2JqZWN0LnByb3RvdHlwZSBwcm9wZXJ0aWVzIChqUXVlcnkgIzEzODA3KVxyXG5cdFx0dmFsID0gZm4gJiYgaGFzT3duLmNhbGwoIEV4cHIuYXR0ckhhbmRsZSwgbmFtZS50b0xvd2VyQ2FzZSgpICkgP1xyXG5cdFx0XHRmbiggZWxlbSwgbmFtZSwgIWRvY3VtZW50SXNIVE1MICkgOlxyXG5cdFx0XHR1bmRlZmluZWQ7XHJcblxyXG5cdHJldHVybiB2YWwgIT09IHVuZGVmaW5lZCA/XHJcblx0XHR2YWwgOlxyXG5cdFx0c3VwcG9ydC5hdHRyaWJ1dGVzIHx8ICFkb2N1bWVudElzSFRNTCA/XHJcblx0XHRcdGVsZW0uZ2V0QXR0cmlidXRlKCBuYW1lICkgOlxyXG5cdFx0XHQodmFsID0gZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKG5hbWUpKSAmJiB2YWwuc3BlY2lmaWVkID9cclxuXHRcdFx0XHR2YWwudmFsdWUgOlxyXG5cdFx0XHRcdG51bGw7XHJcbn07XHJcblxyXG5TaXp6bGUuZXJyb3IgPSBmdW5jdGlvbiggbXNnICkge1xyXG5cdHRocm93IG5ldyBFcnJvciggXCJTeW50YXggZXJyb3IsIHVucmVjb2duaXplZCBleHByZXNzaW9uOiBcIiArIG1zZyApO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIERvY3VtZW50IHNvcnRpbmcgYW5kIHJlbW92aW5nIGR1cGxpY2F0ZXNcclxuICogQHBhcmFtIHtBcnJheUxpa2V9IHJlc3VsdHNcclxuICovXHJcblNpenpsZS51bmlxdWVTb3J0ID0gZnVuY3Rpb24oIHJlc3VsdHMgKSB7XHJcblx0dmFyIGVsZW0sXHJcblx0XHRkdXBsaWNhdGVzID0gW10sXHJcblx0XHRqID0gMCxcclxuXHRcdGkgPSAwO1xyXG5cclxuXHQvLyBVbmxlc3Mgd2UgKmtub3cqIHdlIGNhbiBkZXRlY3QgZHVwbGljYXRlcywgYXNzdW1lIHRoZWlyIHByZXNlbmNlXHJcblx0aGFzRHVwbGljYXRlID0gIXN1cHBvcnQuZGV0ZWN0RHVwbGljYXRlcztcclxuXHRzb3J0SW5wdXQgPSAhc3VwcG9ydC5zb3J0U3RhYmxlICYmIHJlc3VsdHMuc2xpY2UoIDAgKTtcclxuXHRyZXN1bHRzLnNvcnQoIHNvcnRPcmRlciApO1xyXG5cclxuXHRpZiAoIGhhc0R1cGxpY2F0ZSApIHtcclxuXHRcdHdoaWxlICggKGVsZW0gPSByZXN1bHRzW2krK10pICkge1xyXG5cdFx0XHRpZiAoIGVsZW0gPT09IHJlc3VsdHNbIGkgXSApIHtcclxuXHRcdFx0XHRqID0gZHVwbGljYXRlcy5wdXNoKCBpICk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHRcdHdoaWxlICggai0tICkge1xyXG5cdFx0XHRyZXN1bHRzLnNwbGljZSggZHVwbGljYXRlc1sgaiBdLCAxICk7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHQvLyBDbGVhciBpbnB1dCBhZnRlciBzb3J0aW5nIHRvIHJlbGVhc2Ugb2JqZWN0c1xyXG5cdC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vanF1ZXJ5L3NpenpsZS9wdWxsLzIyNVxyXG5cdHNvcnRJbnB1dCA9IG51bGw7XHJcblxyXG5cdHJldHVybiByZXN1bHRzO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIFV0aWxpdHkgZnVuY3Rpb24gZm9yIHJldHJpZXZpbmcgdGhlIHRleHQgdmFsdWUgb2YgYW4gYXJyYXkgb2YgRE9NIG5vZGVzXHJcbiAqIEBwYXJhbSB7QXJyYXl8RWxlbWVudH0gZWxlbVxyXG4gKi9cclxuZ2V0VGV4dCA9IFNpenpsZS5nZXRUZXh0ID0gZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0dmFyIG5vZGUsXHJcblx0XHRyZXQgPSBcIlwiLFxyXG5cdFx0aSA9IDAsXHJcblx0XHRub2RlVHlwZSA9IGVsZW0ubm9kZVR5cGU7XHJcblxyXG5cdGlmICggIW5vZGVUeXBlICkge1xyXG5cdFx0Ly8gSWYgbm8gbm9kZVR5cGUsIHRoaXMgaXMgZXhwZWN0ZWQgdG8gYmUgYW4gYXJyYXlcclxuXHRcdHdoaWxlICggKG5vZGUgPSBlbGVtW2krK10pICkge1xyXG5cdFx0XHQvLyBEbyBub3QgdHJhdmVyc2UgY29tbWVudCBub2Rlc1xyXG5cdFx0XHRyZXQgKz0gZ2V0VGV4dCggbm9kZSApO1xyXG5cdFx0fVxyXG5cdH0gZWxzZSBpZiAoIG5vZGVUeXBlID09PSAxIHx8IG5vZGVUeXBlID09PSA5IHx8IG5vZGVUeXBlID09PSAxMSApIHtcclxuXHRcdC8vIFVzZSB0ZXh0Q29udGVudCBmb3IgZWxlbWVudHNcclxuXHRcdC8vIGlubmVyVGV4dCB1c2FnZSByZW1vdmVkIGZvciBjb25zaXN0ZW5jeSBvZiBuZXcgbGluZXMgKGpRdWVyeSAjMTExNTMpXHJcblx0XHRpZiAoIHR5cGVvZiBlbGVtLnRleHRDb250ZW50ID09PSBcInN0cmluZ1wiICkge1xyXG5cdFx0XHRyZXR1cm4gZWxlbS50ZXh0Q29udGVudDtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdC8vIFRyYXZlcnNlIGl0cyBjaGlsZHJlblxyXG5cdFx0XHRmb3IgKCBlbGVtID0gZWxlbS5maXJzdENoaWxkOyBlbGVtOyBlbGVtID0gZWxlbS5uZXh0U2libGluZyApIHtcclxuXHRcdFx0XHRyZXQgKz0gZ2V0VGV4dCggZWxlbSApO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fSBlbHNlIGlmICggbm9kZVR5cGUgPT09IDMgfHwgbm9kZVR5cGUgPT09IDQgKSB7XHJcblx0XHRyZXR1cm4gZWxlbS5ub2RlVmFsdWU7XHJcblx0fVxyXG5cdC8vIERvIG5vdCBpbmNsdWRlIGNvbW1lbnQgb3IgcHJvY2Vzc2luZyBpbnN0cnVjdGlvbiBub2Rlc1xyXG5cclxuXHRyZXR1cm4gcmV0O1xyXG59O1xyXG5cclxuRXhwciA9IFNpenpsZS5zZWxlY3RvcnMgPSB7XHJcblxyXG5cdC8vIENhbiBiZSBhZGp1c3RlZCBieSB0aGUgdXNlclxyXG5cdGNhY2hlTGVuZ3RoOiA1MCxcclxuXHJcblx0Y3JlYXRlUHNldWRvOiBtYXJrRnVuY3Rpb24sXHJcblxyXG5cdG1hdGNoOiBtYXRjaEV4cHIsXHJcblxyXG5cdGF0dHJIYW5kbGU6IHt9LFxyXG5cclxuXHRmaW5kOiB7fSxcclxuXHJcblx0cmVsYXRpdmU6IHtcclxuXHRcdFwiPlwiOiB7IGRpcjogXCJwYXJlbnROb2RlXCIsIGZpcnN0OiB0cnVlIH0sXHJcblx0XHRcIiBcIjogeyBkaXI6IFwicGFyZW50Tm9kZVwiIH0sXHJcblx0XHRcIitcIjogeyBkaXI6IFwicHJldmlvdXNTaWJsaW5nXCIsIGZpcnN0OiB0cnVlIH0sXHJcblx0XHRcIn5cIjogeyBkaXI6IFwicHJldmlvdXNTaWJsaW5nXCIgfVxyXG5cdH0sXHJcblxyXG5cdHByZUZpbHRlcjoge1xyXG5cdFx0XCJBVFRSXCI6IGZ1bmN0aW9uKCBtYXRjaCApIHtcclxuXHRcdFx0bWF0Y2hbMV0gPSBtYXRjaFsxXS5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xyXG5cclxuXHRcdFx0Ly8gTW92ZSB0aGUgZ2l2ZW4gdmFsdWUgdG8gbWF0Y2hbM10gd2hldGhlciBxdW90ZWQgb3IgdW5xdW90ZWRcclxuXHRcdFx0bWF0Y2hbM10gPSAoIG1hdGNoWzNdIHx8IG1hdGNoWzRdIHx8IG1hdGNoWzVdIHx8IFwiXCIgKS5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xyXG5cclxuXHRcdFx0aWYgKCBtYXRjaFsyXSA9PT0gXCJ+PVwiICkge1xyXG5cdFx0XHRcdG1hdGNoWzNdID0gXCIgXCIgKyBtYXRjaFszXSArIFwiIFwiO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRyZXR1cm4gbWF0Y2guc2xpY2UoIDAsIDQgKTtcclxuXHRcdH0sXHJcblxyXG5cdFx0XCJDSElMRFwiOiBmdW5jdGlvbiggbWF0Y2ggKSB7XHJcblx0XHRcdC8qIG1hdGNoZXMgZnJvbSBtYXRjaEV4cHJbXCJDSElMRFwiXVxyXG5cdFx0XHRcdDEgdHlwZSAob25seXxudGh8Li4uKVxyXG5cdFx0XHRcdDIgd2hhdCAoY2hpbGR8b2YtdHlwZSlcclxuXHRcdFx0XHQzIGFyZ3VtZW50IChldmVufG9kZHxcXGQqfFxcZCpuKFsrLV1cXGQrKT98Li4uKVxyXG5cdFx0XHRcdDQgeG4tY29tcG9uZW50IG9mIHhuK3kgYXJndW1lbnQgKFsrLV0/XFxkKm58KVxyXG5cdFx0XHRcdDUgc2lnbiBvZiB4bi1jb21wb25lbnRcclxuXHRcdFx0XHQ2IHggb2YgeG4tY29tcG9uZW50XHJcblx0XHRcdFx0NyBzaWduIG9mIHktY29tcG9uZW50XHJcblx0XHRcdFx0OCB5IG9mIHktY29tcG9uZW50XHJcblx0XHRcdCovXHJcblx0XHRcdG1hdGNoWzFdID0gbWF0Y2hbMV0udG9Mb3dlckNhc2UoKTtcclxuXHJcblx0XHRcdGlmICggbWF0Y2hbMV0uc2xpY2UoIDAsIDMgKSA9PT0gXCJudGhcIiApIHtcclxuXHRcdFx0XHQvLyBudGgtKiByZXF1aXJlcyBhcmd1bWVudFxyXG5cdFx0XHRcdGlmICggIW1hdGNoWzNdICkge1xyXG5cdFx0XHRcdFx0U2l6emxlLmVycm9yKCBtYXRjaFswXSApO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0Ly8gbnVtZXJpYyB4IGFuZCB5IHBhcmFtZXRlcnMgZm9yIEV4cHIuZmlsdGVyLkNISUxEXHJcblx0XHRcdFx0Ly8gcmVtZW1iZXIgdGhhdCBmYWxzZS90cnVlIGNhc3QgcmVzcGVjdGl2ZWx5IHRvIDAvMVxyXG5cdFx0XHRcdG1hdGNoWzRdID0gKyggbWF0Y2hbNF0gPyBtYXRjaFs1XSArIChtYXRjaFs2XSB8fCAxKSA6IDIgKiAoIG1hdGNoWzNdID09PSBcImV2ZW5cIiB8fCBtYXRjaFszXSA9PT0gXCJvZGRcIiApICk7XHJcblx0XHRcdFx0bWF0Y2hbNV0gPSArKCAoIG1hdGNoWzddICsgbWF0Y2hbOF0gKSB8fCBtYXRjaFszXSA9PT0gXCJvZGRcIiApO1xyXG5cclxuXHRcdFx0Ly8gb3RoZXIgdHlwZXMgcHJvaGliaXQgYXJndW1lbnRzXHJcblx0XHRcdH0gZWxzZSBpZiAoIG1hdGNoWzNdICkge1xyXG5cdFx0XHRcdFNpenpsZS5lcnJvciggbWF0Y2hbMF0gKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0cmV0dXJuIG1hdGNoO1xyXG5cdFx0fSxcclxuXHJcblx0XHRcIlBTRVVET1wiOiBmdW5jdGlvbiggbWF0Y2ggKSB7XHJcblx0XHRcdHZhciBleGNlc3MsXHJcblx0XHRcdFx0dW5xdW90ZWQgPSAhbWF0Y2hbNl0gJiYgbWF0Y2hbMl07XHJcblxyXG5cdFx0XHRpZiAoIG1hdGNoRXhwcltcIkNISUxEXCJdLnRlc3QoIG1hdGNoWzBdICkgKSB7XHJcblx0XHRcdFx0cmV0dXJuIG51bGw7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIEFjY2VwdCBxdW90ZWQgYXJndW1lbnRzIGFzLWlzXHJcblx0XHRcdGlmICggbWF0Y2hbM10gKSB7XHJcblx0XHRcdFx0bWF0Y2hbMl0gPSBtYXRjaFs0XSB8fCBtYXRjaFs1XSB8fCBcIlwiO1xyXG5cclxuXHRcdFx0Ly8gU3RyaXAgZXhjZXNzIGNoYXJhY3RlcnMgZnJvbSB1bnF1b3RlZCBhcmd1bWVudHNcclxuXHRcdFx0fSBlbHNlIGlmICggdW5xdW90ZWQgJiYgcnBzZXVkby50ZXN0KCB1bnF1b3RlZCApICYmXHJcblx0XHRcdFx0Ly8gR2V0IGV4Y2VzcyBmcm9tIHRva2VuaXplIChyZWN1cnNpdmVseSlcclxuXHRcdFx0XHQoZXhjZXNzID0gdG9rZW5pemUoIHVucXVvdGVkLCB0cnVlICkpICYmXHJcblx0XHRcdFx0Ly8gYWR2YW5jZSB0byB0aGUgbmV4dCBjbG9zaW5nIHBhcmVudGhlc2lzXHJcblx0XHRcdFx0KGV4Y2VzcyA9IHVucXVvdGVkLmluZGV4T2YoIFwiKVwiLCB1bnF1b3RlZC5sZW5ndGggLSBleGNlc3MgKSAtIHVucXVvdGVkLmxlbmd0aCkgKSB7XHJcblxyXG5cdFx0XHRcdC8vIGV4Y2VzcyBpcyBhIG5lZ2F0aXZlIGluZGV4XHJcblx0XHRcdFx0bWF0Y2hbMF0gPSBtYXRjaFswXS5zbGljZSggMCwgZXhjZXNzICk7XHJcblx0XHRcdFx0bWF0Y2hbMl0gPSB1bnF1b3RlZC5zbGljZSggMCwgZXhjZXNzICk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIFJldHVybiBvbmx5IGNhcHR1cmVzIG5lZWRlZCBieSB0aGUgcHNldWRvIGZpbHRlciBtZXRob2QgKHR5cGUgYW5kIGFyZ3VtZW50KVxyXG5cdFx0XHRyZXR1cm4gbWF0Y2guc2xpY2UoIDAsIDMgKTtcclxuXHRcdH1cclxuXHR9LFxyXG5cclxuXHRmaWx0ZXI6IHtcclxuXHJcblx0XHRcIlRBR1wiOiBmdW5jdGlvbiggbm9kZU5hbWVTZWxlY3RvciApIHtcclxuXHRcdFx0dmFyIG5vZGVOYW1lID0gbm9kZU5hbWVTZWxlY3Rvci5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApLnRvTG93ZXJDYXNlKCk7XHJcblx0XHRcdHJldHVybiBub2RlTmFtZVNlbGVjdG9yID09PSBcIipcIiA/XHJcblx0XHRcdFx0ZnVuY3Rpb24oKSB7IHJldHVybiB0cnVlOyB9IDpcclxuXHRcdFx0XHRmdW5jdGlvbiggZWxlbSApIHtcclxuXHRcdFx0XHRcdHJldHVybiBlbGVtLm5vZGVOYW1lICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbm9kZU5hbWU7XHJcblx0XHRcdFx0fTtcclxuXHRcdH0sXHJcblxyXG5cdFx0XCJDTEFTU1wiOiBmdW5jdGlvbiggY2xhc3NOYW1lICkge1xyXG5cdFx0XHR2YXIgcGF0dGVybiA9IGNsYXNzQ2FjaGVbIGNsYXNzTmFtZSArIFwiIFwiIF07XHJcblxyXG5cdFx0XHRyZXR1cm4gcGF0dGVybiB8fFxyXG5cdFx0XHRcdChwYXR0ZXJuID0gbmV3IFJlZ0V4cCggXCIoXnxcIiArIHdoaXRlc3BhY2UgKyBcIilcIiArIGNsYXNzTmFtZSArIFwiKFwiICsgd2hpdGVzcGFjZSArIFwifCQpXCIgKSkgJiZcclxuXHRcdFx0XHRjbGFzc0NhY2hlKCBjbGFzc05hbWUsIGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0XHRcdFx0cmV0dXJuIHBhdHRlcm4udGVzdCggdHlwZW9mIGVsZW0uY2xhc3NOYW1lID09PSBcInN0cmluZ1wiICYmIGVsZW0uY2xhc3NOYW1lIHx8IHR5cGVvZiBlbGVtLmdldEF0dHJpYnV0ZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBlbGVtLmdldEF0dHJpYnV0ZShcImNsYXNzXCIpIHx8IFwiXCIgKTtcclxuXHRcdFx0XHR9KTtcclxuXHRcdH0sXHJcblxyXG5cdFx0XCJBVFRSXCI6IGZ1bmN0aW9uKCBuYW1lLCBvcGVyYXRvciwgY2hlY2sgKSB7XHJcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcclxuXHRcdFx0XHR2YXIgcmVzdWx0ID0gU2l6emxlLmF0dHIoIGVsZW0sIG5hbWUgKTtcclxuXHJcblx0XHRcdFx0aWYgKCByZXN1bHQgPT0gbnVsbCApIHtcclxuXHRcdFx0XHRcdHJldHVybiBvcGVyYXRvciA9PT0gXCIhPVwiO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRpZiAoICFvcGVyYXRvciApIHtcclxuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0cmVzdWx0ICs9IFwiXCI7XHJcblxyXG5cdFx0XHRcdHJldHVybiBvcGVyYXRvciA9PT0gXCI9XCIgPyByZXN1bHQgPT09IGNoZWNrIDpcclxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIiE9XCIgPyByZXN1bHQgIT09IGNoZWNrIDpcclxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIl49XCIgPyBjaGVjayAmJiByZXN1bHQuaW5kZXhPZiggY2hlY2sgKSA9PT0gMCA6XHJcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCIqPVwiID8gY2hlY2sgJiYgcmVzdWx0LmluZGV4T2YoIGNoZWNrICkgPiAtMSA6XHJcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCIkPVwiID8gY2hlY2sgJiYgcmVzdWx0LnNsaWNlKCAtY2hlY2subGVuZ3RoICkgPT09IGNoZWNrIDpcclxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIn49XCIgPyAoIFwiIFwiICsgcmVzdWx0LnJlcGxhY2UoIHJ3aGl0ZXNwYWNlLCBcIiBcIiApICsgXCIgXCIgKS5pbmRleE9mKCBjaGVjayApID4gLTEgOlxyXG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwifD1cIiA/IHJlc3VsdCA9PT0gY2hlY2sgfHwgcmVzdWx0LnNsaWNlKCAwLCBjaGVjay5sZW5ndGggKyAxICkgPT09IGNoZWNrICsgXCItXCIgOlxyXG5cdFx0XHRcdFx0ZmFsc2U7XHJcblx0XHRcdH07XHJcblx0XHR9LFxyXG5cclxuXHRcdFwiQ0hJTERcIjogZnVuY3Rpb24oIHR5cGUsIHdoYXQsIGFyZ3VtZW50LCBmaXJzdCwgbGFzdCApIHtcclxuXHRcdFx0dmFyIHNpbXBsZSA9IHR5cGUuc2xpY2UoIDAsIDMgKSAhPT0gXCJudGhcIixcclxuXHRcdFx0XHRmb3J3YXJkID0gdHlwZS5zbGljZSggLTQgKSAhPT0gXCJsYXN0XCIsXHJcblx0XHRcdFx0b2ZUeXBlID0gd2hhdCA9PT0gXCJvZi10eXBlXCI7XHJcblxyXG5cdFx0XHRyZXR1cm4gZmlyc3QgPT09IDEgJiYgbGFzdCA9PT0gMCA/XHJcblxyXG5cdFx0XHRcdC8vIFNob3J0Y3V0IGZvciA6bnRoLSoobilcclxuXHRcdFx0XHRmdW5jdGlvbiggZWxlbSApIHtcclxuXHRcdFx0XHRcdHJldHVybiAhIWVsZW0ucGFyZW50Tm9kZTtcclxuXHRcdFx0XHR9IDpcclxuXHJcblx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcclxuXHRcdFx0XHRcdHZhciBjYWNoZSwgb3V0ZXJDYWNoZSwgbm9kZSwgZGlmZiwgbm9kZUluZGV4LCBzdGFydCxcclxuXHRcdFx0XHRcdFx0ZGlyID0gc2ltcGxlICE9PSBmb3J3YXJkID8gXCJuZXh0U2libGluZ1wiIDogXCJwcmV2aW91c1NpYmxpbmdcIixcclxuXHRcdFx0XHRcdFx0cGFyZW50ID0gZWxlbS5wYXJlbnROb2RlLFxyXG5cdFx0XHRcdFx0XHRuYW1lID0gb2ZUeXBlICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSxcclxuXHRcdFx0XHRcdFx0dXNlQ2FjaGUgPSAheG1sICYmICFvZlR5cGU7XHJcblxyXG5cdFx0XHRcdFx0aWYgKCBwYXJlbnQgKSB7XHJcblxyXG5cdFx0XHRcdFx0XHQvLyA6KGZpcnN0fGxhc3R8b25seSktKGNoaWxkfG9mLXR5cGUpXHJcblx0XHRcdFx0XHRcdGlmICggc2ltcGxlICkge1xyXG5cdFx0XHRcdFx0XHRcdHdoaWxlICggZGlyICkge1xyXG5cdFx0XHRcdFx0XHRcdFx0bm9kZSA9IGVsZW07XHJcblx0XHRcdFx0XHRcdFx0XHR3aGlsZSAoIChub2RlID0gbm9kZVsgZGlyIF0pICkge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIG9mVHlwZSA/IG5vZGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbmFtZSA6IG5vZGUubm9kZVR5cGUgPT09IDEgKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cdFx0XHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0XHQvLyBSZXZlcnNlIGRpcmVjdGlvbiBmb3IgOm9ubHktKiAoaWYgd2UgaGF2ZW4ndCB5ZXQgZG9uZSBzbylcclxuXHRcdFx0XHRcdFx0XHRcdHN0YXJ0ID0gZGlyID0gdHlwZSA9PT0gXCJvbmx5XCIgJiYgIXN0YXJ0ICYmIFwibmV4dFNpYmxpbmdcIjtcclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XHJcblx0XHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRcdHN0YXJ0ID0gWyBmb3J3YXJkID8gcGFyZW50LmZpcnN0Q2hpbGQgOiBwYXJlbnQubGFzdENoaWxkIF07XHJcblxyXG5cdFx0XHRcdFx0XHQvLyBub24teG1sIDpudGgtY2hpbGQoLi4uKSBzdG9yZXMgY2FjaGUgZGF0YSBvbiBgcGFyZW50YFxyXG5cdFx0XHRcdFx0XHRpZiAoIGZvcndhcmQgJiYgdXNlQ2FjaGUgKSB7XHJcblx0XHRcdFx0XHRcdFx0Ly8gU2VlayBgZWxlbWAgZnJvbSBhIHByZXZpb3VzbHktY2FjaGVkIGluZGV4XHJcblx0XHRcdFx0XHRcdFx0b3V0ZXJDYWNoZSA9IHBhcmVudFsgZXhwYW5kbyBdIHx8IChwYXJlbnRbIGV4cGFuZG8gXSA9IHt9KTtcclxuXHRcdFx0XHRcdFx0XHRjYWNoZSA9IG91dGVyQ2FjaGVbIHR5cGUgXSB8fCBbXTtcclxuXHRcdFx0XHRcdFx0XHRub2RlSW5kZXggPSBjYWNoZVswXSA9PT0gZGlycnVucyAmJiBjYWNoZVsxXTtcclxuXHRcdFx0XHRcdFx0XHRkaWZmID0gY2FjaGVbMF0gPT09IGRpcnJ1bnMgJiYgY2FjaGVbMl07XHJcblx0XHRcdFx0XHRcdFx0bm9kZSA9IG5vZGVJbmRleCAmJiBwYXJlbnQuY2hpbGROb2Rlc1sgbm9kZUluZGV4IF07XHJcblxyXG5cdFx0XHRcdFx0XHRcdHdoaWxlICggKG5vZGUgPSArK25vZGVJbmRleCAmJiBub2RlICYmIG5vZGVbIGRpciBdIHx8XHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0Ly8gRmFsbGJhY2sgdG8gc2Vla2luZyBgZWxlbWAgZnJvbSB0aGUgc3RhcnRcclxuXHRcdFx0XHRcdFx0XHRcdChkaWZmID0gbm9kZUluZGV4ID0gMCkgfHwgc3RhcnQucG9wKCkpICkge1xyXG5cclxuXHRcdFx0XHRcdFx0XHRcdC8vIFdoZW4gZm91bmQsIGNhY2hlIGluZGV4ZXMgb24gYHBhcmVudGAgYW5kIGJyZWFrXHJcblx0XHRcdFx0XHRcdFx0XHRpZiAoIG5vZGUubm9kZVR5cGUgPT09IDEgJiYgKytkaWZmICYmIG5vZGUgPT09IGVsZW0gKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdG91dGVyQ2FjaGVbIHR5cGUgXSA9IFsgZGlycnVucywgbm9kZUluZGV4LCBkaWZmIF07XHJcblx0XHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRcdC8vIFVzZSBwcmV2aW91c2x5LWNhY2hlZCBlbGVtZW50IGluZGV4IGlmIGF2YWlsYWJsZVxyXG5cdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCB1c2VDYWNoZSAmJiAoY2FjaGUgPSAoZWxlbVsgZXhwYW5kbyBdIHx8IChlbGVtWyBleHBhbmRvIF0gPSB7fSkpWyB0eXBlIF0pICYmIGNhY2hlWzBdID09PSBkaXJydW5zICkge1xyXG5cdFx0XHRcdFx0XHRcdGRpZmYgPSBjYWNoZVsxXTtcclxuXHJcblx0XHRcdFx0XHRcdC8vIHhtbCA6bnRoLWNoaWxkKC4uLikgb3IgOm50aC1sYXN0LWNoaWxkKC4uLikgb3IgOm50aCgtbGFzdCk/LW9mLXR5cGUoLi4uKVxyXG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRcdC8vIFVzZSB0aGUgc2FtZSBsb29wIGFzIGFib3ZlIHRvIHNlZWsgYGVsZW1gIGZyb20gdGhlIHN0YXJ0XHJcblx0XHRcdFx0XHRcdFx0d2hpbGUgKCAobm9kZSA9ICsrbm9kZUluZGV4ICYmIG5vZGUgJiYgbm9kZVsgZGlyIF0gfHxcclxuXHRcdFx0XHRcdFx0XHRcdChkaWZmID0gbm9kZUluZGV4ID0gMCkgfHwgc3RhcnQucG9wKCkpICkge1xyXG5cclxuXHRcdFx0XHRcdFx0XHRcdGlmICggKCBvZlR5cGUgPyBub2RlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5hbWUgOiBub2RlLm5vZGVUeXBlID09PSAxICkgJiYgKytkaWZmICkge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBDYWNoZSB0aGUgaW5kZXggb2YgZWFjaCBlbmNvdW50ZXJlZCBlbGVtZW50XHJcblx0XHRcdFx0XHRcdFx0XHRcdGlmICggdXNlQ2FjaGUgKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0KG5vZGVbIGV4cGFuZG8gXSB8fCAobm9kZVsgZXhwYW5kbyBdID0ge30pKVsgdHlwZSBdID0gWyBkaXJydW5zLCBkaWZmIF07XHJcblx0XHRcdFx0XHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRcdFx0XHRcdGlmICggbm9kZSA9PT0gZWxlbSApIHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdFx0Ly8gSW5jb3Jwb3JhdGUgdGhlIG9mZnNldCwgdGhlbiBjaGVjayBhZ2FpbnN0IGN5Y2xlIHNpemVcclxuXHRcdFx0XHRcdFx0ZGlmZiAtPSBsYXN0O1xyXG5cdFx0XHRcdFx0XHRyZXR1cm4gZGlmZiA9PT0gZmlyc3QgfHwgKCBkaWZmICUgZmlyc3QgPT09IDAgJiYgZGlmZiAvIGZpcnN0ID49IDAgKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9O1xyXG5cdFx0fSxcclxuXHJcblx0XHRcIlBTRVVET1wiOiBmdW5jdGlvbiggcHNldWRvLCBhcmd1bWVudCApIHtcclxuXHRcdFx0Ly8gcHNldWRvLWNsYXNzIG5hbWVzIGFyZSBjYXNlLWluc2Vuc2l0aXZlXHJcblx0XHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jcHNldWRvLWNsYXNzZXNcclxuXHRcdFx0Ly8gUHJpb3JpdGl6ZSBieSBjYXNlIHNlbnNpdGl2aXR5IGluIGNhc2UgY3VzdG9tIHBzZXVkb3MgYXJlIGFkZGVkIHdpdGggdXBwZXJjYXNlIGxldHRlcnNcclxuXHRcdFx0Ly8gUmVtZW1iZXIgdGhhdCBzZXRGaWx0ZXJzIGluaGVyaXRzIGZyb20gcHNldWRvc1xyXG5cdFx0XHR2YXIgYXJncyxcclxuXHRcdFx0XHRmbiA9IEV4cHIucHNldWRvc1sgcHNldWRvIF0gfHwgRXhwci5zZXRGaWx0ZXJzWyBwc2V1ZG8udG9Mb3dlckNhc2UoKSBdIHx8XHJcblx0XHRcdFx0XHRTaXp6bGUuZXJyb3IoIFwidW5zdXBwb3J0ZWQgcHNldWRvOiBcIiArIHBzZXVkbyApO1xyXG5cclxuXHRcdFx0Ly8gVGhlIHVzZXIgbWF5IHVzZSBjcmVhdGVQc2V1ZG8gdG8gaW5kaWNhdGUgdGhhdFxyXG5cdFx0XHQvLyBhcmd1bWVudHMgYXJlIG5lZWRlZCB0byBjcmVhdGUgdGhlIGZpbHRlciBmdW5jdGlvblxyXG5cdFx0XHQvLyBqdXN0IGFzIFNpenpsZSBkb2VzXHJcblx0XHRcdGlmICggZm5bIGV4cGFuZG8gXSApIHtcclxuXHRcdFx0XHRyZXR1cm4gZm4oIGFyZ3VtZW50ICk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIEJ1dCBtYWludGFpbiBzdXBwb3J0IGZvciBvbGQgc2lnbmF0dXJlc1xyXG5cdFx0XHRpZiAoIGZuLmxlbmd0aCA+IDEgKSB7XHJcblx0XHRcdFx0YXJncyA9IFsgcHNldWRvLCBwc2V1ZG8sIFwiXCIsIGFyZ3VtZW50IF07XHJcblx0XHRcdFx0cmV0dXJuIEV4cHIuc2V0RmlsdGVycy5oYXNPd25Qcm9wZXJ0eSggcHNldWRvLnRvTG93ZXJDYXNlKCkgKSA/XHJcblx0XHRcdFx0XHRtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlZWQsIG1hdGNoZXMgKSB7XHJcblx0XHRcdFx0XHRcdHZhciBpZHgsXHJcblx0XHRcdFx0XHRcdFx0bWF0Y2hlZCA9IGZuKCBzZWVkLCBhcmd1bWVudCApLFxyXG5cdFx0XHRcdFx0XHRcdGkgPSBtYXRjaGVkLmxlbmd0aDtcclxuXHRcdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XHJcblx0XHRcdFx0XHRcdFx0aWR4ID0gaW5kZXhPZiggc2VlZCwgbWF0Y2hlZFtpXSApO1xyXG5cdFx0XHRcdFx0XHRcdHNlZWRbIGlkeCBdID0gISggbWF0Y2hlc1sgaWR4IF0gPSBtYXRjaGVkW2ldICk7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH0pIDpcclxuXHRcdFx0XHRcdGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0XHRcdFx0XHRyZXR1cm4gZm4oIGVsZW0sIDAsIGFyZ3MgKTtcclxuXHRcdFx0XHRcdH07XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHJldHVybiBmbjtcclxuXHRcdH1cclxuXHR9LFxyXG5cclxuXHRwc2V1ZG9zOiB7XHJcblx0XHQvLyBQb3RlbnRpYWxseSBjb21wbGV4IHBzZXVkb3NcclxuXHRcdFwibm90XCI6IG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VsZWN0b3IgKSB7XHJcblx0XHRcdC8vIFRyaW0gdGhlIHNlbGVjdG9yIHBhc3NlZCB0byBjb21waWxlXHJcblx0XHRcdC8vIHRvIGF2b2lkIHRyZWF0aW5nIGxlYWRpbmcgYW5kIHRyYWlsaW5nXHJcblx0XHRcdC8vIHNwYWNlcyBhcyBjb21iaW5hdG9yc1xyXG5cdFx0XHR2YXIgaW5wdXQgPSBbXSxcclxuXHRcdFx0XHRyZXN1bHRzID0gW10sXHJcblx0XHRcdFx0bWF0Y2hlciA9IGNvbXBpbGUoIHNlbGVjdG9yLnJlcGxhY2UoIHJ0cmltLCBcIiQxXCIgKSApO1xyXG5cclxuXHRcdFx0cmV0dXJuIG1hdGNoZXJbIGV4cGFuZG8gXSA/XHJcblx0XHRcdFx0bWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWVkLCBtYXRjaGVzLCBjb250ZXh0LCB4bWwgKSB7XHJcblx0XHRcdFx0XHR2YXIgZWxlbSxcclxuXHRcdFx0XHRcdFx0dW5tYXRjaGVkID0gbWF0Y2hlciggc2VlZCwgbnVsbCwgeG1sLCBbXSApLFxyXG5cdFx0XHRcdFx0XHRpID0gc2VlZC5sZW5ndGg7XHJcblxyXG5cdFx0XHRcdFx0Ly8gTWF0Y2ggZWxlbWVudHMgdW5tYXRjaGVkIGJ5IGBtYXRjaGVyYFxyXG5cdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XHJcblx0XHRcdFx0XHRcdGlmICggKGVsZW0gPSB1bm1hdGNoZWRbaV0pICkge1xyXG5cdFx0XHRcdFx0XHRcdHNlZWRbaV0gPSAhKG1hdGNoZXNbaV0gPSBlbGVtKTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH0pIDpcclxuXHRcdFx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xyXG5cdFx0XHRcdFx0aW5wdXRbMF0gPSBlbGVtO1xyXG5cdFx0XHRcdFx0bWF0Y2hlciggaW5wdXQsIG51bGwsIHhtbCwgcmVzdWx0cyApO1xyXG5cdFx0XHRcdFx0Ly8gRG9uJ3Qga2VlcCB0aGUgZWxlbWVudCAoaXNzdWUgIzI5OSlcclxuXHRcdFx0XHRcdGlucHV0WzBdID0gbnVsbDtcclxuXHRcdFx0XHRcdHJldHVybiAhcmVzdWx0cy5wb3AoKTtcclxuXHRcdFx0XHR9O1xyXG5cdFx0fSksXHJcblxyXG5cdFx0XCJoYXNcIjogbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcclxuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0XHRcdHJldHVybiBTaXp6bGUoIHNlbGVjdG9yLCBlbGVtICkubGVuZ3RoID4gMDtcclxuXHRcdFx0fTtcclxuXHRcdH0pLFxyXG5cclxuXHRcdFwiY29udGFpbnNcIjogbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCB0ZXh0ICkge1xyXG5cdFx0XHR0ZXh0ID0gdGV4dC5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xyXG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRcdFx0cmV0dXJuICggZWxlbS50ZXh0Q29udGVudCB8fCBlbGVtLmlubmVyVGV4dCB8fCBnZXRUZXh0KCBlbGVtICkgKS5pbmRleE9mKCB0ZXh0ICkgPiAtMTtcclxuXHRcdFx0fTtcclxuXHRcdH0pLFxyXG5cclxuXHRcdC8vIFwiV2hldGhlciBhbiBlbGVtZW50IGlzIHJlcHJlc2VudGVkIGJ5IGEgOmxhbmcoKSBzZWxlY3RvclxyXG5cdFx0Ly8gaXMgYmFzZWQgc29sZWx5IG9uIHRoZSBlbGVtZW50J3MgbGFuZ3VhZ2UgdmFsdWVcclxuXHRcdC8vIGJlaW5nIGVxdWFsIHRvIHRoZSBpZGVudGlmaWVyIEMsXHJcblx0XHQvLyBvciBiZWdpbm5pbmcgd2l0aCB0aGUgaWRlbnRpZmllciBDIGltbWVkaWF0ZWx5IGZvbGxvd2VkIGJ5IFwiLVwiLlxyXG5cdFx0Ly8gVGhlIG1hdGNoaW5nIG9mIEMgYWdhaW5zdCB0aGUgZWxlbWVudCdzIGxhbmd1YWdlIHZhbHVlIGlzIHBlcmZvcm1lZCBjYXNlLWluc2Vuc2l0aXZlbHkuXHJcblx0XHQvLyBUaGUgaWRlbnRpZmllciBDIGRvZXMgbm90IGhhdmUgdG8gYmUgYSB2YWxpZCBsYW5ndWFnZSBuYW1lLlwiXHJcblx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI2xhbmctcHNldWRvXHJcblx0XHRcImxhbmdcIjogbWFya0Z1bmN0aW9uKCBmdW5jdGlvbiggbGFuZyApIHtcclxuXHRcdFx0Ly8gbGFuZyB2YWx1ZSBtdXN0IGJlIGEgdmFsaWQgaWRlbnRpZmllclxyXG5cdFx0XHRpZiAoICFyaWRlbnRpZmllci50ZXN0KGxhbmcgfHwgXCJcIikgKSB7XHJcblx0XHRcdFx0U2l6emxlLmVycm9yKCBcInVuc3VwcG9ydGVkIGxhbmc6IFwiICsgbGFuZyApO1xyXG5cdFx0XHR9XHJcblx0XHRcdGxhbmcgPSBsYW5nLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICkudG9Mb3dlckNhc2UoKTtcclxuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0XHRcdHZhciBlbGVtTGFuZztcclxuXHRcdFx0XHRkbyB7XHJcblx0XHRcdFx0XHRpZiAoIChlbGVtTGFuZyA9IGRvY3VtZW50SXNIVE1MID9cclxuXHRcdFx0XHRcdFx0ZWxlbS5sYW5nIDpcclxuXHRcdFx0XHRcdFx0ZWxlbS5nZXRBdHRyaWJ1dGUoXCJ4bWw6bGFuZ1wiKSB8fCBlbGVtLmdldEF0dHJpYnV0ZShcImxhbmdcIikpICkge1xyXG5cclxuXHRcdFx0XHRcdFx0ZWxlbUxhbmcgPSBlbGVtTGFuZy50b0xvd2VyQ2FzZSgpO1xyXG5cdFx0XHRcdFx0XHRyZXR1cm4gZWxlbUxhbmcgPT09IGxhbmcgfHwgZWxlbUxhbmcuaW5kZXhPZiggbGFuZyArIFwiLVwiICkgPT09IDA7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fSB3aGlsZSAoIChlbGVtID0gZWxlbS5wYXJlbnROb2RlKSAmJiBlbGVtLm5vZGVUeXBlID09PSAxICk7XHJcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cdFx0XHR9O1xyXG5cdFx0fSksXHJcblxyXG5cdFx0Ly8gTWlzY2VsbGFuZW91c1xyXG5cdFx0XCJ0YXJnZXRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRcdHZhciBoYXNoID0gd2luZG93LmxvY2F0aW9uICYmIHdpbmRvdy5sb2NhdGlvbi5oYXNoO1xyXG5cdFx0XHRyZXR1cm4gaGFzaCAmJiBoYXNoLnNsaWNlKCAxICkgPT09IGVsZW0uaWQ7XHJcblx0XHR9LFxyXG5cclxuXHRcdFwicm9vdFwiOiBmdW5jdGlvbiggZWxlbSApIHtcclxuXHRcdFx0cmV0dXJuIGVsZW0gPT09IGRvY0VsZW07XHJcblx0XHR9LFxyXG5cclxuXHRcdFwiZm9jdXNcIjogZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRcdHJldHVybiBlbGVtID09PSBkb2N1bWVudC5hY3RpdmVFbGVtZW50ICYmICghZG9jdW1lbnQuaGFzRm9jdXMgfHwgZG9jdW1lbnQuaGFzRm9jdXMoKSkgJiYgISEoZWxlbS50eXBlIHx8IGVsZW0uaHJlZiB8fCB+ZWxlbS50YWJJbmRleCk7XHJcblx0XHR9LFxyXG5cclxuXHRcdC8vIEJvb2xlYW4gcHJvcGVydGllc1xyXG5cdFx0XCJlbmFibGVkXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0XHRyZXR1cm4gZWxlbS5kaXNhYmxlZCA9PT0gZmFsc2U7XHJcblx0XHR9LFxyXG5cclxuXHRcdFwiZGlzYWJsZWRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRcdHJldHVybiBlbGVtLmRpc2FibGVkID09PSB0cnVlO1xyXG5cdFx0fSxcclxuXHJcblx0XHRcImNoZWNrZWRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRcdC8vIEluIENTUzMsIDpjaGVja2VkIHNob3VsZCByZXR1cm4gYm90aCBjaGVja2VkIGFuZCBzZWxlY3RlZCBlbGVtZW50c1xyXG5cdFx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi8yMDExL1JFQy1jc3MzLXNlbGVjdG9ycy0yMDExMDkyOS8jY2hlY2tlZFxyXG5cdFx0XHR2YXIgbm9kZU5hbWUgPSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XHJcblx0XHRcdHJldHVybiAobm9kZU5hbWUgPT09IFwiaW5wdXRcIiAmJiAhIWVsZW0uY2hlY2tlZCkgfHwgKG5vZGVOYW1lID09PSBcIm9wdGlvblwiICYmICEhZWxlbS5zZWxlY3RlZCk7XHJcblx0XHR9LFxyXG5cclxuXHRcdFwic2VsZWN0ZWRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRcdC8vIEFjY2Vzc2luZyB0aGlzIHByb3BlcnR5IG1ha2VzIHNlbGVjdGVkLWJ5LWRlZmF1bHRcclxuXHRcdFx0Ly8gb3B0aW9ucyBpbiBTYWZhcmkgd29yayBwcm9wZXJseVxyXG5cdFx0XHRpZiAoIGVsZW0ucGFyZW50Tm9kZSApIHtcclxuXHRcdFx0XHRlbGVtLnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleDtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0cmV0dXJuIGVsZW0uc2VsZWN0ZWQgPT09IHRydWU7XHJcblx0XHR9LFxyXG5cclxuXHRcdC8vIENvbnRlbnRzXHJcblx0XHRcImVtcHR5XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI2VtcHR5LXBzZXVkb1xyXG5cdFx0XHQvLyA6ZW1wdHkgaXMgbmVnYXRlZCBieSBlbGVtZW50ICgxKSBvciBjb250ZW50IG5vZGVzICh0ZXh0OiAzOyBjZGF0YTogNDsgZW50aXR5IHJlZjogNSksXHJcblx0XHRcdC8vICAgYnV0IG5vdCBieSBvdGhlcnMgKGNvbW1lbnQ6IDg7IHByb2Nlc3NpbmcgaW5zdHJ1Y3Rpb246IDc7IGV0Yy4pXHJcblx0XHRcdC8vIG5vZGVUeXBlIDwgNiB3b3JrcyBiZWNhdXNlIGF0dHJpYnV0ZXMgKDIpIGRvIG5vdCBhcHBlYXIgYXMgY2hpbGRyZW5cclxuXHRcdFx0Zm9yICggZWxlbSA9IGVsZW0uZmlyc3RDaGlsZDsgZWxlbTsgZWxlbSA9IGVsZW0ubmV4dFNpYmxpbmcgKSB7XHJcblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlIDwgNiApIHtcclxuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuIHRydWU7XHJcblx0XHR9LFxyXG5cclxuXHRcdFwicGFyZW50XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0XHRyZXR1cm4gIUV4cHIucHNldWRvc1tcImVtcHR5XCJdKCBlbGVtICk7XHJcblx0XHR9LFxyXG5cclxuXHRcdC8vIEVsZW1lbnQvaW5wdXQgdHlwZXNcclxuXHRcdFwiaGVhZGVyXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0XHRyZXR1cm4gcmhlYWRlci50ZXN0KCBlbGVtLm5vZGVOYW1lICk7XHJcblx0XHR9LFxyXG5cclxuXHRcdFwiaW5wdXRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRcdHJldHVybiByaW5wdXRzLnRlc3QoIGVsZW0ubm9kZU5hbWUgKTtcclxuXHRcdH0sXHJcblxyXG5cdFx0XCJidXR0b25cIjogZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRcdHZhciBuYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xyXG5cdFx0XHRyZXR1cm4gbmFtZSA9PT0gXCJpbnB1dFwiICYmIGVsZW0udHlwZSA9PT0gXCJidXR0b25cIiB8fCBuYW1lID09PSBcImJ1dHRvblwiO1xyXG5cdFx0fSxcclxuXHJcblx0XHRcInRleHRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRcdHZhciBhdHRyO1xyXG5cdFx0XHRyZXR1cm4gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBcImlucHV0XCIgJiZcclxuXHRcdFx0XHRlbGVtLnR5cGUgPT09IFwidGV4dFwiICYmXHJcblxyXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFPDhcclxuXHRcdFx0XHQvLyBOZXcgSFRNTDUgYXR0cmlidXRlIHZhbHVlcyAoZS5nLiwgXCJzZWFyY2hcIikgYXBwZWFyIHdpdGggZWxlbS50eXBlID09PSBcInRleHRcIlxyXG5cdFx0XHRcdCggKGF0dHIgPSBlbGVtLmdldEF0dHJpYnV0ZShcInR5cGVcIikpID09IG51bGwgfHwgYXR0ci50b0xvd2VyQ2FzZSgpID09PSBcInRleHRcIiApO1xyXG5cdFx0fSxcclxuXHJcblx0XHQvLyBQb3NpdGlvbi1pbi1jb2xsZWN0aW9uXHJcblx0XHRcImZpcnN0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oKSB7XHJcblx0XHRcdHJldHVybiBbIDAgXTtcclxuXHRcdH0pLFxyXG5cclxuXHRcdFwibGFzdFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCApIHtcclxuXHRcdFx0cmV0dXJuIFsgbGVuZ3RoIC0gMSBdO1xyXG5cdFx0fSksXHJcblxyXG5cdFx0XCJlcVwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCwgYXJndW1lbnQgKSB7XHJcblx0XHRcdHJldHVybiBbIGFyZ3VtZW50IDwgMCA/IGFyZ3VtZW50ICsgbGVuZ3RoIDogYXJndW1lbnQgXTtcclxuXHRcdH0pLFxyXG5cclxuXHRcdFwiZXZlblwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCApIHtcclxuXHRcdFx0dmFyIGkgPSAwO1xyXG5cdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkgKz0gMiApIHtcclxuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XHJcblx0XHR9KSxcclxuXHJcblx0XHRcIm9kZFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCApIHtcclxuXHRcdFx0dmFyIGkgPSAxO1xyXG5cdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkgKz0gMiApIHtcclxuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XHJcblx0XHR9KSxcclxuXHJcblx0XHRcImx0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoLCBhcmd1bWVudCApIHtcclxuXHRcdFx0dmFyIGkgPSBhcmd1bWVudCA8IDAgPyBhcmd1bWVudCArIGxlbmd0aCA6IGFyZ3VtZW50O1xyXG5cdFx0XHRmb3IgKCA7IC0taSA+PSAwOyApIHtcclxuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XHJcblx0XHR9KSxcclxuXHJcblx0XHRcImd0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoLCBhcmd1bWVudCApIHtcclxuXHRcdFx0dmFyIGkgPSBhcmd1bWVudCA8IDAgPyBhcmd1bWVudCArIGxlbmd0aCA6IGFyZ3VtZW50O1xyXG5cdFx0XHRmb3IgKCA7ICsraSA8IGxlbmd0aDsgKSB7XHJcblx0XHRcdFx0bWF0Y2hJbmRleGVzLnB1c2goIGkgKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xyXG5cdFx0fSlcclxuXHR9XHJcbn07XHJcblxyXG5FeHByLnBzZXVkb3NbXCJudGhcIl0gPSBFeHByLnBzZXVkb3NbXCJlcVwiXTtcclxuXHJcbi8vIEFkZCBidXR0b24vaW5wdXQgdHlwZSBwc2V1ZG9zXHJcbmZvciAoIGkgaW4geyByYWRpbzogdHJ1ZSwgY2hlY2tib3g6IHRydWUsIGZpbGU6IHRydWUsIHBhc3N3b3JkOiB0cnVlLCBpbWFnZTogdHJ1ZSB9ICkge1xyXG5cdEV4cHIucHNldWRvc1sgaSBdID0gY3JlYXRlSW5wdXRQc2V1ZG8oIGkgKTtcclxufVxyXG5mb3IgKCBpIGluIHsgc3VibWl0OiB0cnVlLCByZXNldDogdHJ1ZSB9ICkge1xyXG5cdEV4cHIucHNldWRvc1sgaSBdID0gY3JlYXRlQnV0dG9uUHNldWRvKCBpICk7XHJcbn1cclxuXHJcbi8vIEVhc3kgQVBJIGZvciBjcmVhdGluZyBuZXcgc2V0RmlsdGVyc1xyXG5mdW5jdGlvbiBzZXRGaWx0ZXJzKCkge31cclxuc2V0RmlsdGVycy5wcm90b3R5cGUgPSBFeHByLmZpbHRlcnMgPSBFeHByLnBzZXVkb3M7XHJcbkV4cHIuc2V0RmlsdGVycyA9IG5ldyBzZXRGaWx0ZXJzKCk7XHJcblxyXG50b2tlbml6ZSA9IFNpenpsZS50b2tlbml6ZSA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgcGFyc2VPbmx5ICkge1xyXG5cdHZhciBtYXRjaGVkLCBtYXRjaCwgdG9rZW5zLCB0eXBlLFxyXG5cdFx0c29GYXIsIGdyb3VwcywgcHJlRmlsdGVycyxcclxuXHRcdGNhY2hlZCA9IHRva2VuQ2FjaGVbIHNlbGVjdG9yICsgXCIgXCIgXTtcclxuXHJcblx0aWYgKCBjYWNoZWQgKSB7XHJcblx0XHRyZXR1cm4gcGFyc2VPbmx5ID8gMCA6IGNhY2hlZC5zbGljZSggMCApO1xyXG5cdH1cclxuXHJcblx0c29GYXIgPSBzZWxlY3RvcjtcclxuXHRncm91cHMgPSBbXTtcclxuXHRwcmVGaWx0ZXJzID0gRXhwci5wcmVGaWx0ZXI7XHJcblxyXG5cdHdoaWxlICggc29GYXIgKSB7XHJcblxyXG5cdFx0Ly8gQ29tbWEgYW5kIGZpcnN0IHJ1blxyXG5cdFx0aWYgKCAhbWF0Y2hlZCB8fCAobWF0Y2ggPSByY29tbWEuZXhlYyggc29GYXIgKSkgKSB7XHJcblx0XHRcdGlmICggbWF0Y2ggKSB7XHJcblx0XHRcdFx0Ly8gRG9uJ3QgY29uc3VtZSB0cmFpbGluZyBjb21tYXMgYXMgdmFsaWRcclxuXHRcdFx0XHRzb0ZhciA9IHNvRmFyLnNsaWNlKCBtYXRjaFswXS5sZW5ndGggKSB8fCBzb0ZhcjtcclxuXHRcdFx0fVxyXG5cdFx0XHRncm91cHMucHVzaCggKHRva2VucyA9IFtdKSApO1xyXG5cdFx0fVxyXG5cclxuXHRcdG1hdGNoZWQgPSBmYWxzZTtcclxuXHJcblx0XHQvLyBDb21iaW5hdG9yc1xyXG5cdFx0aWYgKCAobWF0Y2ggPSByY29tYmluYXRvcnMuZXhlYyggc29GYXIgKSkgKSB7XHJcblx0XHRcdG1hdGNoZWQgPSBtYXRjaC5zaGlmdCgpO1xyXG5cdFx0XHR0b2tlbnMucHVzaCh7XHJcblx0XHRcdFx0dmFsdWU6IG1hdGNoZWQsXHJcblx0XHRcdFx0Ly8gQ2FzdCBkZXNjZW5kYW50IGNvbWJpbmF0b3JzIHRvIHNwYWNlXHJcblx0XHRcdFx0dHlwZTogbWF0Y2hbMF0ucmVwbGFjZSggcnRyaW0sIFwiIFwiIClcclxuXHRcdFx0fSk7XHJcblx0XHRcdHNvRmFyID0gc29GYXIuc2xpY2UoIG1hdGNoZWQubGVuZ3RoICk7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gRmlsdGVyc1xyXG5cdFx0Zm9yICggdHlwZSBpbiBFeHByLmZpbHRlciApIHtcclxuXHRcdFx0aWYgKCAobWF0Y2ggPSBtYXRjaEV4cHJbIHR5cGUgXS5leGVjKCBzb0ZhciApKSAmJiAoIXByZUZpbHRlcnNbIHR5cGUgXSB8fFxyXG5cdFx0XHRcdChtYXRjaCA9IHByZUZpbHRlcnNbIHR5cGUgXSggbWF0Y2ggKSkpICkge1xyXG5cdFx0XHRcdG1hdGNoZWQgPSBtYXRjaC5zaGlmdCgpO1xyXG5cdFx0XHRcdHRva2Vucy5wdXNoKHtcclxuXHRcdFx0XHRcdHZhbHVlOiBtYXRjaGVkLFxyXG5cdFx0XHRcdFx0dHlwZTogdHlwZSxcclxuXHRcdFx0XHRcdG1hdGNoZXM6IG1hdGNoXHJcblx0XHRcdFx0fSk7XHJcblx0XHRcdFx0c29GYXIgPSBzb0Zhci5zbGljZSggbWF0Y2hlZC5sZW5ndGggKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdGlmICggIW1hdGNoZWQgKSB7XHJcblx0XHRcdGJyZWFrO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0Ly8gUmV0dXJuIHRoZSBsZW5ndGggb2YgdGhlIGludmFsaWQgZXhjZXNzXHJcblx0Ly8gaWYgd2UncmUganVzdCBwYXJzaW5nXHJcblx0Ly8gT3RoZXJ3aXNlLCB0aHJvdyBhbiBlcnJvciBvciByZXR1cm4gdG9rZW5zXHJcblx0cmV0dXJuIHBhcnNlT25seSA/XHJcblx0XHRzb0Zhci5sZW5ndGggOlxyXG5cdFx0c29GYXIgP1xyXG5cdFx0XHRTaXp6bGUuZXJyb3IoIHNlbGVjdG9yICkgOlxyXG5cdFx0XHQvLyBDYWNoZSB0aGUgdG9rZW5zXHJcblx0XHRcdHRva2VuQ2FjaGUoIHNlbGVjdG9yLCBncm91cHMgKS5zbGljZSggMCApO1xyXG59O1xyXG5cclxuZnVuY3Rpb24gdG9TZWxlY3RvciggdG9rZW5zICkge1xyXG5cdHZhciBpID0gMCxcclxuXHRcdGxlbiA9IHRva2Vucy5sZW5ndGgsXHJcblx0XHRzZWxlY3RvciA9IFwiXCI7XHJcblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XHJcblx0XHRzZWxlY3RvciArPSB0b2tlbnNbaV0udmFsdWU7XHJcblx0fVxyXG5cdHJldHVybiBzZWxlY3RvcjtcclxufVxyXG5cclxuZnVuY3Rpb24gYWRkQ29tYmluYXRvciggbWF0Y2hlciwgY29tYmluYXRvciwgYmFzZSApIHtcclxuXHR2YXIgZGlyID0gY29tYmluYXRvci5kaXIsXHJcblx0XHRjaGVja05vbkVsZW1lbnRzID0gYmFzZSAmJiBkaXIgPT09IFwicGFyZW50Tm9kZVwiLFxyXG5cdFx0ZG9uZU5hbWUgPSBkb25lKys7XHJcblxyXG5cdHJldHVybiBjb21iaW5hdG9yLmZpcnN0ID9cclxuXHRcdC8vIENoZWNrIGFnYWluc3QgY2xvc2VzdCBhbmNlc3Rvci9wcmVjZWRpbmcgZWxlbWVudFxyXG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcclxuXHRcdFx0d2hpbGUgKCAoZWxlbSA9IGVsZW1bIGRpciBdKSApIHtcclxuXHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgfHwgY2hlY2tOb25FbGVtZW50cyApIHtcclxuXHRcdFx0XHRcdHJldHVybiBtYXRjaGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH0gOlxyXG5cclxuXHRcdC8vIENoZWNrIGFnYWluc3QgYWxsIGFuY2VzdG9yL3ByZWNlZGluZyBlbGVtZW50c1xyXG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcclxuXHRcdFx0dmFyIG9sZENhY2hlLCBvdXRlckNhY2hlLFxyXG5cdFx0XHRcdG5ld0NhY2hlID0gWyBkaXJydW5zLCBkb25lTmFtZSBdO1xyXG5cclxuXHRcdFx0Ly8gV2UgY2FuJ3Qgc2V0IGFyYml0cmFyeSBkYXRhIG9uIFhNTCBub2Rlcywgc28gdGhleSBkb24ndCBiZW5lZml0IGZyb20gZGlyIGNhY2hpbmdcclxuXHRcdFx0aWYgKCB4bWwgKSB7XHJcblx0XHRcdFx0d2hpbGUgKCAoZWxlbSA9IGVsZW1bIGRpciBdKSApIHtcclxuXHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBjaGVja05vbkVsZW1lbnRzICkge1xyXG5cdFx0XHRcdFx0XHRpZiAoIG1hdGNoZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApICkge1xyXG5cdFx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdHdoaWxlICggKGVsZW0gPSBlbGVtWyBkaXIgXSkgKSB7XHJcblx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgfHwgY2hlY2tOb25FbGVtZW50cyApIHtcclxuXHRcdFx0XHRcdFx0b3V0ZXJDYWNoZSA9IGVsZW1bIGV4cGFuZG8gXSB8fCAoZWxlbVsgZXhwYW5kbyBdID0ge30pO1xyXG5cdFx0XHRcdFx0XHRpZiAoIChvbGRDYWNoZSA9IG91dGVyQ2FjaGVbIGRpciBdKSAmJlxyXG5cdFx0XHRcdFx0XHRcdG9sZENhY2hlWyAwIF0gPT09IGRpcnJ1bnMgJiYgb2xkQ2FjaGVbIDEgXSA9PT0gZG9uZU5hbWUgKSB7XHJcblxyXG5cdFx0XHRcdFx0XHRcdC8vIEFzc2lnbiB0byBuZXdDYWNoZSBzbyByZXN1bHRzIGJhY2stcHJvcGFnYXRlIHRvIHByZXZpb3VzIGVsZW1lbnRzXHJcblx0XHRcdFx0XHRcdFx0cmV0dXJuIChuZXdDYWNoZVsgMiBdID0gb2xkQ2FjaGVbIDIgXSk7XHJcblx0XHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdFx0Ly8gUmV1c2UgbmV3Y2FjaGUgc28gcmVzdWx0cyBiYWNrLXByb3BhZ2F0ZSB0byBwcmV2aW91cyBlbGVtZW50c1xyXG5cdFx0XHRcdFx0XHRcdG91dGVyQ2FjaGVbIGRpciBdID0gbmV3Q2FjaGU7XHJcblxyXG5cdFx0XHRcdFx0XHRcdC8vIEEgbWF0Y2ggbWVhbnMgd2UncmUgZG9uZTsgYSBmYWlsIG1lYW5zIHdlIGhhdmUgdG8ga2VlcCBjaGVja2luZ1xyXG5cdFx0XHRcdFx0XHRcdGlmICggKG5ld0NhY2hlWyAyIF0gPSBtYXRjaGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKSkgKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH07XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApIHtcclxuXHRyZXR1cm4gbWF0Y2hlcnMubGVuZ3RoID4gMSA/XHJcblx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xyXG5cdFx0XHR2YXIgaSA9IG1hdGNoZXJzLmxlbmd0aDtcclxuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XHJcblx0XHRcdFx0aWYgKCAhbWF0Y2hlcnNbaV0oIGVsZW0sIGNvbnRleHQsIHhtbCApICkge1xyXG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gdHJ1ZTtcclxuXHRcdH0gOlxyXG5cdFx0bWF0Y2hlcnNbMF07XHJcbn1cclxuXHJcbmZ1bmN0aW9uIG11bHRpcGxlQ29udGV4dHMoIHNlbGVjdG9yLCBjb250ZXh0cywgcmVzdWx0cyApIHtcclxuXHR2YXIgaSA9IDAsXHJcblx0XHRsZW4gPSBjb250ZXh0cy5sZW5ndGg7XHJcblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XHJcblx0XHRTaXp6bGUoIHNlbGVjdG9yLCBjb250ZXh0c1tpXSwgcmVzdWx0cyApO1xyXG5cdH1cclxuXHRyZXR1cm4gcmVzdWx0cztcclxufVxyXG5cclxuZnVuY3Rpb24gY29uZGVuc2UoIHVubWF0Y2hlZCwgbWFwLCBmaWx0ZXIsIGNvbnRleHQsIHhtbCApIHtcclxuXHR2YXIgZWxlbSxcclxuXHRcdG5ld1VubWF0Y2hlZCA9IFtdLFxyXG5cdFx0aSA9IDAsXHJcblx0XHRsZW4gPSB1bm1hdGNoZWQubGVuZ3RoLFxyXG5cdFx0bWFwcGVkID0gbWFwICE9IG51bGw7XHJcblxyXG5cdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xyXG5cdFx0aWYgKCAoZWxlbSA9IHVubWF0Y2hlZFtpXSkgKSB7XHJcblx0XHRcdGlmICggIWZpbHRlciB8fCBmaWx0ZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApICkge1xyXG5cdFx0XHRcdG5ld1VubWF0Y2hlZC5wdXNoKCBlbGVtICk7XHJcblx0XHRcdFx0aWYgKCBtYXBwZWQgKSB7XHJcblx0XHRcdFx0XHRtYXAucHVzaCggaSApO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0cmV0dXJuIG5ld1VubWF0Y2hlZDtcclxufVxyXG5cclxuZnVuY3Rpb24gc2V0TWF0Y2hlciggcHJlRmlsdGVyLCBzZWxlY3RvciwgbWF0Y2hlciwgcG9zdEZpbHRlciwgcG9zdEZpbmRlciwgcG9zdFNlbGVjdG9yICkge1xyXG5cdGlmICggcG9zdEZpbHRlciAmJiAhcG9zdEZpbHRlclsgZXhwYW5kbyBdICkge1xyXG5cdFx0cG9zdEZpbHRlciA9IHNldE1hdGNoZXIoIHBvc3RGaWx0ZXIgKTtcclxuXHR9XHJcblx0aWYgKCBwb3N0RmluZGVyICYmICFwb3N0RmluZGVyWyBleHBhbmRvIF0gKSB7XHJcblx0XHRwb3N0RmluZGVyID0gc2V0TWF0Y2hlciggcG9zdEZpbmRlciwgcG9zdFNlbGVjdG9yICk7XHJcblx0fVxyXG5cdHJldHVybiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlZWQsIHJlc3VsdHMsIGNvbnRleHQsIHhtbCApIHtcclxuXHRcdHZhciB0ZW1wLCBpLCBlbGVtLFxyXG5cdFx0XHRwcmVNYXAgPSBbXSxcclxuXHRcdFx0cG9zdE1hcCA9IFtdLFxyXG5cdFx0XHRwcmVleGlzdGluZyA9IHJlc3VsdHMubGVuZ3RoLFxyXG5cclxuXHRcdFx0Ly8gR2V0IGluaXRpYWwgZWxlbWVudHMgZnJvbSBzZWVkIG9yIGNvbnRleHRcclxuXHRcdFx0ZWxlbXMgPSBzZWVkIHx8IG11bHRpcGxlQ29udGV4dHMoIHNlbGVjdG9yIHx8IFwiKlwiLCBjb250ZXh0Lm5vZGVUeXBlID8gWyBjb250ZXh0IF0gOiBjb250ZXh0LCBbXSApLFxyXG5cclxuXHRcdFx0Ly8gUHJlZmlsdGVyIHRvIGdldCBtYXRjaGVyIGlucHV0LCBwcmVzZXJ2aW5nIGEgbWFwIGZvciBzZWVkLXJlc3VsdHMgc3luY2hyb25pemF0aW9uXHJcblx0XHRcdG1hdGNoZXJJbiA9IHByZUZpbHRlciAmJiAoIHNlZWQgfHwgIXNlbGVjdG9yICkgP1xyXG5cdFx0XHRcdGNvbmRlbnNlKCBlbGVtcywgcHJlTWFwLCBwcmVGaWx0ZXIsIGNvbnRleHQsIHhtbCApIDpcclxuXHRcdFx0XHRlbGVtcyxcclxuXHJcblx0XHRcdG1hdGNoZXJPdXQgPSBtYXRjaGVyID9cclxuXHRcdFx0XHQvLyBJZiB3ZSBoYXZlIGEgcG9zdEZpbmRlciwgb3IgZmlsdGVyZWQgc2VlZCwgb3Igbm9uLXNlZWQgcG9zdEZpbHRlciBvciBwcmVleGlzdGluZyByZXN1bHRzLFxyXG5cdFx0XHRcdHBvc3RGaW5kZXIgfHwgKCBzZWVkID8gcHJlRmlsdGVyIDogcHJlZXhpc3RpbmcgfHwgcG9zdEZpbHRlciApID9cclxuXHJcblx0XHRcdFx0XHQvLyAuLi5pbnRlcm1lZGlhdGUgcHJvY2Vzc2luZyBpcyBuZWNlc3NhcnlcclxuXHRcdFx0XHRcdFtdIDpcclxuXHJcblx0XHRcdFx0XHQvLyAuLi5vdGhlcndpc2UgdXNlIHJlc3VsdHMgZGlyZWN0bHlcclxuXHRcdFx0XHRcdHJlc3VsdHMgOlxyXG5cdFx0XHRcdG1hdGNoZXJJbjtcclxuXHJcblx0XHQvLyBGaW5kIHByaW1hcnkgbWF0Y2hlc1xyXG5cdFx0aWYgKCBtYXRjaGVyICkge1xyXG5cdFx0XHRtYXRjaGVyKCBtYXRjaGVySW4sIG1hdGNoZXJPdXQsIGNvbnRleHQsIHhtbCApO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIEFwcGx5IHBvc3RGaWx0ZXJcclxuXHRcdGlmICggcG9zdEZpbHRlciApIHtcclxuXHRcdFx0dGVtcCA9IGNvbmRlbnNlKCBtYXRjaGVyT3V0LCBwb3N0TWFwICk7XHJcblx0XHRcdHBvc3RGaWx0ZXIoIHRlbXAsIFtdLCBjb250ZXh0LCB4bWwgKTtcclxuXHJcblx0XHRcdC8vIFVuLW1hdGNoIGZhaWxpbmcgZWxlbWVudHMgYnkgbW92aW5nIHRoZW0gYmFjayB0byBtYXRjaGVySW5cclxuXHRcdFx0aSA9IHRlbXAubGVuZ3RoO1xyXG5cdFx0XHR3aGlsZSAoIGktLSApIHtcclxuXHRcdFx0XHRpZiAoIChlbGVtID0gdGVtcFtpXSkgKSB7XHJcblx0XHRcdFx0XHRtYXRjaGVyT3V0WyBwb3N0TWFwW2ldIF0gPSAhKG1hdGNoZXJJblsgcG9zdE1hcFtpXSBdID0gZWxlbSk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKCBzZWVkICkge1xyXG5cdFx0XHRpZiAoIHBvc3RGaW5kZXIgfHwgcHJlRmlsdGVyICkge1xyXG5cdFx0XHRcdGlmICggcG9zdEZpbmRlciApIHtcclxuXHRcdFx0XHRcdC8vIEdldCB0aGUgZmluYWwgbWF0Y2hlck91dCBieSBjb25kZW5zaW5nIHRoaXMgaW50ZXJtZWRpYXRlIGludG8gcG9zdEZpbmRlciBjb250ZXh0c1xyXG5cdFx0XHRcdFx0dGVtcCA9IFtdO1xyXG5cdFx0XHRcdFx0aSA9IG1hdGNoZXJPdXQubGVuZ3RoO1xyXG5cdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XHJcblx0XHRcdFx0XHRcdGlmICggKGVsZW0gPSBtYXRjaGVyT3V0W2ldKSApIHtcclxuXHRcdFx0XHRcdFx0XHQvLyBSZXN0b3JlIG1hdGNoZXJJbiBzaW5jZSBlbGVtIGlzIG5vdCB5ZXQgYSBmaW5hbCBtYXRjaFxyXG5cdFx0XHRcdFx0XHRcdHRlbXAucHVzaCggKG1hdGNoZXJJbltpXSA9IGVsZW0pICk7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdHBvc3RGaW5kZXIoIG51bGwsIChtYXRjaGVyT3V0ID0gW10pLCB0ZW1wLCB4bWwgKTtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdC8vIE1vdmUgbWF0Y2hlZCBlbGVtZW50cyBmcm9tIHNlZWQgdG8gcmVzdWx0cyB0byBrZWVwIHRoZW0gc3luY2hyb25pemVkXHJcblx0XHRcdFx0aSA9IG1hdGNoZXJPdXQubGVuZ3RoO1xyXG5cdFx0XHRcdHdoaWxlICggaS0tICkge1xyXG5cdFx0XHRcdFx0aWYgKCAoZWxlbSA9IG1hdGNoZXJPdXRbaV0pICYmXHJcblx0XHRcdFx0XHRcdCh0ZW1wID0gcG9zdEZpbmRlciA/IGluZGV4T2YoIHNlZWQsIGVsZW0gKSA6IHByZU1hcFtpXSkgPiAtMSApIHtcclxuXHJcblx0XHRcdFx0XHRcdHNlZWRbdGVtcF0gPSAhKHJlc3VsdHNbdGVtcF0gPSBlbGVtKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHJcblx0XHQvLyBBZGQgZWxlbWVudHMgdG8gcmVzdWx0cywgdGhyb3VnaCBwb3N0RmluZGVyIGlmIGRlZmluZWRcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdG1hdGNoZXJPdXQgPSBjb25kZW5zZShcclxuXHRcdFx0XHRtYXRjaGVyT3V0ID09PSByZXN1bHRzID9cclxuXHRcdFx0XHRcdG1hdGNoZXJPdXQuc3BsaWNlKCBwcmVleGlzdGluZywgbWF0Y2hlck91dC5sZW5ndGggKSA6XHJcblx0XHRcdFx0XHRtYXRjaGVyT3V0XHJcblx0XHRcdCk7XHJcblx0XHRcdGlmICggcG9zdEZpbmRlciApIHtcclxuXHRcdFx0XHRwb3N0RmluZGVyKCBudWxsLCByZXN1bHRzLCBtYXRjaGVyT3V0LCB4bWwgKTtcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBtYXRjaGVyT3V0ICk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9KTtcclxufVxyXG5cclxuZnVuY3Rpb24gbWF0Y2hlckZyb21Ub2tlbnMoIHRva2VucyApIHtcclxuXHR2YXIgY2hlY2tDb250ZXh0LCBtYXRjaGVyLCBqLFxyXG5cdFx0bGVuID0gdG9rZW5zLmxlbmd0aCxcclxuXHRcdGxlYWRpbmdSZWxhdGl2ZSA9IEV4cHIucmVsYXRpdmVbIHRva2Vuc1swXS50eXBlIF0sXHJcblx0XHRpbXBsaWNpdFJlbGF0aXZlID0gbGVhZGluZ1JlbGF0aXZlIHx8IEV4cHIucmVsYXRpdmVbXCIgXCJdLFxyXG5cdFx0aSA9IGxlYWRpbmdSZWxhdGl2ZSA/IDEgOiAwLFxyXG5cclxuXHRcdC8vIFRoZSBmb3VuZGF0aW9uYWwgbWF0Y2hlciBlbnN1cmVzIHRoYXQgZWxlbWVudHMgYXJlIHJlYWNoYWJsZSBmcm9tIHRvcC1sZXZlbCBjb250ZXh0KHMpXHJcblx0XHRtYXRjaENvbnRleHQgPSBhZGRDb21iaW5hdG9yKCBmdW5jdGlvbiggZWxlbSApIHtcclxuXHRcdFx0cmV0dXJuIGVsZW0gPT09IGNoZWNrQ29udGV4dDtcclxuXHRcdH0sIGltcGxpY2l0UmVsYXRpdmUsIHRydWUgKSxcclxuXHRcdG1hdGNoQW55Q29udGV4dCA9IGFkZENvbWJpbmF0b3IoIGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0XHRyZXR1cm4gaW5kZXhPZiggY2hlY2tDb250ZXh0LCBlbGVtICkgPiAtMTtcclxuXHRcdH0sIGltcGxpY2l0UmVsYXRpdmUsIHRydWUgKSxcclxuXHRcdG1hdGNoZXJzID0gWyBmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xyXG5cdFx0XHR2YXIgcmV0ID0gKCAhbGVhZGluZ1JlbGF0aXZlICYmICggeG1sIHx8IGNvbnRleHQgIT09IG91dGVybW9zdENvbnRleHQgKSApIHx8IChcclxuXHRcdFx0XHQoY2hlY2tDb250ZXh0ID0gY29udGV4dCkubm9kZVR5cGUgP1xyXG5cdFx0XHRcdFx0bWF0Y2hDb250ZXh0KCBlbGVtLCBjb250ZXh0LCB4bWwgKSA6XHJcblx0XHRcdFx0XHRtYXRjaEFueUNvbnRleHQoIGVsZW0sIGNvbnRleHQsIHhtbCApICk7XHJcblx0XHRcdC8vIEF2b2lkIGhhbmdpbmcgb250byBlbGVtZW50IChpc3N1ZSAjMjk5KVxyXG5cdFx0XHRjaGVja0NvbnRleHQgPSBudWxsO1xyXG5cdFx0XHRyZXR1cm4gcmV0O1xyXG5cdFx0fSBdO1xyXG5cclxuXHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcclxuXHRcdGlmICggKG1hdGNoZXIgPSBFeHByLnJlbGF0aXZlWyB0b2tlbnNbaV0udHlwZSBdKSApIHtcclxuXHRcdFx0bWF0Y2hlcnMgPSBbIGFkZENvbWJpbmF0b3IoZWxlbWVudE1hdGNoZXIoIG1hdGNoZXJzICksIG1hdGNoZXIpIF07XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRtYXRjaGVyID0gRXhwci5maWx0ZXJbIHRva2Vuc1tpXS50eXBlIF0uYXBwbHkoIG51bGwsIHRva2Vuc1tpXS5tYXRjaGVzICk7XHJcblxyXG5cdFx0XHQvLyBSZXR1cm4gc3BlY2lhbCB1cG9uIHNlZWluZyBhIHBvc2l0aW9uYWwgbWF0Y2hlclxyXG5cdFx0XHRpZiAoIG1hdGNoZXJbIGV4cGFuZG8gXSApIHtcclxuXHRcdFx0XHQvLyBGaW5kIHRoZSBuZXh0IHJlbGF0aXZlIG9wZXJhdG9yIChpZiBhbnkpIGZvciBwcm9wZXIgaGFuZGxpbmdcclxuXHRcdFx0XHRqID0gKytpO1xyXG5cdFx0XHRcdGZvciAoIDsgaiA8IGxlbjsgaisrICkge1xyXG5cdFx0XHRcdFx0aWYgKCBFeHByLnJlbGF0aXZlWyB0b2tlbnNbal0udHlwZSBdICkge1xyXG5cdFx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0cmV0dXJuIHNldE1hdGNoZXIoXHJcblx0XHRcdFx0XHRpID4gMSAmJiBlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKSxcclxuXHRcdFx0XHRcdGkgPiAxICYmIHRvU2VsZWN0b3IoXHJcblx0XHRcdFx0XHRcdC8vIElmIHRoZSBwcmVjZWRpbmcgdG9rZW4gd2FzIGEgZGVzY2VuZGFudCBjb21iaW5hdG9yLCBpbnNlcnQgYW4gaW1wbGljaXQgYW55LWVsZW1lbnQgYCpgXHJcblx0XHRcdFx0XHRcdHRva2Vucy5zbGljZSggMCwgaSAtIDEgKS5jb25jYXQoeyB2YWx1ZTogdG9rZW5zWyBpIC0gMiBdLnR5cGUgPT09IFwiIFwiID8gXCIqXCIgOiBcIlwiIH0pXHJcblx0XHRcdFx0XHQpLnJlcGxhY2UoIHJ0cmltLCBcIiQxXCIgKSxcclxuXHRcdFx0XHRcdG1hdGNoZXIsXHJcblx0XHRcdFx0XHRpIDwgaiAmJiBtYXRjaGVyRnJvbVRva2VucyggdG9rZW5zLnNsaWNlKCBpLCBqICkgKSxcclxuXHRcdFx0XHRcdGogPCBsZW4gJiYgbWF0Y2hlckZyb21Ub2tlbnMoICh0b2tlbnMgPSB0b2tlbnMuc2xpY2UoIGogKSkgKSxcclxuXHRcdFx0XHRcdGogPCBsZW4gJiYgdG9TZWxlY3RvciggdG9rZW5zIClcclxuXHRcdFx0XHQpO1xyXG5cdFx0XHR9XHJcblx0XHRcdG1hdGNoZXJzLnB1c2goIG1hdGNoZXIgKTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdHJldHVybiBlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKTtcclxufVxyXG5cclxuZnVuY3Rpb24gbWF0Y2hlckZyb21Hcm91cE1hdGNoZXJzKCBlbGVtZW50TWF0Y2hlcnMsIHNldE1hdGNoZXJzICkge1xyXG5cdHZhciBieVNldCA9IHNldE1hdGNoZXJzLmxlbmd0aCA+IDAsXHJcblx0XHRieUVsZW1lbnQgPSBlbGVtZW50TWF0Y2hlcnMubGVuZ3RoID4gMCxcclxuXHRcdHN1cGVyTWF0Y2hlciA9IGZ1bmN0aW9uKCBzZWVkLCBjb250ZXh0LCB4bWwsIHJlc3VsdHMsIG91dGVybW9zdCApIHtcclxuXHRcdFx0dmFyIGVsZW0sIGosIG1hdGNoZXIsXHJcblx0XHRcdFx0bWF0Y2hlZENvdW50ID0gMCxcclxuXHRcdFx0XHRpID0gXCIwXCIsXHJcblx0XHRcdFx0dW5tYXRjaGVkID0gc2VlZCAmJiBbXSxcclxuXHRcdFx0XHRzZXRNYXRjaGVkID0gW10sXHJcblx0XHRcdFx0Y29udGV4dEJhY2t1cCA9IG91dGVybW9zdENvbnRleHQsXHJcblx0XHRcdFx0Ly8gV2UgbXVzdCBhbHdheXMgaGF2ZSBlaXRoZXIgc2VlZCBlbGVtZW50cyBvciBvdXRlcm1vc3QgY29udGV4dFxyXG5cdFx0XHRcdGVsZW1zID0gc2VlZCB8fCBieUVsZW1lbnQgJiYgRXhwci5maW5kW1wiVEFHXCJdKCBcIipcIiwgb3V0ZXJtb3N0ICksXHJcblx0XHRcdFx0Ly8gVXNlIGludGVnZXIgZGlycnVucyBpZmYgdGhpcyBpcyB0aGUgb3V0ZXJtb3N0IG1hdGNoZXJcclxuXHRcdFx0XHRkaXJydW5zVW5pcXVlID0gKGRpcnJ1bnMgKz0gY29udGV4dEJhY2t1cCA9PSBudWxsID8gMSA6IE1hdGgucmFuZG9tKCkgfHwgMC4xKSxcclxuXHRcdFx0XHRsZW4gPSBlbGVtcy5sZW5ndGg7XHJcblxyXG5cdFx0XHRpZiAoIG91dGVybW9zdCApIHtcclxuXHRcdFx0XHRvdXRlcm1vc3RDb250ZXh0ID0gY29udGV4dCAhPT0gZG9jdW1lbnQgJiYgY29udGV4dDtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gQWRkIGVsZW1lbnRzIHBhc3NpbmcgZWxlbWVudE1hdGNoZXJzIGRpcmVjdGx5IHRvIHJlc3VsdHNcclxuXHRcdFx0Ly8gS2VlcCBgaWAgYSBzdHJpbmcgaWYgdGhlcmUgYXJlIG5vIGVsZW1lbnRzIHNvIGBtYXRjaGVkQ291bnRgIHdpbGwgYmUgXCIwMFwiIGJlbG93XHJcblx0XHRcdC8vIFN1cHBvcnQ6IElFPDksIFNhZmFyaVxyXG5cdFx0XHQvLyBUb2xlcmF0ZSBOb2RlTGlzdCBwcm9wZXJ0aWVzIChJRTogXCJsZW5ndGhcIjsgU2FmYXJpOiA8bnVtYmVyPikgbWF0Y2hpbmcgZWxlbWVudHMgYnkgaWRcclxuXHRcdFx0Zm9yICggOyBpICE9PSBsZW4gJiYgKGVsZW0gPSBlbGVtc1tpXSkgIT0gbnVsbDsgaSsrICkge1xyXG5cdFx0XHRcdGlmICggYnlFbGVtZW50ICYmIGVsZW0gKSB7XHJcblx0XHRcdFx0XHRqID0gMDtcclxuXHRcdFx0XHRcdHdoaWxlICggKG1hdGNoZXIgPSBlbGVtZW50TWF0Y2hlcnNbaisrXSkgKSB7XHJcblx0XHRcdFx0XHRcdGlmICggbWF0Y2hlciggZWxlbSwgY29udGV4dCwgeG1sICkgKSB7XHJcblx0XHRcdFx0XHRcdFx0cmVzdWx0cy5wdXNoKCBlbGVtICk7XHJcblx0XHRcdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdGlmICggb3V0ZXJtb3N0ICkge1xyXG5cdFx0XHRcdFx0XHRkaXJydW5zID0gZGlycnVuc1VuaXF1ZTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdC8vIFRyYWNrIHVubWF0Y2hlZCBlbGVtZW50cyBmb3Igc2V0IGZpbHRlcnNcclxuXHRcdFx0XHRpZiAoIGJ5U2V0ICkge1xyXG5cdFx0XHRcdFx0Ly8gVGhleSB3aWxsIGhhdmUgZ29uZSB0aHJvdWdoIGFsbCBwb3NzaWJsZSBtYXRjaGVyc1xyXG5cdFx0XHRcdFx0aWYgKCAoZWxlbSA9ICFtYXRjaGVyICYmIGVsZW0pICkge1xyXG5cdFx0XHRcdFx0XHRtYXRjaGVkQ291bnQtLTtcclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHQvLyBMZW5ndGhlbiB0aGUgYXJyYXkgZm9yIGV2ZXJ5IGVsZW1lbnQsIG1hdGNoZWQgb3Igbm90XHJcblx0XHRcdFx0XHRpZiAoIHNlZWQgKSB7XHJcblx0XHRcdFx0XHRcdHVubWF0Y2hlZC5wdXNoKCBlbGVtICk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBBcHBseSBzZXQgZmlsdGVycyB0byB1bm1hdGNoZWQgZWxlbWVudHNcclxuXHRcdFx0bWF0Y2hlZENvdW50ICs9IGk7XHJcblx0XHRcdGlmICggYnlTZXQgJiYgaSAhPT0gbWF0Y2hlZENvdW50ICkge1xyXG5cdFx0XHRcdGogPSAwO1xyXG5cdFx0XHRcdHdoaWxlICggKG1hdGNoZXIgPSBzZXRNYXRjaGVyc1tqKytdKSApIHtcclxuXHRcdFx0XHRcdG1hdGNoZXIoIHVubWF0Y2hlZCwgc2V0TWF0Y2hlZCwgY29udGV4dCwgeG1sICk7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRpZiAoIHNlZWQgKSB7XHJcblx0XHRcdFx0XHQvLyBSZWludGVncmF0ZSBlbGVtZW50IG1hdGNoZXMgdG8gZWxpbWluYXRlIHRoZSBuZWVkIGZvciBzb3J0aW5nXHJcblx0XHRcdFx0XHRpZiAoIG1hdGNoZWRDb3VudCA+IDAgKSB7XHJcblx0XHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xyXG5cdFx0XHRcdFx0XHRcdGlmICggISh1bm1hdGNoZWRbaV0gfHwgc2V0TWF0Y2hlZFtpXSkgKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRzZXRNYXRjaGVkW2ldID0gcG9wLmNhbGwoIHJlc3VsdHMgKTtcclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHQvLyBEaXNjYXJkIGluZGV4IHBsYWNlaG9sZGVyIHZhbHVlcyB0byBnZXQgb25seSBhY3R1YWwgbWF0Y2hlc1xyXG5cdFx0XHRcdFx0c2V0TWF0Y2hlZCA9IGNvbmRlbnNlKCBzZXRNYXRjaGVkICk7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHQvLyBBZGQgbWF0Y2hlcyB0byByZXN1bHRzXHJcblx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgc2V0TWF0Y2hlZCApO1xyXG5cclxuXHRcdFx0XHQvLyBTZWVkbGVzcyBzZXQgbWF0Y2hlcyBzdWNjZWVkaW5nIG11bHRpcGxlIHN1Y2Nlc3NmdWwgbWF0Y2hlcnMgc3RpcHVsYXRlIHNvcnRpbmdcclxuXHRcdFx0XHRpZiAoIG91dGVybW9zdCAmJiAhc2VlZCAmJiBzZXRNYXRjaGVkLmxlbmd0aCA+IDAgJiZcclxuXHRcdFx0XHRcdCggbWF0Y2hlZENvdW50ICsgc2V0TWF0Y2hlcnMubGVuZ3RoICkgPiAxICkge1xyXG5cclxuXHRcdFx0XHRcdFNpenpsZS51bmlxdWVTb3J0KCByZXN1bHRzICk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBPdmVycmlkZSBtYW5pcHVsYXRpb24gb2YgZ2xvYmFscyBieSBuZXN0ZWQgbWF0Y2hlcnNcclxuXHRcdFx0aWYgKCBvdXRlcm1vc3QgKSB7XHJcblx0XHRcdFx0ZGlycnVucyA9IGRpcnJ1bnNVbmlxdWU7XHJcblx0XHRcdFx0b3V0ZXJtb3N0Q29udGV4dCA9IGNvbnRleHRCYWNrdXA7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHJldHVybiB1bm1hdGNoZWQ7XHJcblx0XHR9O1xyXG5cclxuXHRyZXR1cm4gYnlTZXQgP1xyXG5cdFx0bWFya0Z1bmN0aW9uKCBzdXBlck1hdGNoZXIgKSA6XHJcblx0XHRzdXBlck1hdGNoZXI7XHJcbn1cclxuXHJcbmNvbXBpbGUgPSBTaXp6bGUuY29tcGlsZSA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgbWF0Y2ggLyogSW50ZXJuYWwgVXNlIE9ubHkgKi8gKSB7XHJcblx0dmFyIGksXHJcblx0XHRzZXRNYXRjaGVycyA9IFtdLFxyXG5cdFx0ZWxlbWVudE1hdGNoZXJzID0gW10sXHJcblx0XHRjYWNoZWQgPSBjb21waWxlckNhY2hlWyBzZWxlY3RvciArIFwiIFwiIF07XHJcblxyXG5cdGlmICggIWNhY2hlZCApIHtcclxuXHRcdC8vIEdlbmVyYXRlIGEgZnVuY3Rpb24gb2YgcmVjdXJzaXZlIGZ1bmN0aW9ucyB0aGF0IGNhbiBiZSB1c2VkIHRvIGNoZWNrIGVhY2ggZWxlbWVudFxyXG5cdFx0aWYgKCAhbWF0Y2ggKSB7XHJcblx0XHRcdG1hdGNoID0gdG9rZW5pemUoIHNlbGVjdG9yICk7XHJcblx0XHR9XHJcblx0XHRpID0gbWF0Y2gubGVuZ3RoO1xyXG5cdFx0d2hpbGUgKCBpLS0gKSB7XHJcblx0XHRcdGNhY2hlZCA9IG1hdGNoZXJGcm9tVG9rZW5zKCBtYXRjaFtpXSApO1xyXG5cdFx0XHRpZiAoIGNhY2hlZFsgZXhwYW5kbyBdICkge1xyXG5cdFx0XHRcdHNldE1hdGNoZXJzLnB1c2goIGNhY2hlZCApO1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdGVsZW1lbnRNYXRjaGVycy5wdXNoKCBjYWNoZWQgKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdC8vIENhY2hlIHRoZSBjb21waWxlZCBmdW5jdGlvblxyXG5cdFx0Y2FjaGVkID0gY29tcGlsZXJDYWNoZSggc2VsZWN0b3IsIG1hdGNoZXJGcm9tR3JvdXBNYXRjaGVycyggZWxlbWVudE1hdGNoZXJzLCBzZXRNYXRjaGVycyApICk7XHJcblxyXG5cdFx0Ly8gU2F2ZSBzZWxlY3RvciBhbmQgdG9rZW5pemF0aW9uXHJcblx0XHRjYWNoZWQuc2VsZWN0b3IgPSBzZWxlY3RvcjtcclxuXHR9XHJcblx0cmV0dXJuIGNhY2hlZDtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBBIGxvdy1sZXZlbCBzZWxlY3Rpb24gZnVuY3Rpb24gdGhhdCB3b3JrcyB3aXRoIFNpenpsZSdzIGNvbXBpbGVkXHJcbiAqICBzZWxlY3RvciBmdW5jdGlvbnNcclxuICogQHBhcmFtIHtTdHJpbmd8RnVuY3Rpb259IHNlbGVjdG9yIEEgc2VsZWN0b3Igb3IgYSBwcmUtY29tcGlsZWRcclxuICogIHNlbGVjdG9yIGZ1bmN0aW9uIGJ1aWx0IHdpdGggU2l6emxlLmNvbXBpbGVcclxuICogQHBhcmFtIHtFbGVtZW50fSBjb250ZXh0XHJcbiAqIEBwYXJhbSB7QXJyYXl9IFtyZXN1bHRzXVxyXG4gKiBAcGFyYW0ge0FycmF5fSBbc2VlZF0gQSBzZXQgb2YgZWxlbWVudHMgdG8gbWF0Y2ggYWdhaW5zdFxyXG4gKi9cclxuc2VsZWN0ID0gU2l6emxlLnNlbGVjdCA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCwgcmVzdWx0cywgc2VlZCApIHtcclxuXHR2YXIgaSwgdG9rZW5zLCB0b2tlbiwgdHlwZSwgZmluZCxcclxuXHRcdGNvbXBpbGVkID0gdHlwZW9mIHNlbGVjdG9yID09PSBcImZ1bmN0aW9uXCIgJiYgc2VsZWN0b3IsXHJcblx0XHRtYXRjaCA9ICFzZWVkICYmIHRva2VuaXplKCAoc2VsZWN0b3IgPSBjb21waWxlZC5zZWxlY3RvciB8fCBzZWxlY3RvcikgKTtcclxuXHJcblx0cmVzdWx0cyA9IHJlc3VsdHMgfHwgW107XHJcblxyXG5cdC8vIFRyeSB0byBtaW5pbWl6ZSBvcGVyYXRpb25zIGlmIHRoZXJlIGlzIG5vIHNlZWQgYW5kIG9ubHkgb25lIGdyb3VwXHJcblx0aWYgKCBtYXRjaC5sZW5ndGggPT09IDEgKSB7XHJcblxyXG5cdFx0Ly8gVGFrZSBhIHNob3J0Y3V0IGFuZCBzZXQgdGhlIGNvbnRleHQgaWYgdGhlIHJvb3Qgc2VsZWN0b3IgaXMgYW4gSURcclxuXHRcdHRva2VucyA9IG1hdGNoWzBdID0gbWF0Y2hbMF0uc2xpY2UoIDAgKTtcclxuXHRcdGlmICggdG9rZW5zLmxlbmd0aCA+IDIgJiYgKHRva2VuID0gdG9rZW5zWzBdKS50eXBlID09PSBcIklEXCIgJiZcclxuXHRcdFx0XHRzdXBwb3J0LmdldEJ5SWQgJiYgY29udGV4dC5ub2RlVHlwZSA9PT0gOSAmJiBkb2N1bWVudElzSFRNTCAmJlxyXG5cdFx0XHRcdEV4cHIucmVsYXRpdmVbIHRva2Vuc1sxXS50eXBlIF0gKSB7XHJcblxyXG5cdFx0XHRjb250ZXh0ID0gKCBFeHByLmZpbmRbXCJJRFwiXSggdG9rZW4ubWF0Y2hlc1swXS5yZXBsYWNlKHJ1bmVzY2FwZSwgZnVuZXNjYXBlKSwgY29udGV4dCApIHx8IFtdIClbMF07XHJcblx0XHRcdGlmICggIWNvbnRleHQgKSB7XHJcblx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XHJcblxyXG5cdFx0XHQvLyBQcmVjb21waWxlZCBtYXRjaGVycyB3aWxsIHN0aWxsIHZlcmlmeSBhbmNlc3RyeSwgc28gc3RlcCB1cCBhIGxldmVsXHJcblx0XHRcdH0gZWxzZSBpZiAoIGNvbXBpbGVkICkge1xyXG5cdFx0XHRcdGNvbnRleHQgPSBjb250ZXh0LnBhcmVudE5vZGU7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHNlbGVjdG9yID0gc2VsZWN0b3Iuc2xpY2UoIHRva2Vucy5zaGlmdCgpLnZhbHVlLmxlbmd0aCApO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIEZldGNoIGEgc2VlZCBzZXQgZm9yIHJpZ2h0LXRvLWxlZnQgbWF0Y2hpbmdcclxuXHRcdGkgPSBtYXRjaEV4cHJbXCJuZWVkc0NvbnRleHRcIl0udGVzdCggc2VsZWN0b3IgKSA/IDAgOiB0b2tlbnMubGVuZ3RoO1xyXG5cdFx0d2hpbGUgKCBpLS0gKSB7XHJcblx0XHRcdHRva2VuID0gdG9rZW5zW2ldO1xyXG5cclxuXHRcdFx0Ly8gQWJvcnQgaWYgd2UgaGl0IGEgY29tYmluYXRvclxyXG5cdFx0XHRpZiAoIEV4cHIucmVsYXRpdmVbICh0eXBlID0gdG9rZW4udHlwZSkgXSApIHtcclxuXHRcdFx0XHRicmVhaztcclxuXHRcdFx0fVxyXG5cdFx0XHRpZiAoIChmaW5kID0gRXhwci5maW5kWyB0eXBlIF0pICkge1xyXG5cdFx0XHRcdC8vIFNlYXJjaCwgZXhwYW5kaW5nIGNvbnRleHQgZm9yIGxlYWRpbmcgc2libGluZyBjb21iaW5hdG9yc1xyXG5cdFx0XHRcdGlmICggKHNlZWQgPSBmaW5kKFxyXG5cdFx0XHRcdFx0dG9rZW4ubWF0Y2hlc1swXS5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApLFxyXG5cdFx0XHRcdFx0cnNpYmxpbmcudGVzdCggdG9rZW5zWzBdLnR5cGUgKSAmJiB0ZXN0Q29udGV4dCggY29udGV4dC5wYXJlbnROb2RlICkgfHwgY29udGV4dFxyXG5cdFx0XHRcdCkpICkge1xyXG5cclxuXHRcdFx0XHRcdC8vIElmIHNlZWQgaXMgZW1wdHkgb3Igbm8gdG9rZW5zIHJlbWFpbiwgd2UgY2FuIHJldHVybiBlYXJseVxyXG5cdFx0XHRcdFx0dG9rZW5zLnNwbGljZSggaSwgMSApO1xyXG5cdFx0XHRcdFx0c2VsZWN0b3IgPSBzZWVkLmxlbmd0aCAmJiB0b1NlbGVjdG9yKCB0b2tlbnMgKTtcclxuXHRcdFx0XHRcdGlmICggIXNlbGVjdG9yICkge1xyXG5cdFx0XHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBzZWVkICk7XHJcblx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0Ly8gQ29tcGlsZSBhbmQgZXhlY3V0ZSBhIGZpbHRlcmluZyBmdW5jdGlvbiBpZiBvbmUgaXMgbm90IHByb3ZpZGVkXHJcblx0Ly8gUHJvdmlkZSBgbWF0Y2hgIHRvIGF2b2lkIHJldG9rZW5pemF0aW9uIGlmIHdlIG1vZGlmaWVkIHRoZSBzZWxlY3RvciBhYm92ZVxyXG5cdCggY29tcGlsZWQgfHwgY29tcGlsZSggc2VsZWN0b3IsIG1hdGNoICkgKShcclxuXHRcdHNlZWQsXHJcblx0XHRjb250ZXh0LFxyXG5cdFx0IWRvY3VtZW50SXNIVE1MLFxyXG5cdFx0cmVzdWx0cyxcclxuXHRcdHJzaWJsaW5nLnRlc3QoIHNlbGVjdG9yICkgJiYgdGVzdENvbnRleHQoIGNvbnRleHQucGFyZW50Tm9kZSApIHx8IGNvbnRleHRcclxuXHQpO1xyXG5cdHJldHVybiByZXN1bHRzO1xyXG59O1xyXG5cclxuLy8gT25lLXRpbWUgYXNzaWdubWVudHNcclxuXHJcbi8vIFNvcnQgc3RhYmlsaXR5XHJcbnN1cHBvcnQuc29ydFN0YWJsZSA9IGV4cGFuZG8uc3BsaXQoXCJcIikuc29ydCggc29ydE9yZGVyICkuam9pbihcIlwiKSA9PT0gZXhwYW5kbztcclxuXHJcbi8vIFN1cHBvcnQ6IENocm9tZSAxNC0zNStcclxuLy8gQWx3YXlzIGFzc3VtZSBkdXBsaWNhdGVzIGlmIHRoZXkgYXJlbid0IHBhc3NlZCB0byB0aGUgY29tcGFyaXNvbiBmdW5jdGlvblxyXG5zdXBwb3J0LmRldGVjdER1cGxpY2F0ZXMgPSAhIWhhc0R1cGxpY2F0ZTtcclxuXHJcbi8vIEluaXRpYWxpemUgYWdhaW5zdCB0aGUgZGVmYXVsdCBkb2N1bWVudFxyXG5zZXREb2N1bWVudCgpO1xyXG5cclxuLy8gU3VwcG9ydDogV2Via2l0PDUzNy4zMiAtIFNhZmFyaSA2LjAuMy9DaHJvbWUgMjUgKGZpeGVkIGluIENocm9tZSAyNylcclxuLy8gRGV0YWNoZWQgbm9kZXMgY29uZm91bmRpbmdseSBmb2xsb3cgKmVhY2ggb3RoZXIqXHJcbnN1cHBvcnQuc29ydERldGFjaGVkID0gYXNzZXJ0KGZ1bmN0aW9uKCBkaXYxICkge1xyXG5cdC8vIFNob3VsZCByZXR1cm4gMSwgYnV0IHJldHVybnMgNCAoZm9sbG93aW5nKVxyXG5cdHJldHVybiBkaXYxLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpICkgJiAxO1xyXG59KTtcclxuXHJcbi8vIFN1cHBvcnQ6IElFPDhcclxuLy8gUHJldmVudCBhdHRyaWJ1dGUvcHJvcGVydHkgXCJpbnRlcnBvbGF0aW9uXCJcclxuLy8gaHR0cDovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L21zNTM2NDI5JTI4VlMuODUlMjkuYXNweFxyXG5pZiAoICFhc3NlcnQoZnVuY3Rpb24oIGRpdiApIHtcclxuXHRkaXYuaW5uZXJIVE1MID0gXCI8YSBocmVmPScjJz48L2E+XCI7XHJcblx0cmV0dXJuIGRpdi5maXJzdENoaWxkLmdldEF0dHJpYnV0ZShcImhyZWZcIikgPT09IFwiI1wiIDtcclxufSkgKSB7XHJcblx0YWRkSGFuZGxlKCBcInR5cGV8aHJlZnxoZWlnaHR8d2lkdGhcIiwgZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGlzWE1MICkge1xyXG5cdFx0aWYgKCAhaXNYTUwgKSB7XHJcblx0XHRcdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZSggbmFtZSwgbmFtZS50b0xvd2VyQ2FzZSgpID09PSBcInR5cGVcIiA/IDEgOiAyICk7XHJcblx0XHR9XHJcblx0fSk7XHJcbn1cclxuXHJcbi8vIFN1cHBvcnQ6IElFPDlcclxuLy8gVXNlIGRlZmF1bHRWYWx1ZSBpbiBwbGFjZSBvZiBnZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiKVxyXG5pZiAoICFzdXBwb3J0LmF0dHJpYnV0ZXMgfHwgIWFzc2VydChmdW5jdGlvbiggZGl2ICkge1xyXG5cdGRpdi5pbm5lckhUTUwgPSBcIjxpbnB1dC8+XCI7XHJcblx0ZGl2LmZpcnN0Q2hpbGQuc2V0QXR0cmlidXRlKCBcInZhbHVlXCIsIFwiXCIgKTtcclxuXHRyZXR1cm4gZGl2LmZpcnN0Q2hpbGQuZ2V0QXR0cmlidXRlKCBcInZhbHVlXCIgKSA9PT0gXCJcIjtcclxufSkgKSB7XHJcblx0YWRkSGFuZGxlKCBcInZhbHVlXCIsIGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBpc1hNTCApIHtcclxuXHRcdGlmICggIWlzWE1MICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJpbnB1dFwiICkge1xyXG5cdFx0XHRyZXR1cm4gZWxlbS5kZWZhdWx0VmFsdWU7XHJcblx0XHR9XHJcblx0fSk7XHJcbn1cclxuXHJcbi8vIFN1cHBvcnQ6IElFPDlcclxuLy8gVXNlIGdldEF0dHJpYnV0ZU5vZGUgdG8gZmV0Y2ggYm9vbGVhbnMgd2hlbiBnZXRBdHRyaWJ1dGUgbGllc1xyXG5pZiAoICFhc3NlcnQoZnVuY3Rpb24oIGRpdiApIHtcclxuXHRyZXR1cm4gZGl2LmdldEF0dHJpYnV0ZShcImRpc2FibGVkXCIpID09IG51bGw7XHJcbn0pICkge1xyXG5cdGFkZEhhbmRsZSggYm9vbGVhbnMsIGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBpc1hNTCApIHtcclxuXHRcdHZhciB2YWw7XHJcblx0XHRpZiAoICFpc1hNTCApIHtcclxuXHRcdFx0cmV0dXJuIGVsZW1bIG5hbWUgXSA9PT0gdHJ1ZSA/IG5hbWUudG9Mb3dlckNhc2UoKSA6XHJcblx0XHRcdFx0XHQodmFsID0gZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKCBuYW1lICkpICYmIHZhbC5zcGVjaWZpZWQgP1xyXG5cdFx0XHRcdFx0dmFsLnZhbHVlIDpcclxuXHRcdFx0XHRudWxsO1xyXG5cdFx0fVxyXG5cdH0pO1xyXG59XHJcblxyXG5yZXR1cm4gU2l6emxlO1xyXG5cclxufSkoIHdpbmRvdyApO1xyXG5cclxuXHJcblxyXG5qUXVlcnkuZmluZCA9IFNpenpsZTtcclxualF1ZXJ5LmV4cHIgPSBTaXp6bGUuc2VsZWN0b3JzO1xyXG5qUXVlcnkuZXhwcltcIjpcIl0gPSBqUXVlcnkuZXhwci5wc2V1ZG9zO1xyXG5qUXVlcnkudW5pcXVlID0gU2l6emxlLnVuaXF1ZVNvcnQ7XHJcbmpRdWVyeS50ZXh0ID0gU2l6emxlLmdldFRleHQ7XHJcbmpRdWVyeS5pc1hNTERvYyA9IFNpenpsZS5pc1hNTDtcclxualF1ZXJ5LmNvbnRhaW5zID0gU2l6emxlLmNvbnRhaW5zO1xyXG5cclxuXHJcblxyXG52YXIgcm5lZWRzQ29udGV4dCA9IGpRdWVyeS5leHByLm1hdGNoLm5lZWRzQ29udGV4dDtcclxuXHJcbnZhciByc2luZ2xlVGFnID0gKC9ePChcXHcrKVxccypcXC8/Pig/OjxcXC9cXDE+fCkkLyk7XHJcblxyXG5cclxuXHJcbnZhciByaXNTaW1wbGUgPSAvXi5bXjojXFxbXFwuLF0qJC87XHJcblxyXG4vLyBJbXBsZW1lbnQgdGhlIGlkZW50aWNhbCBmdW5jdGlvbmFsaXR5IGZvciBmaWx0ZXIgYW5kIG5vdFxyXG5mdW5jdGlvbiB3aW5ub3coIGVsZW1lbnRzLCBxdWFsaWZpZXIsIG5vdCApIHtcclxuXHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBxdWFsaWZpZXIgKSApIHtcclxuXHRcdHJldHVybiBqUXVlcnkuZ3JlcCggZWxlbWVudHMsIGZ1bmN0aW9uKCBlbGVtLCBpICkge1xyXG5cdFx0XHQvKiBqc2hpbnQgLVcwMTggKi9cclxuXHRcdFx0cmV0dXJuICEhcXVhbGlmaWVyLmNhbGwoIGVsZW0sIGksIGVsZW0gKSAhPT0gbm90O1xyXG5cdFx0fSk7XHJcblxyXG5cdH1cclxuXHJcblx0aWYgKCBxdWFsaWZpZXIubm9kZVR5cGUgKSB7XHJcblx0XHRyZXR1cm4galF1ZXJ5LmdyZXAoIGVsZW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcclxuXHRcdFx0cmV0dXJuICggZWxlbSA9PT0gcXVhbGlmaWVyICkgIT09IG5vdDtcclxuXHRcdH0pO1xyXG5cclxuXHR9XHJcblxyXG5cdGlmICggdHlwZW9mIHF1YWxpZmllciA9PT0gXCJzdHJpbmdcIiApIHtcclxuXHRcdGlmICggcmlzU2ltcGxlLnRlc3QoIHF1YWxpZmllciApICkge1xyXG5cdFx0XHRyZXR1cm4galF1ZXJ5LmZpbHRlciggcXVhbGlmaWVyLCBlbGVtZW50cywgbm90ICk7XHJcblx0XHR9XHJcblxyXG5cdFx0cXVhbGlmaWVyID0galF1ZXJ5LmZpbHRlciggcXVhbGlmaWVyLCBlbGVtZW50cyApO1xyXG5cdH1cclxuXHJcblx0cmV0dXJuIGpRdWVyeS5ncmVwKCBlbGVtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRyZXR1cm4gKCBpbmRleE9mLmNhbGwoIHF1YWxpZmllciwgZWxlbSApID49IDAgKSAhPT0gbm90O1xyXG5cdH0pO1xyXG59XHJcblxyXG5qUXVlcnkuZmlsdGVyID0gZnVuY3Rpb24oIGV4cHIsIGVsZW1zLCBub3QgKSB7XHJcblx0dmFyIGVsZW0gPSBlbGVtc1sgMCBdO1xyXG5cclxuXHRpZiAoIG5vdCApIHtcclxuXHRcdGV4cHIgPSBcIjpub3QoXCIgKyBleHByICsgXCIpXCI7XHJcblx0fVxyXG5cclxuXHRyZXR1cm4gZWxlbXMubGVuZ3RoID09PSAxICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgP1xyXG5cdFx0alF1ZXJ5LmZpbmQubWF0Y2hlc1NlbGVjdG9yKCBlbGVtLCBleHByICkgPyBbIGVsZW0gXSA6IFtdIDpcclxuXHRcdGpRdWVyeS5maW5kLm1hdGNoZXMoIGV4cHIsIGpRdWVyeS5ncmVwKCBlbGVtcywgZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRcdHJldHVybiBlbGVtLm5vZGVUeXBlID09PSAxO1xyXG5cdFx0fSkpO1xyXG59O1xyXG5cclxualF1ZXJ5LmZuLmV4dGVuZCh7XHJcblx0ZmluZDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xyXG5cdFx0dmFyIGksXHJcblx0XHRcdGxlbiA9IHRoaXMubGVuZ3RoLFxyXG5cdFx0XHRyZXQgPSBbXSxcclxuXHRcdFx0c2VsZiA9IHRoaXM7XHJcblxyXG5cdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgIT09IFwic3RyaW5nXCIgKSB7XHJcblx0XHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggalF1ZXJ5KCBzZWxlY3RvciApLmZpbHRlcihmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IGxlbjsgaSsrICkge1xyXG5cdFx0XHRcdFx0aWYgKCBqUXVlcnkuY29udGFpbnMoIHNlbGZbIGkgXSwgdGhpcyApICkge1xyXG5cdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH0pICk7XHJcblx0XHR9XHJcblxyXG5cdFx0Zm9yICggaSA9IDA7IGkgPCBsZW47IGkrKyApIHtcclxuXHRcdFx0alF1ZXJ5LmZpbmQoIHNlbGVjdG9yLCBzZWxmWyBpIF0sIHJldCApO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIE5lZWRlZCBiZWNhdXNlICQoIHNlbGVjdG9yLCBjb250ZXh0ICkgYmVjb21lcyAkKCBjb250ZXh0ICkuZmluZCggc2VsZWN0b3IgKVxyXG5cdFx0cmV0ID0gdGhpcy5wdXNoU3RhY2soIGxlbiA+IDEgPyBqUXVlcnkudW5pcXVlKCByZXQgKSA6IHJldCApO1xyXG5cdFx0cmV0LnNlbGVjdG9yID0gdGhpcy5zZWxlY3RvciA/IHRoaXMuc2VsZWN0b3IgKyBcIiBcIiArIHNlbGVjdG9yIDogc2VsZWN0b3I7XHJcblx0XHRyZXR1cm4gcmV0O1xyXG5cdH0sXHJcblx0ZmlsdGVyOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XHJcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIHdpbm5vdyh0aGlzLCBzZWxlY3RvciB8fCBbXSwgZmFsc2UpICk7XHJcblx0fSxcclxuXHRub3Q6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcclxuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggd2lubm93KHRoaXMsIHNlbGVjdG9yIHx8IFtdLCB0cnVlKSApO1xyXG5cdH0sXHJcblx0aXM6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcclxuXHRcdHJldHVybiAhIXdpbm5vdyhcclxuXHRcdFx0dGhpcyxcclxuXHJcblx0XHRcdC8vIElmIHRoaXMgaXMgYSBwb3NpdGlvbmFsL3JlbGF0aXZlIHNlbGVjdG9yLCBjaGVjayBtZW1iZXJzaGlwIGluIHRoZSByZXR1cm5lZCBzZXRcclxuXHRcdFx0Ly8gc28gJChcInA6Zmlyc3RcIikuaXMoXCJwOmxhc3RcIikgd29uJ3QgcmV0dXJuIHRydWUgZm9yIGEgZG9jIHdpdGggdHdvIFwicFwiLlxyXG5cdFx0XHR0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgJiYgcm5lZWRzQ29udGV4dC50ZXN0KCBzZWxlY3RvciApID9cclxuXHRcdFx0XHRqUXVlcnkoIHNlbGVjdG9yICkgOlxyXG5cdFx0XHRcdHNlbGVjdG9yIHx8IFtdLFxyXG5cdFx0XHRmYWxzZVxyXG5cdFx0KS5sZW5ndGg7XHJcblx0fVxyXG59KTtcclxuXHJcblxyXG4vLyBJbml0aWFsaXplIGEgalF1ZXJ5IG9iamVjdFxyXG5cclxuXHJcbi8vIEEgY2VudHJhbCByZWZlcmVuY2UgdG8gdGhlIHJvb3QgalF1ZXJ5KGRvY3VtZW50KVxyXG52YXIgcm9vdGpRdWVyeSxcclxuXHJcblx0Ly8gQSBzaW1wbGUgd2F5IHRvIGNoZWNrIGZvciBIVE1MIHN0cmluZ3NcclxuXHQvLyBQcmlvcml0aXplICNpZCBvdmVyIDx0YWc+IHRvIGF2b2lkIFhTUyB2aWEgbG9jYXRpb24uaGFzaCAoIzk1MjEpXHJcblx0Ly8gU3RyaWN0IEhUTUwgcmVjb2duaXRpb24gKCMxMTI5MDogbXVzdCBzdGFydCB3aXRoIDwpXHJcblx0cnF1aWNrRXhwciA9IC9eKD86XFxzKig8W1xcd1xcV10rPilbXj5dKnwjKFtcXHctXSopKSQvLFxyXG5cclxuXHRpbml0ID0galF1ZXJ5LmZuLmluaXQgPSBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQgKSB7XHJcblx0XHR2YXIgbWF0Y2gsIGVsZW07XHJcblxyXG5cdFx0Ly8gSEFORExFOiAkKFwiXCIpLCAkKG51bGwpLCAkKHVuZGVmaW5lZCksICQoZmFsc2UpXHJcblx0XHRpZiAoICFzZWxlY3RvciApIHtcclxuXHRcdFx0cmV0dXJuIHRoaXM7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gSGFuZGxlIEhUTUwgc3RyaW5nc1xyXG5cdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgKSB7XHJcblx0XHRcdGlmICggc2VsZWN0b3JbMF0gPT09IFwiPFwiICYmIHNlbGVjdG9yWyBzZWxlY3Rvci5sZW5ndGggLSAxIF0gPT09IFwiPlwiICYmIHNlbGVjdG9yLmxlbmd0aCA+PSAzICkge1xyXG5cdFx0XHRcdC8vIEFzc3VtZSB0aGF0IHN0cmluZ3MgdGhhdCBzdGFydCBhbmQgZW5kIHdpdGggPD4gYXJlIEhUTUwgYW5kIHNraXAgdGhlIHJlZ2V4IGNoZWNrXHJcblx0XHRcdFx0bWF0Y2ggPSBbIG51bGwsIHNlbGVjdG9yLCBudWxsIF07XHJcblxyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdG1hdGNoID0gcnF1aWNrRXhwci5leGVjKCBzZWxlY3RvciApO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBNYXRjaCBodG1sIG9yIG1ha2Ugc3VyZSBubyBjb250ZXh0IGlzIHNwZWNpZmllZCBmb3IgI2lkXHJcblx0XHRcdGlmICggbWF0Y2ggJiYgKG1hdGNoWzFdIHx8ICFjb250ZXh0KSApIHtcclxuXHJcblx0XHRcdFx0Ly8gSEFORExFOiAkKGh0bWwpIC0+ICQoYXJyYXkpXHJcblx0XHRcdFx0aWYgKCBtYXRjaFsxXSApIHtcclxuXHRcdFx0XHRcdGNvbnRleHQgPSBjb250ZXh0IGluc3RhbmNlb2YgalF1ZXJ5ID8gY29udGV4dFswXSA6IGNvbnRleHQ7XHJcblxyXG5cdFx0XHRcdFx0Ly8gT3B0aW9uIHRvIHJ1biBzY3JpcHRzIGlzIHRydWUgZm9yIGJhY2stY29tcGF0XHJcblx0XHRcdFx0XHQvLyBJbnRlbnRpb25hbGx5IGxldCB0aGUgZXJyb3IgYmUgdGhyb3duIGlmIHBhcnNlSFRNTCBpcyBub3QgcHJlc2VudFxyXG5cdFx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCB0aGlzLCBqUXVlcnkucGFyc2VIVE1MKFxyXG5cdFx0XHRcdFx0XHRtYXRjaFsxXSxcclxuXHRcdFx0XHRcdFx0Y29udGV4dCAmJiBjb250ZXh0Lm5vZGVUeXBlID8gY29udGV4dC5vd25lckRvY3VtZW50IHx8IGNvbnRleHQgOiBkb2N1bWVudCxcclxuXHRcdFx0XHRcdFx0dHJ1ZVxyXG5cdFx0XHRcdFx0KSApO1xyXG5cclxuXHRcdFx0XHRcdC8vIEhBTkRMRTogJChodG1sLCBwcm9wcylcclxuXHRcdFx0XHRcdGlmICggcnNpbmdsZVRhZy50ZXN0KCBtYXRjaFsxXSApICYmIGpRdWVyeS5pc1BsYWluT2JqZWN0KCBjb250ZXh0ICkgKSB7XHJcblx0XHRcdFx0XHRcdGZvciAoIG1hdGNoIGluIGNvbnRleHQgKSB7XHJcblx0XHRcdFx0XHRcdFx0Ly8gUHJvcGVydGllcyBvZiBjb250ZXh0IGFyZSBjYWxsZWQgYXMgbWV0aG9kcyBpZiBwb3NzaWJsZVxyXG5cdFx0XHRcdFx0XHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHRoaXNbIG1hdGNoIF0gKSApIHtcclxuXHRcdFx0XHRcdFx0XHRcdHRoaXNbIG1hdGNoIF0oIGNvbnRleHRbIG1hdGNoIF0gKTtcclxuXHJcblx0XHRcdFx0XHRcdFx0Ly8gLi4uYW5kIG90aGVyd2lzZSBzZXQgYXMgYXR0cmlidXRlc1xyXG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdFx0XHR0aGlzLmF0dHIoIG1hdGNoLCBjb250ZXh0WyBtYXRjaCBdICk7XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdFx0XHRcdC8vIEhBTkRMRTogJCgjaWQpXHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdGVsZW0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCggbWF0Y2hbMl0gKTtcclxuXHJcblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBCbGFja2JlcnJ5IDQuNlxyXG5cdFx0XHRcdFx0Ly8gZ0VCSUQgcmV0dXJucyBub2RlcyBubyBsb25nZXIgaW4gdGhlIGRvY3VtZW50ICgjNjk2MylcclxuXHRcdFx0XHRcdGlmICggZWxlbSAmJiBlbGVtLnBhcmVudE5vZGUgKSB7XHJcblx0XHRcdFx0XHRcdC8vIEluamVjdCB0aGUgZWxlbWVudCBkaXJlY3RseSBpbnRvIHRoZSBqUXVlcnkgb2JqZWN0XHJcblx0XHRcdFx0XHRcdHRoaXMubGVuZ3RoID0gMTtcclxuXHRcdFx0XHRcdFx0dGhpc1swXSA9IGVsZW07XHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0dGhpcy5jb250ZXh0ID0gZG9jdW1lbnQ7XHJcblx0XHRcdFx0XHR0aGlzLnNlbGVjdG9yID0gc2VsZWN0b3I7XHJcblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBIQU5ETEU6ICQoZXhwciwgJCguLi4pKVxyXG5cdFx0XHR9IGVsc2UgaWYgKCAhY29udGV4dCB8fCBjb250ZXh0LmpxdWVyeSApIHtcclxuXHRcdFx0XHRyZXR1cm4gKCBjb250ZXh0IHx8IHJvb3RqUXVlcnkgKS5maW5kKCBzZWxlY3RvciApO1xyXG5cclxuXHRcdFx0Ly8gSEFORExFOiAkKGV4cHIsIGNvbnRleHQpXHJcblx0XHRcdC8vICh3aGljaCBpcyBqdXN0IGVxdWl2YWxlbnQgdG86ICQoY29udGV4dCkuZmluZChleHByKVxyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdHJldHVybiB0aGlzLmNvbnN0cnVjdG9yKCBjb250ZXh0ICkuZmluZCggc2VsZWN0b3IgKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdC8vIEhBTkRMRTogJChET01FbGVtZW50KVxyXG5cdFx0fSBlbHNlIGlmICggc2VsZWN0b3Iubm9kZVR5cGUgKSB7XHJcblx0XHRcdHRoaXMuY29udGV4dCA9IHRoaXNbMF0gPSBzZWxlY3RvcjtcclxuXHRcdFx0dGhpcy5sZW5ndGggPSAxO1xyXG5cdFx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0XHQvLyBIQU5ETEU6ICQoZnVuY3Rpb24pXHJcblx0XHQvLyBTaG9ydGN1dCBmb3IgZG9jdW1lbnQgcmVhZHlcclxuXHRcdH0gZWxzZSBpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBzZWxlY3RvciApICkge1xyXG5cdFx0XHRyZXR1cm4gdHlwZW9mIHJvb3RqUXVlcnkucmVhZHkgIT09IFwidW5kZWZpbmVkXCIgP1xyXG5cdFx0XHRcdHJvb3RqUXVlcnkucmVhZHkoIHNlbGVjdG9yICkgOlxyXG5cdFx0XHRcdC8vIEV4ZWN1dGUgaW1tZWRpYXRlbHkgaWYgcmVhZHkgaXMgbm90IHByZXNlbnRcclxuXHRcdFx0XHRzZWxlY3RvciggalF1ZXJ5ICk7XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKCBzZWxlY3Rvci5zZWxlY3RvciAhPT0gdW5kZWZpbmVkICkge1xyXG5cdFx0XHR0aGlzLnNlbGVjdG9yID0gc2VsZWN0b3Iuc2VsZWN0b3I7XHJcblx0XHRcdHRoaXMuY29udGV4dCA9IHNlbGVjdG9yLmNvbnRleHQ7XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIGpRdWVyeS5tYWtlQXJyYXkoIHNlbGVjdG9yLCB0aGlzICk7XHJcblx0fTtcclxuXHJcbi8vIEdpdmUgdGhlIGluaXQgZnVuY3Rpb24gdGhlIGpRdWVyeSBwcm90b3R5cGUgZm9yIGxhdGVyIGluc3RhbnRpYXRpb25cclxuaW5pdC5wcm90b3R5cGUgPSBqUXVlcnkuZm47XHJcblxyXG4vLyBJbml0aWFsaXplIGNlbnRyYWwgcmVmZXJlbmNlXHJcbnJvb3RqUXVlcnkgPSBqUXVlcnkoIGRvY3VtZW50ICk7XHJcblxyXG5cclxudmFyIHJwYXJlbnRzcHJldiA9IC9eKD86cGFyZW50c3xwcmV2KD86VW50aWx8QWxsKSkvLFxyXG5cdC8vIE1ldGhvZHMgZ3VhcmFudGVlZCB0byBwcm9kdWNlIGEgdW5pcXVlIHNldCB3aGVuIHN0YXJ0aW5nIGZyb20gYSB1bmlxdWUgc2V0XHJcblx0Z3VhcmFudGVlZFVuaXF1ZSA9IHtcclxuXHRcdGNoaWxkcmVuOiB0cnVlLFxyXG5cdFx0Y29udGVudHM6IHRydWUsXHJcblx0XHRuZXh0OiB0cnVlLFxyXG5cdFx0cHJldjogdHJ1ZVxyXG5cdH07XHJcblxyXG5qUXVlcnkuZXh0ZW5kKHtcclxuXHRkaXI6IGZ1bmN0aW9uKCBlbGVtLCBkaXIsIHVudGlsICkge1xyXG5cdFx0dmFyIG1hdGNoZWQgPSBbXSxcclxuXHRcdFx0dHJ1bmNhdGUgPSB1bnRpbCAhPT0gdW5kZWZpbmVkO1xyXG5cclxuXHRcdHdoaWxlICggKGVsZW0gPSBlbGVtWyBkaXIgXSkgJiYgZWxlbS5ub2RlVHlwZSAhPT0gOSApIHtcclxuXHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xyXG5cdFx0XHRcdGlmICggdHJ1bmNhdGUgJiYgalF1ZXJ5KCBlbGVtICkuaXMoIHVudGlsICkgKSB7XHJcblx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0bWF0Y2hlZC5wdXNoKCBlbGVtICk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHRcdHJldHVybiBtYXRjaGVkO1xyXG5cdH0sXHJcblxyXG5cdHNpYmxpbmc6IGZ1bmN0aW9uKCBuLCBlbGVtICkge1xyXG5cdFx0dmFyIG1hdGNoZWQgPSBbXTtcclxuXHJcblx0XHRmb3IgKCA7IG47IG4gPSBuLm5leHRTaWJsaW5nICkge1xyXG5cdFx0XHRpZiAoIG4ubm9kZVR5cGUgPT09IDEgJiYgbiAhPT0gZWxlbSApIHtcclxuXHRcdFx0XHRtYXRjaGVkLnB1c2goIG4gKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiBtYXRjaGVkO1xyXG5cdH1cclxufSk7XHJcblxyXG5qUXVlcnkuZm4uZXh0ZW5kKHtcclxuXHRoYXM6IGZ1bmN0aW9uKCB0YXJnZXQgKSB7XHJcblx0XHR2YXIgdGFyZ2V0cyA9IGpRdWVyeSggdGFyZ2V0LCB0aGlzICksXHJcblx0XHRcdGwgPSB0YXJnZXRzLmxlbmd0aDtcclxuXHJcblx0XHRyZXR1cm4gdGhpcy5maWx0ZXIoZnVuY3Rpb24oKSB7XHJcblx0XHRcdHZhciBpID0gMDtcclxuXHRcdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xyXG5cdFx0XHRcdGlmICggalF1ZXJ5LmNvbnRhaW5zKCB0aGlzLCB0YXJnZXRzW2ldICkgKSB7XHJcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cdH0sXHJcblxyXG5cdGNsb3Nlc3Q6IGZ1bmN0aW9uKCBzZWxlY3RvcnMsIGNvbnRleHQgKSB7XHJcblx0XHR2YXIgY3VyLFxyXG5cdFx0XHRpID0gMCxcclxuXHRcdFx0bCA9IHRoaXMubGVuZ3RoLFxyXG5cdFx0XHRtYXRjaGVkID0gW10sXHJcblx0XHRcdHBvcyA9IHJuZWVkc0NvbnRleHQudGVzdCggc2VsZWN0b3JzICkgfHwgdHlwZW9mIHNlbGVjdG9ycyAhPT0gXCJzdHJpbmdcIiA/XHJcblx0XHRcdFx0alF1ZXJ5KCBzZWxlY3RvcnMsIGNvbnRleHQgfHwgdGhpcy5jb250ZXh0ICkgOlxyXG5cdFx0XHRcdDA7XHJcblxyXG5cdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xyXG5cdFx0XHRmb3IgKCBjdXIgPSB0aGlzW2ldOyBjdXIgJiYgY3VyICE9PSBjb250ZXh0OyBjdXIgPSBjdXIucGFyZW50Tm9kZSApIHtcclxuXHRcdFx0XHQvLyBBbHdheXMgc2tpcCBkb2N1bWVudCBmcmFnbWVudHNcclxuXHRcdFx0XHRpZiAoIGN1ci5ub2RlVHlwZSA8IDExICYmIChwb3MgP1xyXG5cdFx0XHRcdFx0cG9zLmluZGV4KGN1cikgPiAtMSA6XHJcblxyXG5cdFx0XHRcdFx0Ly8gRG9uJ3QgcGFzcyBub24tZWxlbWVudHMgdG8gU2l6emxlXHJcblx0XHRcdFx0XHRjdXIubm9kZVR5cGUgPT09IDEgJiZcclxuXHRcdFx0XHRcdFx0alF1ZXJ5LmZpbmQubWF0Y2hlc1NlbGVjdG9yKGN1ciwgc2VsZWN0b3JzKSkgKSB7XHJcblxyXG5cdFx0XHRcdFx0bWF0Y2hlZC5wdXNoKCBjdXIgKTtcclxuXHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggbWF0Y2hlZC5sZW5ndGggPiAxID8galF1ZXJ5LnVuaXF1ZSggbWF0Y2hlZCApIDogbWF0Y2hlZCApO1xyXG5cdH0sXHJcblxyXG5cdC8vIERldGVybWluZSB0aGUgcG9zaXRpb24gb2YgYW4gZWxlbWVudCB3aXRoaW4gdGhlIHNldFxyXG5cdGluZGV4OiBmdW5jdGlvbiggZWxlbSApIHtcclxuXHJcblx0XHQvLyBObyBhcmd1bWVudCwgcmV0dXJuIGluZGV4IGluIHBhcmVudFxyXG5cdFx0aWYgKCAhZWxlbSApIHtcclxuXHRcdFx0cmV0dXJuICggdGhpc1sgMCBdICYmIHRoaXNbIDAgXS5wYXJlbnROb2RlICkgPyB0aGlzLmZpcnN0KCkucHJldkFsbCgpLmxlbmd0aCA6IC0xO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIEluZGV4IGluIHNlbGVjdG9yXHJcblx0XHRpZiAoIHR5cGVvZiBlbGVtID09PSBcInN0cmluZ1wiICkge1xyXG5cdFx0XHRyZXR1cm4gaW5kZXhPZi5jYWxsKCBqUXVlcnkoIGVsZW0gKSwgdGhpc1sgMCBdICk7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gTG9jYXRlIHRoZSBwb3NpdGlvbiBvZiB0aGUgZGVzaXJlZCBlbGVtZW50XHJcblx0XHRyZXR1cm4gaW5kZXhPZi5jYWxsKCB0aGlzLFxyXG5cclxuXHRcdFx0Ly8gSWYgaXQgcmVjZWl2ZXMgYSBqUXVlcnkgb2JqZWN0LCB0aGUgZmlyc3QgZWxlbWVudCBpcyB1c2VkXHJcblx0XHRcdGVsZW0uanF1ZXJ5ID8gZWxlbVsgMCBdIDogZWxlbVxyXG5cdFx0KTtcclxuXHR9LFxyXG5cclxuXHRhZGQ6IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCApIHtcclxuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayhcclxuXHRcdFx0alF1ZXJ5LnVuaXF1ZShcclxuXHRcdFx0XHRqUXVlcnkubWVyZ2UoIHRoaXMuZ2V0KCksIGpRdWVyeSggc2VsZWN0b3IsIGNvbnRleHQgKSApXHJcblx0XHRcdClcclxuXHRcdCk7XHJcblx0fSxcclxuXHJcblx0YWRkQmFjazogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xyXG5cdFx0cmV0dXJuIHRoaXMuYWRkKCBzZWxlY3RvciA9PSBudWxsID9cclxuXHRcdFx0dGhpcy5wcmV2T2JqZWN0IDogdGhpcy5wcmV2T2JqZWN0LmZpbHRlcihzZWxlY3RvcilcclxuXHRcdCk7XHJcblx0fVxyXG59KTtcclxuXHJcbmZ1bmN0aW9uIHNpYmxpbmcoIGN1ciwgZGlyICkge1xyXG5cdHdoaWxlICggKGN1ciA9IGN1cltkaXJdKSAmJiBjdXIubm9kZVR5cGUgIT09IDEgKSB7fVxyXG5cdHJldHVybiBjdXI7XHJcbn1cclxuXHJcbmpRdWVyeS5lYWNoKHtcclxuXHRwYXJlbnQ6IGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0dmFyIHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZTtcclxuXHRcdHJldHVybiBwYXJlbnQgJiYgcGFyZW50Lm5vZGVUeXBlICE9PSAxMSA/IHBhcmVudCA6IG51bGw7XHJcblx0fSxcclxuXHRwYXJlbnRzOiBmdW5jdGlvbiggZWxlbSApIHtcclxuXHRcdHJldHVybiBqUXVlcnkuZGlyKCBlbGVtLCBcInBhcmVudE5vZGVcIiApO1xyXG5cdH0sXHJcblx0cGFyZW50c1VudGlsOiBmdW5jdGlvbiggZWxlbSwgaSwgdW50aWwgKSB7XHJcblx0XHRyZXR1cm4galF1ZXJ5LmRpciggZWxlbSwgXCJwYXJlbnROb2RlXCIsIHVudGlsICk7XHJcblx0fSxcclxuXHRuZXh0OiBmdW5jdGlvbiggZWxlbSApIHtcclxuXHRcdHJldHVybiBzaWJsaW5nKCBlbGVtLCBcIm5leHRTaWJsaW5nXCIgKTtcclxuXHR9LFxyXG5cdHByZXY6IGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0cmV0dXJuIHNpYmxpbmcoIGVsZW0sIFwicHJldmlvdXNTaWJsaW5nXCIgKTtcclxuXHR9LFxyXG5cdG5leHRBbGw6IGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0cmV0dXJuIGpRdWVyeS5kaXIoIGVsZW0sIFwibmV4dFNpYmxpbmdcIiApO1xyXG5cdH0sXHJcblx0cHJldkFsbDogZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRyZXR1cm4galF1ZXJ5LmRpciggZWxlbSwgXCJwcmV2aW91c1NpYmxpbmdcIiApO1xyXG5cdH0sXHJcblx0bmV4dFVudGlsOiBmdW5jdGlvbiggZWxlbSwgaSwgdW50aWwgKSB7XHJcblx0XHRyZXR1cm4galF1ZXJ5LmRpciggZWxlbSwgXCJuZXh0U2libGluZ1wiLCB1bnRpbCApO1xyXG5cdH0sXHJcblx0cHJldlVudGlsOiBmdW5jdGlvbiggZWxlbSwgaSwgdW50aWwgKSB7XHJcblx0XHRyZXR1cm4galF1ZXJ5LmRpciggZWxlbSwgXCJwcmV2aW91c1NpYmxpbmdcIiwgdW50aWwgKTtcclxuXHR9LFxyXG5cdHNpYmxpbmdzOiBmdW5jdGlvbiggZWxlbSApIHtcclxuXHRcdHJldHVybiBqUXVlcnkuc2libGluZyggKCBlbGVtLnBhcmVudE5vZGUgfHwge30gKS5maXJzdENoaWxkLCBlbGVtICk7XHJcblx0fSxcclxuXHRjaGlsZHJlbjogZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRyZXR1cm4galF1ZXJ5LnNpYmxpbmcoIGVsZW0uZmlyc3RDaGlsZCApO1xyXG5cdH0sXHJcblx0Y29udGVudHM6IGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0cmV0dXJuIGVsZW0uY29udGVudERvY3VtZW50IHx8IGpRdWVyeS5tZXJnZSggW10sIGVsZW0uY2hpbGROb2RlcyApO1xyXG5cdH1cclxufSwgZnVuY3Rpb24oIG5hbWUsIGZuICkge1xyXG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHVudGlsLCBzZWxlY3RvciApIHtcclxuXHRcdHZhciBtYXRjaGVkID0galF1ZXJ5Lm1hcCggdGhpcywgZm4sIHVudGlsICk7XHJcblxyXG5cdFx0aWYgKCBuYW1lLnNsaWNlKCAtNSApICE9PSBcIlVudGlsXCIgKSB7XHJcblx0XHRcdHNlbGVjdG9yID0gdW50aWw7XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKCBzZWxlY3RvciAmJiB0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgKSB7XHJcblx0XHRcdG1hdGNoZWQgPSBqUXVlcnkuZmlsdGVyKCBzZWxlY3RvciwgbWF0Y2hlZCApO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmICggdGhpcy5sZW5ndGggPiAxICkge1xyXG5cdFx0XHQvLyBSZW1vdmUgZHVwbGljYXRlc1xyXG5cdFx0XHRpZiAoICFndWFyYW50ZWVkVW5pcXVlWyBuYW1lIF0gKSB7XHJcblx0XHRcdFx0alF1ZXJ5LnVuaXF1ZSggbWF0Y2hlZCApO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBSZXZlcnNlIG9yZGVyIGZvciBwYXJlbnRzKiBhbmQgcHJldi1kZXJpdmF0aXZlc1xyXG5cdFx0XHRpZiAoIHJwYXJlbnRzcHJldi50ZXN0KCBuYW1lICkgKSB7XHJcblx0XHRcdFx0bWF0Y2hlZC5yZXZlcnNlKCk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIG1hdGNoZWQgKTtcclxuXHR9O1xyXG59KTtcclxudmFyIHJub3R3aGl0ZSA9ICgvXFxTKy9nKTtcclxuXHJcblxyXG5cclxuLy8gU3RyaW5nIHRvIE9iamVjdCBvcHRpb25zIGZvcm1hdCBjYWNoZVxyXG52YXIgb3B0aW9uc0NhY2hlID0ge307XHJcblxyXG4vLyBDb252ZXJ0IFN0cmluZy1mb3JtYXR0ZWQgb3B0aW9ucyBpbnRvIE9iamVjdC1mb3JtYXR0ZWQgb25lcyBhbmQgc3RvcmUgaW4gY2FjaGVcclxuZnVuY3Rpb24gY3JlYXRlT3B0aW9ucyggb3B0aW9ucyApIHtcclxuXHR2YXIgb2JqZWN0ID0gb3B0aW9uc0NhY2hlWyBvcHRpb25zIF0gPSB7fTtcclxuXHRqUXVlcnkuZWFjaCggb3B0aW9ucy5tYXRjaCggcm5vdHdoaXRlICkgfHwgW10sIGZ1bmN0aW9uKCBfLCBmbGFnICkge1xyXG5cdFx0b2JqZWN0WyBmbGFnIF0gPSB0cnVlO1xyXG5cdH0pO1xyXG5cdHJldHVybiBvYmplY3Q7XHJcbn1cclxuXHJcbi8qXHJcbiAqIENyZWF0ZSBhIGNhbGxiYWNrIGxpc3QgdXNpbmcgdGhlIGZvbGxvd2luZyBwYXJhbWV0ZXJzOlxyXG4gKlxyXG4gKlx0b3B0aW9uczogYW4gb3B0aW9uYWwgbGlzdCBvZiBzcGFjZS1zZXBhcmF0ZWQgb3B0aW9ucyB0aGF0IHdpbGwgY2hhbmdlIGhvd1xyXG4gKlx0XHRcdHRoZSBjYWxsYmFjayBsaXN0IGJlaGF2ZXMgb3IgYSBtb3JlIHRyYWRpdGlvbmFsIG9wdGlvbiBvYmplY3RcclxuICpcclxuICogQnkgZGVmYXVsdCBhIGNhbGxiYWNrIGxpc3Qgd2lsbCBhY3QgbGlrZSBhbiBldmVudCBjYWxsYmFjayBsaXN0IGFuZCBjYW4gYmVcclxuICogXCJmaXJlZFwiIG11bHRpcGxlIHRpbWVzLlxyXG4gKlxyXG4gKiBQb3NzaWJsZSBvcHRpb25zOlxyXG4gKlxyXG4gKlx0b25jZTpcdFx0XHR3aWxsIGVuc3VyZSB0aGUgY2FsbGJhY2sgbGlzdCBjYW4gb25seSBiZSBmaXJlZCBvbmNlIChsaWtlIGEgRGVmZXJyZWQpXHJcbiAqXHJcbiAqXHRtZW1vcnk6XHRcdFx0d2lsbCBrZWVwIHRyYWNrIG9mIHByZXZpb3VzIHZhbHVlcyBhbmQgd2lsbCBjYWxsIGFueSBjYWxsYmFjayBhZGRlZFxyXG4gKlx0XHRcdFx0XHRhZnRlciB0aGUgbGlzdCBoYXMgYmVlbiBmaXJlZCByaWdodCBhd2F5IHdpdGggdGhlIGxhdGVzdCBcIm1lbW9yaXplZFwiXHJcbiAqXHRcdFx0XHRcdHZhbHVlcyAobGlrZSBhIERlZmVycmVkKVxyXG4gKlxyXG4gKlx0dW5pcXVlOlx0XHRcdHdpbGwgZW5zdXJlIGEgY2FsbGJhY2sgY2FuIG9ubHkgYmUgYWRkZWQgb25jZSAobm8gZHVwbGljYXRlIGluIHRoZSBsaXN0KVxyXG4gKlxyXG4gKlx0c3RvcE9uRmFsc2U6XHRpbnRlcnJ1cHQgY2FsbGluZ3Mgd2hlbiBhIGNhbGxiYWNrIHJldHVybnMgZmFsc2VcclxuICpcclxuICovXHJcbmpRdWVyeS5DYWxsYmFja3MgPSBmdW5jdGlvbiggb3B0aW9ucyApIHtcclxuXHJcblx0Ly8gQ29udmVydCBvcHRpb25zIGZyb20gU3RyaW5nLWZvcm1hdHRlZCB0byBPYmplY3QtZm9ybWF0dGVkIGlmIG5lZWRlZFxyXG5cdC8vICh3ZSBjaGVjayBpbiBjYWNoZSBmaXJzdClcclxuXHRvcHRpb25zID0gdHlwZW9mIG9wdGlvbnMgPT09IFwic3RyaW5nXCIgP1xyXG5cdFx0KCBvcHRpb25zQ2FjaGVbIG9wdGlvbnMgXSB8fCBjcmVhdGVPcHRpb25zKCBvcHRpb25zICkgKSA6XHJcblx0XHRqUXVlcnkuZXh0ZW5kKCB7fSwgb3B0aW9ucyApO1xyXG5cclxuXHR2YXIgLy8gTGFzdCBmaXJlIHZhbHVlIChmb3Igbm9uLWZvcmdldHRhYmxlIGxpc3RzKVxyXG5cdFx0bWVtb3J5LFxyXG5cdFx0Ly8gRmxhZyB0byBrbm93IGlmIGxpc3Qgd2FzIGFscmVhZHkgZmlyZWRcclxuXHRcdGZpcmVkLFxyXG5cdFx0Ly8gRmxhZyB0byBrbm93IGlmIGxpc3QgaXMgY3VycmVudGx5IGZpcmluZ1xyXG5cdFx0ZmlyaW5nLFxyXG5cdFx0Ly8gRmlyc3QgY2FsbGJhY2sgdG8gZmlyZSAodXNlZCBpbnRlcm5hbGx5IGJ5IGFkZCBhbmQgZmlyZVdpdGgpXHJcblx0XHRmaXJpbmdTdGFydCxcclxuXHRcdC8vIEVuZCBvZiB0aGUgbG9vcCB3aGVuIGZpcmluZ1xyXG5cdFx0ZmlyaW5nTGVuZ3RoLFxyXG5cdFx0Ly8gSW5kZXggb2YgY3VycmVudGx5IGZpcmluZyBjYWxsYmFjayAobW9kaWZpZWQgYnkgcmVtb3ZlIGlmIG5lZWRlZClcclxuXHRcdGZpcmluZ0luZGV4LFxyXG5cdFx0Ly8gQWN0dWFsIGNhbGxiYWNrIGxpc3RcclxuXHRcdGxpc3QgPSBbXSxcclxuXHRcdC8vIFN0YWNrIG9mIGZpcmUgY2FsbHMgZm9yIHJlcGVhdGFibGUgbGlzdHNcclxuXHRcdHN0YWNrID0gIW9wdGlvbnMub25jZSAmJiBbXSxcclxuXHRcdC8vIEZpcmUgY2FsbGJhY2tzXHJcblx0XHRmaXJlID0gZnVuY3Rpb24oIGRhdGEgKSB7XHJcblx0XHRcdG1lbW9yeSA9IG9wdGlvbnMubWVtb3J5ICYmIGRhdGE7XHJcblx0XHRcdGZpcmVkID0gdHJ1ZTtcclxuXHRcdFx0ZmlyaW5nSW5kZXggPSBmaXJpbmdTdGFydCB8fCAwO1xyXG5cdFx0XHRmaXJpbmdTdGFydCA9IDA7XHJcblx0XHRcdGZpcmluZ0xlbmd0aCA9IGxpc3QubGVuZ3RoO1xyXG5cdFx0XHRmaXJpbmcgPSB0cnVlO1xyXG5cdFx0XHRmb3IgKCA7IGxpc3QgJiYgZmlyaW5nSW5kZXggPCBmaXJpbmdMZW5ndGg7IGZpcmluZ0luZGV4KysgKSB7XHJcblx0XHRcdFx0aWYgKCBsaXN0WyBmaXJpbmdJbmRleCBdLmFwcGx5KCBkYXRhWyAwIF0sIGRhdGFbIDEgXSApID09PSBmYWxzZSAmJiBvcHRpb25zLnN0b3BPbkZhbHNlICkge1xyXG5cdFx0XHRcdFx0bWVtb3J5ID0gZmFsc2U7IC8vIFRvIHByZXZlbnQgZnVydGhlciBjYWxscyB1c2luZyBhZGRcclxuXHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0XHRmaXJpbmcgPSBmYWxzZTtcclxuXHRcdFx0aWYgKCBsaXN0ICkge1xyXG5cdFx0XHRcdGlmICggc3RhY2sgKSB7XHJcblx0XHRcdFx0XHRpZiAoIHN0YWNrLmxlbmd0aCApIHtcclxuXHRcdFx0XHRcdFx0ZmlyZSggc3RhY2suc2hpZnQoKSApO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH0gZWxzZSBpZiAoIG1lbW9yeSApIHtcclxuXHRcdFx0XHRcdGxpc3QgPSBbXTtcclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0c2VsZi5kaXNhYmxlKCk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9LFxyXG5cdFx0Ly8gQWN0dWFsIENhbGxiYWNrcyBvYmplY3RcclxuXHRcdHNlbGYgPSB7XHJcblx0XHRcdC8vIEFkZCBhIGNhbGxiYWNrIG9yIGEgY29sbGVjdGlvbiBvZiBjYWxsYmFja3MgdG8gdGhlIGxpc3RcclxuXHRcdFx0YWRkOiBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRpZiAoIGxpc3QgKSB7XHJcblx0XHRcdFx0XHQvLyBGaXJzdCwgd2Ugc2F2ZSB0aGUgY3VycmVudCBsZW5ndGhcclxuXHRcdFx0XHRcdHZhciBzdGFydCA9IGxpc3QubGVuZ3RoO1xyXG5cdFx0XHRcdFx0KGZ1bmN0aW9uIGFkZCggYXJncyApIHtcclxuXHRcdFx0XHRcdFx0alF1ZXJ5LmVhY2goIGFyZ3MsIGZ1bmN0aW9uKCBfLCBhcmcgKSB7XHJcblx0XHRcdFx0XHRcdFx0dmFyIHR5cGUgPSBqUXVlcnkudHlwZSggYXJnICk7XHJcblx0XHRcdFx0XHRcdFx0aWYgKCB0eXBlID09PSBcImZ1bmN0aW9uXCIgKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRpZiAoICFvcHRpb25zLnVuaXF1ZSB8fCAhc2VsZi5oYXMoIGFyZyApICkge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRsaXN0LnB1c2goIGFyZyApO1xyXG5cdFx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoIGFyZyAmJiBhcmcubGVuZ3RoICYmIHR5cGUgIT09IFwic3RyaW5nXCIgKSB7XHJcblx0XHRcdFx0XHRcdFx0XHQvLyBJbnNwZWN0IHJlY3Vyc2l2ZWx5XHJcblx0XHRcdFx0XHRcdFx0XHRhZGQoIGFyZyApO1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0fSk7XHJcblx0XHRcdFx0XHR9KSggYXJndW1lbnRzICk7XHJcblx0XHRcdFx0XHQvLyBEbyB3ZSBuZWVkIHRvIGFkZCB0aGUgY2FsbGJhY2tzIHRvIHRoZVxyXG5cdFx0XHRcdFx0Ly8gY3VycmVudCBmaXJpbmcgYmF0Y2g/XHJcblx0XHRcdFx0XHRpZiAoIGZpcmluZyApIHtcclxuXHRcdFx0XHRcdFx0ZmlyaW5nTGVuZ3RoID0gbGlzdC5sZW5ndGg7XHJcblx0XHRcdFx0XHQvLyBXaXRoIG1lbW9yeSwgaWYgd2UncmUgbm90IGZpcmluZyB0aGVuXHJcblx0XHRcdFx0XHQvLyB3ZSBzaG91bGQgY2FsbCByaWdodCBhd2F5XHJcblx0XHRcdFx0XHR9IGVsc2UgaWYgKCBtZW1vcnkgKSB7XHJcblx0XHRcdFx0XHRcdGZpcmluZ1N0YXJ0ID0gc3RhcnQ7XHJcblx0XHRcdFx0XHRcdGZpcmUoIG1lbW9yeSApO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRyZXR1cm4gdGhpcztcclxuXHRcdFx0fSxcclxuXHRcdFx0Ly8gUmVtb3ZlIGEgY2FsbGJhY2sgZnJvbSB0aGUgbGlzdFxyXG5cdFx0XHRyZW1vdmU6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdGlmICggbGlzdCApIHtcclxuXHRcdFx0XHRcdGpRdWVyeS5lYWNoKCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBfLCBhcmcgKSB7XHJcblx0XHRcdFx0XHRcdHZhciBpbmRleDtcclxuXHRcdFx0XHRcdFx0d2hpbGUgKCAoIGluZGV4ID0galF1ZXJ5LmluQXJyYXkoIGFyZywgbGlzdCwgaW5kZXggKSApID4gLTEgKSB7XHJcblx0XHRcdFx0XHRcdFx0bGlzdC5zcGxpY2UoIGluZGV4LCAxICk7XHJcblx0XHRcdFx0XHRcdFx0Ly8gSGFuZGxlIGZpcmluZyBpbmRleGVzXHJcblx0XHRcdFx0XHRcdFx0aWYgKCBmaXJpbmcgKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRpZiAoIGluZGV4IDw9IGZpcmluZ0xlbmd0aCApIHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0ZmlyaW5nTGVuZ3RoLS07XHJcblx0XHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0XHRpZiAoIGluZGV4IDw9IGZpcmluZ0luZGV4ICkge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRmaXJpbmdJbmRleC0tO1xyXG5cdFx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fSk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdHJldHVybiB0aGlzO1xyXG5cdFx0XHR9LFxyXG5cdFx0XHQvLyBDaGVjayBpZiBhIGdpdmVuIGNhbGxiYWNrIGlzIGluIHRoZSBsaXN0LlxyXG5cdFx0XHQvLyBJZiBubyBhcmd1bWVudCBpcyBnaXZlbiwgcmV0dXJuIHdoZXRoZXIgb3Igbm90IGxpc3QgaGFzIGNhbGxiYWNrcyBhdHRhY2hlZC5cclxuXHRcdFx0aGFzOiBmdW5jdGlvbiggZm4gKSB7XHJcblx0XHRcdFx0cmV0dXJuIGZuID8galF1ZXJ5LmluQXJyYXkoIGZuLCBsaXN0ICkgPiAtMSA6ICEhKCBsaXN0ICYmIGxpc3QubGVuZ3RoICk7XHJcblx0XHRcdH0sXHJcblx0XHRcdC8vIFJlbW92ZSBhbGwgY2FsbGJhY2tzIGZyb20gdGhlIGxpc3RcclxuXHRcdFx0ZW1wdHk6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdGxpc3QgPSBbXTtcclxuXHRcdFx0XHRmaXJpbmdMZW5ndGggPSAwO1xyXG5cdFx0XHRcdHJldHVybiB0aGlzO1xyXG5cdFx0XHR9LFxyXG5cdFx0XHQvLyBIYXZlIHRoZSBsaXN0IGRvIG5vdGhpbmcgYW55bW9yZVxyXG5cdFx0XHRkaXNhYmxlOiBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRsaXN0ID0gc3RhY2sgPSBtZW1vcnkgPSB1bmRlZmluZWQ7XHJcblx0XHRcdFx0cmV0dXJuIHRoaXM7XHJcblx0XHRcdH0sXHJcblx0XHRcdC8vIElzIGl0IGRpc2FibGVkP1xyXG5cdFx0XHRkaXNhYmxlZDogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0cmV0dXJuICFsaXN0O1xyXG5cdFx0XHR9LFxyXG5cdFx0XHQvLyBMb2NrIHRoZSBsaXN0IGluIGl0cyBjdXJyZW50IHN0YXRlXHJcblx0XHRcdGxvY2s6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdHN0YWNrID0gdW5kZWZpbmVkO1xyXG5cdFx0XHRcdGlmICggIW1lbW9yeSApIHtcclxuXHRcdFx0XHRcdHNlbGYuZGlzYWJsZSgpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRyZXR1cm4gdGhpcztcclxuXHRcdFx0fSxcclxuXHRcdFx0Ly8gSXMgaXQgbG9ja2VkP1xyXG5cdFx0XHRsb2NrZWQ6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdHJldHVybiAhc3RhY2s7XHJcblx0XHRcdH0sXHJcblx0XHRcdC8vIENhbGwgYWxsIGNhbGxiYWNrcyB3aXRoIHRoZSBnaXZlbiBjb250ZXh0IGFuZCBhcmd1bWVudHNcclxuXHRcdFx0ZmlyZVdpdGg6IGZ1bmN0aW9uKCBjb250ZXh0LCBhcmdzICkge1xyXG5cdFx0XHRcdGlmICggbGlzdCAmJiAoICFmaXJlZCB8fCBzdGFjayApICkge1xyXG5cdFx0XHRcdFx0YXJncyA9IGFyZ3MgfHwgW107XHJcblx0XHRcdFx0XHRhcmdzID0gWyBjb250ZXh0LCBhcmdzLnNsaWNlID8gYXJncy5zbGljZSgpIDogYXJncyBdO1xyXG5cdFx0XHRcdFx0aWYgKCBmaXJpbmcgKSB7XHJcblx0XHRcdFx0XHRcdHN0YWNrLnB1c2goIGFyZ3MgKTtcclxuXHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdGZpcmUoIGFyZ3MgKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0cmV0dXJuIHRoaXM7XHJcblx0XHRcdH0sXHJcblx0XHRcdC8vIENhbGwgYWxsIHRoZSBjYWxsYmFja3Mgd2l0aCB0aGUgZ2l2ZW4gYXJndW1lbnRzXHJcblx0XHRcdGZpcmU6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdHNlbGYuZmlyZVdpdGgoIHRoaXMsIGFyZ3VtZW50cyApO1xyXG5cdFx0XHRcdHJldHVybiB0aGlzO1xyXG5cdFx0XHR9LFxyXG5cdFx0XHQvLyBUbyBrbm93IGlmIHRoZSBjYWxsYmFja3MgaGF2ZSBhbHJlYWR5IGJlZW4gY2FsbGVkIGF0IGxlYXN0IG9uY2VcclxuXHRcdFx0ZmlyZWQ6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdHJldHVybiAhIWZpcmVkO1xyXG5cdFx0XHR9XHJcblx0XHR9O1xyXG5cclxuXHRyZXR1cm4gc2VsZjtcclxufTtcclxuXHJcblxyXG5qUXVlcnkuZXh0ZW5kKHtcclxuXHJcblx0RGVmZXJyZWQ6IGZ1bmN0aW9uKCBmdW5jICkge1xyXG5cdFx0dmFyIHR1cGxlcyA9IFtcclxuXHRcdFx0XHQvLyBhY3Rpb24sIGFkZCBsaXN0ZW5lciwgbGlzdGVuZXIgbGlzdCwgZmluYWwgc3RhdGVcclxuXHRcdFx0XHRbIFwicmVzb2x2ZVwiLCBcImRvbmVcIiwgalF1ZXJ5LkNhbGxiYWNrcyhcIm9uY2UgbWVtb3J5XCIpLCBcInJlc29sdmVkXCIgXSxcclxuXHRcdFx0XHRbIFwicmVqZWN0XCIsIFwiZmFpbFwiLCBqUXVlcnkuQ2FsbGJhY2tzKFwib25jZSBtZW1vcnlcIiksIFwicmVqZWN0ZWRcIiBdLFxyXG5cdFx0XHRcdFsgXCJub3RpZnlcIiwgXCJwcm9ncmVzc1wiLCBqUXVlcnkuQ2FsbGJhY2tzKFwibWVtb3J5XCIpIF1cclxuXHRcdFx0XSxcclxuXHRcdFx0c3RhdGUgPSBcInBlbmRpbmdcIixcclxuXHRcdFx0cHJvbWlzZSA9IHtcclxuXHRcdFx0XHRzdGF0ZTogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0XHRyZXR1cm4gc3RhdGU7XHJcblx0XHRcdFx0fSxcclxuXHRcdFx0XHRhbHdheXM6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdFx0ZGVmZXJyZWQuZG9uZSggYXJndW1lbnRzICkuZmFpbCggYXJndW1lbnRzICk7XHJcblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcclxuXHRcdFx0XHR9LFxyXG5cdFx0XHRcdHRoZW46IGZ1bmN0aW9uKCAvKiBmbkRvbmUsIGZuRmFpbCwgZm5Qcm9ncmVzcyAqLyApIHtcclxuXHRcdFx0XHRcdHZhciBmbnMgPSBhcmd1bWVudHM7XHJcblx0XHRcdFx0XHRyZXR1cm4galF1ZXJ5LkRlZmVycmVkKGZ1bmN0aW9uKCBuZXdEZWZlciApIHtcclxuXHRcdFx0XHRcdFx0alF1ZXJ5LmVhY2goIHR1cGxlcywgZnVuY3Rpb24oIGksIHR1cGxlICkge1xyXG5cdFx0XHRcdFx0XHRcdHZhciBmbiA9IGpRdWVyeS5pc0Z1bmN0aW9uKCBmbnNbIGkgXSApICYmIGZuc1sgaSBdO1xyXG5cdFx0XHRcdFx0XHRcdC8vIGRlZmVycmVkWyBkb25lIHwgZmFpbCB8IHByb2dyZXNzIF0gZm9yIGZvcndhcmRpbmcgYWN0aW9ucyB0byBuZXdEZWZlclxyXG5cdFx0XHRcdFx0XHRcdGRlZmVycmVkWyB0dXBsZVsxXSBdKGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdFx0XHRcdFx0dmFyIHJldHVybmVkID0gZm4gJiYgZm4uYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xyXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCByZXR1cm5lZCAmJiBqUXVlcnkuaXNGdW5jdGlvbiggcmV0dXJuZWQucHJvbWlzZSApICkge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZC5wcm9taXNlKClcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHQuZG9uZSggbmV3RGVmZXIucmVzb2x2ZSApXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0LmZhaWwoIG5ld0RlZmVyLnJlamVjdCApXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0LnByb2dyZXNzKCBuZXdEZWZlci5ub3RpZnkgKTtcclxuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyWyB0dXBsZVsgMCBdICsgXCJXaXRoXCIgXSggdGhpcyA9PT0gcHJvbWlzZSA/IG5ld0RlZmVyLnByb21pc2UoKSA6IHRoaXMsIGZuID8gWyByZXR1cm5lZCBdIDogYXJndW1lbnRzICk7XHJcblx0XHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0fSk7XHJcblx0XHRcdFx0XHRcdH0pO1xyXG5cdFx0XHRcdFx0XHRmbnMgPSBudWxsO1xyXG5cdFx0XHRcdFx0fSkucHJvbWlzZSgpO1xyXG5cdFx0XHRcdH0sXHJcblx0XHRcdFx0Ly8gR2V0IGEgcHJvbWlzZSBmb3IgdGhpcyBkZWZlcnJlZFxyXG5cdFx0XHRcdC8vIElmIG9iaiBpcyBwcm92aWRlZCwgdGhlIHByb21pc2UgYXNwZWN0IGlzIGFkZGVkIHRvIHRoZSBvYmplY3RcclxuXHRcdFx0XHRwcm9taXNlOiBmdW5jdGlvbiggb2JqICkge1xyXG5cdFx0XHRcdFx0cmV0dXJuIG9iaiAhPSBudWxsID8galF1ZXJ5LmV4dGVuZCggb2JqLCBwcm9taXNlICkgOiBwcm9taXNlO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSxcclxuXHRcdFx0ZGVmZXJyZWQgPSB7fTtcclxuXHJcblx0XHQvLyBLZWVwIHBpcGUgZm9yIGJhY2stY29tcGF0XHJcblx0XHRwcm9taXNlLnBpcGUgPSBwcm9taXNlLnRoZW47XHJcblxyXG5cdFx0Ly8gQWRkIGxpc3Qtc3BlY2lmaWMgbWV0aG9kc1xyXG5cdFx0alF1ZXJ5LmVhY2goIHR1cGxlcywgZnVuY3Rpb24oIGksIHR1cGxlICkge1xyXG5cdFx0XHR2YXIgbGlzdCA9IHR1cGxlWyAyIF0sXHJcblx0XHRcdFx0c3RhdGVTdHJpbmcgPSB0dXBsZVsgMyBdO1xyXG5cclxuXHRcdFx0Ly8gcHJvbWlzZVsgZG9uZSB8IGZhaWwgfCBwcm9ncmVzcyBdID0gbGlzdC5hZGRcclxuXHRcdFx0cHJvbWlzZVsgdHVwbGVbMV0gXSA9IGxpc3QuYWRkO1xyXG5cclxuXHRcdFx0Ly8gSGFuZGxlIHN0YXRlXHJcblx0XHRcdGlmICggc3RhdGVTdHJpbmcgKSB7XHJcblx0XHRcdFx0bGlzdC5hZGQoZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0XHQvLyBzdGF0ZSA9IFsgcmVzb2x2ZWQgfCByZWplY3RlZCBdXHJcblx0XHRcdFx0XHRzdGF0ZSA9IHN0YXRlU3RyaW5nO1xyXG5cclxuXHRcdFx0XHQvLyBbIHJlamVjdF9saXN0IHwgcmVzb2x2ZV9saXN0IF0uZGlzYWJsZTsgcHJvZ3Jlc3NfbGlzdC5sb2NrXHJcblx0XHRcdFx0fSwgdHVwbGVzWyBpIF4gMSBdWyAyIF0uZGlzYWJsZSwgdHVwbGVzWyAyIF1bIDIgXS5sb2NrICk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIGRlZmVycmVkWyByZXNvbHZlIHwgcmVqZWN0IHwgbm90aWZ5IF1cclxuXHRcdFx0ZGVmZXJyZWRbIHR1cGxlWzBdIF0gPSBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRkZWZlcnJlZFsgdHVwbGVbMF0gKyBcIldpdGhcIiBdKCB0aGlzID09PSBkZWZlcnJlZCA/IHByb21pc2UgOiB0aGlzLCBhcmd1bWVudHMgKTtcclxuXHRcdFx0XHRyZXR1cm4gdGhpcztcclxuXHRcdFx0fTtcclxuXHRcdFx0ZGVmZXJyZWRbIHR1cGxlWzBdICsgXCJXaXRoXCIgXSA9IGxpc3QuZmlyZVdpdGg7XHJcblx0XHR9KTtcclxuXHJcblx0XHQvLyBNYWtlIHRoZSBkZWZlcnJlZCBhIHByb21pc2VcclxuXHRcdHByb21pc2UucHJvbWlzZSggZGVmZXJyZWQgKTtcclxuXHJcblx0XHQvLyBDYWxsIGdpdmVuIGZ1bmMgaWYgYW55XHJcblx0XHRpZiAoIGZ1bmMgKSB7XHJcblx0XHRcdGZ1bmMuY2FsbCggZGVmZXJyZWQsIGRlZmVycmVkICk7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gQWxsIGRvbmUhXHJcblx0XHRyZXR1cm4gZGVmZXJyZWQ7XHJcblx0fSxcclxuXHJcblx0Ly8gRGVmZXJyZWQgaGVscGVyXHJcblx0d2hlbjogZnVuY3Rpb24oIHN1Ym9yZGluYXRlIC8qICwgLi4uLCBzdWJvcmRpbmF0ZU4gKi8gKSB7XHJcblx0XHR2YXIgaSA9IDAsXHJcblx0XHRcdHJlc29sdmVWYWx1ZXMgPSBzbGljZS5jYWxsKCBhcmd1bWVudHMgKSxcclxuXHRcdFx0bGVuZ3RoID0gcmVzb2x2ZVZhbHVlcy5sZW5ndGgsXHJcblxyXG5cdFx0XHQvLyB0aGUgY291bnQgb2YgdW5jb21wbGV0ZWQgc3Vib3JkaW5hdGVzXHJcblx0XHRcdHJlbWFpbmluZyA9IGxlbmd0aCAhPT0gMSB8fCAoIHN1Ym9yZGluYXRlICYmIGpRdWVyeS5pc0Z1bmN0aW9uKCBzdWJvcmRpbmF0ZS5wcm9taXNlICkgKSA/IGxlbmd0aCA6IDAsXHJcblxyXG5cdFx0XHQvLyB0aGUgbWFzdGVyIERlZmVycmVkLiBJZiByZXNvbHZlVmFsdWVzIGNvbnNpc3Qgb2Ygb25seSBhIHNpbmdsZSBEZWZlcnJlZCwganVzdCB1c2UgdGhhdC5cclxuXHRcdFx0ZGVmZXJyZWQgPSByZW1haW5pbmcgPT09IDEgPyBzdWJvcmRpbmF0ZSA6IGpRdWVyeS5EZWZlcnJlZCgpLFxyXG5cclxuXHRcdFx0Ly8gVXBkYXRlIGZ1bmN0aW9uIGZvciBib3RoIHJlc29sdmUgYW5kIHByb2dyZXNzIHZhbHVlc1xyXG5cdFx0XHR1cGRhdGVGdW5jID0gZnVuY3Rpb24oIGksIGNvbnRleHRzLCB2YWx1ZXMgKSB7XHJcblx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCB2YWx1ZSApIHtcclxuXHRcdFx0XHRcdGNvbnRleHRzWyBpIF0gPSB0aGlzO1xyXG5cdFx0XHRcdFx0dmFsdWVzWyBpIF0gPSBhcmd1bWVudHMubGVuZ3RoID4gMSA/IHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApIDogdmFsdWU7XHJcblx0XHRcdFx0XHRpZiAoIHZhbHVlcyA9PT0gcHJvZ3Jlc3NWYWx1ZXMgKSB7XHJcblx0XHRcdFx0XHRcdGRlZmVycmVkLm5vdGlmeVdpdGgoIGNvbnRleHRzLCB2YWx1ZXMgKTtcclxuXHRcdFx0XHRcdH0gZWxzZSBpZiAoICEoIC0tcmVtYWluaW5nICkgKSB7XHJcblx0XHRcdFx0XHRcdGRlZmVycmVkLnJlc29sdmVXaXRoKCBjb250ZXh0cywgdmFsdWVzICk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fTtcclxuXHRcdFx0fSxcclxuXHJcblx0XHRcdHByb2dyZXNzVmFsdWVzLCBwcm9ncmVzc0NvbnRleHRzLCByZXNvbHZlQ29udGV4dHM7XHJcblxyXG5cdFx0Ly8gQWRkIGxpc3RlbmVycyB0byBEZWZlcnJlZCBzdWJvcmRpbmF0ZXM7IHRyZWF0IG90aGVycyBhcyByZXNvbHZlZFxyXG5cdFx0aWYgKCBsZW5ndGggPiAxICkge1xyXG5cdFx0XHRwcm9ncmVzc1ZhbHVlcyA9IG5ldyBBcnJheSggbGVuZ3RoICk7XHJcblx0XHRcdHByb2dyZXNzQ29udGV4dHMgPSBuZXcgQXJyYXkoIGxlbmd0aCApO1xyXG5cdFx0XHRyZXNvbHZlQ29udGV4dHMgPSBuZXcgQXJyYXkoIGxlbmd0aCApO1xyXG5cdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcclxuXHRcdFx0XHRpZiAoIHJlc29sdmVWYWx1ZXNbIGkgXSAmJiBqUXVlcnkuaXNGdW5jdGlvbiggcmVzb2x2ZVZhbHVlc1sgaSBdLnByb21pc2UgKSApIHtcclxuXHRcdFx0XHRcdHJlc29sdmVWYWx1ZXNbIGkgXS5wcm9taXNlKClcclxuXHRcdFx0XHRcdFx0LmRvbmUoIHVwZGF0ZUZ1bmMoIGksIHJlc29sdmVDb250ZXh0cywgcmVzb2x2ZVZhbHVlcyApIClcclxuXHRcdFx0XHRcdFx0LmZhaWwoIGRlZmVycmVkLnJlamVjdCApXHJcblx0XHRcdFx0XHRcdC5wcm9ncmVzcyggdXBkYXRlRnVuYyggaSwgcHJvZ3Jlc3NDb250ZXh0cywgcHJvZ3Jlc3NWYWx1ZXMgKSApO1xyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHQtLXJlbWFpbmluZztcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHQvLyBJZiB3ZSdyZSBub3Qgd2FpdGluZyBvbiBhbnl0aGluZywgcmVzb2x2ZSB0aGUgbWFzdGVyXHJcblx0XHRpZiAoICFyZW1haW5pbmcgKSB7XHJcblx0XHRcdGRlZmVycmVkLnJlc29sdmVXaXRoKCByZXNvbHZlQ29udGV4dHMsIHJlc29sdmVWYWx1ZXMgKTtcclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gZGVmZXJyZWQucHJvbWlzZSgpO1xyXG5cdH1cclxufSk7XHJcblxyXG5cclxuLy8gVGhlIGRlZmVycmVkIHVzZWQgb24gRE9NIHJlYWR5XHJcbnZhciByZWFkeUxpc3Q7XHJcblxyXG5qUXVlcnkuZm4ucmVhZHkgPSBmdW5jdGlvbiggZm4gKSB7XHJcblx0Ly8gQWRkIHRoZSBjYWxsYmFja1xyXG5cdGpRdWVyeS5yZWFkeS5wcm9taXNlKCkuZG9uZSggZm4gKTtcclxuXHJcblx0cmV0dXJuIHRoaXM7XHJcbn07XHJcblxyXG5qUXVlcnkuZXh0ZW5kKHtcclxuXHQvLyBJcyB0aGUgRE9NIHJlYWR5IHRvIGJlIHVzZWQ/IFNldCB0byB0cnVlIG9uY2UgaXQgb2NjdXJzLlxyXG5cdGlzUmVhZHk6IGZhbHNlLFxyXG5cclxuXHQvLyBBIGNvdW50ZXIgdG8gdHJhY2sgaG93IG1hbnkgaXRlbXMgdG8gd2FpdCBmb3IgYmVmb3JlXHJcblx0Ly8gdGhlIHJlYWR5IGV2ZW50IGZpcmVzLiBTZWUgIzY3ODFcclxuXHRyZWFkeVdhaXQ6IDEsXHJcblxyXG5cdC8vIEhvbGQgKG9yIHJlbGVhc2UpIHRoZSByZWFkeSBldmVudFxyXG5cdGhvbGRSZWFkeTogZnVuY3Rpb24oIGhvbGQgKSB7XHJcblx0XHRpZiAoIGhvbGQgKSB7XHJcblx0XHRcdGpRdWVyeS5yZWFkeVdhaXQrKztcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdGpRdWVyeS5yZWFkeSggdHJ1ZSApO1xyXG5cdFx0fVxyXG5cdH0sXHJcblxyXG5cdC8vIEhhbmRsZSB3aGVuIHRoZSBET00gaXMgcmVhZHlcclxuXHRyZWFkeTogZnVuY3Rpb24oIHdhaXQgKSB7XHJcblxyXG5cdFx0Ly8gQWJvcnQgaWYgdGhlcmUgYXJlIHBlbmRpbmcgaG9sZHMgb3Igd2UncmUgYWxyZWFkeSByZWFkeVxyXG5cdFx0aWYgKCB3YWl0ID09PSB0cnVlID8gLS1qUXVlcnkucmVhZHlXYWl0IDogalF1ZXJ5LmlzUmVhZHkgKSB7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBSZW1lbWJlciB0aGF0IHRoZSBET00gaXMgcmVhZHlcclxuXHRcdGpRdWVyeS5pc1JlYWR5ID0gdHJ1ZTtcclxuXHJcblx0XHQvLyBJZiBhIG5vcm1hbCBET00gUmVhZHkgZXZlbnQgZmlyZWQsIGRlY3JlbWVudCwgYW5kIHdhaXQgaWYgbmVlZCBiZVxyXG5cdFx0aWYgKCB3YWl0ICE9PSB0cnVlICYmIC0talF1ZXJ5LnJlYWR5V2FpdCA+IDAgKSB7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBJZiB0aGVyZSBhcmUgZnVuY3Rpb25zIGJvdW5kLCB0byBleGVjdXRlXHJcblx0XHRyZWFkeUxpc3QucmVzb2x2ZVdpdGgoIGRvY3VtZW50LCBbIGpRdWVyeSBdICk7XHJcblxyXG5cdFx0Ly8gVHJpZ2dlciBhbnkgYm91bmQgcmVhZHkgZXZlbnRzXHJcblx0XHRpZiAoIGpRdWVyeS5mbi50cmlnZ2VySGFuZGxlciApIHtcclxuXHRcdFx0alF1ZXJ5KCBkb2N1bWVudCApLnRyaWdnZXJIYW5kbGVyKCBcInJlYWR5XCIgKTtcclxuXHRcdFx0alF1ZXJ5KCBkb2N1bWVudCApLm9mZiggXCJyZWFkeVwiICk7XHJcblx0XHR9XHJcblx0fVxyXG59KTtcclxuXHJcbi8qKlxyXG4gKiBUaGUgcmVhZHkgZXZlbnQgaGFuZGxlciBhbmQgc2VsZiBjbGVhbnVwIG1ldGhvZFxyXG4gKi9cclxuZnVuY3Rpb24gY29tcGxldGVkKCkge1xyXG5cdGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoIFwiRE9NQ29udGVudExvYWRlZFwiLCBjb21wbGV0ZWQsIGZhbHNlICk7XHJcblx0d2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoIFwibG9hZFwiLCBjb21wbGV0ZWQsIGZhbHNlICk7XHJcblx0alF1ZXJ5LnJlYWR5KCk7XHJcbn1cclxuXHJcbmpRdWVyeS5yZWFkeS5wcm9taXNlID0gZnVuY3Rpb24oIG9iaiApIHtcclxuXHRpZiAoICFyZWFkeUxpc3QgKSB7XHJcblxyXG5cdFx0cmVhZHlMaXN0ID0galF1ZXJ5LkRlZmVycmVkKCk7XHJcblxyXG5cdFx0Ly8gQ2F0Y2ggY2FzZXMgd2hlcmUgJChkb2N1bWVudCkucmVhZHkoKSBpcyBjYWxsZWQgYWZ0ZXIgdGhlIGJyb3dzZXIgZXZlbnQgaGFzIGFscmVhZHkgb2NjdXJyZWQuXHJcblx0XHQvLyBXZSBvbmNlIHRyaWVkIHRvIHVzZSByZWFkeVN0YXRlIFwiaW50ZXJhY3RpdmVcIiBoZXJlLCBidXQgaXQgY2F1c2VkIGlzc3VlcyBsaWtlIHRoZSBvbmVcclxuXHRcdC8vIGRpc2NvdmVyZWQgYnkgQ2hyaXNTIGhlcmU6IGh0dHA6Ly9idWdzLmpxdWVyeS5jb20vdGlja2V0LzEyMjgyI2NvbW1lbnQ6MTVcclxuXHRcdGlmICggZG9jdW1lbnQucmVhZHlTdGF0ZSA9PT0gXCJjb21wbGV0ZVwiICkge1xyXG5cdFx0XHQvLyBIYW5kbGUgaXQgYXN5bmNocm9ub3VzbHkgdG8gYWxsb3cgc2NyaXB0cyB0aGUgb3Bwb3J0dW5pdHkgdG8gZGVsYXkgcmVhZHlcclxuXHRcdFx0c2V0VGltZW91dCggalF1ZXJ5LnJlYWR5ICk7XHJcblxyXG5cdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdC8vIFVzZSB0aGUgaGFuZHkgZXZlbnQgY2FsbGJhY2tcclxuXHRcdFx0ZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggXCJET01Db250ZW50TG9hZGVkXCIsIGNvbXBsZXRlZCwgZmFsc2UgKTtcclxuXHJcblx0XHRcdC8vIEEgZmFsbGJhY2sgdG8gd2luZG93Lm9ubG9hZCwgdGhhdCB3aWxsIGFsd2F5cyB3b3JrXHJcblx0XHRcdHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCBcImxvYWRcIiwgY29tcGxldGVkLCBmYWxzZSApO1xyXG5cdFx0fVxyXG5cdH1cclxuXHRyZXR1cm4gcmVhZHlMaXN0LnByb21pc2UoIG9iaiApO1xyXG59O1xyXG5cclxuLy8gS2ljayBvZmYgdGhlIERPTSByZWFkeSBjaGVjayBldmVuIGlmIHRoZSB1c2VyIGRvZXMgbm90XHJcbmpRdWVyeS5yZWFkeS5wcm9taXNlKCk7XHJcblxyXG5cclxuXHJcblxyXG4vLyBNdWx0aWZ1bmN0aW9uYWwgbWV0aG9kIHRvIGdldCBhbmQgc2V0IHZhbHVlcyBvZiBhIGNvbGxlY3Rpb25cclxuLy8gVGhlIHZhbHVlL3MgY2FuIG9wdGlvbmFsbHkgYmUgZXhlY3V0ZWQgaWYgaXQncyBhIGZ1bmN0aW9uXHJcbnZhciBhY2Nlc3MgPSBqUXVlcnkuYWNjZXNzID0gZnVuY3Rpb24oIGVsZW1zLCBmbiwga2V5LCB2YWx1ZSwgY2hhaW5hYmxlLCBlbXB0eUdldCwgcmF3ICkge1xyXG5cdHZhciBpID0gMCxcclxuXHRcdGxlbiA9IGVsZW1zLmxlbmd0aCxcclxuXHRcdGJ1bGsgPSBrZXkgPT0gbnVsbDtcclxuXHJcblx0Ly8gU2V0cyBtYW55IHZhbHVlc1xyXG5cdGlmICggalF1ZXJ5LnR5cGUoIGtleSApID09PSBcIm9iamVjdFwiICkge1xyXG5cdFx0Y2hhaW5hYmxlID0gdHJ1ZTtcclxuXHRcdGZvciAoIGkgaW4ga2V5ICkge1xyXG5cdFx0XHRqUXVlcnkuYWNjZXNzKCBlbGVtcywgZm4sIGksIGtleVtpXSwgdHJ1ZSwgZW1wdHlHZXQsIHJhdyApO1xyXG5cdFx0fVxyXG5cclxuXHQvLyBTZXRzIG9uZSB2YWx1ZVxyXG5cdH0gZWxzZSBpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XHJcblx0XHRjaGFpbmFibGUgPSB0cnVlO1xyXG5cclxuXHRcdGlmICggIWpRdWVyeS5pc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xyXG5cdFx0XHRyYXcgPSB0cnVlO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmICggYnVsayApIHtcclxuXHRcdFx0Ly8gQnVsayBvcGVyYXRpb25zIHJ1biBhZ2FpbnN0IHRoZSBlbnRpcmUgc2V0XHJcblx0XHRcdGlmICggcmF3ICkge1xyXG5cdFx0XHRcdGZuLmNhbGwoIGVsZW1zLCB2YWx1ZSApO1xyXG5cdFx0XHRcdGZuID0gbnVsbDtcclxuXHJcblx0XHRcdC8vIC4uLmV4Y2VwdCB3aGVuIGV4ZWN1dGluZyBmdW5jdGlvbiB2YWx1ZXNcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRidWxrID0gZm47XHJcblx0XHRcdFx0Zm4gPSBmdW5jdGlvbiggZWxlbSwga2V5LCB2YWx1ZSApIHtcclxuXHRcdFx0XHRcdHJldHVybiBidWxrLmNhbGwoIGpRdWVyeSggZWxlbSApLCB2YWx1ZSApO1xyXG5cdFx0XHRcdH07XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHRpZiAoIGZuICkge1xyXG5cdFx0XHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcclxuXHRcdFx0XHRmbiggZWxlbXNbaV0sIGtleSwgcmF3ID8gdmFsdWUgOiB2YWx1ZS5jYWxsKCBlbGVtc1tpXSwgaSwgZm4oIGVsZW1zW2ldLCBrZXkgKSApICk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdHJldHVybiBjaGFpbmFibGUgP1xyXG5cdFx0ZWxlbXMgOlxyXG5cclxuXHRcdC8vIEdldHNcclxuXHRcdGJ1bGsgP1xyXG5cdFx0XHRmbi5jYWxsKCBlbGVtcyApIDpcclxuXHRcdFx0bGVuID8gZm4oIGVsZW1zWzBdLCBrZXkgKSA6IGVtcHR5R2V0O1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBEZXRlcm1pbmVzIHdoZXRoZXIgYW4gb2JqZWN0IGNhbiBoYXZlIGRhdGFcclxuICovXHJcbmpRdWVyeS5hY2NlcHREYXRhID0gZnVuY3Rpb24oIG93bmVyICkge1xyXG5cdC8vIEFjY2VwdHMgb25seTpcclxuXHQvLyAgLSBOb2RlXHJcblx0Ly8gICAgLSBOb2RlLkVMRU1FTlRfTk9ERVxyXG5cdC8vICAgIC0gTm9kZS5ET0NVTUVOVF9OT0RFXHJcblx0Ly8gIC0gT2JqZWN0XHJcblx0Ly8gICAgLSBBbnlcclxuXHQvKiBqc2hpbnQgLVcwMTggKi9cclxuXHRyZXR1cm4gb3duZXIubm9kZVR5cGUgPT09IDEgfHwgb3duZXIubm9kZVR5cGUgPT09IDkgfHwgISggK293bmVyLm5vZGVUeXBlICk7XHJcbn07XHJcblxyXG5cclxuZnVuY3Rpb24gRGF0YSgpIHtcclxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkPDQsXHJcblx0Ly8gT2xkIFdlYktpdCBkb2VzIG5vdCBoYXZlIE9iamVjdC5wcmV2ZW50RXh0ZW5zaW9ucy9mcmVlemUgbWV0aG9kLFxyXG5cdC8vIHJldHVybiBuZXcgZW1wdHkgb2JqZWN0IGluc3RlYWQgd2l0aCBubyBbW3NldF1dIGFjY2Vzc29yXHJcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KCB0aGlzLmNhY2hlID0ge30sIDAsIHtcclxuXHRcdGdldDogZnVuY3Rpb24oKSB7XHJcblx0XHRcdHJldHVybiB7fTtcclxuXHRcdH1cclxuXHR9KTtcclxuXHJcblx0dGhpcy5leHBhbmRvID0galF1ZXJ5LmV4cGFuZG8gKyBEYXRhLnVpZCsrO1xyXG59XHJcblxyXG5EYXRhLnVpZCA9IDE7XHJcbkRhdGEuYWNjZXB0cyA9IGpRdWVyeS5hY2NlcHREYXRhO1xyXG5cclxuRGF0YS5wcm90b3R5cGUgPSB7XHJcblx0a2V5OiBmdW5jdGlvbiggb3duZXIgKSB7XHJcblx0XHQvLyBXZSBjYW4gYWNjZXB0IGRhdGEgZm9yIG5vbi1lbGVtZW50IG5vZGVzIGluIG1vZGVybiBicm93c2VycyxcclxuXHRcdC8vIGJ1dCB3ZSBzaG91bGQgbm90LCBzZWUgIzgzMzUuXHJcblx0XHQvLyBBbHdheXMgcmV0dXJuIHRoZSBrZXkgZm9yIGEgZnJvemVuIG9iamVjdC5cclxuXHRcdGlmICggIURhdGEuYWNjZXB0cyggb3duZXIgKSApIHtcclxuXHRcdFx0cmV0dXJuIDA7XHJcblx0XHR9XHJcblxyXG5cdFx0dmFyIGRlc2NyaXB0b3IgPSB7fSxcclxuXHRcdFx0Ly8gQ2hlY2sgaWYgdGhlIG93bmVyIG9iamVjdCBhbHJlYWR5IGhhcyBhIGNhY2hlIGtleVxyXG5cdFx0XHR1bmxvY2sgPSBvd25lclsgdGhpcy5leHBhbmRvIF07XHJcblxyXG5cdFx0Ly8gSWYgbm90LCBjcmVhdGUgb25lXHJcblx0XHRpZiAoICF1bmxvY2sgKSB7XHJcblx0XHRcdHVubG9jayA9IERhdGEudWlkKys7XHJcblxyXG5cdFx0XHQvLyBTZWN1cmUgaXQgaW4gYSBub24tZW51bWVyYWJsZSwgbm9uLXdyaXRhYmxlIHByb3BlcnR5XHJcblx0XHRcdHRyeSB7XHJcblx0XHRcdFx0ZGVzY3JpcHRvclsgdGhpcy5leHBhbmRvIF0gPSB7IHZhbHVlOiB1bmxvY2sgfTtcclxuXHRcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydGllcyggb3duZXIsIGRlc2NyaXB0b3IgKTtcclxuXHJcblx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQ8NFxyXG5cdFx0XHQvLyBGYWxsYmFjayB0byBhIGxlc3Mgc2VjdXJlIGRlZmluaXRpb25cclxuXHRcdFx0fSBjYXRjaCAoIGUgKSB7XHJcblx0XHRcdFx0ZGVzY3JpcHRvclsgdGhpcy5leHBhbmRvIF0gPSB1bmxvY2s7XHJcblx0XHRcdFx0alF1ZXJ5LmV4dGVuZCggb3duZXIsIGRlc2NyaXB0b3IgKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdC8vIEVuc3VyZSB0aGUgY2FjaGUgb2JqZWN0XHJcblx0XHRpZiAoICF0aGlzLmNhY2hlWyB1bmxvY2sgXSApIHtcclxuXHRcdFx0dGhpcy5jYWNoZVsgdW5sb2NrIF0gPSB7fTtcclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdW5sb2NrO1xyXG5cdH0sXHJcblx0c2V0OiBmdW5jdGlvbiggb3duZXIsIGRhdGEsIHZhbHVlICkge1xyXG5cdFx0dmFyIHByb3AsXHJcblx0XHRcdC8vIFRoZXJlIG1heSBiZSBhbiB1bmxvY2sgYXNzaWduZWQgdG8gdGhpcyBub2RlLFxyXG5cdFx0XHQvLyBpZiB0aGVyZSBpcyBubyBlbnRyeSBmb3IgdGhpcyBcIm93bmVyXCIsIGNyZWF0ZSBvbmUgaW5saW5lXHJcblx0XHRcdC8vIGFuZCBzZXQgdGhlIHVubG9jayBhcyB0aG91Z2ggYW4gb3duZXIgZW50cnkgaGFkIGFsd2F5cyBleGlzdGVkXHJcblx0XHRcdHVubG9jayA9IHRoaXMua2V5KCBvd25lciApLFxyXG5cdFx0XHRjYWNoZSA9IHRoaXMuY2FjaGVbIHVubG9jayBdO1xyXG5cclxuXHRcdC8vIEhhbmRsZTogWyBvd25lciwga2V5LCB2YWx1ZSBdIGFyZ3NcclxuXHRcdGlmICggdHlwZW9mIGRhdGEgPT09IFwic3RyaW5nXCIgKSB7XHJcblx0XHRcdGNhY2hlWyBkYXRhIF0gPSB2YWx1ZTtcclxuXHJcblx0XHQvLyBIYW5kbGU6IFsgb3duZXIsIHsgcHJvcGVydGllcyB9IF0gYXJnc1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0Ly8gRnJlc2ggYXNzaWdubWVudHMgYnkgb2JqZWN0IGFyZSBzaGFsbG93IGNvcGllZFxyXG5cdFx0XHRpZiAoIGpRdWVyeS5pc0VtcHR5T2JqZWN0KCBjYWNoZSApICkge1xyXG5cdFx0XHRcdGpRdWVyeS5leHRlbmQoIHRoaXMuY2FjaGVbIHVubG9jayBdLCBkYXRhICk7XHJcblx0XHRcdC8vIE90aGVyd2lzZSwgY29weSB0aGUgcHJvcGVydGllcyBvbmUtYnktb25lIHRvIHRoZSBjYWNoZSBvYmplY3RcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRmb3IgKCBwcm9wIGluIGRhdGEgKSB7XHJcblx0XHRcdFx0XHRjYWNoZVsgcHJvcCBdID0gZGF0YVsgcHJvcCBdO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIGNhY2hlO1xyXG5cdH0sXHJcblx0Z2V0OiBmdW5jdGlvbiggb3duZXIsIGtleSApIHtcclxuXHRcdC8vIEVpdGhlciBhIHZhbGlkIGNhY2hlIGlzIGZvdW5kLCBvciB3aWxsIGJlIGNyZWF0ZWQuXHJcblx0XHQvLyBOZXcgY2FjaGVzIHdpbGwgYmUgY3JlYXRlZCBhbmQgdGhlIHVubG9jayByZXR1cm5lZCxcclxuXHRcdC8vIGFsbG93aW5nIGRpcmVjdCBhY2Nlc3MgdG8gdGhlIG5ld2x5IGNyZWF0ZWRcclxuXHRcdC8vIGVtcHR5IGRhdGEgb2JqZWN0LiBBIHZhbGlkIG93bmVyIG9iamVjdCBtdXN0IGJlIHByb3ZpZGVkLlxyXG5cdFx0dmFyIGNhY2hlID0gdGhpcy5jYWNoZVsgdGhpcy5rZXkoIG93bmVyICkgXTtcclxuXHJcblx0XHRyZXR1cm4ga2V5ID09PSB1bmRlZmluZWQgP1xyXG5cdFx0XHRjYWNoZSA6IGNhY2hlWyBrZXkgXTtcclxuXHR9LFxyXG5cdGFjY2VzczogZnVuY3Rpb24oIG93bmVyLCBrZXksIHZhbHVlICkge1xyXG5cdFx0dmFyIHN0b3JlZDtcclxuXHRcdC8vIEluIGNhc2VzIHdoZXJlIGVpdGhlcjpcclxuXHRcdC8vXHJcblx0XHQvLyAgIDEuIE5vIGtleSB3YXMgc3BlY2lmaWVkXHJcblx0XHQvLyAgIDIuIEEgc3RyaW5nIGtleSB3YXMgc3BlY2lmaWVkLCBidXQgbm8gdmFsdWUgcHJvdmlkZWRcclxuXHRcdC8vXHJcblx0XHQvLyBUYWtlIHRoZSBcInJlYWRcIiBwYXRoIGFuZCBhbGxvdyB0aGUgZ2V0IG1ldGhvZCB0byBkZXRlcm1pbmVcclxuXHRcdC8vIHdoaWNoIHZhbHVlIHRvIHJldHVybiwgcmVzcGVjdGl2ZWx5IGVpdGhlcjpcclxuXHRcdC8vXHJcblx0XHQvLyAgIDEuIFRoZSBlbnRpcmUgY2FjaGUgb2JqZWN0XHJcblx0XHQvLyAgIDIuIFRoZSBkYXRhIHN0b3JlZCBhdCB0aGUga2V5XHJcblx0XHQvL1xyXG5cdFx0aWYgKCBrZXkgPT09IHVuZGVmaW5lZCB8fFxyXG5cdFx0XHRcdCgoa2V5ICYmIHR5cGVvZiBrZXkgPT09IFwic3RyaW5nXCIpICYmIHZhbHVlID09PSB1bmRlZmluZWQpICkge1xyXG5cclxuXHRcdFx0c3RvcmVkID0gdGhpcy5nZXQoIG93bmVyLCBrZXkgKTtcclxuXHJcblx0XHRcdHJldHVybiBzdG9yZWQgIT09IHVuZGVmaW5lZCA/XHJcblx0XHRcdFx0c3RvcmVkIDogdGhpcy5nZXQoIG93bmVyLCBqUXVlcnkuY2FtZWxDYXNlKGtleSkgKTtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBbKl1XaGVuIHRoZSBrZXkgaXMgbm90IGEgc3RyaW5nLCBvciBib3RoIGEga2V5IGFuZCB2YWx1ZVxyXG5cdFx0Ly8gYXJlIHNwZWNpZmllZCwgc2V0IG9yIGV4dGVuZCAoZXhpc3Rpbmcgb2JqZWN0cykgd2l0aCBlaXRoZXI6XHJcblx0XHQvL1xyXG5cdFx0Ly8gICAxLiBBbiBvYmplY3Qgb2YgcHJvcGVydGllc1xyXG5cdFx0Ly8gICAyLiBBIGtleSBhbmQgdmFsdWVcclxuXHRcdC8vXHJcblx0XHR0aGlzLnNldCggb3duZXIsIGtleSwgdmFsdWUgKTtcclxuXHJcblx0XHQvLyBTaW5jZSB0aGUgXCJzZXRcIiBwYXRoIGNhbiBoYXZlIHR3byBwb3NzaWJsZSBlbnRyeSBwb2ludHNcclxuXHRcdC8vIHJldHVybiB0aGUgZXhwZWN0ZWQgZGF0YSBiYXNlZCBvbiB3aGljaCBwYXRoIHdhcyB0YWtlblsqXVxyXG5cdFx0cmV0dXJuIHZhbHVlICE9PSB1bmRlZmluZWQgPyB2YWx1ZSA6IGtleTtcclxuXHR9LFxyXG5cdHJlbW92ZTogZnVuY3Rpb24oIG93bmVyLCBrZXkgKSB7XHJcblx0XHR2YXIgaSwgbmFtZSwgY2FtZWwsXHJcblx0XHRcdHVubG9jayA9IHRoaXMua2V5KCBvd25lciApLFxyXG5cdFx0XHRjYWNoZSA9IHRoaXMuY2FjaGVbIHVubG9jayBdO1xyXG5cclxuXHRcdGlmICgga2V5ID09PSB1bmRlZmluZWQgKSB7XHJcblx0XHRcdHRoaXMuY2FjaGVbIHVubG9jayBdID0ge307XHJcblxyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0Ly8gU3VwcG9ydCBhcnJheSBvciBzcGFjZSBzZXBhcmF0ZWQgc3RyaW5nIG9mIGtleXNcclxuXHRcdFx0aWYgKCBqUXVlcnkuaXNBcnJheSgga2V5ICkgKSB7XHJcblx0XHRcdFx0Ly8gSWYgXCJuYW1lXCIgaXMgYW4gYXJyYXkgb2Yga2V5cy4uLlxyXG5cdFx0XHRcdC8vIFdoZW4gZGF0YSBpcyBpbml0aWFsbHkgY3JlYXRlZCwgdmlhIChcImtleVwiLCBcInZhbFwiKSBzaWduYXR1cmUsXHJcblx0XHRcdFx0Ly8ga2V5cyB3aWxsIGJlIGNvbnZlcnRlZCB0byBjYW1lbENhc2UuXHJcblx0XHRcdFx0Ly8gU2luY2UgdGhlcmUgaXMgbm8gd2F5IHRvIHRlbGwgX2hvd18gYSBrZXkgd2FzIGFkZGVkLCByZW1vdmVcclxuXHRcdFx0XHQvLyBib3RoIHBsYWluIGtleSBhbmQgY2FtZWxDYXNlIGtleS4gIzEyNzg2XHJcblx0XHRcdFx0Ly8gVGhpcyB3aWxsIG9ubHkgcGVuYWxpemUgdGhlIGFycmF5IGFyZ3VtZW50IHBhdGguXHJcblx0XHRcdFx0bmFtZSA9IGtleS5jb25jYXQoIGtleS5tYXAoIGpRdWVyeS5jYW1lbENhc2UgKSApO1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdGNhbWVsID0galF1ZXJ5LmNhbWVsQ2FzZSgga2V5ICk7XHJcblx0XHRcdFx0Ly8gVHJ5IHRoZSBzdHJpbmcgYXMgYSBrZXkgYmVmb3JlIGFueSBtYW5pcHVsYXRpb25cclxuXHRcdFx0XHRpZiAoIGtleSBpbiBjYWNoZSApIHtcclxuXHRcdFx0XHRcdG5hbWUgPSBbIGtleSwgY2FtZWwgXTtcclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0Ly8gSWYgYSBrZXkgd2l0aCB0aGUgc3BhY2VzIGV4aXN0cywgdXNlIGl0LlxyXG5cdFx0XHRcdFx0Ly8gT3RoZXJ3aXNlLCBjcmVhdGUgYW4gYXJyYXkgYnkgbWF0Y2hpbmcgbm9uLXdoaXRlc3BhY2VcclxuXHRcdFx0XHRcdG5hbWUgPSBjYW1lbDtcclxuXHRcdFx0XHRcdG5hbWUgPSBuYW1lIGluIGNhY2hlID9cclxuXHRcdFx0XHRcdFx0WyBuYW1lIF0gOiAoIG5hbWUubWF0Y2goIHJub3R3aGl0ZSApIHx8IFtdICk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRpID0gbmFtZS5sZW5ndGg7XHJcblx0XHRcdHdoaWxlICggaS0tICkge1xyXG5cdFx0XHRcdGRlbGV0ZSBjYWNoZVsgbmFtZVsgaSBdIF07XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9LFxyXG5cdGhhc0RhdGE6IGZ1bmN0aW9uKCBvd25lciApIHtcclxuXHRcdHJldHVybiAhalF1ZXJ5LmlzRW1wdHlPYmplY3QoXHJcblx0XHRcdHRoaXMuY2FjaGVbIG93bmVyWyB0aGlzLmV4cGFuZG8gXSBdIHx8IHt9XHJcblx0XHQpO1xyXG5cdH0sXHJcblx0ZGlzY2FyZDogZnVuY3Rpb24oIG93bmVyICkge1xyXG5cdFx0aWYgKCBvd25lclsgdGhpcy5leHBhbmRvIF0gKSB7XHJcblx0XHRcdGRlbGV0ZSB0aGlzLmNhY2hlWyBvd25lclsgdGhpcy5leHBhbmRvIF0gXTtcclxuXHRcdH1cclxuXHR9XHJcbn07XHJcbnZhciBkYXRhX3ByaXYgPSBuZXcgRGF0YSgpO1xyXG5cclxudmFyIGRhdGFfdXNlciA9IG5ldyBEYXRhKCk7XHJcblxyXG5cclxuXHJcbi8vXHRJbXBsZW1lbnRhdGlvbiBTdW1tYXJ5XHJcbi8vXHJcbi8vXHQxLiBFbmZvcmNlIEFQSSBzdXJmYWNlIGFuZCBzZW1hbnRpYyBjb21wYXRpYmlsaXR5IHdpdGggMS45LnggYnJhbmNoXHJcbi8vXHQyLiBJbXByb3ZlIHRoZSBtb2R1bGUncyBtYWludGFpbmFiaWxpdHkgYnkgcmVkdWNpbmcgdGhlIHN0b3JhZ2VcclxuLy9cdFx0cGF0aHMgdG8gYSBzaW5nbGUgbWVjaGFuaXNtLlxyXG4vL1x0My4gVXNlIHRoZSBzYW1lIHNpbmdsZSBtZWNoYW5pc20gdG8gc3VwcG9ydCBcInByaXZhdGVcIiBhbmQgXCJ1c2VyXCIgZGF0YS5cclxuLy9cdDQuIF9OZXZlcl8gZXhwb3NlIFwicHJpdmF0ZVwiIGRhdGEgdG8gdXNlciBjb2RlIChUT0RPOiBEcm9wIF9kYXRhLCBfcmVtb3ZlRGF0YSlcclxuLy9cdDUuIEF2b2lkIGV4cG9zaW5nIGltcGxlbWVudGF0aW9uIGRldGFpbHMgb24gdXNlciBvYmplY3RzIChlZy4gZXhwYW5kbyBwcm9wZXJ0aWVzKVxyXG4vL1x0Ni4gUHJvdmlkZSBhIGNsZWFyIHBhdGggZm9yIGltcGxlbWVudGF0aW9uIHVwZ3JhZGUgdG8gV2Vha01hcCBpbiAyMDE0XHJcblxyXG52YXIgcmJyYWNlID0gL14oPzpcXHtbXFx3XFxXXSpcXH18XFxbW1xcd1xcV10qXFxdKSQvLFxyXG5cdHJtdWx0aURhc2ggPSAvKFtBLVpdKS9nO1xyXG5cclxuZnVuY3Rpb24gZGF0YUF0dHIoIGVsZW0sIGtleSwgZGF0YSApIHtcclxuXHR2YXIgbmFtZTtcclxuXHJcblx0Ly8gSWYgbm90aGluZyB3YXMgZm91bmQgaW50ZXJuYWxseSwgdHJ5IHRvIGZldGNoIGFueVxyXG5cdC8vIGRhdGEgZnJvbSB0aGUgSFRNTDUgZGF0YS0qIGF0dHJpYnV0ZVxyXG5cdGlmICggZGF0YSA9PT0gdW5kZWZpbmVkICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XHJcblx0XHRuYW1lID0gXCJkYXRhLVwiICsga2V5LnJlcGxhY2UoIHJtdWx0aURhc2gsIFwiLSQxXCIgKS50b0xvd2VyQ2FzZSgpO1xyXG5cdFx0ZGF0YSA9IGVsZW0uZ2V0QXR0cmlidXRlKCBuYW1lICk7XHJcblxyXG5cdFx0aWYgKCB0eXBlb2YgZGF0YSA9PT0gXCJzdHJpbmdcIiApIHtcclxuXHRcdFx0dHJ5IHtcclxuXHRcdFx0XHRkYXRhID0gZGF0YSA9PT0gXCJ0cnVlXCIgPyB0cnVlIDpcclxuXHRcdFx0XHRcdGRhdGEgPT09IFwiZmFsc2VcIiA/IGZhbHNlIDpcclxuXHRcdFx0XHRcdGRhdGEgPT09IFwibnVsbFwiID8gbnVsbCA6XHJcblx0XHRcdFx0XHQvLyBPbmx5IGNvbnZlcnQgdG8gYSBudW1iZXIgaWYgaXQgZG9lc24ndCBjaGFuZ2UgdGhlIHN0cmluZ1xyXG5cdFx0XHRcdFx0K2RhdGEgKyBcIlwiID09PSBkYXRhID8gK2RhdGEgOlxyXG5cdFx0XHRcdFx0cmJyYWNlLnRlc3QoIGRhdGEgKSA/IGpRdWVyeS5wYXJzZUpTT04oIGRhdGEgKSA6XHJcblx0XHRcdFx0XHRkYXRhO1xyXG5cdFx0XHR9IGNhdGNoKCBlICkge31cclxuXHJcblx0XHRcdC8vIE1ha2Ugc3VyZSB3ZSBzZXQgdGhlIGRhdGEgc28gaXQgaXNuJ3QgY2hhbmdlZCBsYXRlclxyXG5cdFx0XHRkYXRhX3VzZXIuc2V0KCBlbGVtLCBrZXksIGRhdGEgKTtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdGRhdGEgPSB1bmRlZmluZWQ7XHJcblx0XHR9XHJcblx0fVxyXG5cdHJldHVybiBkYXRhO1xyXG59XHJcblxyXG5qUXVlcnkuZXh0ZW5kKHtcclxuXHRoYXNEYXRhOiBmdW5jdGlvbiggZWxlbSApIHtcclxuXHRcdHJldHVybiBkYXRhX3VzZXIuaGFzRGF0YSggZWxlbSApIHx8IGRhdGFfcHJpdi5oYXNEYXRhKCBlbGVtICk7XHJcblx0fSxcclxuXHJcblx0ZGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGRhdGEgKSB7XHJcblx0XHRyZXR1cm4gZGF0YV91c2VyLmFjY2VzcyggZWxlbSwgbmFtZSwgZGF0YSApO1xyXG5cdH0sXHJcblxyXG5cdHJlbW92ZURhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lICkge1xyXG5cdFx0ZGF0YV91c2VyLnJlbW92ZSggZWxlbSwgbmFtZSApO1xyXG5cdH0sXHJcblxyXG5cdC8vIFRPRE86IE5vdyB0aGF0IGFsbCBjYWxscyB0byBfZGF0YSBhbmQgX3JlbW92ZURhdGEgaGF2ZSBiZWVuIHJlcGxhY2VkXHJcblx0Ly8gd2l0aCBkaXJlY3QgY2FsbHMgdG8gZGF0YV9wcml2IG1ldGhvZHMsIHRoZXNlIGNhbiBiZSBkZXByZWNhdGVkLlxyXG5cdF9kYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgZGF0YSApIHtcclxuXHRcdHJldHVybiBkYXRhX3ByaXYuYWNjZXNzKCBlbGVtLCBuYW1lLCBkYXRhICk7XHJcblx0fSxcclxuXHJcblx0X3JlbW92ZURhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lICkge1xyXG5cdFx0ZGF0YV9wcml2LnJlbW92ZSggZWxlbSwgbmFtZSApO1xyXG5cdH1cclxufSk7XHJcblxyXG5qUXVlcnkuZm4uZXh0ZW5kKHtcclxuXHRkYXRhOiBmdW5jdGlvbigga2V5LCB2YWx1ZSApIHtcclxuXHRcdHZhciBpLCBuYW1lLCBkYXRhLFxyXG5cdFx0XHRlbGVtID0gdGhpc1sgMCBdLFxyXG5cdFx0XHRhdHRycyA9IGVsZW0gJiYgZWxlbS5hdHRyaWJ1dGVzO1xyXG5cclxuXHRcdC8vIEdldHMgYWxsIHZhbHVlc1xyXG5cdFx0aWYgKCBrZXkgPT09IHVuZGVmaW5lZCApIHtcclxuXHRcdFx0aWYgKCB0aGlzLmxlbmd0aCApIHtcclxuXHRcdFx0XHRkYXRhID0gZGF0YV91c2VyLmdldCggZWxlbSApO1xyXG5cclxuXHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgJiYgIWRhdGFfcHJpdi5nZXQoIGVsZW0sIFwiaGFzRGF0YUF0dHJzXCIgKSApIHtcclxuXHRcdFx0XHRcdGkgPSBhdHRycy5sZW5ndGg7XHJcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcclxuXHJcblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFMTErXHJcblx0XHRcdFx0XHRcdC8vIFRoZSBhdHRycyBlbGVtZW50cyBjYW4gYmUgbnVsbCAoIzE0ODk0KVxyXG5cdFx0XHRcdFx0XHRpZiAoIGF0dHJzWyBpIF0gKSB7XHJcblx0XHRcdFx0XHRcdFx0bmFtZSA9IGF0dHJzWyBpIF0ubmFtZTtcclxuXHRcdFx0XHRcdFx0XHRpZiAoIG5hbWUuaW5kZXhPZiggXCJkYXRhLVwiICkgPT09IDAgKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRuYW1lID0galF1ZXJ5LmNhbWVsQ2FzZSggbmFtZS5zbGljZSg1KSApO1xyXG5cdFx0XHRcdFx0XHRcdFx0ZGF0YUF0dHIoIGVsZW0sIG5hbWUsIGRhdGFbIG5hbWUgXSApO1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0ZGF0YV9wcml2LnNldCggZWxlbSwgXCJoYXNEYXRhQXR0cnNcIiwgdHJ1ZSApO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0cmV0dXJuIGRhdGE7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gU2V0cyBtdWx0aXBsZSB2YWx1ZXNcclxuXHRcdGlmICggdHlwZW9mIGtleSA9PT0gXCJvYmplY3RcIiApIHtcclxuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRkYXRhX3VzZXIuc2V0KCB0aGlzLCBrZXkgKTtcclxuXHRcdFx0fSk7XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIHZhbHVlICkge1xyXG5cdFx0XHR2YXIgZGF0YSxcclxuXHRcdFx0XHRjYW1lbEtleSA9IGpRdWVyeS5jYW1lbENhc2UoIGtleSApO1xyXG5cclxuXHRcdFx0Ly8gVGhlIGNhbGxpbmcgalF1ZXJ5IG9iamVjdCAoZWxlbWVudCBtYXRjaGVzKSBpcyBub3QgZW1wdHlcclxuXHRcdFx0Ly8gKGFuZCB0aGVyZWZvcmUgaGFzIGFuIGVsZW1lbnQgYXBwZWFycyBhdCB0aGlzWyAwIF0pIGFuZCB0aGVcclxuXHRcdFx0Ly8gYHZhbHVlYCBwYXJhbWV0ZXIgd2FzIG5vdCB1bmRlZmluZWQuIEFuIGVtcHR5IGpRdWVyeSBvYmplY3RcclxuXHRcdFx0Ly8gd2lsbCByZXN1bHQgaW4gYHVuZGVmaW5lZGAgZm9yIGVsZW0gPSB0aGlzWyAwIF0gd2hpY2ggd2lsbFxyXG5cdFx0XHQvLyB0aHJvdyBhbiBleGNlcHRpb24gaWYgYW4gYXR0ZW1wdCB0byByZWFkIGEgZGF0YSBjYWNoZSBpcyBtYWRlLlxyXG5cdFx0XHRpZiAoIGVsZW0gJiYgdmFsdWUgPT09IHVuZGVmaW5lZCApIHtcclxuXHRcdFx0XHQvLyBBdHRlbXB0IHRvIGdldCBkYXRhIGZyb20gdGhlIGNhY2hlXHJcblx0XHRcdFx0Ly8gd2l0aCB0aGUga2V5IGFzLWlzXHJcblx0XHRcdFx0ZGF0YSA9IGRhdGFfdXNlci5nZXQoIGVsZW0sIGtleSApO1xyXG5cdFx0XHRcdGlmICggZGF0YSAhPT0gdW5kZWZpbmVkICkge1xyXG5cdFx0XHRcdFx0cmV0dXJuIGRhdGE7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHQvLyBBdHRlbXB0IHRvIGdldCBkYXRhIGZyb20gdGhlIGNhY2hlXHJcblx0XHRcdFx0Ly8gd2l0aCB0aGUga2V5IGNhbWVsaXplZFxyXG5cdFx0XHRcdGRhdGEgPSBkYXRhX3VzZXIuZ2V0KCBlbGVtLCBjYW1lbEtleSApO1xyXG5cdFx0XHRcdGlmICggZGF0YSAhPT0gdW5kZWZpbmVkICkge1xyXG5cdFx0XHRcdFx0cmV0dXJuIGRhdGE7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHQvLyBBdHRlbXB0IHRvIFwiZGlzY292ZXJcIiB0aGUgZGF0YSBpblxyXG5cdFx0XHRcdC8vIEhUTUw1IGN1c3RvbSBkYXRhLSogYXR0cnNcclxuXHRcdFx0XHRkYXRhID0gZGF0YUF0dHIoIGVsZW0sIGNhbWVsS2V5LCB1bmRlZmluZWQgKTtcclxuXHRcdFx0XHRpZiAoIGRhdGEgIT09IHVuZGVmaW5lZCApIHtcclxuXHRcdFx0XHRcdHJldHVybiBkYXRhO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0Ly8gV2UgdHJpZWQgcmVhbGx5IGhhcmQsIGJ1dCB0aGUgZGF0YSBkb2Vzbid0IGV4aXN0LlxyXG5cdFx0XHRcdHJldHVybjtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gU2V0IHRoZSBkYXRhLi4uXHJcblx0XHRcdHRoaXMuZWFjaChmdW5jdGlvbigpIHtcclxuXHRcdFx0XHQvLyBGaXJzdCwgYXR0ZW1wdCB0byBzdG9yZSBhIGNvcHkgb3IgcmVmZXJlbmNlIG9mIGFueVxyXG5cdFx0XHRcdC8vIGRhdGEgdGhhdCBtaWdodCd2ZSBiZWVuIHN0b3JlIHdpdGggYSBjYW1lbENhc2VkIGtleS5cclxuXHRcdFx0XHR2YXIgZGF0YSA9IGRhdGFfdXNlci5nZXQoIHRoaXMsIGNhbWVsS2V5ICk7XHJcblxyXG5cdFx0XHRcdC8vIEZvciBIVE1MNSBkYXRhLSogYXR0cmlidXRlIGludGVyb3AsIHdlIGhhdmUgdG9cclxuXHRcdFx0XHQvLyBzdG9yZSBwcm9wZXJ0eSBuYW1lcyB3aXRoIGRhc2hlcyBpbiBhIGNhbWVsQ2FzZSBmb3JtLlxyXG5cdFx0XHRcdC8vIFRoaXMgbWlnaHQgbm90IGFwcGx5IHRvIGFsbCBwcm9wZXJ0aWVzLi4uKlxyXG5cdFx0XHRcdGRhdGFfdXNlci5zZXQoIHRoaXMsIGNhbWVsS2V5LCB2YWx1ZSApO1xyXG5cclxuXHRcdFx0XHQvLyAqLi4uIEluIHRoZSBjYXNlIG9mIHByb3BlcnRpZXMgdGhhdCBtaWdodCBfYWN0dWFsbHlfXHJcblx0XHRcdFx0Ly8gaGF2ZSBkYXNoZXMsIHdlIG5lZWQgdG8gYWxzbyBzdG9yZSBhIGNvcHkgb2YgdGhhdFxyXG5cdFx0XHRcdC8vIHVuY2hhbmdlZCBwcm9wZXJ0eS5cclxuXHRcdFx0XHRpZiAoIGtleS5pbmRleE9mKFwiLVwiKSAhPT0gLTEgJiYgZGF0YSAhPT0gdW5kZWZpbmVkICkge1xyXG5cdFx0XHRcdFx0ZGF0YV91c2VyLnNldCggdGhpcywga2V5LCB2YWx1ZSApO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSk7XHJcblx0XHR9LCBudWxsLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEsIG51bGwsIHRydWUgKTtcclxuXHR9LFxyXG5cclxuXHRyZW1vdmVEYXRhOiBmdW5jdGlvbigga2V5ICkge1xyXG5cdFx0cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpIHtcclxuXHRcdFx0ZGF0YV91c2VyLnJlbW92ZSggdGhpcywga2V5ICk7XHJcblx0XHR9KTtcclxuXHR9XHJcbn0pO1xyXG5cclxuXHJcbmpRdWVyeS5leHRlbmQoe1xyXG5cdHF1ZXVlOiBmdW5jdGlvbiggZWxlbSwgdHlwZSwgZGF0YSApIHtcclxuXHRcdHZhciBxdWV1ZTtcclxuXHJcblx0XHRpZiAoIGVsZW0gKSB7XHJcblx0XHRcdHR5cGUgPSAoIHR5cGUgfHwgXCJmeFwiICkgKyBcInF1ZXVlXCI7XHJcblx0XHRcdHF1ZXVlID0gZGF0YV9wcml2LmdldCggZWxlbSwgdHlwZSApO1xyXG5cclxuXHRcdFx0Ly8gU3BlZWQgdXAgZGVxdWV1ZSBieSBnZXR0aW5nIG91dCBxdWlja2x5IGlmIHRoaXMgaXMganVzdCBhIGxvb2t1cFxyXG5cdFx0XHRpZiAoIGRhdGEgKSB7XHJcblx0XHRcdFx0aWYgKCAhcXVldWUgfHwgalF1ZXJ5LmlzQXJyYXkoIGRhdGEgKSApIHtcclxuXHRcdFx0XHRcdHF1ZXVlID0gZGF0YV9wcml2LmFjY2VzcyggZWxlbSwgdHlwZSwgalF1ZXJ5Lm1ha2VBcnJheShkYXRhKSApO1xyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRxdWV1ZS5wdXNoKCBkYXRhICk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiBxdWV1ZSB8fCBbXTtcclxuXHRcdH1cclxuXHR9LFxyXG5cclxuXHRkZXF1ZXVlOiBmdW5jdGlvbiggZWxlbSwgdHlwZSApIHtcclxuXHRcdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcclxuXHJcblx0XHR2YXIgcXVldWUgPSBqUXVlcnkucXVldWUoIGVsZW0sIHR5cGUgKSxcclxuXHRcdFx0c3RhcnRMZW5ndGggPSBxdWV1ZS5sZW5ndGgsXHJcblx0XHRcdGZuID0gcXVldWUuc2hpZnQoKSxcclxuXHRcdFx0aG9va3MgPSBqUXVlcnkuX3F1ZXVlSG9va3MoIGVsZW0sIHR5cGUgKSxcclxuXHRcdFx0bmV4dCA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdGpRdWVyeS5kZXF1ZXVlKCBlbGVtLCB0eXBlICk7XHJcblx0XHRcdH07XHJcblxyXG5cdFx0Ly8gSWYgdGhlIGZ4IHF1ZXVlIGlzIGRlcXVldWVkLCBhbHdheXMgcmVtb3ZlIHRoZSBwcm9ncmVzcyBzZW50aW5lbFxyXG5cdFx0aWYgKCBmbiA9PT0gXCJpbnByb2dyZXNzXCIgKSB7XHJcblx0XHRcdGZuID0gcXVldWUuc2hpZnQoKTtcclxuXHRcdFx0c3RhcnRMZW5ndGgtLTtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAoIGZuICkge1xyXG5cclxuXHRcdFx0Ly8gQWRkIGEgcHJvZ3Jlc3Mgc2VudGluZWwgdG8gcHJldmVudCB0aGUgZnggcXVldWUgZnJvbSBiZWluZ1xyXG5cdFx0XHQvLyBhdXRvbWF0aWNhbGx5IGRlcXVldWVkXHJcblx0XHRcdGlmICggdHlwZSA9PT0gXCJmeFwiICkge1xyXG5cdFx0XHRcdHF1ZXVlLnVuc2hpZnQoIFwiaW5wcm9ncmVzc1wiICk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIENsZWFyIHVwIHRoZSBsYXN0IHF1ZXVlIHN0b3AgZnVuY3Rpb25cclxuXHRcdFx0ZGVsZXRlIGhvb2tzLnN0b3A7XHJcblx0XHRcdGZuLmNhbGwoIGVsZW0sIG5leHQsIGhvb2tzICk7XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKCAhc3RhcnRMZW5ndGggJiYgaG9va3MgKSB7XHJcblx0XHRcdGhvb2tzLmVtcHR5LmZpcmUoKTtcclxuXHRcdH1cclxuXHR9LFxyXG5cclxuXHQvLyBOb3QgcHVibGljIC0gZ2VuZXJhdGUgYSBxdWV1ZUhvb2tzIG9iamVjdCwgb3IgcmV0dXJuIHRoZSBjdXJyZW50IG9uZVxyXG5cdF9xdWV1ZUhvb2tzOiBmdW5jdGlvbiggZWxlbSwgdHlwZSApIHtcclxuXHRcdHZhciBrZXkgPSB0eXBlICsgXCJxdWV1ZUhvb2tzXCI7XHJcblx0XHRyZXR1cm4gZGF0YV9wcml2LmdldCggZWxlbSwga2V5ICkgfHwgZGF0YV9wcml2LmFjY2VzcyggZWxlbSwga2V5LCB7XHJcblx0XHRcdGVtcHR5OiBqUXVlcnkuQ2FsbGJhY2tzKFwib25jZSBtZW1vcnlcIikuYWRkKGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdGRhdGFfcHJpdi5yZW1vdmUoIGVsZW0sIFsgdHlwZSArIFwicXVldWVcIiwga2V5IF0gKTtcclxuXHRcdFx0fSlcclxuXHRcdH0pO1xyXG5cdH1cclxufSk7XHJcblxyXG5qUXVlcnkuZm4uZXh0ZW5kKHtcclxuXHRxdWV1ZTogZnVuY3Rpb24oIHR5cGUsIGRhdGEgKSB7XHJcblx0XHR2YXIgc2V0dGVyID0gMjtcclxuXHJcblx0XHRpZiAoIHR5cGVvZiB0eXBlICE9PSBcInN0cmluZ1wiICkge1xyXG5cdFx0XHRkYXRhID0gdHlwZTtcclxuXHRcdFx0dHlwZSA9IFwiZnhcIjtcclxuXHRcdFx0c2V0dGVyLS07XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKCBhcmd1bWVudHMubGVuZ3RoIDwgc2V0dGVyICkge1xyXG5cdFx0XHRyZXR1cm4galF1ZXJ5LnF1ZXVlKCB0aGlzWzBdLCB0eXBlICk7XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIGRhdGEgPT09IHVuZGVmaW5lZCA/XHJcblx0XHRcdHRoaXMgOlxyXG5cdFx0XHR0aGlzLmVhY2goZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0dmFyIHF1ZXVlID0galF1ZXJ5LnF1ZXVlKCB0aGlzLCB0eXBlLCBkYXRhICk7XHJcblxyXG5cdFx0XHRcdC8vIEVuc3VyZSBhIGhvb2tzIGZvciB0aGlzIHF1ZXVlXHJcblx0XHRcdFx0alF1ZXJ5Ll9xdWV1ZUhvb2tzKCB0aGlzLCB0eXBlICk7XHJcblxyXG5cdFx0XHRcdGlmICggdHlwZSA9PT0gXCJmeFwiICYmIHF1ZXVlWzBdICE9PSBcImlucHJvZ3Jlc3NcIiApIHtcclxuXHRcdFx0XHRcdGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCB0eXBlICk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9KTtcclxuXHR9LFxyXG5cdGRlcXVldWU6IGZ1bmN0aW9uKCB0eXBlICkge1xyXG5cdFx0cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpIHtcclxuXHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIHR5cGUgKTtcclxuXHRcdH0pO1xyXG5cdH0sXHJcblx0Y2xlYXJRdWV1ZTogZnVuY3Rpb24oIHR5cGUgKSB7XHJcblx0XHRyZXR1cm4gdGhpcy5xdWV1ZSggdHlwZSB8fCBcImZ4XCIsIFtdICk7XHJcblx0fSxcclxuXHQvLyBHZXQgYSBwcm9taXNlIHJlc29sdmVkIHdoZW4gcXVldWVzIG9mIGEgY2VydGFpbiB0eXBlXHJcblx0Ly8gYXJlIGVtcHRpZWQgKGZ4IGlzIHRoZSB0eXBlIGJ5IGRlZmF1bHQpXHJcblx0cHJvbWlzZTogZnVuY3Rpb24oIHR5cGUsIG9iaiApIHtcclxuXHRcdHZhciB0bXAsXHJcblx0XHRcdGNvdW50ID0gMSxcclxuXHRcdFx0ZGVmZXIgPSBqUXVlcnkuRGVmZXJyZWQoKSxcclxuXHRcdFx0ZWxlbWVudHMgPSB0aGlzLFxyXG5cdFx0XHRpID0gdGhpcy5sZW5ndGgsXHJcblx0XHRcdHJlc29sdmUgPSBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRpZiAoICEoIC0tY291bnQgKSApIHtcclxuXHRcdFx0XHRcdGRlZmVyLnJlc29sdmVXaXRoKCBlbGVtZW50cywgWyBlbGVtZW50cyBdICk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9O1xyXG5cclxuXHRcdGlmICggdHlwZW9mIHR5cGUgIT09IFwic3RyaW5nXCIgKSB7XHJcblx0XHRcdG9iaiA9IHR5cGU7XHJcblx0XHRcdHR5cGUgPSB1bmRlZmluZWQ7XHJcblx0XHR9XHJcblx0XHR0eXBlID0gdHlwZSB8fCBcImZ4XCI7XHJcblxyXG5cdFx0d2hpbGUgKCBpLS0gKSB7XHJcblx0XHRcdHRtcCA9IGRhdGFfcHJpdi5nZXQoIGVsZW1lbnRzWyBpIF0sIHR5cGUgKyBcInF1ZXVlSG9va3NcIiApO1xyXG5cdFx0XHRpZiAoIHRtcCAmJiB0bXAuZW1wdHkgKSB7XHJcblx0XHRcdFx0Y291bnQrKztcclxuXHRcdFx0XHR0bXAuZW1wdHkuYWRkKCByZXNvbHZlICk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHRcdHJlc29sdmUoKTtcclxuXHRcdHJldHVybiBkZWZlci5wcm9taXNlKCBvYmogKTtcclxuXHR9XHJcbn0pO1xyXG52YXIgcG51bSA9ICgvWystXT8oPzpcXGQqXFwufClcXGQrKD86W2VFXVsrLV0/XFxkK3wpLykuc291cmNlO1xyXG5cclxudmFyIGNzc0V4cGFuZCA9IFsgXCJUb3BcIiwgXCJSaWdodFwiLCBcIkJvdHRvbVwiLCBcIkxlZnRcIiBdO1xyXG5cclxudmFyIGlzSGlkZGVuID0gZnVuY3Rpb24oIGVsZW0sIGVsICkge1xyXG5cdFx0Ly8gaXNIaWRkZW4gbWlnaHQgYmUgY2FsbGVkIGZyb20galF1ZXJ5I2ZpbHRlciBmdW5jdGlvbjtcclxuXHRcdC8vIGluIHRoYXQgY2FzZSwgZWxlbWVudCB3aWxsIGJlIHNlY29uZCBhcmd1bWVudFxyXG5cdFx0ZWxlbSA9IGVsIHx8IGVsZW07XHJcblx0XHRyZXR1cm4galF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKSA9PT0gXCJub25lXCIgfHwgIWpRdWVyeS5jb250YWlucyggZWxlbS5vd25lckRvY3VtZW50LCBlbGVtICk7XHJcblx0fTtcclxuXHJcbnZhciByY2hlY2thYmxlVHlwZSA9ICgvXig/OmNoZWNrYm94fHJhZGlvKSQvaSk7XHJcblxyXG5cclxuXHJcbihmdW5jdGlvbigpIHtcclxuXHR2YXIgZnJhZ21lbnQgPSBkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCksXHJcblx0XHRkaXYgPSBmcmFnbWVudC5hcHBlbmRDaGlsZCggZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApICksXHJcblx0XHRpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiaW5wdXRcIiApO1xyXG5cclxuXHQvLyBTdXBwb3J0OiBTYWZhcmk8PTUuMVxyXG5cdC8vIENoZWNrIHN0YXRlIGxvc3QgaWYgdGhlIG5hbWUgaXMgc2V0ICgjMTEyMTcpXHJcblx0Ly8gU3VwcG9ydDogV2luZG93cyBXZWIgQXBwcyAoV1dBKVxyXG5cdC8vIGBuYW1lYCBhbmQgYHR5cGVgIG11c3QgdXNlIC5zZXRBdHRyaWJ1dGUgZm9yIFdXQSAoIzE0OTAxKVxyXG5cdGlucHV0LnNldEF0dHJpYnV0ZSggXCJ0eXBlXCIsIFwicmFkaW9cIiApO1xyXG5cdGlucHV0LnNldEF0dHJpYnV0ZSggXCJjaGVja2VkXCIsIFwiY2hlY2tlZFwiICk7XHJcblx0aW5wdXQuc2V0QXR0cmlidXRlKCBcIm5hbWVcIiwgXCJ0XCIgKTtcclxuXHJcblx0ZGl2LmFwcGVuZENoaWxkKCBpbnB1dCApO1xyXG5cclxuXHQvLyBTdXBwb3J0OiBTYWZhcmk8PTUuMSwgQW5kcm9pZDw0LjJcclxuXHQvLyBPbGRlciBXZWJLaXQgZG9lc24ndCBjbG9uZSBjaGVja2VkIHN0YXRlIGNvcnJlY3RseSBpbiBmcmFnbWVudHNcclxuXHRzdXBwb3J0LmNoZWNrQ2xvbmUgPSBkaXYuY2xvbmVOb2RlKCB0cnVlICkuY2xvbmVOb2RlKCB0cnVlICkubGFzdENoaWxkLmNoZWNrZWQ7XHJcblxyXG5cdC8vIFN1cHBvcnQ6IElFPD0xMStcclxuXHQvLyBNYWtlIHN1cmUgdGV4dGFyZWEgKGFuZCBjaGVja2JveCkgZGVmYXVsdFZhbHVlIGlzIHByb3Blcmx5IGNsb25lZFxyXG5cdGRpdi5pbm5lckhUTUwgPSBcIjx0ZXh0YXJlYT54PC90ZXh0YXJlYT5cIjtcclxuXHRzdXBwb3J0Lm5vQ2xvbmVDaGVja2VkID0gISFkaXYuY2xvbmVOb2RlKCB0cnVlICkubGFzdENoaWxkLmRlZmF1bHRWYWx1ZTtcclxufSkoKTtcclxudmFyIHN0cnVuZGVmaW5lZCA9IHR5cGVvZiB1bmRlZmluZWQ7XHJcblxyXG5cclxuXHJcbnN1cHBvcnQuZm9jdXNpbkJ1YmJsZXMgPSBcIm9uZm9jdXNpblwiIGluIHdpbmRvdztcclxuXHJcblxyXG52YXJcclxuXHRya2V5RXZlbnQgPSAvXmtleS8sXHJcblx0cm1vdXNlRXZlbnQgPSAvXig/Om1vdXNlfHBvaW50ZXJ8Y29udGV4dG1lbnUpfGNsaWNrLyxcclxuXHRyZm9jdXNNb3JwaCA9IC9eKD86Zm9jdXNpbmZvY3VzfGZvY3Vzb3V0Ymx1cikkLyxcclxuXHRydHlwZW5hbWVzcGFjZSA9IC9eKFteLl0qKSg/OlxcLiguKyl8KSQvO1xyXG5cclxuZnVuY3Rpb24gcmV0dXJuVHJ1ZSgpIHtcclxuXHRyZXR1cm4gdHJ1ZTtcclxufVxyXG5cclxuZnVuY3Rpb24gcmV0dXJuRmFsc2UoKSB7XHJcblx0cmV0dXJuIGZhbHNlO1xyXG59XHJcblxyXG5mdW5jdGlvbiBzYWZlQWN0aXZlRWxlbWVudCgpIHtcclxuXHR0cnkge1xyXG5cdFx0cmV0dXJuIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQ7XHJcblx0fSBjYXRjaCAoIGVyciApIHsgfVxyXG59XHJcblxyXG4vKlxyXG4gKiBIZWxwZXIgZnVuY3Rpb25zIGZvciBtYW5hZ2luZyBldmVudHMgLS0gbm90IHBhcnQgb2YgdGhlIHB1YmxpYyBpbnRlcmZhY2UuXHJcbiAqIFByb3BzIHRvIERlYW4gRWR3YXJkcycgYWRkRXZlbnQgbGlicmFyeSBmb3IgbWFueSBvZiB0aGUgaWRlYXMuXHJcbiAqL1xyXG5qUXVlcnkuZXZlbnQgPSB7XHJcblxyXG5cdGdsb2JhbDoge30sXHJcblxyXG5cdGFkZDogZnVuY3Rpb24oIGVsZW0sIHR5cGVzLCBoYW5kbGVyLCBkYXRhLCBzZWxlY3RvciApIHtcclxuXHJcblx0XHR2YXIgaGFuZGxlT2JqSW4sIGV2ZW50SGFuZGxlLCB0bXAsXHJcblx0XHRcdGV2ZW50cywgdCwgaGFuZGxlT2JqLFxyXG5cdFx0XHRzcGVjaWFsLCBoYW5kbGVycywgdHlwZSwgbmFtZXNwYWNlcywgb3JpZ1R5cGUsXHJcblx0XHRcdGVsZW1EYXRhID0gZGF0YV9wcml2LmdldCggZWxlbSApO1xyXG5cclxuXHRcdC8vIERvbid0IGF0dGFjaCBldmVudHMgdG8gbm9EYXRhIG9yIHRleHQvY29tbWVudCBub2RlcyAoYnV0IGFsbG93IHBsYWluIG9iamVjdHMpXHJcblx0XHRpZiAoICFlbGVtRGF0YSApIHtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIENhbGxlciBjYW4gcGFzcyBpbiBhbiBvYmplY3Qgb2YgY3VzdG9tIGRhdGEgaW4gbGlldSBvZiB0aGUgaGFuZGxlclxyXG5cdFx0aWYgKCBoYW5kbGVyLmhhbmRsZXIgKSB7XHJcblx0XHRcdGhhbmRsZU9iakluID0gaGFuZGxlcjtcclxuXHRcdFx0aGFuZGxlciA9IGhhbmRsZU9iakluLmhhbmRsZXI7XHJcblx0XHRcdHNlbGVjdG9yID0gaGFuZGxlT2JqSW4uc2VsZWN0b3I7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gTWFrZSBzdXJlIHRoYXQgdGhlIGhhbmRsZXIgaGFzIGEgdW5pcXVlIElELCB1c2VkIHRvIGZpbmQvcmVtb3ZlIGl0IGxhdGVyXHJcblx0XHRpZiAoICFoYW5kbGVyLmd1aWQgKSB7XHJcblx0XHRcdGhhbmRsZXIuZ3VpZCA9IGpRdWVyeS5ndWlkKys7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gSW5pdCB0aGUgZWxlbWVudCdzIGV2ZW50IHN0cnVjdHVyZSBhbmQgbWFpbiBoYW5kbGVyLCBpZiB0aGlzIGlzIHRoZSBmaXJzdFxyXG5cdFx0aWYgKCAhKGV2ZW50cyA9IGVsZW1EYXRhLmV2ZW50cykgKSB7XHJcblx0XHRcdGV2ZW50cyA9IGVsZW1EYXRhLmV2ZW50cyA9IHt9O1xyXG5cdFx0fVxyXG5cdFx0aWYgKCAhKGV2ZW50SGFuZGxlID0gZWxlbURhdGEuaGFuZGxlKSApIHtcclxuXHRcdFx0ZXZlbnRIYW5kbGUgPSBlbGVtRGF0YS5oYW5kbGUgPSBmdW5jdGlvbiggZSApIHtcclxuXHRcdFx0XHQvLyBEaXNjYXJkIHRoZSBzZWNvbmQgZXZlbnQgb2YgYSBqUXVlcnkuZXZlbnQudHJpZ2dlcigpIGFuZFxyXG5cdFx0XHRcdC8vIHdoZW4gYW4gZXZlbnQgaXMgY2FsbGVkIGFmdGVyIGEgcGFnZSBoYXMgdW5sb2FkZWRcclxuXHRcdFx0XHRyZXR1cm4gdHlwZW9mIGpRdWVyeSAhPT0gc3RydW5kZWZpbmVkICYmIGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgIT09IGUudHlwZSA/XHJcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQuZGlzcGF0Y2guYXBwbHkoIGVsZW0sIGFyZ3VtZW50cyApIDogdW5kZWZpbmVkO1xyXG5cdFx0XHR9O1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIEhhbmRsZSBtdWx0aXBsZSBldmVudHMgc2VwYXJhdGVkIGJ5IGEgc3BhY2VcclxuXHRcdHR5cGVzID0gKCB0eXBlcyB8fCBcIlwiICkubWF0Y2goIHJub3R3aGl0ZSApIHx8IFsgXCJcIiBdO1xyXG5cdFx0dCA9IHR5cGVzLmxlbmd0aDtcclxuXHRcdHdoaWxlICggdC0tICkge1xyXG5cdFx0XHR0bXAgPSBydHlwZW5hbWVzcGFjZS5leGVjKCB0eXBlc1t0XSApIHx8IFtdO1xyXG5cdFx0XHR0eXBlID0gb3JpZ1R5cGUgPSB0bXBbMV07XHJcblx0XHRcdG5hbWVzcGFjZXMgPSAoIHRtcFsyXSB8fCBcIlwiICkuc3BsaXQoIFwiLlwiICkuc29ydCgpO1xyXG5cclxuXHRcdFx0Ly8gVGhlcmUgKm11c3QqIGJlIGEgdHlwZSwgbm8gYXR0YWNoaW5nIG5hbWVzcGFjZS1vbmx5IGhhbmRsZXJzXHJcblx0XHRcdGlmICggIXR5cGUgKSB7XHJcblx0XHRcdFx0Y29udGludWU7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIElmIGV2ZW50IGNoYW5nZXMgaXRzIHR5cGUsIHVzZSB0aGUgc3BlY2lhbCBldmVudCBoYW5kbGVycyBmb3IgdGhlIGNoYW5nZWQgdHlwZVxyXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcclxuXHJcblx0XHRcdC8vIElmIHNlbGVjdG9yIGRlZmluZWQsIGRldGVybWluZSBzcGVjaWFsIGV2ZW50IGFwaSB0eXBlLCBvdGhlcndpc2UgZ2l2ZW4gdHlwZVxyXG5cdFx0XHR0eXBlID0gKCBzZWxlY3RvciA/IHNwZWNpYWwuZGVsZWdhdGVUeXBlIDogc3BlY2lhbC5iaW5kVHlwZSApIHx8IHR5cGU7XHJcblxyXG5cdFx0XHQvLyBVcGRhdGUgc3BlY2lhbCBiYXNlZCBvbiBuZXdseSByZXNldCB0eXBlXHJcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9O1xyXG5cclxuXHRcdFx0Ly8gaGFuZGxlT2JqIGlzIHBhc3NlZCB0byBhbGwgZXZlbnQgaGFuZGxlcnNcclxuXHRcdFx0aGFuZGxlT2JqID0galF1ZXJ5LmV4dGVuZCh7XHJcblx0XHRcdFx0dHlwZTogdHlwZSxcclxuXHRcdFx0XHRvcmlnVHlwZTogb3JpZ1R5cGUsXHJcblx0XHRcdFx0ZGF0YTogZGF0YSxcclxuXHRcdFx0XHRoYW5kbGVyOiBoYW5kbGVyLFxyXG5cdFx0XHRcdGd1aWQ6IGhhbmRsZXIuZ3VpZCxcclxuXHRcdFx0XHRzZWxlY3Rvcjogc2VsZWN0b3IsXHJcblx0XHRcdFx0bmVlZHNDb250ZXh0OiBzZWxlY3RvciAmJiBqUXVlcnkuZXhwci5tYXRjaC5uZWVkc0NvbnRleHQudGVzdCggc2VsZWN0b3IgKSxcclxuXHRcdFx0XHRuYW1lc3BhY2U6IG5hbWVzcGFjZXMuam9pbihcIi5cIilcclxuXHRcdFx0fSwgaGFuZGxlT2JqSW4gKTtcclxuXHJcblx0XHRcdC8vIEluaXQgdGhlIGV2ZW50IGhhbmRsZXIgcXVldWUgaWYgd2UncmUgdGhlIGZpcnN0XHJcblx0XHRcdGlmICggIShoYW5kbGVycyA9IGV2ZW50c1sgdHlwZSBdKSApIHtcclxuXHRcdFx0XHRoYW5kbGVycyA9IGV2ZW50c1sgdHlwZSBdID0gW107XHJcblx0XHRcdFx0aGFuZGxlcnMuZGVsZWdhdGVDb3VudCA9IDA7XHJcblxyXG5cdFx0XHRcdC8vIE9ubHkgdXNlIGFkZEV2ZW50TGlzdGVuZXIgaWYgdGhlIHNwZWNpYWwgZXZlbnRzIGhhbmRsZXIgcmV0dXJucyBmYWxzZVxyXG5cdFx0XHRcdGlmICggIXNwZWNpYWwuc2V0dXAgfHwgc3BlY2lhbC5zZXR1cC5jYWxsKCBlbGVtLCBkYXRhLCBuYW1lc3BhY2VzLCBldmVudEhhbmRsZSApID09PSBmYWxzZSApIHtcclxuXHRcdFx0XHRcdGlmICggZWxlbS5hZGRFdmVudExpc3RlbmVyICkge1xyXG5cdFx0XHRcdFx0XHRlbGVtLmFkZEV2ZW50TGlzdGVuZXIoIHR5cGUsIGV2ZW50SGFuZGxlLCBmYWxzZSApO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0aWYgKCBzcGVjaWFsLmFkZCApIHtcclxuXHRcdFx0XHRzcGVjaWFsLmFkZC5jYWxsKCBlbGVtLCBoYW5kbGVPYmogKTtcclxuXHJcblx0XHRcdFx0aWYgKCAhaGFuZGxlT2JqLmhhbmRsZXIuZ3VpZCApIHtcclxuXHRcdFx0XHRcdGhhbmRsZU9iai5oYW5kbGVyLmd1aWQgPSBoYW5kbGVyLmd1aWQ7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBBZGQgdG8gdGhlIGVsZW1lbnQncyBoYW5kbGVyIGxpc3QsIGRlbGVnYXRlcyBpbiBmcm9udFxyXG5cdFx0XHRpZiAoIHNlbGVjdG9yICkge1xyXG5cdFx0XHRcdGhhbmRsZXJzLnNwbGljZSggaGFuZGxlcnMuZGVsZWdhdGVDb3VudCsrLCAwLCBoYW5kbGVPYmogKTtcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRoYW5kbGVycy5wdXNoKCBoYW5kbGVPYmogKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gS2VlcCB0cmFjayBvZiB3aGljaCBldmVudHMgaGF2ZSBldmVyIGJlZW4gdXNlZCwgZm9yIGV2ZW50IG9wdGltaXphdGlvblxyXG5cdFx0XHRqUXVlcnkuZXZlbnQuZ2xvYmFsWyB0eXBlIF0gPSB0cnVlO1xyXG5cdFx0fVxyXG5cclxuXHR9LFxyXG5cclxuXHQvLyBEZXRhY2ggYW4gZXZlbnQgb3Igc2V0IG9mIGV2ZW50cyBmcm9tIGFuIGVsZW1lbnRcclxuXHRyZW1vdmU6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlcywgaGFuZGxlciwgc2VsZWN0b3IsIG1hcHBlZFR5cGVzICkge1xyXG5cclxuXHRcdHZhciBqLCBvcmlnQ291bnQsIHRtcCxcclxuXHRcdFx0ZXZlbnRzLCB0LCBoYW5kbGVPYmosXHJcblx0XHRcdHNwZWNpYWwsIGhhbmRsZXJzLCB0eXBlLCBuYW1lc3BhY2VzLCBvcmlnVHlwZSxcclxuXHRcdFx0ZWxlbURhdGEgPSBkYXRhX3ByaXYuaGFzRGF0YSggZWxlbSApICYmIGRhdGFfcHJpdi5nZXQoIGVsZW0gKTtcclxuXHJcblx0XHRpZiAoICFlbGVtRGF0YSB8fCAhKGV2ZW50cyA9IGVsZW1EYXRhLmV2ZW50cykgKSB7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBPbmNlIGZvciBlYWNoIHR5cGUubmFtZXNwYWNlIGluIHR5cGVzOyB0eXBlIG1heSBiZSBvbWl0dGVkXHJcblx0XHR0eXBlcyA9ICggdHlwZXMgfHwgXCJcIiApLm1hdGNoKCBybm90d2hpdGUgKSB8fCBbIFwiXCIgXTtcclxuXHRcdHQgPSB0eXBlcy5sZW5ndGg7XHJcblx0XHR3aGlsZSAoIHQtLSApIHtcclxuXHRcdFx0dG1wID0gcnR5cGVuYW1lc3BhY2UuZXhlYyggdHlwZXNbdF0gKSB8fCBbXTtcclxuXHRcdFx0dHlwZSA9IG9yaWdUeXBlID0gdG1wWzFdO1xyXG5cdFx0XHRuYW1lc3BhY2VzID0gKCB0bXBbMl0gfHwgXCJcIiApLnNwbGl0KCBcIi5cIiApLnNvcnQoKTtcclxuXHJcblx0XHRcdC8vIFVuYmluZCBhbGwgZXZlbnRzIChvbiB0aGlzIG5hbWVzcGFjZSwgaWYgcHJvdmlkZWQpIGZvciB0aGUgZWxlbWVudFxyXG5cdFx0XHRpZiAoICF0eXBlICkge1xyXG5cdFx0XHRcdGZvciAoIHR5cGUgaW4gZXZlbnRzICkge1xyXG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnJlbW92ZSggZWxlbSwgdHlwZSArIHR5cGVzWyB0IF0sIGhhbmRsZXIsIHNlbGVjdG9yLCB0cnVlICk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGNvbnRpbnVlO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcclxuXHRcdFx0dHlwZSA9ICggc2VsZWN0b3IgPyBzcGVjaWFsLmRlbGVnYXRlVHlwZSA6IHNwZWNpYWwuYmluZFR5cGUgKSB8fCB0eXBlO1xyXG5cdFx0XHRoYW5kbGVycyA9IGV2ZW50c1sgdHlwZSBdIHx8IFtdO1xyXG5cdFx0XHR0bXAgPSB0bXBbMl0gJiYgbmV3IFJlZ0V4cCggXCIoXnxcXFxcLilcIiArIG5hbWVzcGFjZXMuam9pbihcIlxcXFwuKD86LipcXFxcLnwpXCIpICsgXCIoXFxcXC58JClcIiApO1xyXG5cclxuXHRcdFx0Ly8gUmVtb3ZlIG1hdGNoaW5nIGV2ZW50c1xyXG5cdFx0XHRvcmlnQ291bnQgPSBqID0gaGFuZGxlcnMubGVuZ3RoO1xyXG5cdFx0XHR3aGlsZSAoIGotLSApIHtcclxuXHRcdFx0XHRoYW5kbGVPYmogPSBoYW5kbGVyc1sgaiBdO1xyXG5cclxuXHRcdFx0XHRpZiAoICggbWFwcGVkVHlwZXMgfHwgb3JpZ1R5cGUgPT09IGhhbmRsZU9iai5vcmlnVHlwZSApICYmXHJcblx0XHRcdFx0XHQoICFoYW5kbGVyIHx8IGhhbmRsZXIuZ3VpZCA9PT0gaGFuZGxlT2JqLmd1aWQgKSAmJlxyXG5cdFx0XHRcdFx0KCAhdG1wIHx8IHRtcC50ZXN0KCBoYW5kbGVPYmoubmFtZXNwYWNlICkgKSAmJlxyXG5cdFx0XHRcdFx0KCAhc2VsZWN0b3IgfHwgc2VsZWN0b3IgPT09IGhhbmRsZU9iai5zZWxlY3RvciB8fCBzZWxlY3RvciA9PT0gXCIqKlwiICYmIGhhbmRsZU9iai5zZWxlY3RvciApICkge1xyXG5cdFx0XHRcdFx0aGFuZGxlcnMuc3BsaWNlKCBqLCAxICk7XHJcblxyXG5cdFx0XHRcdFx0aWYgKCBoYW5kbGVPYmouc2VsZWN0b3IgKSB7XHJcblx0XHRcdFx0XHRcdGhhbmRsZXJzLmRlbGVnYXRlQ291bnQtLTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdGlmICggc3BlY2lhbC5yZW1vdmUgKSB7XHJcblx0XHRcdFx0XHRcdHNwZWNpYWwucmVtb3ZlLmNhbGwoIGVsZW0sIGhhbmRsZU9iaiApO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gUmVtb3ZlIGdlbmVyaWMgZXZlbnQgaGFuZGxlciBpZiB3ZSByZW1vdmVkIHNvbWV0aGluZyBhbmQgbm8gbW9yZSBoYW5kbGVycyBleGlzdFxyXG5cdFx0XHQvLyAoYXZvaWRzIHBvdGVudGlhbCBmb3IgZW5kbGVzcyByZWN1cnNpb24gZHVyaW5nIHJlbW92YWwgb2Ygc3BlY2lhbCBldmVudCBoYW5kbGVycylcclxuXHRcdFx0aWYgKCBvcmlnQ291bnQgJiYgIWhhbmRsZXJzLmxlbmd0aCApIHtcclxuXHRcdFx0XHRpZiAoICFzcGVjaWFsLnRlYXJkb3duIHx8IHNwZWNpYWwudGVhcmRvd24uY2FsbCggZWxlbSwgbmFtZXNwYWNlcywgZWxlbURhdGEuaGFuZGxlICkgPT09IGZhbHNlICkge1xyXG5cdFx0XHRcdFx0alF1ZXJ5LnJlbW92ZUV2ZW50KCBlbGVtLCB0eXBlLCBlbGVtRGF0YS5oYW5kbGUgKTtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdGRlbGV0ZSBldmVudHNbIHR5cGUgXTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdC8vIFJlbW92ZSB0aGUgZXhwYW5kbyBpZiBpdCdzIG5vIGxvbmdlciB1c2VkXHJcblx0XHRpZiAoIGpRdWVyeS5pc0VtcHR5T2JqZWN0KCBldmVudHMgKSApIHtcclxuXHRcdFx0ZGVsZXRlIGVsZW1EYXRhLmhhbmRsZTtcclxuXHRcdFx0ZGF0YV9wcml2LnJlbW92ZSggZWxlbSwgXCJldmVudHNcIiApO1xyXG5cdFx0fVxyXG5cdH0sXHJcblxyXG5cdHRyaWdnZXI6IGZ1bmN0aW9uKCBldmVudCwgZGF0YSwgZWxlbSwgb25seUhhbmRsZXJzICkge1xyXG5cclxuXHRcdHZhciBpLCBjdXIsIHRtcCwgYnViYmxlVHlwZSwgb250eXBlLCBoYW5kbGUsIHNwZWNpYWwsXHJcblx0XHRcdGV2ZW50UGF0aCA9IFsgZWxlbSB8fCBkb2N1bWVudCBdLFxyXG5cdFx0XHR0eXBlID0gaGFzT3duLmNhbGwoIGV2ZW50LCBcInR5cGVcIiApID8gZXZlbnQudHlwZSA6IGV2ZW50LFxyXG5cdFx0XHRuYW1lc3BhY2VzID0gaGFzT3duLmNhbGwoIGV2ZW50LCBcIm5hbWVzcGFjZVwiICkgPyBldmVudC5uYW1lc3BhY2Uuc3BsaXQoXCIuXCIpIDogW107XHJcblxyXG5cdFx0Y3VyID0gdG1wID0gZWxlbSA9IGVsZW0gfHwgZG9jdW1lbnQ7XHJcblxyXG5cdFx0Ly8gRG9uJ3QgZG8gZXZlbnRzIG9uIHRleHQgYW5kIGNvbW1lbnQgbm9kZXNcclxuXHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMyB8fCBlbGVtLm5vZGVUeXBlID09PSA4ICkge1xyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gZm9jdXMvYmx1ciBtb3JwaHMgdG8gZm9jdXNpbi9vdXQ7IGVuc3VyZSB3ZSdyZSBub3QgZmlyaW5nIHRoZW0gcmlnaHQgbm93XHJcblx0XHRpZiAoIHJmb2N1c01vcnBoLnRlc3QoIHR5cGUgKyBqUXVlcnkuZXZlbnQudHJpZ2dlcmVkICkgKSB7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAoIHR5cGUuaW5kZXhPZihcIi5cIikgPj0gMCApIHtcclxuXHRcdFx0Ly8gTmFtZXNwYWNlZCB0cmlnZ2VyOyBjcmVhdGUgYSByZWdleHAgdG8gbWF0Y2ggZXZlbnQgdHlwZSBpbiBoYW5kbGUoKVxyXG5cdFx0XHRuYW1lc3BhY2VzID0gdHlwZS5zcGxpdChcIi5cIik7XHJcblx0XHRcdHR5cGUgPSBuYW1lc3BhY2VzLnNoaWZ0KCk7XHJcblx0XHRcdG5hbWVzcGFjZXMuc29ydCgpO1xyXG5cdFx0fVxyXG5cdFx0b250eXBlID0gdHlwZS5pbmRleE9mKFwiOlwiKSA8IDAgJiYgXCJvblwiICsgdHlwZTtcclxuXHJcblx0XHQvLyBDYWxsZXIgY2FuIHBhc3MgaW4gYSBqUXVlcnkuRXZlbnQgb2JqZWN0LCBPYmplY3QsIG9yIGp1c3QgYW4gZXZlbnQgdHlwZSBzdHJpbmdcclxuXHRcdGV2ZW50ID0gZXZlbnRbIGpRdWVyeS5leHBhbmRvIF0gP1xyXG5cdFx0XHRldmVudCA6XHJcblx0XHRcdG5ldyBqUXVlcnkuRXZlbnQoIHR5cGUsIHR5cGVvZiBldmVudCA9PT0gXCJvYmplY3RcIiAmJiBldmVudCApO1xyXG5cclxuXHRcdC8vIFRyaWdnZXIgYml0bWFzazogJiAxIGZvciBuYXRpdmUgaGFuZGxlcnM7ICYgMiBmb3IgalF1ZXJ5IChhbHdheXMgdHJ1ZSlcclxuXHRcdGV2ZW50LmlzVHJpZ2dlciA9IG9ubHlIYW5kbGVycyA/IDIgOiAzO1xyXG5cdFx0ZXZlbnQubmFtZXNwYWNlID0gbmFtZXNwYWNlcy5qb2luKFwiLlwiKTtcclxuXHRcdGV2ZW50Lm5hbWVzcGFjZV9yZSA9IGV2ZW50Lm5hbWVzcGFjZSA/XHJcblx0XHRcdG5ldyBSZWdFeHAoIFwiKF58XFxcXC4pXCIgKyBuYW1lc3BhY2VzLmpvaW4oXCJcXFxcLig/Oi4qXFxcXC58KVwiKSArIFwiKFxcXFwufCQpXCIgKSA6XHJcblx0XHRcdG51bGw7XHJcblxyXG5cdFx0Ly8gQ2xlYW4gdXAgdGhlIGV2ZW50IGluIGNhc2UgaXQgaXMgYmVpbmcgcmV1c2VkXHJcblx0XHRldmVudC5yZXN1bHQgPSB1bmRlZmluZWQ7XHJcblx0XHRpZiAoICFldmVudC50YXJnZXQgKSB7XHJcblx0XHRcdGV2ZW50LnRhcmdldCA9IGVsZW07XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gQ2xvbmUgYW55IGluY29taW5nIGRhdGEgYW5kIHByZXBlbmQgdGhlIGV2ZW50LCBjcmVhdGluZyB0aGUgaGFuZGxlciBhcmcgbGlzdFxyXG5cdFx0ZGF0YSA9IGRhdGEgPT0gbnVsbCA/XHJcblx0XHRcdFsgZXZlbnQgXSA6XHJcblx0XHRcdGpRdWVyeS5tYWtlQXJyYXkoIGRhdGEsIFsgZXZlbnQgXSApO1xyXG5cclxuXHRcdC8vIEFsbG93IHNwZWNpYWwgZXZlbnRzIHRvIGRyYXcgb3V0c2lkZSB0aGUgbGluZXNcclxuXHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9O1xyXG5cdFx0aWYgKCAhb25seUhhbmRsZXJzICYmIHNwZWNpYWwudHJpZ2dlciAmJiBzcGVjaWFsLnRyaWdnZXIuYXBwbHkoIGVsZW0sIGRhdGEgKSA9PT0gZmFsc2UgKSB7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBEZXRlcm1pbmUgZXZlbnQgcHJvcGFnYXRpb24gcGF0aCBpbiBhZHZhbmNlLCBwZXIgVzNDIGV2ZW50cyBzcGVjICgjOTk1MSlcclxuXHRcdC8vIEJ1YmJsZSB1cCB0byBkb2N1bWVudCwgdGhlbiB0byB3aW5kb3c7IHdhdGNoIGZvciBhIGdsb2JhbCBvd25lckRvY3VtZW50IHZhciAoIzk3MjQpXHJcblx0XHRpZiAoICFvbmx5SGFuZGxlcnMgJiYgIXNwZWNpYWwubm9CdWJibGUgJiYgIWpRdWVyeS5pc1dpbmRvdyggZWxlbSApICkge1xyXG5cclxuXHRcdFx0YnViYmxlVHlwZSA9IHNwZWNpYWwuZGVsZWdhdGVUeXBlIHx8IHR5cGU7XHJcblx0XHRcdGlmICggIXJmb2N1c01vcnBoLnRlc3QoIGJ1YmJsZVR5cGUgKyB0eXBlICkgKSB7XHJcblx0XHRcdFx0Y3VyID0gY3VyLnBhcmVudE5vZGU7XHJcblx0XHRcdH1cclxuXHRcdFx0Zm9yICggOyBjdXI7IGN1ciA9IGN1ci5wYXJlbnROb2RlICkge1xyXG5cdFx0XHRcdGV2ZW50UGF0aC5wdXNoKCBjdXIgKTtcclxuXHRcdFx0XHR0bXAgPSBjdXI7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIE9ubHkgYWRkIHdpbmRvdyBpZiB3ZSBnb3QgdG8gZG9jdW1lbnQgKGUuZy4sIG5vdCBwbGFpbiBvYmogb3IgZGV0YWNoZWQgRE9NKVxyXG5cdFx0XHRpZiAoIHRtcCA9PT0gKGVsZW0ub3duZXJEb2N1bWVudCB8fCBkb2N1bWVudCkgKSB7XHJcblx0XHRcdFx0ZXZlbnRQYXRoLnB1c2goIHRtcC5kZWZhdWx0VmlldyB8fCB0bXAucGFyZW50V2luZG93IHx8IHdpbmRvdyApO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gRmlyZSBoYW5kbGVycyBvbiB0aGUgZXZlbnQgcGF0aFxyXG5cdFx0aSA9IDA7XHJcblx0XHR3aGlsZSAoIChjdXIgPSBldmVudFBhdGhbaSsrXSkgJiYgIWV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XHJcblxyXG5cdFx0XHRldmVudC50eXBlID0gaSA+IDEgP1xyXG5cdFx0XHRcdGJ1YmJsZVR5cGUgOlxyXG5cdFx0XHRcdHNwZWNpYWwuYmluZFR5cGUgfHwgdHlwZTtcclxuXHJcblx0XHRcdC8vIGpRdWVyeSBoYW5kbGVyXHJcblx0XHRcdGhhbmRsZSA9ICggZGF0YV9wcml2LmdldCggY3VyLCBcImV2ZW50c1wiICkgfHwge30gKVsgZXZlbnQudHlwZSBdICYmIGRhdGFfcHJpdi5nZXQoIGN1ciwgXCJoYW5kbGVcIiApO1xyXG5cdFx0XHRpZiAoIGhhbmRsZSApIHtcclxuXHRcdFx0XHRoYW5kbGUuYXBwbHkoIGN1ciwgZGF0YSApO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBOYXRpdmUgaGFuZGxlclxyXG5cdFx0XHRoYW5kbGUgPSBvbnR5cGUgJiYgY3VyWyBvbnR5cGUgXTtcclxuXHRcdFx0aWYgKCBoYW5kbGUgJiYgaGFuZGxlLmFwcGx5ICYmIGpRdWVyeS5hY2NlcHREYXRhKCBjdXIgKSApIHtcclxuXHRcdFx0XHRldmVudC5yZXN1bHQgPSBoYW5kbGUuYXBwbHkoIGN1ciwgZGF0YSApO1xyXG5cdFx0XHRcdGlmICggZXZlbnQucmVzdWx0ID09PSBmYWxzZSApIHtcclxuXHRcdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHRldmVudC50eXBlID0gdHlwZTtcclxuXHJcblx0XHQvLyBJZiBub2JvZHkgcHJldmVudGVkIHRoZSBkZWZhdWx0IGFjdGlvbiwgZG8gaXQgbm93XHJcblx0XHRpZiAoICFvbmx5SGFuZGxlcnMgJiYgIWV2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpICkge1xyXG5cclxuXHRcdFx0aWYgKCAoIXNwZWNpYWwuX2RlZmF1bHQgfHwgc3BlY2lhbC5fZGVmYXVsdC5hcHBseSggZXZlbnRQYXRoLnBvcCgpLCBkYXRhICkgPT09IGZhbHNlKSAmJlxyXG5cdFx0XHRcdGpRdWVyeS5hY2NlcHREYXRhKCBlbGVtICkgKSB7XHJcblxyXG5cdFx0XHRcdC8vIENhbGwgYSBuYXRpdmUgRE9NIG1ldGhvZCBvbiB0aGUgdGFyZ2V0IHdpdGggdGhlIHNhbWUgbmFtZSBuYW1lIGFzIHRoZSBldmVudC5cclxuXHRcdFx0XHQvLyBEb24ndCBkbyBkZWZhdWx0IGFjdGlvbnMgb24gd2luZG93LCB0aGF0J3Mgd2hlcmUgZ2xvYmFsIHZhcmlhYmxlcyBiZSAoIzYxNzApXHJcblx0XHRcdFx0aWYgKCBvbnR5cGUgJiYgalF1ZXJ5LmlzRnVuY3Rpb24oIGVsZW1bIHR5cGUgXSApICYmICFqUXVlcnkuaXNXaW5kb3coIGVsZW0gKSApIHtcclxuXHJcblx0XHRcdFx0XHQvLyBEb24ndCByZS10cmlnZ2VyIGFuIG9uRk9PIGV2ZW50IHdoZW4gd2UgY2FsbCBpdHMgRk9PKCkgbWV0aG9kXHJcblx0XHRcdFx0XHR0bXAgPSBlbGVtWyBvbnR5cGUgXTtcclxuXHJcblx0XHRcdFx0XHRpZiAoIHRtcCApIHtcclxuXHRcdFx0XHRcdFx0ZWxlbVsgb250eXBlIF0gPSBudWxsO1xyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdC8vIFByZXZlbnQgcmUtdHJpZ2dlcmluZyBvZiB0aGUgc2FtZSBldmVudCwgc2luY2Ugd2UgYWxyZWFkeSBidWJibGVkIGl0IGFib3ZlXHJcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlcmVkID0gdHlwZTtcclxuXHRcdFx0XHRcdGVsZW1bIHR5cGUgXSgpO1xyXG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCA9IHVuZGVmaW5lZDtcclxuXHJcblx0XHRcdFx0XHRpZiAoIHRtcCApIHtcclxuXHRcdFx0XHRcdFx0ZWxlbVsgb250eXBlIF0gPSB0bXA7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIGV2ZW50LnJlc3VsdDtcclxuXHR9LFxyXG5cclxuXHRkaXNwYXRjaDogZnVuY3Rpb24oIGV2ZW50ICkge1xyXG5cclxuXHRcdC8vIE1ha2UgYSB3cml0YWJsZSBqUXVlcnkuRXZlbnQgZnJvbSB0aGUgbmF0aXZlIGV2ZW50IG9iamVjdFxyXG5cdFx0ZXZlbnQgPSBqUXVlcnkuZXZlbnQuZml4KCBldmVudCApO1xyXG5cclxuXHRcdHZhciBpLCBqLCByZXQsIG1hdGNoZWQsIGhhbmRsZU9iaixcclxuXHRcdFx0aGFuZGxlclF1ZXVlID0gW10sXHJcblx0XHRcdGFyZ3MgPSBzbGljZS5jYWxsKCBhcmd1bWVudHMgKSxcclxuXHRcdFx0aGFuZGxlcnMgPSAoIGRhdGFfcHJpdi5nZXQoIHRoaXMsIFwiZXZlbnRzXCIgKSB8fCB7fSApWyBldmVudC50eXBlIF0gfHwgW10sXHJcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgZXZlbnQudHlwZSBdIHx8IHt9O1xyXG5cclxuXHRcdC8vIFVzZSB0aGUgZml4LWVkIGpRdWVyeS5FdmVudCByYXRoZXIgdGhhbiB0aGUgKHJlYWQtb25seSkgbmF0aXZlIGV2ZW50XHJcblx0XHRhcmdzWzBdID0gZXZlbnQ7XHJcblx0XHRldmVudC5kZWxlZ2F0ZVRhcmdldCA9IHRoaXM7XHJcblxyXG5cdFx0Ly8gQ2FsbCB0aGUgcHJlRGlzcGF0Y2ggaG9vayBmb3IgdGhlIG1hcHBlZCB0eXBlLCBhbmQgbGV0IGl0IGJhaWwgaWYgZGVzaXJlZFxyXG5cdFx0aWYgKCBzcGVjaWFsLnByZURpc3BhdGNoICYmIHNwZWNpYWwucHJlRGlzcGF0Y2guY2FsbCggdGhpcywgZXZlbnQgKSA9PT0gZmFsc2UgKSB7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBEZXRlcm1pbmUgaGFuZGxlcnNcclxuXHRcdGhhbmRsZXJRdWV1ZSA9IGpRdWVyeS5ldmVudC5oYW5kbGVycy5jYWxsKCB0aGlzLCBldmVudCwgaGFuZGxlcnMgKTtcclxuXHJcblx0XHQvLyBSdW4gZGVsZWdhdGVzIGZpcnN0OyB0aGV5IG1heSB3YW50IHRvIHN0b3AgcHJvcGFnYXRpb24gYmVuZWF0aCB1c1xyXG5cdFx0aSA9IDA7XHJcblx0XHR3aGlsZSAoIChtYXRjaGVkID0gaGFuZGxlclF1ZXVlWyBpKysgXSkgJiYgIWV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XHJcblx0XHRcdGV2ZW50LmN1cnJlbnRUYXJnZXQgPSBtYXRjaGVkLmVsZW07XHJcblxyXG5cdFx0XHRqID0gMDtcclxuXHRcdFx0d2hpbGUgKCAoaGFuZGxlT2JqID0gbWF0Y2hlZC5oYW5kbGVyc1sgaisrIF0pICYmICFldmVudC5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xyXG5cclxuXHRcdFx0XHQvLyBUcmlnZ2VyZWQgZXZlbnQgbXVzdCBlaXRoZXIgMSkgaGF2ZSBubyBuYW1lc3BhY2UsIG9yIDIpIGhhdmUgbmFtZXNwYWNlKHMpXHJcblx0XHRcdFx0Ly8gYSBzdWJzZXQgb3IgZXF1YWwgdG8gdGhvc2UgaW4gdGhlIGJvdW5kIGV2ZW50IChib3RoIGNhbiBoYXZlIG5vIG5hbWVzcGFjZSkuXHJcblx0XHRcdFx0aWYgKCAhZXZlbnQubmFtZXNwYWNlX3JlIHx8IGV2ZW50Lm5hbWVzcGFjZV9yZS50ZXN0KCBoYW5kbGVPYmoubmFtZXNwYWNlICkgKSB7XHJcblxyXG5cdFx0XHRcdFx0ZXZlbnQuaGFuZGxlT2JqID0gaGFuZGxlT2JqO1xyXG5cdFx0XHRcdFx0ZXZlbnQuZGF0YSA9IGhhbmRsZU9iai5kYXRhO1xyXG5cclxuXHRcdFx0XHRcdHJldCA9ICggKGpRdWVyeS5ldmVudC5zcGVjaWFsWyBoYW5kbGVPYmoub3JpZ1R5cGUgXSB8fCB7fSkuaGFuZGxlIHx8IGhhbmRsZU9iai5oYW5kbGVyIClcclxuXHRcdFx0XHRcdFx0XHQuYXBwbHkoIG1hdGNoZWQuZWxlbSwgYXJncyApO1xyXG5cclxuXHRcdFx0XHRcdGlmICggcmV0ICE9PSB1bmRlZmluZWQgKSB7XHJcblx0XHRcdFx0XHRcdGlmICggKGV2ZW50LnJlc3VsdCA9IHJldCkgPT09IGZhbHNlICkge1xyXG5cdFx0XHRcdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcblx0XHRcdFx0XHRcdFx0ZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHQvLyBDYWxsIHRoZSBwb3N0RGlzcGF0Y2ggaG9vayBmb3IgdGhlIG1hcHBlZCB0eXBlXHJcblx0XHRpZiAoIHNwZWNpYWwucG9zdERpc3BhdGNoICkge1xyXG5cdFx0XHRzcGVjaWFsLnBvc3REaXNwYXRjaC5jYWxsKCB0aGlzLCBldmVudCApO1xyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiBldmVudC5yZXN1bHQ7XHJcblx0fSxcclxuXHJcblx0aGFuZGxlcnM6IGZ1bmN0aW9uKCBldmVudCwgaGFuZGxlcnMgKSB7XHJcblx0XHR2YXIgaSwgbWF0Y2hlcywgc2VsLCBoYW5kbGVPYmosXHJcblx0XHRcdGhhbmRsZXJRdWV1ZSA9IFtdLFxyXG5cdFx0XHRkZWxlZ2F0ZUNvdW50ID0gaGFuZGxlcnMuZGVsZWdhdGVDb3VudCxcclxuXHRcdFx0Y3VyID0gZXZlbnQudGFyZ2V0O1xyXG5cclxuXHRcdC8vIEZpbmQgZGVsZWdhdGUgaGFuZGxlcnNcclxuXHRcdC8vIEJsYWNrLWhvbGUgU1ZHIDx1c2U+IGluc3RhbmNlIHRyZWVzICgjMTMxODApXHJcblx0XHQvLyBBdm9pZCBub24tbGVmdC1jbGljayBidWJibGluZyBpbiBGaXJlZm94ICgjMzg2MSlcclxuXHRcdGlmICggZGVsZWdhdGVDb3VudCAmJiBjdXIubm9kZVR5cGUgJiYgKCFldmVudC5idXR0b24gfHwgZXZlbnQudHlwZSAhPT0gXCJjbGlja1wiKSApIHtcclxuXHJcblx0XHRcdGZvciAoIDsgY3VyICE9PSB0aGlzOyBjdXIgPSBjdXIucGFyZW50Tm9kZSB8fCB0aGlzICkge1xyXG5cclxuXHRcdFx0XHQvLyBEb24ndCBwcm9jZXNzIGNsaWNrcyBvbiBkaXNhYmxlZCBlbGVtZW50cyAoIzY5MTEsICM4MTY1LCAjMTEzODIsICMxMTc2NClcclxuXHRcdFx0XHRpZiAoIGN1ci5kaXNhYmxlZCAhPT0gdHJ1ZSB8fCBldmVudC50eXBlICE9PSBcImNsaWNrXCIgKSB7XHJcblx0XHRcdFx0XHRtYXRjaGVzID0gW107XHJcblx0XHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IGRlbGVnYXRlQ291bnQ7IGkrKyApIHtcclxuXHRcdFx0XHRcdFx0aGFuZGxlT2JqID0gaGFuZGxlcnNbIGkgXTtcclxuXHJcblx0XHRcdFx0XHRcdC8vIERvbid0IGNvbmZsaWN0IHdpdGggT2JqZWN0LnByb3RvdHlwZSBwcm9wZXJ0aWVzICgjMTMyMDMpXHJcblx0XHRcdFx0XHRcdHNlbCA9IGhhbmRsZU9iai5zZWxlY3RvciArIFwiIFwiO1xyXG5cclxuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVzWyBzZWwgXSA9PT0gdW5kZWZpbmVkICkge1xyXG5cdFx0XHRcdFx0XHRcdG1hdGNoZXNbIHNlbCBdID0gaGFuZGxlT2JqLm5lZWRzQ29udGV4dCA/XHJcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkoIHNlbCwgdGhpcyApLmluZGV4KCBjdXIgKSA+PSAwIDpcclxuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5maW5kKCBzZWwsIHRoaXMsIG51bGwsIFsgY3VyIF0gKS5sZW5ndGg7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVzWyBzZWwgXSApIHtcclxuXHRcdFx0XHRcdFx0XHRtYXRjaGVzLnB1c2goIGhhbmRsZU9iaiApO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRpZiAoIG1hdGNoZXMubGVuZ3RoICkge1xyXG5cdFx0XHRcdFx0XHRoYW5kbGVyUXVldWUucHVzaCh7IGVsZW06IGN1ciwgaGFuZGxlcnM6IG1hdGNoZXMgfSk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gQWRkIHRoZSByZW1haW5pbmcgKGRpcmVjdGx5LWJvdW5kKSBoYW5kbGVyc1xyXG5cdFx0aWYgKCBkZWxlZ2F0ZUNvdW50IDwgaGFuZGxlcnMubGVuZ3RoICkge1xyXG5cdFx0XHRoYW5kbGVyUXVldWUucHVzaCh7IGVsZW06IHRoaXMsIGhhbmRsZXJzOiBoYW5kbGVycy5zbGljZSggZGVsZWdhdGVDb3VudCApIH0pO1xyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiBoYW5kbGVyUXVldWU7XHJcblx0fSxcclxuXHJcblx0Ly8gSW5jbHVkZXMgc29tZSBldmVudCBwcm9wcyBzaGFyZWQgYnkgS2V5RXZlbnQgYW5kIE1vdXNlRXZlbnRcclxuXHRwcm9wczogXCJhbHRLZXkgYnViYmxlcyBjYW5jZWxhYmxlIGN0cmxLZXkgY3VycmVudFRhcmdldCBldmVudFBoYXNlIG1ldGFLZXkgcmVsYXRlZFRhcmdldCBzaGlmdEtleSB0YXJnZXQgdGltZVN0YW1wIHZpZXcgd2hpY2hcIi5zcGxpdChcIiBcIiksXHJcblxyXG5cdGZpeEhvb2tzOiB7fSxcclxuXHJcblx0a2V5SG9va3M6IHtcclxuXHRcdHByb3BzOiBcImNoYXIgY2hhckNvZGUga2V5IGtleUNvZGVcIi5zcGxpdChcIiBcIiksXHJcblx0XHRmaWx0ZXI6IGZ1bmN0aW9uKCBldmVudCwgb3JpZ2luYWwgKSB7XHJcblxyXG5cdFx0XHQvLyBBZGQgd2hpY2ggZm9yIGtleSBldmVudHNcclxuXHRcdFx0aWYgKCBldmVudC53aGljaCA9PSBudWxsICkge1xyXG5cdFx0XHRcdGV2ZW50LndoaWNoID0gb3JpZ2luYWwuY2hhckNvZGUgIT0gbnVsbCA/IG9yaWdpbmFsLmNoYXJDb2RlIDogb3JpZ2luYWwua2V5Q29kZTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0cmV0dXJuIGV2ZW50O1xyXG5cdFx0fVxyXG5cdH0sXHJcblxyXG5cdG1vdXNlSG9va3M6IHtcclxuXHRcdHByb3BzOiBcImJ1dHRvbiBidXR0b25zIGNsaWVudFggY2xpZW50WSBvZmZzZXRYIG9mZnNldFkgcGFnZVggcGFnZVkgc2NyZWVuWCBzY3JlZW5ZIHRvRWxlbWVudFwiLnNwbGl0KFwiIFwiKSxcclxuXHRcdGZpbHRlcjogZnVuY3Rpb24oIGV2ZW50LCBvcmlnaW5hbCApIHtcclxuXHRcdFx0dmFyIGV2ZW50RG9jLCBkb2MsIGJvZHksXHJcblx0XHRcdFx0YnV0dG9uID0gb3JpZ2luYWwuYnV0dG9uO1xyXG5cclxuXHRcdFx0Ly8gQ2FsY3VsYXRlIHBhZ2VYL1kgaWYgbWlzc2luZyBhbmQgY2xpZW50WC9ZIGF2YWlsYWJsZVxyXG5cdFx0XHRpZiAoIGV2ZW50LnBhZ2VYID09IG51bGwgJiYgb3JpZ2luYWwuY2xpZW50WCAhPSBudWxsICkge1xyXG5cdFx0XHRcdGV2ZW50RG9jID0gZXZlbnQudGFyZ2V0Lm93bmVyRG9jdW1lbnQgfHwgZG9jdW1lbnQ7XHJcblx0XHRcdFx0ZG9jID0gZXZlbnREb2MuZG9jdW1lbnRFbGVtZW50O1xyXG5cdFx0XHRcdGJvZHkgPSBldmVudERvYy5ib2R5O1xyXG5cclxuXHRcdFx0XHRldmVudC5wYWdlWCA9IG9yaWdpbmFsLmNsaWVudFggKyAoIGRvYyAmJiBkb2Muc2Nyb2xsTGVmdCB8fCBib2R5ICYmIGJvZHkuc2Nyb2xsTGVmdCB8fCAwICkgLSAoIGRvYyAmJiBkb2MuY2xpZW50TGVmdCB8fCBib2R5ICYmIGJvZHkuY2xpZW50TGVmdCB8fCAwICk7XHJcblx0XHRcdFx0ZXZlbnQucGFnZVkgPSBvcmlnaW5hbC5jbGllbnRZICsgKCBkb2MgJiYgZG9jLnNjcm9sbFRvcCAgfHwgYm9keSAmJiBib2R5LnNjcm9sbFRvcCAgfHwgMCApIC0gKCBkb2MgJiYgZG9jLmNsaWVudFRvcCAgfHwgYm9keSAmJiBib2R5LmNsaWVudFRvcCAgfHwgMCApO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBBZGQgd2hpY2ggZm9yIGNsaWNrOiAxID09PSBsZWZ0OyAyID09PSBtaWRkbGU7IDMgPT09IHJpZ2h0XHJcblx0XHRcdC8vIE5vdGU6IGJ1dHRvbiBpcyBub3Qgbm9ybWFsaXplZCwgc28gZG9uJ3QgdXNlIGl0XHJcblx0XHRcdGlmICggIWV2ZW50LndoaWNoICYmIGJ1dHRvbiAhPT0gdW5kZWZpbmVkICkge1xyXG5cdFx0XHRcdGV2ZW50LndoaWNoID0gKCBidXR0b24gJiAxID8gMSA6ICggYnV0dG9uICYgMiA/IDMgOiAoIGJ1dHRvbiAmIDQgPyAyIDogMCApICkgKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0cmV0dXJuIGV2ZW50O1xyXG5cdFx0fVxyXG5cdH0sXHJcblxyXG5cdGZpeDogZnVuY3Rpb24oIGV2ZW50ICkge1xyXG5cdFx0aWYgKCBldmVudFsgalF1ZXJ5LmV4cGFuZG8gXSApIHtcclxuXHRcdFx0cmV0dXJuIGV2ZW50O1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIENyZWF0ZSBhIHdyaXRhYmxlIGNvcHkgb2YgdGhlIGV2ZW50IG9iamVjdCBhbmQgbm9ybWFsaXplIHNvbWUgcHJvcGVydGllc1xyXG5cdFx0dmFyIGksIHByb3AsIGNvcHksXHJcblx0XHRcdHR5cGUgPSBldmVudC50eXBlLFxyXG5cdFx0XHRvcmlnaW5hbEV2ZW50ID0gZXZlbnQsXHJcblx0XHRcdGZpeEhvb2sgPSB0aGlzLmZpeEhvb2tzWyB0eXBlIF07XHJcblxyXG5cdFx0aWYgKCAhZml4SG9vayApIHtcclxuXHRcdFx0dGhpcy5maXhIb29rc1sgdHlwZSBdID0gZml4SG9vayA9XHJcblx0XHRcdFx0cm1vdXNlRXZlbnQudGVzdCggdHlwZSApID8gdGhpcy5tb3VzZUhvb2tzIDpcclxuXHRcdFx0XHRya2V5RXZlbnQudGVzdCggdHlwZSApID8gdGhpcy5rZXlIb29rcyA6XHJcblx0XHRcdFx0e307XHJcblx0XHR9XHJcblx0XHRjb3B5ID0gZml4SG9vay5wcm9wcyA/IHRoaXMucHJvcHMuY29uY2F0KCBmaXhIb29rLnByb3BzICkgOiB0aGlzLnByb3BzO1xyXG5cclxuXHRcdGV2ZW50ID0gbmV3IGpRdWVyeS5FdmVudCggb3JpZ2luYWxFdmVudCApO1xyXG5cclxuXHRcdGkgPSBjb3B5Lmxlbmd0aDtcclxuXHRcdHdoaWxlICggaS0tICkge1xyXG5cdFx0XHRwcm9wID0gY29weVsgaSBdO1xyXG5cdFx0XHRldmVudFsgcHJvcCBdID0gb3JpZ2luYWxFdmVudFsgcHJvcCBdO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIFN1cHBvcnQ6IENvcmRvdmEgMi41IChXZWJLaXQpICgjMTMyNTUpXHJcblx0XHQvLyBBbGwgZXZlbnRzIHNob3VsZCBoYXZlIGEgdGFyZ2V0OyBDb3Jkb3ZhIGRldmljZXJlYWR5IGRvZXNuJ3RcclxuXHRcdGlmICggIWV2ZW50LnRhcmdldCApIHtcclxuXHRcdFx0ZXZlbnQudGFyZ2V0ID0gZG9jdW1lbnQ7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gU3VwcG9ydDogU2FmYXJpIDYuMCssIENocm9tZTwyOFxyXG5cdFx0Ly8gVGFyZ2V0IHNob3VsZCBub3QgYmUgYSB0ZXh0IG5vZGUgKCM1MDQsICMxMzE0MylcclxuXHRcdGlmICggZXZlbnQudGFyZ2V0Lm5vZGVUeXBlID09PSAzICkge1xyXG5cdFx0XHRldmVudC50YXJnZXQgPSBldmVudC50YXJnZXQucGFyZW50Tm9kZTtcclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gZml4SG9vay5maWx0ZXIgPyBmaXhIb29rLmZpbHRlciggZXZlbnQsIG9yaWdpbmFsRXZlbnQgKSA6IGV2ZW50O1xyXG5cdH0sXHJcblxyXG5cdHNwZWNpYWw6IHtcclxuXHRcdGxvYWQ6IHtcclxuXHRcdFx0Ly8gUHJldmVudCB0cmlnZ2VyZWQgaW1hZ2UubG9hZCBldmVudHMgZnJvbSBidWJibGluZyB0byB3aW5kb3cubG9hZFxyXG5cdFx0XHRub0J1YmJsZTogdHJ1ZVxyXG5cdFx0fSxcclxuXHRcdGZvY3VzOiB7XHJcblx0XHRcdC8vIEZpcmUgbmF0aXZlIGV2ZW50IGlmIHBvc3NpYmxlIHNvIGJsdXIvZm9jdXMgc2VxdWVuY2UgaXMgY29ycmVjdFxyXG5cdFx0XHR0cmlnZ2VyOiBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRpZiAoIHRoaXMgIT09IHNhZmVBY3RpdmVFbGVtZW50KCkgJiYgdGhpcy5mb2N1cyApIHtcclxuXHRcdFx0XHRcdHRoaXMuZm9jdXMoKTtcclxuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0sXHJcblx0XHRcdGRlbGVnYXRlVHlwZTogXCJmb2N1c2luXCJcclxuXHRcdH0sXHJcblx0XHRibHVyOiB7XHJcblx0XHRcdHRyaWdnZXI6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdGlmICggdGhpcyA9PT0gc2FmZUFjdGl2ZUVsZW1lbnQoKSAmJiB0aGlzLmJsdXIgKSB7XHJcblx0XHRcdFx0XHR0aGlzLmJsdXIoKTtcclxuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0sXHJcblx0XHRcdGRlbGVnYXRlVHlwZTogXCJmb2N1c291dFwiXHJcblx0XHR9LFxyXG5cdFx0Y2xpY2s6IHtcclxuXHRcdFx0Ly8gRm9yIGNoZWNrYm94LCBmaXJlIG5hdGl2ZSBldmVudCBzbyBjaGVja2VkIHN0YXRlIHdpbGwgYmUgcmlnaHRcclxuXHRcdFx0dHJpZ2dlcjogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0aWYgKCB0aGlzLnR5cGUgPT09IFwiY2hlY2tib3hcIiAmJiB0aGlzLmNsaWNrICYmIGpRdWVyeS5ub2RlTmFtZSggdGhpcywgXCJpbnB1dFwiICkgKSB7XHJcblx0XHRcdFx0XHR0aGlzLmNsaWNrKCk7XHJcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9LFxyXG5cclxuXHRcdFx0Ly8gRm9yIGNyb3NzLWJyb3dzZXIgY29uc2lzdGVuY3ksIGRvbid0IGZpcmUgbmF0aXZlIC5jbGljaygpIG9uIGxpbmtzXHJcblx0XHRcdF9kZWZhdWx0OiBmdW5jdGlvbiggZXZlbnQgKSB7XHJcblx0XHRcdFx0cmV0dXJuIGpRdWVyeS5ub2RlTmFtZSggZXZlbnQudGFyZ2V0LCBcImFcIiApO1xyXG5cdFx0XHR9XHJcblx0XHR9LFxyXG5cclxuXHRcdGJlZm9yZXVubG9hZDoge1xyXG5cdFx0XHRwb3N0RGlzcGF0Y2g6IGZ1bmN0aW9uKCBldmVudCApIHtcclxuXHJcblx0XHRcdFx0Ly8gU3VwcG9ydDogRmlyZWZveCAyMCtcclxuXHRcdFx0XHQvLyBGaXJlZm94IGRvZXNuJ3QgYWxlcnQgaWYgdGhlIHJldHVyblZhbHVlIGZpZWxkIGlzIG5vdCBzZXQuXHJcblx0XHRcdFx0aWYgKCBldmVudC5yZXN1bHQgIT09IHVuZGVmaW5lZCAmJiBldmVudC5vcmlnaW5hbEV2ZW50ICkge1xyXG5cdFx0XHRcdFx0ZXZlbnQub3JpZ2luYWxFdmVudC5yZXR1cm5WYWx1ZSA9IGV2ZW50LnJlc3VsdDtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9LFxyXG5cclxuXHRzaW11bGF0ZTogZnVuY3Rpb24oIHR5cGUsIGVsZW0sIGV2ZW50LCBidWJibGUgKSB7XHJcblx0XHQvLyBQaWdneWJhY2sgb24gYSBkb25vciBldmVudCB0byBzaW11bGF0ZSBhIGRpZmZlcmVudCBvbmUuXHJcblx0XHQvLyBGYWtlIG9yaWdpbmFsRXZlbnQgdG8gYXZvaWQgZG9ub3IncyBzdG9wUHJvcGFnYXRpb24sIGJ1dCBpZiB0aGVcclxuXHRcdC8vIHNpbXVsYXRlZCBldmVudCBwcmV2ZW50cyBkZWZhdWx0IHRoZW4gd2UgZG8gdGhlIHNhbWUgb24gdGhlIGRvbm9yLlxyXG5cdFx0dmFyIGUgPSBqUXVlcnkuZXh0ZW5kKFxyXG5cdFx0XHRuZXcgalF1ZXJ5LkV2ZW50KCksXHJcblx0XHRcdGV2ZW50LFxyXG5cdFx0XHR7XHJcblx0XHRcdFx0dHlwZTogdHlwZSxcclxuXHRcdFx0XHRpc1NpbXVsYXRlZDogdHJ1ZSxcclxuXHRcdFx0XHRvcmlnaW5hbEV2ZW50OiB7fVxyXG5cdFx0XHR9XHJcblx0XHQpO1xyXG5cdFx0aWYgKCBidWJibGUgKSB7XHJcblx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKCBlLCBudWxsLCBlbGVtICk7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRqUXVlcnkuZXZlbnQuZGlzcGF0Y2guY2FsbCggZWxlbSwgZSApO1xyXG5cdFx0fVxyXG5cdFx0aWYgKCBlLmlzRGVmYXVsdFByZXZlbnRlZCgpICkge1xyXG5cdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cdFx0fVxyXG5cdH1cclxufTtcclxuXHJcbmpRdWVyeS5yZW1vdmVFdmVudCA9IGZ1bmN0aW9uKCBlbGVtLCB0eXBlLCBoYW5kbGUgKSB7XHJcblx0aWYgKCBlbGVtLnJlbW92ZUV2ZW50TGlzdGVuZXIgKSB7XHJcblx0XHRlbGVtLnJlbW92ZUV2ZW50TGlzdGVuZXIoIHR5cGUsIGhhbmRsZSwgZmFsc2UgKTtcclxuXHR9XHJcbn07XHJcblxyXG5qUXVlcnkuRXZlbnQgPSBmdW5jdGlvbiggc3JjLCBwcm9wcyApIHtcclxuXHQvLyBBbGxvdyBpbnN0YW50aWF0aW9uIHdpdGhvdXQgdGhlICduZXcnIGtleXdvcmRcclxuXHRpZiAoICEodGhpcyBpbnN0YW5jZW9mIGpRdWVyeS5FdmVudCkgKSB7XHJcblx0XHRyZXR1cm4gbmV3IGpRdWVyeS5FdmVudCggc3JjLCBwcm9wcyApO1xyXG5cdH1cclxuXHJcblx0Ly8gRXZlbnQgb2JqZWN0XHJcblx0aWYgKCBzcmMgJiYgc3JjLnR5cGUgKSB7XHJcblx0XHR0aGlzLm9yaWdpbmFsRXZlbnQgPSBzcmM7XHJcblx0XHR0aGlzLnR5cGUgPSBzcmMudHlwZTtcclxuXHJcblx0XHQvLyBFdmVudHMgYnViYmxpbmcgdXAgdGhlIGRvY3VtZW50IG1heSBoYXZlIGJlZW4gbWFya2VkIGFzIHByZXZlbnRlZFxyXG5cdFx0Ly8gYnkgYSBoYW5kbGVyIGxvd2VyIGRvd24gdGhlIHRyZWU7IHJlZmxlY3QgdGhlIGNvcnJlY3QgdmFsdWUuXHJcblx0XHR0aGlzLmlzRGVmYXVsdFByZXZlbnRlZCA9IHNyYy5kZWZhdWx0UHJldmVudGVkIHx8XHJcblx0XHRcdFx0c3JjLmRlZmF1bHRQcmV2ZW50ZWQgPT09IHVuZGVmaW5lZCAmJlxyXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQ8NC4wXHJcblx0XHRcdFx0c3JjLnJldHVyblZhbHVlID09PSBmYWxzZSA/XHJcblx0XHRcdHJldHVyblRydWUgOlxyXG5cdFx0XHRyZXR1cm5GYWxzZTtcclxuXHJcblx0Ly8gRXZlbnQgdHlwZVxyXG5cdH0gZWxzZSB7XHJcblx0XHR0aGlzLnR5cGUgPSBzcmM7XHJcblx0fVxyXG5cclxuXHQvLyBQdXQgZXhwbGljaXRseSBwcm92aWRlZCBwcm9wZXJ0aWVzIG9udG8gdGhlIGV2ZW50IG9iamVjdFxyXG5cdGlmICggcHJvcHMgKSB7XHJcblx0XHRqUXVlcnkuZXh0ZW5kKCB0aGlzLCBwcm9wcyApO1xyXG5cdH1cclxuXHJcblx0Ly8gQ3JlYXRlIGEgdGltZXN0YW1wIGlmIGluY29taW5nIGV2ZW50IGRvZXNuJ3QgaGF2ZSBvbmVcclxuXHR0aGlzLnRpbWVTdGFtcCA9IHNyYyAmJiBzcmMudGltZVN0YW1wIHx8IGpRdWVyeS5ub3coKTtcclxuXHJcblx0Ly8gTWFyayBpdCBhcyBmaXhlZFxyXG5cdHRoaXNbIGpRdWVyeS5leHBhbmRvIF0gPSB0cnVlO1xyXG59O1xyXG5cclxuLy8galF1ZXJ5LkV2ZW50IGlzIGJhc2VkIG9uIERPTTMgRXZlbnRzIGFzIHNwZWNpZmllZCBieSB0aGUgRUNNQVNjcmlwdCBMYW5ndWFnZSBCaW5kaW5nXHJcbi8vIGh0dHA6Ly93d3cudzMub3JnL1RSLzIwMDMvV0QtRE9NLUxldmVsLTMtRXZlbnRzLTIwMDMwMzMxL2VjbWEtc2NyaXB0LWJpbmRpbmcuaHRtbFxyXG5qUXVlcnkuRXZlbnQucHJvdG90eXBlID0ge1xyXG5cdGlzRGVmYXVsdFByZXZlbnRlZDogcmV0dXJuRmFsc2UsXHJcblx0aXNQcm9wYWdhdGlvblN0b3BwZWQ6IHJldHVybkZhbHNlLFxyXG5cdGlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkOiByZXR1cm5GYWxzZSxcclxuXHJcblx0cHJldmVudERlZmF1bHQ6IGZ1bmN0aW9uKCkge1xyXG5cdFx0dmFyIGUgPSB0aGlzLm9yaWdpbmFsRXZlbnQ7XHJcblxyXG5cdFx0dGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQgPSByZXR1cm5UcnVlO1xyXG5cclxuXHRcdGlmICggZSAmJiBlLnByZXZlbnREZWZhdWx0ICkge1xyXG5cdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XHJcblx0XHR9XHJcblx0fSxcclxuXHRzdG9wUHJvcGFnYXRpb246IGZ1bmN0aW9uKCkge1xyXG5cdFx0dmFyIGUgPSB0aGlzLm9yaWdpbmFsRXZlbnQ7XHJcblxyXG5cdFx0dGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZCA9IHJldHVyblRydWU7XHJcblxyXG5cdFx0aWYgKCBlICYmIGUuc3RvcFByb3BhZ2F0aW9uICkge1xyXG5cdFx0XHRlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG5cdFx0fVxyXG5cdH0sXHJcblx0c3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uOiBmdW5jdGlvbigpIHtcclxuXHRcdHZhciBlID0gdGhpcy5vcmlnaW5hbEV2ZW50O1xyXG5cclxuXHRcdHRoaXMuaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQgPSByZXR1cm5UcnVlO1xyXG5cclxuXHRcdGlmICggZSAmJiBlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiApIHtcclxuXHRcdFx0ZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcclxuXHRcdH1cclxuXHJcblx0XHR0aGlzLnN0b3BQcm9wYWdhdGlvbigpO1xyXG5cdH1cclxufTtcclxuXHJcbi8vIENyZWF0ZSBtb3VzZWVudGVyL2xlYXZlIGV2ZW50cyB1c2luZyBtb3VzZW92ZXIvb3V0IGFuZCBldmVudC10aW1lIGNoZWNrc1xyXG4vLyBTdXBwb3J0OiBDaHJvbWUgMTUrXHJcbmpRdWVyeS5lYWNoKHtcclxuXHRtb3VzZWVudGVyOiBcIm1vdXNlb3ZlclwiLFxyXG5cdG1vdXNlbGVhdmU6IFwibW91c2VvdXRcIixcclxuXHRwb2ludGVyZW50ZXI6IFwicG9pbnRlcm92ZXJcIixcclxuXHRwb2ludGVybGVhdmU6IFwicG9pbnRlcm91dFwiXHJcbn0sIGZ1bmN0aW9uKCBvcmlnLCBmaXggKSB7XHJcblx0alF1ZXJ5LmV2ZW50LnNwZWNpYWxbIG9yaWcgXSA9IHtcclxuXHRcdGRlbGVnYXRlVHlwZTogZml4LFxyXG5cdFx0YmluZFR5cGU6IGZpeCxcclxuXHJcblx0XHRoYW5kbGU6IGZ1bmN0aW9uKCBldmVudCApIHtcclxuXHRcdFx0dmFyIHJldCxcclxuXHRcdFx0XHR0YXJnZXQgPSB0aGlzLFxyXG5cdFx0XHRcdHJlbGF0ZWQgPSBldmVudC5yZWxhdGVkVGFyZ2V0LFxyXG5cdFx0XHRcdGhhbmRsZU9iaiA9IGV2ZW50LmhhbmRsZU9iajtcclxuXHJcblx0XHRcdC8vIEZvciBtb3VzZW50ZXIvbGVhdmUgY2FsbCB0aGUgaGFuZGxlciBpZiByZWxhdGVkIGlzIG91dHNpZGUgdGhlIHRhcmdldC5cclxuXHRcdFx0Ly8gTkI6IE5vIHJlbGF0ZWRUYXJnZXQgaWYgdGhlIG1vdXNlIGxlZnQvZW50ZXJlZCB0aGUgYnJvd3NlciB3aW5kb3dcclxuXHRcdFx0aWYgKCAhcmVsYXRlZCB8fCAocmVsYXRlZCAhPT0gdGFyZ2V0ICYmICFqUXVlcnkuY29udGFpbnMoIHRhcmdldCwgcmVsYXRlZCApKSApIHtcclxuXHRcdFx0XHRldmVudC50eXBlID0gaGFuZGxlT2JqLm9yaWdUeXBlO1xyXG5cdFx0XHRcdHJldCA9IGhhbmRsZU9iai5oYW5kbGVyLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcclxuXHRcdFx0XHRldmVudC50eXBlID0gZml4O1xyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiByZXQ7XHJcblx0XHR9XHJcblx0fTtcclxufSk7XHJcblxyXG4vLyBTdXBwb3J0OiBGaXJlZm94LCBDaHJvbWUsIFNhZmFyaVxyXG4vLyBDcmVhdGUgXCJidWJibGluZ1wiIGZvY3VzIGFuZCBibHVyIGV2ZW50c1xyXG5pZiAoICFzdXBwb3J0LmZvY3VzaW5CdWJibGVzICkge1xyXG5cdGpRdWVyeS5lYWNoKHsgZm9jdXM6IFwiZm9jdXNpblwiLCBibHVyOiBcImZvY3Vzb3V0XCIgfSwgZnVuY3Rpb24oIG9yaWcsIGZpeCApIHtcclxuXHJcblx0XHQvLyBBdHRhY2ggYSBzaW5nbGUgY2FwdHVyaW5nIGhhbmRsZXIgb24gdGhlIGRvY3VtZW50IHdoaWxlIHNvbWVvbmUgd2FudHMgZm9jdXNpbi9mb2N1c291dFxyXG5cdFx0dmFyIGhhbmRsZXIgPSBmdW5jdGlvbiggZXZlbnQgKSB7XHJcblx0XHRcdFx0alF1ZXJ5LmV2ZW50LnNpbXVsYXRlKCBmaXgsIGV2ZW50LnRhcmdldCwgalF1ZXJ5LmV2ZW50LmZpeCggZXZlbnQgKSwgdHJ1ZSApO1xyXG5cdFx0XHR9O1xyXG5cclxuXHRcdGpRdWVyeS5ldmVudC5zcGVjaWFsWyBmaXggXSA9IHtcclxuXHRcdFx0c2V0dXA6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdHZhciBkb2MgPSB0aGlzLm93bmVyRG9jdW1lbnQgfHwgdGhpcyxcclxuXHRcdFx0XHRcdGF0dGFjaGVzID0gZGF0YV9wcml2LmFjY2VzcyggZG9jLCBmaXggKTtcclxuXHJcblx0XHRcdFx0aWYgKCAhYXR0YWNoZXMgKSB7XHJcblx0XHRcdFx0XHRkb2MuYWRkRXZlbnRMaXN0ZW5lciggb3JpZywgaGFuZGxlciwgdHJ1ZSApO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRkYXRhX3ByaXYuYWNjZXNzKCBkb2MsIGZpeCwgKCBhdHRhY2hlcyB8fCAwICkgKyAxICk7XHJcblx0XHRcdH0sXHJcblx0XHRcdHRlYXJkb3duOiBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHR2YXIgZG9jID0gdGhpcy5vd25lckRvY3VtZW50IHx8IHRoaXMsXHJcblx0XHRcdFx0XHRhdHRhY2hlcyA9IGRhdGFfcHJpdi5hY2Nlc3MoIGRvYywgZml4ICkgLSAxO1xyXG5cclxuXHRcdFx0XHRpZiAoICFhdHRhY2hlcyApIHtcclxuXHRcdFx0XHRcdGRvYy5yZW1vdmVFdmVudExpc3RlbmVyKCBvcmlnLCBoYW5kbGVyLCB0cnVlICk7XHJcblx0XHRcdFx0XHRkYXRhX3ByaXYucmVtb3ZlKCBkb2MsIGZpeCApO1xyXG5cclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0ZGF0YV9wcml2LmFjY2VzcyggZG9jLCBmaXgsIGF0dGFjaGVzICk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9O1xyXG5cdH0pO1xyXG59XHJcblxyXG5qUXVlcnkuZm4uZXh0ZW5kKHtcclxuXHJcblx0b246IGZ1bmN0aW9uKCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuLCAvKklOVEVSTkFMKi8gb25lICkge1xyXG5cdFx0dmFyIG9yaWdGbiwgdHlwZTtcclxuXHJcblx0XHQvLyBUeXBlcyBjYW4gYmUgYSBtYXAgb2YgdHlwZXMvaGFuZGxlcnNcclxuXHRcdGlmICggdHlwZW9mIHR5cGVzID09PSBcIm9iamVjdFwiICkge1xyXG5cdFx0XHQvLyAoIHR5cGVzLU9iamVjdCwgc2VsZWN0b3IsIGRhdGEgKVxyXG5cdFx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciAhPT0gXCJzdHJpbmdcIiApIHtcclxuXHRcdFx0XHQvLyAoIHR5cGVzLU9iamVjdCwgZGF0YSApXHJcblx0XHRcdFx0ZGF0YSA9IGRhdGEgfHwgc2VsZWN0b3I7XHJcblx0XHRcdFx0c2VsZWN0b3IgPSB1bmRlZmluZWQ7XHJcblx0XHRcdH1cclxuXHRcdFx0Zm9yICggdHlwZSBpbiB0eXBlcyApIHtcclxuXHRcdFx0XHR0aGlzLm9uKCB0eXBlLCBzZWxlY3RvciwgZGF0YSwgdHlwZXNbIHR5cGUgXSwgb25lICk7XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuIHRoaXM7XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKCBkYXRhID09IG51bGwgJiYgZm4gPT0gbnVsbCApIHtcclxuXHRcdFx0Ly8gKCB0eXBlcywgZm4gKVxyXG5cdFx0XHRmbiA9IHNlbGVjdG9yO1xyXG5cdFx0XHRkYXRhID0gc2VsZWN0b3IgPSB1bmRlZmluZWQ7XHJcblx0XHR9IGVsc2UgaWYgKCBmbiA9PSBudWxsICkge1xyXG5cdFx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiApIHtcclxuXHRcdFx0XHQvLyAoIHR5cGVzLCBzZWxlY3RvciwgZm4gKVxyXG5cdFx0XHRcdGZuID0gZGF0YTtcclxuXHRcdFx0XHRkYXRhID0gdW5kZWZpbmVkO1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdC8vICggdHlwZXMsIGRhdGEsIGZuIClcclxuXHRcdFx0XHRmbiA9IGRhdGE7XHJcblx0XHRcdFx0ZGF0YSA9IHNlbGVjdG9yO1xyXG5cdFx0XHRcdHNlbGVjdG9yID0gdW5kZWZpbmVkO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHRpZiAoIGZuID09PSBmYWxzZSApIHtcclxuXHRcdFx0Zm4gPSByZXR1cm5GYWxzZTtcclxuXHRcdH0gZWxzZSBpZiAoICFmbiApIHtcclxuXHRcdFx0cmV0dXJuIHRoaXM7XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKCBvbmUgPT09IDEgKSB7XHJcblx0XHRcdG9yaWdGbiA9IGZuO1xyXG5cdFx0XHRmbiA9IGZ1bmN0aW9uKCBldmVudCApIHtcclxuXHRcdFx0XHQvLyBDYW4gdXNlIGFuIGVtcHR5IHNldCwgc2luY2UgZXZlbnQgY29udGFpbnMgdGhlIGluZm9cclxuXHRcdFx0XHRqUXVlcnkoKS5vZmYoIGV2ZW50ICk7XHJcblx0XHRcdFx0cmV0dXJuIG9yaWdGbi5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XHJcblx0XHRcdH07XHJcblx0XHRcdC8vIFVzZSBzYW1lIGd1aWQgc28gY2FsbGVyIGNhbiByZW1vdmUgdXNpbmcgb3JpZ0ZuXHJcblx0XHRcdGZuLmd1aWQgPSBvcmlnRm4uZ3VpZCB8fCAoIG9yaWdGbi5ndWlkID0galF1ZXJ5Lmd1aWQrKyApO1xyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XHJcblx0XHRcdGpRdWVyeS5ldmVudC5hZGQoIHRoaXMsIHR5cGVzLCBmbiwgZGF0YSwgc2VsZWN0b3IgKTtcclxuXHRcdH0pO1xyXG5cdH0sXHJcblx0b25lOiBmdW5jdGlvbiggdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApIHtcclxuXHRcdHJldHVybiB0aGlzLm9uKCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuLCAxICk7XHJcblx0fSxcclxuXHRvZmY6IGZ1bmN0aW9uKCB0eXBlcywgc2VsZWN0b3IsIGZuICkge1xyXG5cdFx0dmFyIGhhbmRsZU9iaiwgdHlwZTtcclxuXHRcdGlmICggdHlwZXMgJiYgdHlwZXMucHJldmVudERlZmF1bHQgJiYgdHlwZXMuaGFuZGxlT2JqICkge1xyXG5cdFx0XHQvLyAoIGV2ZW50ICkgIGRpc3BhdGNoZWQgalF1ZXJ5LkV2ZW50XHJcblx0XHRcdGhhbmRsZU9iaiA9IHR5cGVzLmhhbmRsZU9iajtcclxuXHRcdFx0alF1ZXJ5KCB0eXBlcy5kZWxlZ2F0ZVRhcmdldCApLm9mZihcclxuXHRcdFx0XHRoYW5kbGVPYmoubmFtZXNwYWNlID8gaGFuZGxlT2JqLm9yaWdUeXBlICsgXCIuXCIgKyBoYW5kbGVPYmoubmFtZXNwYWNlIDogaGFuZGxlT2JqLm9yaWdUeXBlLFxyXG5cdFx0XHRcdGhhbmRsZU9iai5zZWxlY3RvcixcclxuXHRcdFx0XHRoYW5kbGVPYmouaGFuZGxlclxyXG5cdFx0XHQpO1xyXG5cdFx0XHRyZXR1cm4gdGhpcztcclxuXHRcdH1cclxuXHRcdGlmICggdHlwZW9mIHR5cGVzID09PSBcIm9iamVjdFwiICkge1xyXG5cdFx0XHQvLyAoIHR5cGVzLW9iamVjdCBbLCBzZWxlY3Rvcl0gKVxyXG5cdFx0XHRmb3IgKCB0eXBlIGluIHR5cGVzICkge1xyXG5cdFx0XHRcdHRoaXMub2ZmKCB0eXBlLCBzZWxlY3RvciwgdHlwZXNbIHR5cGUgXSApO1xyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiB0aGlzO1xyXG5cdFx0fVxyXG5cdFx0aWYgKCBzZWxlY3RvciA9PT0gZmFsc2UgfHwgdHlwZW9mIHNlbGVjdG9yID09PSBcImZ1bmN0aW9uXCIgKSB7XHJcblx0XHRcdC8vICggdHlwZXMgWywgZm5dIClcclxuXHRcdFx0Zm4gPSBzZWxlY3RvcjtcclxuXHRcdFx0c2VsZWN0b3IgPSB1bmRlZmluZWQ7XHJcblx0XHR9XHJcblx0XHRpZiAoIGZuID09PSBmYWxzZSApIHtcclxuXHRcdFx0Zm4gPSByZXR1cm5GYWxzZTtcclxuXHRcdH1cclxuXHRcdHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKSB7XHJcblx0XHRcdGpRdWVyeS5ldmVudC5yZW1vdmUoIHRoaXMsIHR5cGVzLCBmbiwgc2VsZWN0b3IgKTtcclxuXHRcdH0pO1xyXG5cdH0sXHJcblxyXG5cdHRyaWdnZXI6IGZ1bmN0aW9uKCB0eXBlLCBkYXRhICkge1xyXG5cdFx0cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpIHtcclxuXHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoIHR5cGUsIGRhdGEsIHRoaXMgKTtcclxuXHRcdH0pO1xyXG5cdH0sXHJcblx0dHJpZ2dlckhhbmRsZXI6IGZ1bmN0aW9uKCB0eXBlLCBkYXRhICkge1xyXG5cdFx0dmFyIGVsZW0gPSB0aGlzWzBdO1xyXG5cdFx0aWYgKCBlbGVtICkge1xyXG5cdFx0XHRyZXR1cm4galF1ZXJ5LmV2ZW50LnRyaWdnZXIoIHR5cGUsIGRhdGEsIGVsZW0sIHRydWUgKTtcclxuXHRcdH1cclxuXHR9XHJcbn0pO1xyXG5cclxuXHJcbnZhclxyXG5cdHJ4aHRtbFRhZyA9IC88KD8hYXJlYXxicnxjb2x8ZW1iZWR8aHJ8aW1nfGlucHV0fGxpbmt8bWV0YXxwYXJhbSkoKFtcXHc6XSspW14+XSopXFwvPi9naSxcclxuXHRydGFnTmFtZSA9IC88KFtcXHc6XSspLyxcclxuXHRyaHRtbCA9IC88fCYjP1xcdys7LyxcclxuXHRybm9Jbm5lcmh0bWwgPSAvPCg/OnNjcmlwdHxzdHlsZXxsaW5rKS9pLFxyXG5cdC8vIGNoZWNrZWQ9XCJjaGVja2VkXCIgb3IgY2hlY2tlZFxyXG5cdHJjaGVja2VkID0gL2NoZWNrZWRcXHMqKD86W149XXw9XFxzKi5jaGVja2VkLikvaSxcclxuXHRyc2NyaXB0VHlwZSA9IC9eJHxcXC8oPzpqYXZhfGVjbWEpc2NyaXB0L2ksXHJcblx0cnNjcmlwdFR5cGVNYXNrZWQgPSAvXnRydWVcXC8oLiopLyxcclxuXHRyY2xlYW5TY3JpcHQgPSAvXlxccyo8ISg/OlxcW0NEQVRBXFxbfC0tKXwoPzpcXF1cXF18LS0pPlxccyokL2csXHJcblxyXG5cdC8vIFdlIGhhdmUgdG8gY2xvc2UgdGhlc2UgdGFncyB0byBzdXBwb3J0IFhIVE1MICgjMTMyMDApXHJcblx0d3JhcE1hcCA9IHtcclxuXHJcblx0XHQvLyBTdXBwb3J0OiBJRTlcclxuXHRcdG9wdGlvbjogWyAxLCBcIjxzZWxlY3QgbXVsdGlwbGU9J211bHRpcGxlJz5cIiwgXCI8L3NlbGVjdD5cIiBdLFxyXG5cclxuXHRcdHRoZWFkOiBbIDEsIFwiPHRhYmxlPlwiLCBcIjwvdGFibGU+XCIgXSxcclxuXHRcdGNvbDogWyAyLCBcIjx0YWJsZT48Y29sZ3JvdXA+XCIsIFwiPC9jb2xncm91cD48L3RhYmxlPlwiIF0sXHJcblx0XHR0cjogWyAyLCBcIjx0YWJsZT48dGJvZHk+XCIsIFwiPC90Ym9keT48L3RhYmxlPlwiIF0sXHJcblx0XHR0ZDogWyAzLCBcIjx0YWJsZT48dGJvZHk+PHRyPlwiLCBcIjwvdHI+PC90Ym9keT48L3RhYmxlPlwiIF0sXHJcblxyXG5cdFx0X2RlZmF1bHQ6IFsgMCwgXCJcIiwgXCJcIiBdXHJcblx0fTtcclxuXHJcbi8vIFN1cHBvcnQ6IElFOVxyXG53cmFwTWFwLm9wdGdyb3VwID0gd3JhcE1hcC5vcHRpb247XHJcblxyXG53cmFwTWFwLnRib2R5ID0gd3JhcE1hcC50Zm9vdCA9IHdyYXBNYXAuY29sZ3JvdXAgPSB3cmFwTWFwLmNhcHRpb24gPSB3cmFwTWFwLnRoZWFkO1xyXG53cmFwTWFwLnRoID0gd3JhcE1hcC50ZDtcclxuXHJcbi8vIFN1cHBvcnQ6IDEueCBjb21wYXRpYmlsaXR5XHJcbi8vIE1hbmlwdWxhdGluZyB0YWJsZXMgcmVxdWlyZXMgYSB0Ym9keVxyXG5mdW5jdGlvbiBtYW5pcHVsYXRpb25UYXJnZXQoIGVsZW0sIGNvbnRlbnQgKSB7XHJcblx0cmV0dXJuIGpRdWVyeS5ub2RlTmFtZSggZWxlbSwgXCJ0YWJsZVwiICkgJiZcclxuXHRcdGpRdWVyeS5ub2RlTmFtZSggY29udGVudC5ub2RlVHlwZSAhPT0gMTEgPyBjb250ZW50IDogY29udGVudC5maXJzdENoaWxkLCBcInRyXCIgKSA/XHJcblxyXG5cdFx0ZWxlbS5nZXRFbGVtZW50c0J5VGFnTmFtZShcInRib2R5XCIpWzBdIHx8XHJcblx0XHRcdGVsZW0uYXBwZW5kQ2hpbGQoIGVsZW0ub3duZXJEb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidGJvZHlcIikgKSA6XHJcblx0XHRlbGVtO1xyXG59XHJcblxyXG4vLyBSZXBsYWNlL3Jlc3RvcmUgdGhlIHR5cGUgYXR0cmlidXRlIG9mIHNjcmlwdCBlbGVtZW50cyBmb3Igc2FmZSBET00gbWFuaXB1bGF0aW9uXHJcbmZ1bmN0aW9uIGRpc2FibGVTY3JpcHQoIGVsZW0gKSB7XHJcblx0ZWxlbS50eXBlID0gKGVsZW0uZ2V0QXR0cmlidXRlKFwidHlwZVwiKSAhPT0gbnVsbCkgKyBcIi9cIiArIGVsZW0udHlwZTtcclxuXHRyZXR1cm4gZWxlbTtcclxufVxyXG5mdW5jdGlvbiByZXN0b3JlU2NyaXB0KCBlbGVtICkge1xyXG5cdHZhciBtYXRjaCA9IHJzY3JpcHRUeXBlTWFza2VkLmV4ZWMoIGVsZW0udHlwZSApO1xyXG5cclxuXHRpZiAoIG1hdGNoICkge1xyXG5cdFx0ZWxlbS50eXBlID0gbWF0Y2hbIDEgXTtcclxuXHR9IGVsc2Uge1xyXG5cdFx0ZWxlbS5yZW1vdmVBdHRyaWJ1dGUoXCJ0eXBlXCIpO1xyXG5cdH1cclxuXHJcblx0cmV0dXJuIGVsZW07XHJcbn1cclxuXHJcbi8vIE1hcmsgc2NyaXB0cyBhcyBoYXZpbmcgYWxyZWFkeSBiZWVuIGV2YWx1YXRlZFxyXG5mdW5jdGlvbiBzZXRHbG9iYWxFdmFsKCBlbGVtcywgcmVmRWxlbWVudHMgKSB7XHJcblx0dmFyIGkgPSAwLFxyXG5cdFx0bCA9IGVsZW1zLmxlbmd0aDtcclxuXHJcblx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xyXG5cdFx0ZGF0YV9wcml2LnNldChcclxuXHRcdFx0ZWxlbXNbIGkgXSwgXCJnbG9iYWxFdmFsXCIsICFyZWZFbGVtZW50cyB8fCBkYXRhX3ByaXYuZ2V0KCByZWZFbGVtZW50c1sgaSBdLCBcImdsb2JhbEV2YWxcIiApXHJcblx0XHQpO1xyXG5cdH1cclxufVxyXG5cclxuZnVuY3Rpb24gY2xvbmVDb3B5RXZlbnQoIHNyYywgZGVzdCApIHtcclxuXHR2YXIgaSwgbCwgdHlwZSwgcGRhdGFPbGQsIHBkYXRhQ3VyLCB1ZGF0YU9sZCwgdWRhdGFDdXIsIGV2ZW50cztcclxuXHJcblx0aWYgKCBkZXN0Lm5vZGVUeXBlICE9PSAxICkge1xyXG5cdFx0cmV0dXJuO1xyXG5cdH1cclxuXHJcblx0Ly8gMS4gQ29weSBwcml2YXRlIGRhdGE6IGV2ZW50cywgaGFuZGxlcnMsIGV0Yy5cclxuXHRpZiAoIGRhdGFfcHJpdi5oYXNEYXRhKCBzcmMgKSApIHtcclxuXHRcdHBkYXRhT2xkID0gZGF0YV9wcml2LmFjY2Vzcyggc3JjICk7XHJcblx0XHRwZGF0YUN1ciA9IGRhdGFfcHJpdi5zZXQoIGRlc3QsIHBkYXRhT2xkICk7XHJcblx0XHRldmVudHMgPSBwZGF0YU9sZC5ldmVudHM7XHJcblxyXG5cdFx0aWYgKCBldmVudHMgKSB7XHJcblx0XHRcdGRlbGV0ZSBwZGF0YUN1ci5oYW5kbGU7XHJcblx0XHRcdHBkYXRhQ3VyLmV2ZW50cyA9IHt9O1xyXG5cclxuXHRcdFx0Zm9yICggdHlwZSBpbiBldmVudHMgKSB7XHJcblx0XHRcdFx0Zm9yICggaSA9IDAsIGwgPSBldmVudHNbIHR5cGUgXS5sZW5ndGg7IGkgPCBsOyBpKysgKSB7XHJcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQuYWRkKCBkZXN0LCB0eXBlLCBldmVudHNbIHR5cGUgXVsgaSBdICk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHQvLyAyLiBDb3B5IHVzZXIgZGF0YVxyXG5cdGlmICggZGF0YV91c2VyLmhhc0RhdGEoIHNyYyApICkge1xyXG5cdFx0dWRhdGFPbGQgPSBkYXRhX3VzZXIuYWNjZXNzKCBzcmMgKTtcclxuXHRcdHVkYXRhQ3VyID0galF1ZXJ5LmV4dGVuZCgge30sIHVkYXRhT2xkICk7XHJcblxyXG5cdFx0ZGF0YV91c2VyLnNldCggZGVzdCwgdWRhdGFDdXIgKTtcclxuXHR9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldEFsbCggY29udGV4dCwgdGFnICkge1xyXG5cdHZhciByZXQgPSBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lID8gY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggdGFnIHx8IFwiKlwiICkgOlxyXG5cdFx0XHRjb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwgPyBjb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwoIHRhZyB8fCBcIipcIiApIDpcclxuXHRcdFx0W107XHJcblxyXG5cdHJldHVybiB0YWcgPT09IHVuZGVmaW5lZCB8fCB0YWcgJiYgalF1ZXJ5Lm5vZGVOYW1lKCBjb250ZXh0LCB0YWcgKSA/XHJcblx0XHRqUXVlcnkubWVyZ2UoIFsgY29udGV4dCBdLCByZXQgKSA6XHJcblx0XHRyZXQ7XHJcbn1cclxuXHJcbi8vIEZpeCBJRSBidWdzLCBzZWUgc3VwcG9ydCB0ZXN0c1xyXG5mdW5jdGlvbiBmaXhJbnB1dCggc3JjLCBkZXN0ICkge1xyXG5cdHZhciBub2RlTmFtZSA9IGRlc3Qubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcclxuXHJcblx0Ly8gRmFpbHMgdG8gcGVyc2lzdCB0aGUgY2hlY2tlZCBzdGF0ZSBvZiBhIGNsb25lZCBjaGVja2JveCBvciByYWRpbyBidXR0b24uXHJcblx0aWYgKCBub2RlTmFtZSA9PT0gXCJpbnB1dFwiICYmIHJjaGVja2FibGVUeXBlLnRlc3QoIHNyYy50eXBlICkgKSB7XHJcblx0XHRkZXN0LmNoZWNrZWQgPSBzcmMuY2hlY2tlZDtcclxuXHJcblx0Ly8gRmFpbHMgdG8gcmV0dXJuIHRoZSBzZWxlY3RlZCBvcHRpb24gdG8gdGhlIGRlZmF1bHQgc2VsZWN0ZWQgc3RhdGUgd2hlbiBjbG9uaW5nIG9wdGlvbnNcclxuXHR9IGVsc2UgaWYgKCBub2RlTmFtZSA9PT0gXCJpbnB1dFwiIHx8IG5vZGVOYW1lID09PSBcInRleHRhcmVhXCIgKSB7XHJcblx0XHRkZXN0LmRlZmF1bHRWYWx1ZSA9IHNyYy5kZWZhdWx0VmFsdWU7XHJcblx0fVxyXG59XHJcblxyXG5qUXVlcnkuZXh0ZW5kKHtcclxuXHRjbG9uZTogZnVuY3Rpb24oIGVsZW0sIGRhdGFBbmRFdmVudHMsIGRlZXBEYXRhQW5kRXZlbnRzICkge1xyXG5cdFx0dmFyIGksIGwsIHNyY0VsZW1lbnRzLCBkZXN0RWxlbWVudHMsXHJcblx0XHRcdGNsb25lID0gZWxlbS5jbG9uZU5vZGUoIHRydWUgKSxcclxuXHRcdFx0aW5QYWdlID0galF1ZXJ5LmNvbnRhaW5zKCBlbGVtLm93bmVyRG9jdW1lbnQsIGVsZW0gKTtcclxuXHJcblx0XHQvLyBGaXggSUUgY2xvbmluZyBpc3N1ZXNcclxuXHRcdGlmICggIXN1cHBvcnQubm9DbG9uZUNoZWNrZWQgJiYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGVsZW0ubm9kZVR5cGUgPT09IDExICkgJiZcclxuXHRcdFx0XHQhalF1ZXJ5LmlzWE1MRG9jKCBlbGVtICkgKSB7XHJcblxyXG5cdFx0XHQvLyBXZSBlc2NoZXcgU2l6emxlIGhlcmUgZm9yIHBlcmZvcm1hbmNlIHJlYXNvbnM6IGh0dHA6Ly9qc3BlcmYuY29tL2dldGFsbC12cy1zaXp6bGUvMlxyXG5cdFx0XHRkZXN0RWxlbWVudHMgPSBnZXRBbGwoIGNsb25lICk7XHJcblx0XHRcdHNyY0VsZW1lbnRzID0gZ2V0QWxsKCBlbGVtICk7XHJcblxyXG5cdFx0XHRmb3IgKCBpID0gMCwgbCA9IHNyY0VsZW1lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKyApIHtcclxuXHRcdFx0XHRmaXhJbnB1dCggc3JjRWxlbWVudHNbIGkgXSwgZGVzdEVsZW1lbnRzWyBpIF0gKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdC8vIENvcHkgdGhlIGV2ZW50cyBmcm9tIHRoZSBvcmlnaW5hbCB0byB0aGUgY2xvbmVcclxuXHRcdGlmICggZGF0YUFuZEV2ZW50cyApIHtcclxuXHRcdFx0aWYgKCBkZWVwRGF0YUFuZEV2ZW50cyApIHtcclxuXHRcdFx0XHRzcmNFbGVtZW50cyA9IHNyY0VsZW1lbnRzIHx8IGdldEFsbCggZWxlbSApO1xyXG5cdFx0XHRcdGRlc3RFbGVtZW50cyA9IGRlc3RFbGVtZW50cyB8fCBnZXRBbGwoIGNsb25lICk7XHJcblxyXG5cdFx0XHRcdGZvciAoIGkgPSAwLCBsID0gc3JjRWxlbWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrICkge1xyXG5cdFx0XHRcdFx0Y2xvbmVDb3B5RXZlbnQoIHNyY0VsZW1lbnRzWyBpIF0sIGRlc3RFbGVtZW50c1sgaSBdICk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdGNsb25lQ29weUV2ZW50KCBlbGVtLCBjbG9uZSApO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gUHJlc2VydmUgc2NyaXB0IGV2YWx1YXRpb24gaGlzdG9yeVxyXG5cdFx0ZGVzdEVsZW1lbnRzID0gZ2V0QWxsKCBjbG9uZSwgXCJzY3JpcHRcIiApO1xyXG5cdFx0aWYgKCBkZXN0RWxlbWVudHMubGVuZ3RoID4gMCApIHtcclxuXHRcdFx0c2V0R2xvYmFsRXZhbCggZGVzdEVsZW1lbnRzLCAhaW5QYWdlICYmIGdldEFsbCggZWxlbSwgXCJzY3JpcHRcIiApICk7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gUmV0dXJuIHRoZSBjbG9uZWQgc2V0XHJcblx0XHRyZXR1cm4gY2xvbmU7XHJcblx0fSxcclxuXHJcblx0YnVpbGRGcmFnbWVudDogZnVuY3Rpb24oIGVsZW1zLCBjb250ZXh0LCBzY3JpcHRzLCBzZWxlY3Rpb24gKSB7XHJcblx0XHR2YXIgZWxlbSwgdG1wLCB0YWcsIHdyYXAsIGNvbnRhaW5zLCBqLFxyXG5cdFx0XHRmcmFnbWVudCA9IGNvbnRleHQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpLFxyXG5cdFx0XHRub2RlcyA9IFtdLFxyXG5cdFx0XHRpID0gMCxcclxuXHRcdFx0bCA9IGVsZW1zLmxlbmd0aDtcclxuXHJcblx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XHJcblx0XHRcdGVsZW0gPSBlbGVtc1sgaSBdO1xyXG5cclxuXHRcdFx0aWYgKCBlbGVtIHx8IGVsZW0gPT09IDAgKSB7XHJcblxyXG5cdFx0XHRcdC8vIEFkZCBub2RlcyBkaXJlY3RseVxyXG5cdFx0XHRcdGlmICggalF1ZXJ5LnR5cGUoIGVsZW0gKSA9PT0gXCJvYmplY3RcIiApIHtcclxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFF0V2ViS2l0LCBQaGFudG9tSlNcclxuXHRcdFx0XHRcdC8vIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcclxuXHRcdFx0XHRcdGpRdWVyeS5tZXJnZSggbm9kZXMsIGVsZW0ubm9kZVR5cGUgPyBbIGVsZW0gXSA6IGVsZW0gKTtcclxuXHJcblx0XHRcdFx0Ly8gQ29udmVydCBub24taHRtbCBpbnRvIGEgdGV4dCBub2RlXHJcblx0XHRcdFx0fSBlbHNlIGlmICggIXJodG1sLnRlc3QoIGVsZW0gKSApIHtcclxuXHRcdFx0XHRcdG5vZGVzLnB1c2goIGNvbnRleHQuY3JlYXRlVGV4dE5vZGUoIGVsZW0gKSApO1xyXG5cclxuXHRcdFx0XHQvLyBDb252ZXJ0IGh0bWwgaW50byBET00gbm9kZXNcclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0dG1wID0gdG1wIHx8IGZyYWdtZW50LmFwcGVuZENoaWxkKCBjb250ZXh0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikgKTtcclxuXHJcblx0XHRcdFx0XHQvLyBEZXNlcmlhbGl6ZSBhIHN0YW5kYXJkIHJlcHJlc2VudGF0aW9uXHJcblx0XHRcdFx0XHR0YWcgPSAoIHJ0YWdOYW1lLmV4ZWMoIGVsZW0gKSB8fCBbIFwiXCIsIFwiXCIgXSApWyAxIF0udG9Mb3dlckNhc2UoKTtcclxuXHRcdFx0XHRcdHdyYXAgPSB3cmFwTWFwWyB0YWcgXSB8fCB3cmFwTWFwLl9kZWZhdWx0O1xyXG5cdFx0XHRcdFx0dG1wLmlubmVySFRNTCA9IHdyYXBbIDEgXSArIGVsZW0ucmVwbGFjZSggcnhodG1sVGFnLCBcIjwkMT48LyQyPlwiICkgKyB3cmFwWyAyIF07XHJcblxyXG5cdFx0XHRcdFx0Ly8gRGVzY2VuZCB0aHJvdWdoIHdyYXBwZXJzIHRvIHRoZSByaWdodCBjb250ZW50XHJcblx0XHRcdFx0XHRqID0gd3JhcFsgMCBdO1xyXG5cdFx0XHRcdFx0d2hpbGUgKCBqLS0gKSB7XHJcblx0XHRcdFx0XHRcdHRtcCA9IHRtcC5sYXN0Q2hpbGQ7XHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogUXRXZWJLaXQsIFBoYW50b21KU1xyXG5cdFx0XHRcdFx0Ly8gcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxyXG5cdFx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCBub2RlcywgdG1wLmNoaWxkTm9kZXMgKTtcclxuXHJcblx0XHRcdFx0XHQvLyBSZW1lbWJlciB0aGUgdG9wLWxldmVsIGNvbnRhaW5lclxyXG5cdFx0XHRcdFx0dG1wID0gZnJhZ21lbnQuZmlyc3RDaGlsZDtcclxuXHJcblx0XHRcdFx0XHQvLyBFbnN1cmUgdGhlIGNyZWF0ZWQgbm9kZXMgYXJlIG9ycGhhbmVkICgjMTIzOTIpXHJcblx0XHRcdFx0XHR0bXAudGV4dENvbnRlbnQgPSBcIlwiO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdC8vIFJlbW92ZSB3cmFwcGVyIGZyb20gZnJhZ21lbnRcclxuXHRcdGZyYWdtZW50LnRleHRDb250ZW50ID0gXCJcIjtcclxuXHJcblx0XHRpID0gMDtcclxuXHRcdHdoaWxlICggKGVsZW0gPSBub2Rlc1sgaSsrIF0pICkge1xyXG5cclxuXHRcdFx0Ly8gIzQwODcgLSBJZiBvcmlnaW4gYW5kIGRlc3RpbmF0aW9uIGVsZW1lbnRzIGFyZSB0aGUgc2FtZSwgYW5kIHRoaXMgaXNcclxuXHRcdFx0Ly8gdGhhdCBlbGVtZW50LCBkbyBub3QgZG8gYW55dGhpbmdcclxuXHRcdFx0aWYgKCBzZWxlY3Rpb24gJiYgalF1ZXJ5LmluQXJyYXkoIGVsZW0sIHNlbGVjdGlvbiApICE9PSAtMSApIHtcclxuXHRcdFx0XHRjb250aW51ZTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Y29udGFpbnMgPSBqUXVlcnkuY29udGFpbnMoIGVsZW0ub3duZXJEb2N1bWVudCwgZWxlbSApO1xyXG5cclxuXHRcdFx0Ly8gQXBwZW5kIHRvIGZyYWdtZW50XHJcblx0XHRcdHRtcCA9IGdldEFsbCggZnJhZ21lbnQuYXBwZW5kQ2hpbGQoIGVsZW0gKSwgXCJzY3JpcHRcIiApO1xyXG5cclxuXHRcdFx0Ly8gUHJlc2VydmUgc2NyaXB0IGV2YWx1YXRpb24gaGlzdG9yeVxyXG5cdFx0XHRpZiAoIGNvbnRhaW5zICkge1xyXG5cdFx0XHRcdHNldEdsb2JhbEV2YWwoIHRtcCApO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBDYXB0dXJlIGV4ZWN1dGFibGVzXHJcblx0XHRcdGlmICggc2NyaXB0cyApIHtcclxuXHRcdFx0XHRqID0gMDtcclxuXHRcdFx0XHR3aGlsZSAoIChlbGVtID0gdG1wWyBqKysgXSkgKSB7XHJcblx0XHRcdFx0XHRpZiAoIHJzY3JpcHRUeXBlLnRlc3QoIGVsZW0udHlwZSB8fCBcIlwiICkgKSB7XHJcblx0XHRcdFx0XHRcdHNjcmlwdHMucHVzaCggZWxlbSApO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiBmcmFnbWVudDtcclxuXHR9LFxyXG5cclxuXHRjbGVhbkRhdGE6IGZ1bmN0aW9uKCBlbGVtcyApIHtcclxuXHRcdHZhciBkYXRhLCBlbGVtLCB0eXBlLCBrZXksXHJcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbCxcclxuXHRcdFx0aSA9IDA7XHJcblxyXG5cdFx0Zm9yICggOyAoZWxlbSA9IGVsZW1zWyBpIF0pICE9PSB1bmRlZmluZWQ7IGkrKyApIHtcclxuXHRcdFx0aWYgKCBqUXVlcnkuYWNjZXB0RGF0YSggZWxlbSApICkge1xyXG5cdFx0XHRcdGtleSA9IGVsZW1bIGRhdGFfcHJpdi5leHBhbmRvIF07XHJcblxyXG5cdFx0XHRcdGlmICgga2V5ICYmIChkYXRhID0gZGF0YV9wcml2LmNhY2hlWyBrZXkgXSkgKSB7XHJcblx0XHRcdFx0XHRpZiAoIGRhdGEuZXZlbnRzICkge1xyXG5cdFx0XHRcdFx0XHRmb3IgKCB0eXBlIGluIGRhdGEuZXZlbnRzICkge1xyXG5cdFx0XHRcdFx0XHRcdGlmICggc3BlY2lhbFsgdHlwZSBdICkge1xyXG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnJlbW92ZSggZWxlbSwgdHlwZSApO1xyXG5cclxuXHRcdFx0XHRcdFx0XHQvLyBUaGlzIGlzIGEgc2hvcnRjdXQgdG8gYXZvaWQgalF1ZXJ5LmV2ZW50LnJlbW92ZSdzIG92ZXJoZWFkXHJcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5yZW1vdmVFdmVudCggZWxlbSwgdHlwZSwgZGF0YS5oYW5kbGUgKTtcclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdGlmICggZGF0YV9wcml2LmNhY2hlWyBrZXkgXSApIHtcclxuXHRcdFx0XHRcdFx0Ly8gRGlzY2FyZCBhbnkgcmVtYWluaW5nIGBwcml2YXRlYCBkYXRhXHJcblx0XHRcdFx0XHRcdGRlbGV0ZSBkYXRhX3ByaXYuY2FjaGVbIGtleSBdO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0XHQvLyBEaXNjYXJkIGFueSByZW1haW5pbmcgYHVzZXJgIGRhdGFcclxuXHRcdFx0ZGVsZXRlIGRhdGFfdXNlci5jYWNoZVsgZWxlbVsgZGF0YV91c2VyLmV4cGFuZG8gXSBdO1xyXG5cdFx0fVxyXG5cdH1cclxufSk7XHJcblxyXG5qUXVlcnkuZm4uZXh0ZW5kKHtcclxuXHR0ZXh0OiBmdW5jdGlvbiggdmFsdWUgKSB7XHJcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggdmFsdWUgKSB7XHJcblx0XHRcdHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID9cclxuXHRcdFx0XHRqUXVlcnkudGV4dCggdGhpcyApIDpcclxuXHRcdFx0XHR0aGlzLmVtcHR5KCkuZWFjaChmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRcdGlmICggdGhpcy5ub2RlVHlwZSA9PT0gMSB8fCB0aGlzLm5vZGVUeXBlID09PSAxMSB8fCB0aGlzLm5vZGVUeXBlID09PSA5ICkge1xyXG5cdFx0XHRcdFx0XHR0aGlzLnRleHRDb250ZW50ID0gdmFsdWU7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fSk7XHJcblx0XHR9LCBudWxsLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCApO1xyXG5cdH0sXHJcblxyXG5cdGFwcGVuZDogZnVuY3Rpb24oKSB7XHJcblx0XHRyZXR1cm4gdGhpcy5kb21NYW5pcCggYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcclxuXHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlID09PSAxIHx8IHRoaXMubm9kZVR5cGUgPT09IDExIHx8IHRoaXMubm9kZVR5cGUgPT09IDkgKSB7XHJcblx0XHRcdFx0dmFyIHRhcmdldCA9IG1hbmlwdWxhdGlvblRhcmdldCggdGhpcywgZWxlbSApO1xyXG5cdFx0XHRcdHRhcmdldC5hcHBlbmRDaGlsZCggZWxlbSApO1xyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHR9LFxyXG5cclxuXHRwcmVwZW5kOiBmdW5jdGlvbigpIHtcclxuXHRcdHJldHVybiB0aGlzLmRvbU1hbmlwKCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0XHRpZiAoIHRoaXMubm9kZVR5cGUgPT09IDEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gMTEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gOSApIHtcclxuXHRcdFx0XHR2YXIgdGFyZ2V0ID0gbWFuaXB1bGF0aW9uVGFyZ2V0KCB0aGlzLCBlbGVtICk7XHJcblx0XHRcdFx0dGFyZ2V0Lmluc2VydEJlZm9yZSggZWxlbSwgdGFyZ2V0LmZpcnN0Q2hpbGQgKTtcclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblx0fSxcclxuXHJcblx0YmVmb3JlOiBmdW5jdGlvbigpIHtcclxuXHRcdHJldHVybiB0aGlzLmRvbU1hbmlwKCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0XHRpZiAoIHRoaXMucGFyZW50Tm9kZSApIHtcclxuXHRcdFx0XHR0aGlzLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKCBlbGVtLCB0aGlzICk7XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cdH0sXHJcblxyXG5cdGFmdGVyOiBmdW5jdGlvbigpIHtcclxuXHRcdHJldHVybiB0aGlzLmRvbU1hbmlwKCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0XHRpZiAoIHRoaXMucGFyZW50Tm9kZSApIHtcclxuXHRcdFx0XHR0aGlzLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKCBlbGVtLCB0aGlzLm5leHRTaWJsaW5nICk7XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cdH0sXHJcblxyXG5cdHJlbW92ZTogZnVuY3Rpb24oIHNlbGVjdG9yLCBrZWVwRGF0YSAvKiBJbnRlcm5hbCBVc2UgT25seSAqLyApIHtcclxuXHRcdHZhciBlbGVtLFxyXG5cdFx0XHRlbGVtcyA9IHNlbGVjdG9yID8galF1ZXJ5LmZpbHRlciggc2VsZWN0b3IsIHRoaXMgKSA6IHRoaXMsXHJcblx0XHRcdGkgPSAwO1xyXG5cclxuXHRcdGZvciAoIDsgKGVsZW0gPSBlbGVtc1tpXSkgIT0gbnVsbDsgaSsrICkge1xyXG5cdFx0XHRpZiAoICFrZWVwRGF0YSAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xyXG5cdFx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggZWxlbSApICk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGlmICggZWxlbS5wYXJlbnROb2RlICkge1xyXG5cdFx0XHRcdGlmICgga2VlcERhdGEgJiYgalF1ZXJ5LmNvbnRhaW5zKCBlbGVtLm93bmVyRG9jdW1lbnQsIGVsZW0gKSApIHtcclxuXHRcdFx0XHRcdHNldEdsb2JhbEV2YWwoIGdldEFsbCggZWxlbSwgXCJzY3JpcHRcIiApICk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGVsZW0ucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggZWxlbSApO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblx0fSxcclxuXHJcblx0ZW1wdHk6IGZ1bmN0aW9uKCkge1xyXG5cdFx0dmFyIGVsZW0sXHJcblx0XHRcdGkgPSAwO1xyXG5cclxuXHRcdGZvciAoIDsgKGVsZW0gPSB0aGlzW2ldKSAhPSBudWxsOyBpKysgKSB7XHJcblx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcclxuXHJcblx0XHRcdFx0Ly8gUHJldmVudCBtZW1vcnkgbGVha3NcclxuXHRcdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIGVsZW0sIGZhbHNlICkgKTtcclxuXHJcblx0XHRcdFx0Ly8gUmVtb3ZlIGFueSByZW1haW5pbmcgbm9kZXNcclxuXHRcdFx0XHRlbGVtLnRleHRDb250ZW50ID0gXCJcIjtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cdH0sXHJcblxyXG5cdGNsb25lOiBmdW5jdGlvbiggZGF0YUFuZEV2ZW50cywgZGVlcERhdGFBbmRFdmVudHMgKSB7XHJcblx0XHRkYXRhQW5kRXZlbnRzID0gZGF0YUFuZEV2ZW50cyA9PSBudWxsID8gZmFsc2UgOiBkYXRhQW5kRXZlbnRzO1xyXG5cdFx0ZGVlcERhdGFBbmRFdmVudHMgPSBkZWVwRGF0YUFuZEV2ZW50cyA9PSBudWxsID8gZGF0YUFuZEV2ZW50cyA6IGRlZXBEYXRhQW5kRXZlbnRzO1xyXG5cclxuXHRcdHJldHVybiB0aGlzLm1hcChmdW5jdGlvbigpIHtcclxuXHRcdFx0cmV0dXJuIGpRdWVyeS5jbG9uZSggdGhpcywgZGF0YUFuZEV2ZW50cywgZGVlcERhdGFBbmRFdmVudHMgKTtcclxuXHRcdH0pO1xyXG5cdH0sXHJcblxyXG5cdGh0bWw6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcclxuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcclxuXHRcdFx0dmFyIGVsZW0gPSB0aGlzWyAwIF0gfHwge30sXHJcblx0XHRcdFx0aSA9IDAsXHJcblx0XHRcdFx0bCA9IHRoaXMubGVuZ3RoO1xyXG5cclxuXHRcdFx0aWYgKCB2YWx1ZSA9PT0gdW5kZWZpbmVkICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XHJcblx0XHRcdFx0cmV0dXJuIGVsZW0uaW5uZXJIVE1MO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBTZWUgaWYgd2UgY2FuIHRha2UgYSBzaG9ydGN1dCBhbmQganVzdCB1c2UgaW5uZXJIVE1MXHJcblx0XHRcdGlmICggdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICYmICFybm9Jbm5lcmh0bWwudGVzdCggdmFsdWUgKSAmJlxyXG5cdFx0XHRcdCF3cmFwTWFwWyAoIHJ0YWdOYW1lLmV4ZWMoIHZhbHVlICkgfHwgWyBcIlwiLCBcIlwiIF0gKVsgMSBdLnRvTG93ZXJDYXNlKCkgXSApIHtcclxuXHJcblx0XHRcdFx0dmFsdWUgPSB2YWx1ZS5yZXBsYWNlKCByeGh0bWxUYWcsIFwiPCQxPjwvJDI+XCIgKTtcclxuXHJcblx0XHRcdFx0dHJ5IHtcclxuXHRcdFx0XHRcdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcclxuXHRcdFx0XHRcdFx0ZWxlbSA9IHRoaXNbIGkgXSB8fCB7fTtcclxuXHJcblx0XHRcdFx0XHRcdC8vIFJlbW92ZSBlbGVtZW50IG5vZGVzIGFuZCBwcmV2ZW50IG1lbW9yeSBsZWFrc1xyXG5cdFx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XHJcblx0XHRcdFx0XHRcdFx0alF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCBlbGVtLCBmYWxzZSApICk7XHJcblx0XHRcdFx0XHRcdFx0ZWxlbS5pbm5lckhUTUwgPSB2YWx1ZTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdGVsZW0gPSAwO1xyXG5cclxuXHRcdFx0XHQvLyBJZiB1c2luZyBpbm5lckhUTUwgdGhyb3dzIGFuIGV4Y2VwdGlvbiwgdXNlIHRoZSBmYWxsYmFjayBtZXRob2RcclxuXHRcdFx0XHR9IGNhdGNoKCBlICkge31cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0aWYgKCBlbGVtICkge1xyXG5cdFx0XHRcdHRoaXMuZW1wdHkoKS5hcHBlbmQoIHZhbHVlICk7XHJcblx0XHRcdH1cclxuXHRcdH0sIG51bGwsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoICk7XHJcblx0fSxcclxuXHJcblx0cmVwbGFjZVdpdGg6IGZ1bmN0aW9uKCkge1xyXG5cdFx0dmFyIGFyZyA9IGFyZ3VtZW50c1sgMCBdO1xyXG5cclxuXHRcdC8vIE1ha2UgdGhlIGNoYW5nZXMsIHJlcGxhY2luZyBlYWNoIGNvbnRleHQgZWxlbWVudCB3aXRoIHRoZSBuZXcgY29udGVudFxyXG5cdFx0dGhpcy5kb21NYW5pcCggYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcclxuXHRcdFx0YXJnID0gdGhpcy5wYXJlbnROb2RlO1xyXG5cclxuXHRcdFx0alF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCB0aGlzICkgKTtcclxuXHJcblx0XHRcdGlmICggYXJnICkge1xyXG5cdFx0XHRcdGFyZy5yZXBsYWNlQ2hpbGQoIGVsZW0sIHRoaXMgKTtcclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblxyXG5cdFx0Ly8gRm9yY2UgcmVtb3ZhbCBpZiB0aGVyZSB3YXMgbm8gbmV3IGNvbnRlbnQgKGUuZy4sIGZyb20gZW1wdHkgYXJndW1lbnRzKVxyXG5cdFx0cmV0dXJuIGFyZyAmJiAoYXJnLmxlbmd0aCB8fCBhcmcubm9kZVR5cGUpID8gdGhpcyA6IHRoaXMucmVtb3ZlKCk7XHJcblx0fSxcclxuXHJcblx0ZGV0YWNoOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XHJcblx0XHRyZXR1cm4gdGhpcy5yZW1vdmUoIHNlbGVjdG9yLCB0cnVlICk7XHJcblx0fSxcclxuXHJcblx0ZG9tTWFuaXA6IGZ1bmN0aW9uKCBhcmdzLCBjYWxsYmFjayApIHtcclxuXHJcblx0XHQvLyBGbGF0dGVuIGFueSBuZXN0ZWQgYXJyYXlzXHJcblx0XHRhcmdzID0gY29uY2F0LmFwcGx5KCBbXSwgYXJncyApO1xyXG5cclxuXHRcdHZhciBmcmFnbWVudCwgZmlyc3QsIHNjcmlwdHMsIGhhc1NjcmlwdHMsIG5vZGUsIGRvYyxcclxuXHRcdFx0aSA9IDAsXHJcblx0XHRcdGwgPSB0aGlzLmxlbmd0aCxcclxuXHRcdFx0c2V0ID0gdGhpcyxcclxuXHRcdFx0aU5vQ2xvbmUgPSBsIC0gMSxcclxuXHRcdFx0dmFsdWUgPSBhcmdzWyAwIF0sXHJcblx0XHRcdGlzRnVuY3Rpb24gPSBqUXVlcnkuaXNGdW5jdGlvbiggdmFsdWUgKTtcclxuXHJcblx0XHQvLyBXZSBjYW4ndCBjbG9uZU5vZGUgZnJhZ21lbnRzIHRoYXQgY29udGFpbiBjaGVja2VkLCBpbiBXZWJLaXRcclxuXHRcdGlmICggaXNGdW5jdGlvbiB8fFxyXG5cdFx0XHRcdCggbCA+IDEgJiYgdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICYmXHJcblx0XHRcdFx0XHQhc3VwcG9ydC5jaGVja0Nsb25lICYmIHJjaGVja2VkLnRlc3QoIHZhbHVlICkgKSApIHtcclxuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiggaW5kZXggKSB7XHJcblx0XHRcdFx0dmFyIHNlbGYgPSBzZXQuZXEoIGluZGV4ICk7XHJcblx0XHRcdFx0aWYgKCBpc0Z1bmN0aW9uICkge1xyXG5cdFx0XHRcdFx0YXJnc1sgMCBdID0gdmFsdWUuY2FsbCggdGhpcywgaW5kZXgsIHNlbGYuaHRtbCgpICk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdHNlbGYuZG9tTWFuaXAoIGFyZ3MsIGNhbGxiYWNrICk7XHJcblx0XHRcdH0pO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmICggbCApIHtcclxuXHRcdFx0ZnJhZ21lbnQgPSBqUXVlcnkuYnVpbGRGcmFnbWVudCggYXJncywgdGhpc1sgMCBdLm93bmVyRG9jdW1lbnQsIGZhbHNlLCB0aGlzICk7XHJcblx0XHRcdGZpcnN0ID0gZnJhZ21lbnQuZmlyc3RDaGlsZDtcclxuXHJcblx0XHRcdGlmICggZnJhZ21lbnQuY2hpbGROb2Rlcy5sZW5ndGggPT09IDEgKSB7XHJcblx0XHRcdFx0ZnJhZ21lbnQgPSBmaXJzdDtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0aWYgKCBmaXJzdCApIHtcclxuXHRcdFx0XHRzY3JpcHRzID0galF1ZXJ5Lm1hcCggZ2V0QWxsKCBmcmFnbWVudCwgXCJzY3JpcHRcIiApLCBkaXNhYmxlU2NyaXB0ICk7XHJcblx0XHRcdFx0aGFzU2NyaXB0cyA9IHNjcmlwdHMubGVuZ3RoO1xyXG5cclxuXHRcdFx0XHQvLyBVc2UgdGhlIG9yaWdpbmFsIGZyYWdtZW50IGZvciB0aGUgbGFzdCBpdGVtIGluc3RlYWQgb2YgdGhlIGZpcnN0IGJlY2F1c2UgaXQgY2FuIGVuZCB1cFxyXG5cdFx0XHRcdC8vIGJlaW5nIGVtcHRpZWQgaW5jb3JyZWN0bHkgaW4gY2VydGFpbiBzaXR1YXRpb25zICgjODA3MCkuXHJcblx0XHRcdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xyXG5cdFx0XHRcdFx0bm9kZSA9IGZyYWdtZW50O1xyXG5cclxuXHRcdFx0XHRcdGlmICggaSAhPT0gaU5vQ2xvbmUgKSB7XHJcblx0XHRcdFx0XHRcdG5vZGUgPSBqUXVlcnkuY2xvbmUoIG5vZGUsIHRydWUsIHRydWUgKTtcclxuXHJcblx0XHRcdFx0XHRcdC8vIEtlZXAgcmVmZXJlbmNlcyB0byBjbG9uZWQgc2NyaXB0cyBmb3IgbGF0ZXIgcmVzdG9yYXRpb25cclxuXHRcdFx0XHRcdFx0aWYgKCBoYXNTY3JpcHRzICkge1xyXG5cdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFF0V2ViS2l0XHJcblx0XHRcdFx0XHRcdFx0Ly8galF1ZXJ5Lm1lcmdlIGJlY2F1c2UgcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93c1xyXG5cdFx0XHRcdFx0XHRcdGpRdWVyeS5tZXJnZSggc2NyaXB0cywgZ2V0QWxsKCBub2RlLCBcInNjcmlwdFwiICkgKTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdGNhbGxiYWNrLmNhbGwoIHRoaXNbIGkgXSwgbm9kZSwgaSApO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0aWYgKCBoYXNTY3JpcHRzICkge1xyXG5cdFx0XHRcdFx0ZG9jID0gc2NyaXB0c1sgc2NyaXB0cy5sZW5ndGggLSAxIF0ub3duZXJEb2N1bWVudDtcclxuXHJcblx0XHRcdFx0XHQvLyBSZWVuYWJsZSBzY3JpcHRzXHJcblx0XHRcdFx0XHRqUXVlcnkubWFwKCBzY3JpcHRzLCByZXN0b3JlU2NyaXB0ICk7XHJcblxyXG5cdFx0XHRcdFx0Ly8gRXZhbHVhdGUgZXhlY3V0YWJsZSBzY3JpcHRzIG9uIGZpcnN0IGRvY3VtZW50IGluc2VydGlvblxyXG5cdFx0XHRcdFx0Zm9yICggaSA9IDA7IGkgPCBoYXNTY3JpcHRzOyBpKysgKSB7XHJcblx0XHRcdFx0XHRcdG5vZGUgPSBzY3JpcHRzWyBpIF07XHJcblx0XHRcdFx0XHRcdGlmICggcnNjcmlwdFR5cGUudGVzdCggbm9kZS50eXBlIHx8IFwiXCIgKSAmJlxyXG5cdFx0XHRcdFx0XHRcdCFkYXRhX3ByaXYuYWNjZXNzKCBub2RlLCBcImdsb2JhbEV2YWxcIiApICYmIGpRdWVyeS5jb250YWlucyggZG9jLCBub2RlICkgKSB7XHJcblxyXG5cdFx0XHRcdFx0XHRcdGlmICggbm9kZS5zcmMgKSB7XHJcblx0XHRcdFx0XHRcdFx0XHQvLyBPcHRpb25hbCBBSkFYIGRlcGVuZGVuY3ksIGJ1dCB3b24ndCBydW4gc2NyaXB0cyBpZiBub3QgcHJlc2VudFxyXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBqUXVlcnkuX2V2YWxVcmwgKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5fZXZhbFVybCggbm9kZS5zcmMgKTtcclxuXHRcdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5Lmdsb2JhbEV2YWwoIG5vZGUudGV4dENvbnRlbnQucmVwbGFjZSggcmNsZWFuU2NyaXB0LCBcIlwiICkgKTtcclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHR9XHJcbn0pO1xyXG5cclxualF1ZXJ5LmVhY2goe1xyXG5cdGFwcGVuZFRvOiBcImFwcGVuZFwiLFxyXG5cdHByZXBlbmRUbzogXCJwcmVwZW5kXCIsXHJcblx0aW5zZXJ0QmVmb3JlOiBcImJlZm9yZVwiLFxyXG5cdGluc2VydEFmdGVyOiBcImFmdGVyXCIsXHJcblx0cmVwbGFjZUFsbDogXCJyZXBsYWNlV2l0aFwiXHJcbn0sIGZ1bmN0aW9uKCBuYW1lLCBvcmlnaW5hbCApIHtcclxuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcclxuXHRcdHZhciBlbGVtcyxcclxuXHRcdFx0cmV0ID0gW10sXHJcblx0XHRcdGluc2VydCA9IGpRdWVyeSggc2VsZWN0b3IgKSxcclxuXHRcdFx0bGFzdCA9IGluc2VydC5sZW5ndGggLSAxLFxyXG5cdFx0XHRpID0gMDtcclxuXHJcblx0XHRmb3IgKCA7IGkgPD0gbGFzdDsgaSsrICkge1xyXG5cdFx0XHRlbGVtcyA9IGkgPT09IGxhc3QgPyB0aGlzIDogdGhpcy5jbG9uZSggdHJ1ZSApO1xyXG5cdFx0XHRqUXVlcnkoIGluc2VydFsgaSBdIClbIG9yaWdpbmFsIF0oIGVsZW1zICk7XHJcblxyXG5cdFx0XHQvLyBTdXBwb3J0OiBRdFdlYktpdFxyXG5cdFx0XHQvLyAuZ2V0KCkgYmVjYXVzZSBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzXHJcblx0XHRcdHB1c2guYXBwbHkoIHJldCwgZWxlbXMuZ2V0KCkgKTtcclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIHJldCApO1xyXG5cdH07XHJcbn0pO1xyXG5cclxuXHJcbnZhciBpZnJhbWUsXHJcblx0ZWxlbWRpc3BsYXkgPSB7fTtcclxuXHJcbi8qKlxyXG4gKiBSZXRyaWV2ZSB0aGUgYWN0dWFsIGRpc3BsYXkgb2YgYSBlbGVtZW50XHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lIG5vZGVOYW1lIG9mIHRoZSBlbGVtZW50XHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBkb2MgRG9jdW1lbnQgb2JqZWN0XHJcbiAqL1xyXG4vLyBDYWxsZWQgb25seSBmcm9tIHdpdGhpbiBkZWZhdWx0RGlzcGxheVxyXG5mdW5jdGlvbiBhY3R1YWxEaXNwbGF5KCBuYW1lLCBkb2MgKSB7XHJcblx0dmFyIHN0eWxlLFxyXG5cdFx0ZWxlbSA9IGpRdWVyeSggZG9jLmNyZWF0ZUVsZW1lbnQoIG5hbWUgKSApLmFwcGVuZFRvKCBkb2MuYm9keSApLFxyXG5cclxuXHRcdC8vIGdldERlZmF1bHRDb21wdXRlZFN0eWxlIG1pZ2h0IGJlIHJlbGlhYmx5IHVzZWQgb25seSBvbiBhdHRhY2hlZCBlbGVtZW50XHJcblx0XHRkaXNwbGF5ID0gd2luZG93LmdldERlZmF1bHRDb21wdXRlZFN0eWxlICYmICggc3R5bGUgPSB3aW5kb3cuZ2V0RGVmYXVsdENvbXB1dGVkU3R5bGUoIGVsZW1bIDAgXSApICkgP1xyXG5cclxuXHRcdFx0Ly8gVXNlIG9mIHRoaXMgbWV0aG9kIGlzIGEgdGVtcG9yYXJ5IGZpeCAobW9yZSBsaWtlIG9wdGltaXphdGlvbikgdW50aWwgc29tZXRoaW5nIGJldHRlciBjb21lcyBhbG9uZyxcclxuXHRcdFx0Ly8gc2luY2UgaXQgd2FzIHJlbW92ZWQgZnJvbSBzcGVjaWZpY2F0aW9uIGFuZCBzdXBwb3J0ZWQgb25seSBpbiBGRlxyXG5cdFx0XHRzdHlsZS5kaXNwbGF5IDogalF1ZXJ5LmNzcyggZWxlbVsgMCBdLCBcImRpc3BsYXlcIiApO1xyXG5cclxuXHQvLyBXZSBkb24ndCBoYXZlIGFueSBkYXRhIHN0b3JlZCBvbiB0aGUgZWxlbWVudCxcclxuXHQvLyBzbyB1c2UgXCJkZXRhY2hcIiBtZXRob2QgYXMgZmFzdCB3YXkgdG8gZ2V0IHJpZCBvZiB0aGUgZWxlbWVudFxyXG5cdGVsZW0uZGV0YWNoKCk7XHJcblxyXG5cdHJldHVybiBkaXNwbGF5O1xyXG59XHJcblxyXG4vKipcclxuICogVHJ5IHRvIGRldGVybWluZSB0aGUgZGVmYXVsdCBkaXNwbGF5IHZhbHVlIG9mIGFuIGVsZW1lbnRcclxuICogQHBhcmFtIHtTdHJpbmd9IG5vZGVOYW1lXHJcbiAqL1xyXG5mdW5jdGlvbiBkZWZhdWx0RGlzcGxheSggbm9kZU5hbWUgKSB7XHJcblx0dmFyIGRvYyA9IGRvY3VtZW50LFxyXG5cdFx0ZGlzcGxheSA9IGVsZW1kaXNwbGF5WyBub2RlTmFtZSBdO1xyXG5cclxuXHRpZiAoICFkaXNwbGF5ICkge1xyXG5cdFx0ZGlzcGxheSA9IGFjdHVhbERpc3BsYXkoIG5vZGVOYW1lLCBkb2MgKTtcclxuXHJcblx0XHQvLyBJZiB0aGUgc2ltcGxlIHdheSBmYWlscywgcmVhZCBmcm9tIGluc2lkZSBhbiBpZnJhbWVcclxuXHRcdGlmICggZGlzcGxheSA9PT0gXCJub25lXCIgfHwgIWRpc3BsYXkgKSB7XHJcblxyXG5cdFx0XHQvLyBVc2UgdGhlIGFscmVhZHktY3JlYXRlZCBpZnJhbWUgaWYgcG9zc2libGVcclxuXHRcdFx0aWZyYW1lID0gKGlmcmFtZSB8fCBqUXVlcnkoIFwiPGlmcmFtZSBmcmFtZWJvcmRlcj0nMCcgd2lkdGg9JzAnIGhlaWdodD0nMCcvPlwiICkpLmFwcGVuZFRvKCBkb2MuZG9jdW1lbnRFbGVtZW50ICk7XHJcblxyXG5cdFx0XHQvLyBBbHdheXMgd3JpdGUgYSBuZXcgSFRNTCBza2VsZXRvbiBzbyBXZWJraXQgYW5kIEZpcmVmb3ggZG9uJ3QgY2hva2Ugb24gcmV1c2VcclxuXHRcdFx0ZG9jID0gaWZyYW1lWyAwIF0uY29udGVudERvY3VtZW50O1xyXG5cclxuXHRcdFx0Ly8gU3VwcG9ydDogSUVcclxuXHRcdFx0ZG9jLndyaXRlKCk7XHJcblx0XHRcdGRvYy5jbG9zZSgpO1xyXG5cclxuXHRcdFx0ZGlzcGxheSA9IGFjdHVhbERpc3BsYXkoIG5vZGVOYW1lLCBkb2MgKTtcclxuXHRcdFx0aWZyYW1lLmRldGFjaCgpO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIFN0b3JlIHRoZSBjb3JyZWN0IGRlZmF1bHQgZGlzcGxheVxyXG5cdFx0ZWxlbWRpc3BsYXlbIG5vZGVOYW1lIF0gPSBkaXNwbGF5O1xyXG5cdH1cclxuXHJcblx0cmV0dXJuIGRpc3BsYXk7XHJcbn1cclxudmFyIHJtYXJnaW4gPSAoL15tYXJnaW4vKTtcclxuXHJcbnZhciBybnVtbm9ucHggPSBuZXcgUmVnRXhwKCBcIl4oXCIgKyBwbnVtICsgXCIpKD8hcHgpW2EteiVdKyRcIiwgXCJpXCIgKTtcclxuXHJcbnZhciBnZXRTdHlsZXMgPSBmdW5jdGlvbiggZWxlbSApIHtcclxuXHRcdC8vIFN1cHBvcnQ6IElFPD0xMSssIEZpcmVmb3g8PTMwKyAoIzE1MDk4LCAjMTQxNTApXHJcblx0XHQvLyBJRSB0aHJvd3Mgb24gZWxlbWVudHMgY3JlYXRlZCBpbiBwb3B1cHNcclxuXHRcdC8vIEZGIG1lYW53aGlsZSB0aHJvd3Mgb24gZnJhbWUgZWxlbWVudHMgdGhyb3VnaCBcImRlZmF1bHRWaWV3LmdldENvbXB1dGVkU3R5bGVcIlxyXG5cdFx0aWYgKCBlbGVtLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXcub3BlbmVyICkge1xyXG5cdFx0XHRyZXR1cm4gZWxlbS5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3LmdldENvbXB1dGVkU3R5bGUoIGVsZW0sIG51bGwgKTtcclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gd2luZG93LmdldENvbXB1dGVkU3R5bGUoIGVsZW0sIG51bGwgKTtcclxuXHR9O1xyXG5cclxuXHJcblxyXG5mdW5jdGlvbiBjdXJDU1MoIGVsZW0sIG5hbWUsIGNvbXB1dGVkICkge1xyXG5cdHZhciB3aWR0aCwgbWluV2lkdGgsIG1heFdpZHRoLCByZXQsXHJcblx0XHRzdHlsZSA9IGVsZW0uc3R5bGU7XHJcblxyXG5cdGNvbXB1dGVkID0gY29tcHV0ZWQgfHwgZ2V0U3R5bGVzKCBlbGVtICk7XHJcblxyXG5cdC8vIFN1cHBvcnQ6IElFOVxyXG5cdC8vIGdldFByb3BlcnR5VmFsdWUgaXMgb25seSBuZWVkZWQgZm9yIC5jc3MoJ2ZpbHRlcicpICgjMTI1MzcpXHJcblx0aWYgKCBjb21wdXRlZCApIHtcclxuXHRcdHJldCA9IGNvbXB1dGVkLmdldFByb3BlcnR5VmFsdWUoIG5hbWUgKSB8fCBjb21wdXRlZFsgbmFtZSBdO1xyXG5cdH1cclxuXHJcblx0aWYgKCBjb21wdXRlZCApIHtcclxuXHJcblx0XHRpZiAoIHJldCA9PT0gXCJcIiAmJiAhalF1ZXJ5LmNvbnRhaW5zKCBlbGVtLm93bmVyRG9jdW1lbnQsIGVsZW0gKSApIHtcclxuXHRcdFx0cmV0ID0galF1ZXJ5LnN0eWxlKCBlbGVtLCBuYW1lICk7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gU3VwcG9ydDogaU9TIDwgNlxyXG5cdFx0Ly8gQSB0cmlidXRlIHRvIHRoZSBcImF3ZXNvbWUgaGFjayBieSBEZWFuIEVkd2FyZHNcIlxyXG5cdFx0Ly8gaU9TIDwgNiAoYXQgbGVhc3QpIHJldHVybnMgcGVyY2VudGFnZSBmb3IgYSBsYXJnZXIgc2V0IG9mIHZhbHVlcywgYnV0IHdpZHRoIHNlZW1zIHRvIGJlIHJlbGlhYmx5IHBpeGVsc1xyXG5cdFx0Ly8gdGhpcyBpcyBhZ2FpbnN0IHRoZSBDU1NPTSBkcmFmdCBzcGVjOiBodHRwOi8vZGV2LnczLm9yZy9jc3N3Zy9jc3NvbS8jcmVzb2x2ZWQtdmFsdWVzXHJcblx0XHRpZiAoIHJudW1ub25weC50ZXN0KCByZXQgKSAmJiBybWFyZ2luLnRlc3QoIG5hbWUgKSApIHtcclxuXHJcblx0XHRcdC8vIFJlbWVtYmVyIHRoZSBvcmlnaW5hbCB2YWx1ZXNcclxuXHRcdFx0d2lkdGggPSBzdHlsZS53aWR0aDtcclxuXHRcdFx0bWluV2lkdGggPSBzdHlsZS5taW5XaWR0aDtcclxuXHRcdFx0bWF4V2lkdGggPSBzdHlsZS5tYXhXaWR0aDtcclxuXHJcblx0XHRcdC8vIFB1dCBpbiB0aGUgbmV3IHZhbHVlcyB0byBnZXQgYSBjb21wdXRlZCB2YWx1ZSBvdXRcclxuXHRcdFx0c3R5bGUubWluV2lkdGggPSBzdHlsZS5tYXhXaWR0aCA9IHN0eWxlLndpZHRoID0gcmV0O1xyXG5cdFx0XHRyZXQgPSBjb21wdXRlZC53aWR0aDtcclxuXHJcblx0XHRcdC8vIFJldmVydCB0aGUgY2hhbmdlZCB2YWx1ZXNcclxuXHRcdFx0c3R5bGUud2lkdGggPSB3aWR0aDtcclxuXHRcdFx0c3R5bGUubWluV2lkdGggPSBtaW5XaWR0aDtcclxuXHRcdFx0c3R5bGUubWF4V2lkdGggPSBtYXhXaWR0aDtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdHJldHVybiByZXQgIT09IHVuZGVmaW5lZCA/XHJcblx0XHQvLyBTdXBwb3J0OiBJRVxyXG5cdFx0Ly8gSUUgcmV0dXJucyB6SW5kZXggdmFsdWUgYXMgYW4gaW50ZWdlci5cclxuXHRcdHJldCArIFwiXCIgOlxyXG5cdFx0cmV0O1xyXG59XHJcblxyXG5cclxuZnVuY3Rpb24gYWRkR2V0SG9va0lmKCBjb25kaXRpb25GbiwgaG9va0ZuICkge1xyXG5cdC8vIERlZmluZSB0aGUgaG9vaywgd2UnbGwgY2hlY2sgb24gdGhlIGZpcnN0IHJ1biBpZiBpdCdzIHJlYWxseSBuZWVkZWQuXHJcblx0cmV0dXJuIHtcclxuXHRcdGdldDogZnVuY3Rpb24oKSB7XHJcblx0XHRcdGlmICggY29uZGl0aW9uRm4oKSApIHtcclxuXHRcdFx0XHQvLyBIb29rIG5vdCBuZWVkZWQgKG9yIGl0J3Mgbm90IHBvc3NpYmxlIHRvIHVzZSBpdCBkdWVcclxuXHRcdFx0XHQvLyB0byBtaXNzaW5nIGRlcGVuZGVuY3kpLCByZW1vdmUgaXQuXHJcblx0XHRcdFx0ZGVsZXRlIHRoaXMuZ2V0O1xyXG5cdFx0XHRcdHJldHVybjtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gSG9vayBuZWVkZWQ7IHJlZGVmaW5lIGl0IHNvIHRoYXQgdGhlIHN1cHBvcnQgdGVzdCBpcyBub3QgZXhlY3V0ZWQgYWdhaW4uXHJcblx0XHRcdHJldHVybiAodGhpcy5nZXQgPSBob29rRm4pLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcclxuXHRcdH1cclxuXHR9O1xyXG59XHJcblxyXG5cclxuKGZ1bmN0aW9uKCkge1xyXG5cdHZhciBwaXhlbFBvc2l0aW9uVmFsLCBib3hTaXppbmdSZWxpYWJsZVZhbCxcclxuXHRcdGRvY0VsZW0gPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsXHJcblx0XHRjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICksXHJcblx0XHRkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICk7XHJcblxyXG5cdGlmICggIWRpdi5zdHlsZSApIHtcclxuXHRcdHJldHVybjtcclxuXHR9XHJcblxyXG5cdC8vIFN1cHBvcnQ6IElFOS0xMStcclxuXHQvLyBTdHlsZSBvZiBjbG9uZWQgZWxlbWVudCBhZmZlY3RzIHNvdXJjZSBlbGVtZW50IGNsb25lZCAoIzg5MDgpXHJcblx0ZGl2LnN0eWxlLmJhY2tncm91bmRDbGlwID0gXCJjb250ZW50LWJveFwiO1xyXG5cdGRpdi5jbG9uZU5vZGUoIHRydWUgKS5zdHlsZS5iYWNrZ3JvdW5kQ2xpcCA9IFwiXCI7XHJcblx0c3VwcG9ydC5jbGVhckNsb25lU3R5bGUgPSBkaXYuc3R5bGUuYmFja2dyb3VuZENsaXAgPT09IFwiY29udGVudC1ib3hcIjtcclxuXHJcblx0Y29udGFpbmVyLnN0eWxlLmNzc1RleHQgPSBcImJvcmRlcjowO3dpZHRoOjA7aGVpZ2h0OjA7dG9wOjA7bGVmdDotOTk5OXB4O21hcmdpbi10b3A6MXB4O1wiICtcclxuXHRcdFwicG9zaXRpb246YWJzb2x1dGVcIjtcclxuXHRjb250YWluZXIuYXBwZW5kQ2hpbGQoIGRpdiApO1xyXG5cclxuXHQvLyBFeGVjdXRpbmcgYm90aCBwaXhlbFBvc2l0aW9uICYgYm94U2l6aW5nUmVsaWFibGUgdGVzdHMgcmVxdWlyZSBvbmx5IG9uZSBsYXlvdXRcclxuXHQvLyBzbyB0aGV5J3JlIGV4ZWN1dGVkIGF0IHRoZSBzYW1lIHRpbWUgdG8gc2F2ZSB0aGUgc2Vjb25kIGNvbXB1dGF0aW9uLlxyXG5cdGZ1bmN0aW9uIGNvbXB1dGVQaXhlbFBvc2l0aW9uQW5kQm94U2l6aW5nUmVsaWFibGUoKSB7XHJcblx0XHRkaXYuc3R5bGUuY3NzVGV4dCA9XHJcblx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3g8MjksIEFuZHJvaWQgMi4zXHJcblx0XHRcdC8vIFZlbmRvci1wcmVmaXggYm94LXNpemluZ1xyXG5cdFx0XHRcIi13ZWJraXQtYm94LXNpemluZzpib3JkZXItYm94Oy1tb3otYm94LXNpemluZzpib3JkZXItYm94O1wiICtcclxuXHRcdFx0XCJib3gtc2l6aW5nOmJvcmRlci1ib3g7ZGlzcGxheTpibG9jazttYXJnaW4tdG9wOjElO3RvcDoxJTtcIiArXHJcblx0XHRcdFwiYm9yZGVyOjFweDtwYWRkaW5nOjFweDt3aWR0aDo0cHg7cG9zaXRpb246YWJzb2x1dGVcIjtcclxuXHRcdGRpdi5pbm5lckhUTUwgPSBcIlwiO1xyXG5cdFx0ZG9jRWxlbS5hcHBlbmRDaGlsZCggY29udGFpbmVyICk7XHJcblxyXG5cdFx0dmFyIGRpdlN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoIGRpdiwgbnVsbCApO1xyXG5cdFx0cGl4ZWxQb3NpdGlvblZhbCA9IGRpdlN0eWxlLnRvcCAhPT0gXCIxJVwiO1xyXG5cdFx0Ym94U2l6aW5nUmVsaWFibGVWYWwgPSBkaXZTdHlsZS53aWR0aCA9PT0gXCI0cHhcIjtcclxuXHJcblx0XHRkb2NFbGVtLnJlbW92ZUNoaWxkKCBjb250YWluZXIgKTtcclxuXHR9XHJcblxyXG5cdC8vIFN1cHBvcnQ6IG5vZGUuanMganNkb21cclxuXHQvLyBEb24ndCBhc3N1bWUgdGhhdCBnZXRDb21wdXRlZFN0eWxlIGlzIGEgcHJvcGVydHkgb2YgdGhlIGdsb2JhbCBvYmplY3RcclxuXHRpZiAoIHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlICkge1xyXG5cdFx0alF1ZXJ5LmV4dGVuZCggc3VwcG9ydCwge1xyXG5cdFx0XHRwaXhlbFBvc2l0aW9uOiBmdW5jdGlvbigpIHtcclxuXHJcblx0XHRcdFx0Ly8gVGhpcyB0ZXN0IGlzIGV4ZWN1dGVkIG9ubHkgb25jZSBidXQgd2Ugc3RpbGwgZG8gbWVtb2l6aW5nXHJcblx0XHRcdFx0Ly8gc2luY2Ugd2UgY2FuIHVzZSB0aGUgYm94U2l6aW5nUmVsaWFibGUgcHJlLWNvbXB1dGluZy5cclxuXHRcdFx0XHQvLyBObyBuZWVkIHRvIGNoZWNrIGlmIHRoZSB0ZXN0IHdhcyBhbHJlYWR5IHBlcmZvcm1lZCwgdGhvdWdoLlxyXG5cdFx0XHRcdGNvbXB1dGVQaXhlbFBvc2l0aW9uQW5kQm94U2l6aW5nUmVsaWFibGUoKTtcclxuXHRcdFx0XHRyZXR1cm4gcGl4ZWxQb3NpdGlvblZhbDtcclxuXHRcdFx0fSxcclxuXHRcdFx0Ym94U2l6aW5nUmVsaWFibGU6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdGlmICggYm94U2l6aW5nUmVsaWFibGVWYWwgPT0gbnVsbCApIHtcclxuXHRcdFx0XHRcdGNvbXB1dGVQaXhlbFBvc2l0aW9uQW5kQm94U2l6aW5nUmVsaWFibGUoKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0cmV0dXJuIGJveFNpemluZ1JlbGlhYmxlVmFsO1xyXG5cdFx0XHR9LFxyXG5cdFx0XHRyZWxpYWJsZU1hcmdpblJpZ2h0OiBmdW5jdGlvbigpIHtcclxuXHJcblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCAyLjNcclxuXHRcdFx0XHQvLyBDaGVjayBpZiBkaXYgd2l0aCBleHBsaWNpdCB3aWR0aCBhbmQgbm8gbWFyZ2luLXJpZ2h0IGluY29ycmVjdGx5XHJcblx0XHRcdFx0Ly8gZ2V0cyBjb21wdXRlZCBtYXJnaW4tcmlnaHQgYmFzZWQgb24gd2lkdGggb2YgY29udGFpbmVyLiAoIzMzMzMpXHJcblx0XHRcdFx0Ly8gV2ViS2l0IEJ1ZyAxMzM0MyAtIGdldENvbXB1dGVkU3R5bGUgcmV0dXJucyB3cm9uZyB2YWx1ZSBmb3IgbWFyZ2luLXJpZ2h0XHJcblx0XHRcdFx0Ly8gVGhpcyBzdXBwb3J0IGZ1bmN0aW9uIGlzIG9ubHkgZXhlY3V0ZWQgb25jZSBzbyBubyBtZW1vaXppbmcgaXMgbmVlZGVkLlxyXG5cdFx0XHRcdHZhciByZXQsXHJcblx0XHRcdFx0XHRtYXJnaW5EaXYgPSBkaXYuYXBwZW5kQ2hpbGQoIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKSApO1xyXG5cclxuXHRcdFx0XHQvLyBSZXNldCBDU1M6IGJveC1zaXppbmc7IGRpc3BsYXk7IG1hcmdpbjsgYm9yZGVyOyBwYWRkaW5nXHJcblx0XHRcdFx0bWFyZ2luRGl2LnN0eWxlLmNzc1RleHQgPSBkaXYuc3R5bGUuY3NzVGV4dCA9XHJcblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBGaXJlZm94PDI5LCBBbmRyb2lkIDIuM1xyXG5cdFx0XHRcdFx0Ly8gVmVuZG9yLXByZWZpeCBib3gtc2l6aW5nXHJcblx0XHRcdFx0XHRcIi13ZWJraXQtYm94LXNpemluZzpjb250ZW50LWJveDstbW96LWJveC1zaXppbmc6Y29udGVudC1ib3g7XCIgK1xyXG5cdFx0XHRcdFx0XCJib3gtc2l6aW5nOmNvbnRlbnQtYm94O2Rpc3BsYXk6YmxvY2s7bWFyZ2luOjA7Ym9yZGVyOjA7cGFkZGluZzowXCI7XHJcblx0XHRcdFx0bWFyZ2luRGl2LnN0eWxlLm1hcmdpblJpZ2h0ID0gbWFyZ2luRGl2LnN0eWxlLndpZHRoID0gXCIwXCI7XHJcblx0XHRcdFx0ZGl2LnN0eWxlLndpZHRoID0gXCIxcHhcIjtcclxuXHRcdFx0XHRkb2NFbGVtLmFwcGVuZENoaWxkKCBjb250YWluZXIgKTtcclxuXHJcblx0XHRcdFx0cmV0ID0gIXBhcnNlRmxvYXQoIHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKCBtYXJnaW5EaXYsIG51bGwgKS5tYXJnaW5SaWdodCApO1xyXG5cclxuXHRcdFx0XHRkb2NFbGVtLnJlbW92ZUNoaWxkKCBjb250YWluZXIgKTtcclxuXHRcdFx0XHRkaXYucmVtb3ZlQ2hpbGQoIG1hcmdpbkRpdiApO1xyXG5cclxuXHRcdFx0XHRyZXR1cm4gcmV0O1xyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHR9XHJcbn0pKCk7XHJcblxyXG5cclxuLy8gQSBtZXRob2QgZm9yIHF1aWNrbHkgc3dhcHBpbmcgaW4vb3V0IENTUyBwcm9wZXJ0aWVzIHRvIGdldCBjb3JyZWN0IGNhbGN1bGF0aW9ucy5cclxualF1ZXJ5LnN3YXAgPSBmdW5jdGlvbiggZWxlbSwgb3B0aW9ucywgY2FsbGJhY2ssIGFyZ3MgKSB7XHJcblx0dmFyIHJldCwgbmFtZSxcclxuXHRcdG9sZCA9IHt9O1xyXG5cclxuXHQvLyBSZW1lbWJlciB0aGUgb2xkIHZhbHVlcywgYW5kIGluc2VydCB0aGUgbmV3IG9uZXNcclxuXHRmb3IgKCBuYW1lIGluIG9wdGlvbnMgKSB7XHJcblx0XHRvbGRbIG5hbWUgXSA9IGVsZW0uc3R5bGVbIG5hbWUgXTtcclxuXHRcdGVsZW0uc3R5bGVbIG5hbWUgXSA9IG9wdGlvbnNbIG5hbWUgXTtcclxuXHR9XHJcblxyXG5cdHJldCA9IGNhbGxiYWNrLmFwcGx5KCBlbGVtLCBhcmdzIHx8IFtdICk7XHJcblxyXG5cdC8vIFJldmVydCB0aGUgb2xkIHZhbHVlc1xyXG5cdGZvciAoIG5hbWUgaW4gb3B0aW9ucyApIHtcclxuXHRcdGVsZW0uc3R5bGVbIG5hbWUgXSA9IG9sZFsgbmFtZSBdO1xyXG5cdH1cclxuXHJcblx0cmV0dXJuIHJldDtcclxufTtcclxuXHJcblxyXG52YXJcclxuXHQvLyBTd2FwcGFibGUgaWYgZGlzcGxheSBpcyBub25lIG9yIHN0YXJ0cyB3aXRoIHRhYmxlIGV4Y2VwdCBcInRhYmxlXCIsIFwidGFibGUtY2VsbFwiLCBvciBcInRhYmxlLWNhcHRpb25cIlxyXG5cdC8vIFNlZSBoZXJlIGZvciBkaXNwbGF5IHZhbHVlczogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9DU1MvZGlzcGxheVxyXG5cdHJkaXNwbGF5c3dhcCA9IC9eKG5vbmV8dGFibGUoPyEtY1tlYV0pLispLyxcclxuXHRybnVtc3BsaXQgPSBuZXcgUmVnRXhwKCBcIl4oXCIgKyBwbnVtICsgXCIpKC4qKSRcIiwgXCJpXCIgKSxcclxuXHRycmVsTnVtID0gbmV3IFJlZ0V4cCggXCJeKFsrLV0pPShcIiArIHBudW0gKyBcIilcIiwgXCJpXCIgKSxcclxuXHJcblx0Y3NzU2hvdyA9IHsgcG9zaXRpb246IFwiYWJzb2x1dGVcIiwgdmlzaWJpbGl0eTogXCJoaWRkZW5cIiwgZGlzcGxheTogXCJibG9ja1wiIH0sXHJcblx0Y3NzTm9ybWFsVHJhbnNmb3JtID0ge1xyXG5cdFx0bGV0dGVyU3BhY2luZzogXCIwXCIsXHJcblx0XHRmb250V2VpZ2h0OiBcIjQwMFwiXHJcblx0fSxcclxuXHJcblx0Y3NzUHJlZml4ZXMgPSBbIFwiV2Via2l0XCIsIFwiT1wiLCBcIk1velwiLCBcIm1zXCIgXTtcclxuXHJcbi8vIFJldHVybiBhIGNzcyBwcm9wZXJ0eSBtYXBwZWQgdG8gYSBwb3RlbnRpYWxseSB2ZW5kb3IgcHJlZml4ZWQgcHJvcGVydHlcclxuZnVuY3Rpb24gdmVuZG9yUHJvcE5hbWUoIHN0eWxlLCBuYW1lICkge1xyXG5cclxuXHQvLyBTaG9ydGN1dCBmb3IgbmFtZXMgdGhhdCBhcmUgbm90IHZlbmRvciBwcmVmaXhlZFxyXG5cdGlmICggbmFtZSBpbiBzdHlsZSApIHtcclxuXHRcdHJldHVybiBuYW1lO1xyXG5cdH1cclxuXHJcblx0Ly8gQ2hlY2sgZm9yIHZlbmRvciBwcmVmaXhlZCBuYW1lc1xyXG5cdHZhciBjYXBOYW1lID0gbmFtZVswXS50b1VwcGVyQ2FzZSgpICsgbmFtZS5zbGljZSgxKSxcclxuXHRcdG9yaWdOYW1lID0gbmFtZSxcclxuXHRcdGkgPSBjc3NQcmVmaXhlcy5sZW5ndGg7XHJcblxyXG5cdHdoaWxlICggaS0tICkge1xyXG5cdFx0bmFtZSA9IGNzc1ByZWZpeGVzWyBpIF0gKyBjYXBOYW1lO1xyXG5cdFx0aWYgKCBuYW1lIGluIHN0eWxlICkge1xyXG5cdFx0XHRyZXR1cm4gbmFtZTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdHJldHVybiBvcmlnTmFtZTtcclxufVxyXG5cclxuZnVuY3Rpb24gc2V0UG9zaXRpdmVOdW1iZXIoIGVsZW0sIHZhbHVlLCBzdWJ0cmFjdCApIHtcclxuXHR2YXIgbWF0Y2hlcyA9IHJudW1zcGxpdC5leGVjKCB2YWx1ZSApO1xyXG5cdHJldHVybiBtYXRjaGVzID9cclxuXHRcdC8vIEd1YXJkIGFnYWluc3QgdW5kZWZpbmVkIFwic3VidHJhY3RcIiwgZS5nLiwgd2hlbiB1c2VkIGFzIGluIGNzc0hvb2tzXHJcblx0XHRNYXRoLm1heCggMCwgbWF0Y2hlc1sgMSBdIC0gKCBzdWJ0cmFjdCB8fCAwICkgKSArICggbWF0Y2hlc1sgMiBdIHx8IFwicHhcIiApIDpcclxuXHRcdHZhbHVlO1xyXG59XHJcblxyXG5mdW5jdGlvbiBhdWdtZW50V2lkdGhPckhlaWdodCggZWxlbSwgbmFtZSwgZXh0cmEsIGlzQm9yZGVyQm94LCBzdHlsZXMgKSB7XHJcblx0dmFyIGkgPSBleHRyYSA9PT0gKCBpc0JvcmRlckJveCA/IFwiYm9yZGVyXCIgOiBcImNvbnRlbnRcIiApID9cclxuXHRcdC8vIElmIHdlIGFscmVhZHkgaGF2ZSB0aGUgcmlnaHQgbWVhc3VyZW1lbnQsIGF2b2lkIGF1Z21lbnRhdGlvblxyXG5cdFx0NCA6XHJcblx0XHQvLyBPdGhlcndpc2UgaW5pdGlhbGl6ZSBmb3IgaG9yaXpvbnRhbCBvciB2ZXJ0aWNhbCBwcm9wZXJ0aWVzXHJcblx0XHRuYW1lID09PSBcIndpZHRoXCIgPyAxIDogMCxcclxuXHJcblx0XHR2YWwgPSAwO1xyXG5cclxuXHRmb3IgKCA7IGkgPCA0OyBpICs9IDIgKSB7XHJcblx0XHQvLyBCb3RoIGJveCBtb2RlbHMgZXhjbHVkZSBtYXJnaW4sIHNvIGFkZCBpdCBpZiB3ZSB3YW50IGl0XHJcblx0XHRpZiAoIGV4dHJhID09PSBcIm1hcmdpblwiICkge1xyXG5cdFx0XHR2YWwgKz0galF1ZXJ5LmNzcyggZWxlbSwgZXh0cmEgKyBjc3NFeHBhbmRbIGkgXSwgdHJ1ZSwgc3R5bGVzICk7XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKCBpc0JvcmRlckJveCApIHtcclxuXHRcdFx0Ly8gYm9yZGVyLWJveCBpbmNsdWRlcyBwYWRkaW5nLCBzbyByZW1vdmUgaXQgaWYgd2Ugd2FudCBjb250ZW50XHJcblx0XHRcdGlmICggZXh0cmEgPT09IFwiY29udGVudFwiICkge1xyXG5cdFx0XHRcdHZhbCAtPSBqUXVlcnkuY3NzKCBlbGVtLCBcInBhZGRpbmdcIiArIGNzc0V4cGFuZFsgaSBdLCB0cnVlLCBzdHlsZXMgKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gQXQgdGhpcyBwb2ludCwgZXh0cmEgaXNuJ3QgYm9yZGVyIG5vciBtYXJnaW4sIHNvIHJlbW92ZSBib3JkZXJcclxuXHRcdFx0aWYgKCBleHRyYSAhPT0gXCJtYXJnaW5cIiApIHtcclxuXHRcdFx0XHR2YWwgLT0galF1ZXJ5LmNzcyggZWxlbSwgXCJib3JkZXJcIiArIGNzc0V4cGFuZFsgaSBdICsgXCJXaWR0aFwiLCB0cnVlLCBzdHlsZXMgKTtcclxuXHRcdFx0fVxyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0Ly8gQXQgdGhpcyBwb2ludCwgZXh0cmEgaXNuJ3QgY29udGVudCwgc28gYWRkIHBhZGRpbmdcclxuXHRcdFx0dmFsICs9IGpRdWVyeS5jc3MoIGVsZW0sIFwicGFkZGluZ1wiICsgY3NzRXhwYW5kWyBpIF0sIHRydWUsIHN0eWxlcyApO1xyXG5cclxuXHRcdFx0Ly8gQXQgdGhpcyBwb2ludCwgZXh0cmEgaXNuJ3QgY29udGVudCBub3IgcGFkZGluZywgc28gYWRkIGJvcmRlclxyXG5cdFx0XHRpZiAoIGV4dHJhICE9PSBcInBhZGRpbmdcIiApIHtcclxuXHRcdFx0XHR2YWwgKz0galF1ZXJ5LmNzcyggZWxlbSwgXCJib3JkZXJcIiArIGNzc0V4cGFuZFsgaSBdICsgXCJXaWR0aFwiLCB0cnVlLCBzdHlsZXMgKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0cmV0dXJuIHZhbDtcclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0V2lkdGhPckhlaWdodCggZWxlbSwgbmFtZSwgZXh0cmEgKSB7XHJcblxyXG5cdC8vIFN0YXJ0IHdpdGggb2Zmc2V0IHByb3BlcnR5LCB3aGljaCBpcyBlcXVpdmFsZW50IHRvIHRoZSBib3JkZXItYm94IHZhbHVlXHJcblx0dmFyIHZhbHVlSXNCb3JkZXJCb3ggPSB0cnVlLFxyXG5cdFx0dmFsID0gbmFtZSA9PT0gXCJ3aWR0aFwiID8gZWxlbS5vZmZzZXRXaWR0aCA6IGVsZW0ub2Zmc2V0SGVpZ2h0LFxyXG5cdFx0c3R5bGVzID0gZ2V0U3R5bGVzKCBlbGVtICksXHJcblx0XHRpc0JvcmRlckJveCA9IGpRdWVyeS5jc3MoIGVsZW0sIFwiYm94U2l6aW5nXCIsIGZhbHNlLCBzdHlsZXMgKSA9PT0gXCJib3JkZXItYm94XCI7XHJcblxyXG5cdC8vIFNvbWUgbm9uLWh0bWwgZWxlbWVudHMgcmV0dXJuIHVuZGVmaW5lZCBmb3Igb2Zmc2V0V2lkdGgsIHNvIGNoZWNrIGZvciBudWxsL3VuZGVmaW5lZFxyXG5cdC8vIHN2ZyAtIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTY0OTI4NVxyXG5cdC8vIE1hdGhNTCAtIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTQ5MTY2OFxyXG5cdGlmICggdmFsIDw9IDAgfHwgdmFsID09IG51bGwgKSB7XHJcblx0XHQvLyBGYWxsIGJhY2sgdG8gY29tcHV0ZWQgdGhlbiB1bmNvbXB1dGVkIGNzcyBpZiBuZWNlc3NhcnlcclxuXHRcdHZhbCA9IGN1ckNTUyggZWxlbSwgbmFtZSwgc3R5bGVzICk7XHJcblx0XHRpZiAoIHZhbCA8IDAgfHwgdmFsID09IG51bGwgKSB7XHJcblx0XHRcdHZhbCA9IGVsZW0uc3R5bGVbIG5hbWUgXTtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBDb21wdXRlZCB1bml0IGlzIG5vdCBwaXhlbHMuIFN0b3AgaGVyZSBhbmQgcmV0dXJuLlxyXG5cdFx0aWYgKCBybnVtbm9ucHgudGVzdCh2YWwpICkge1xyXG5cdFx0XHRyZXR1cm4gdmFsO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIENoZWNrIGZvciBzdHlsZSBpbiBjYXNlIGEgYnJvd3NlciB3aGljaCByZXR1cm5zIHVucmVsaWFibGUgdmFsdWVzXHJcblx0XHQvLyBmb3IgZ2V0Q29tcHV0ZWRTdHlsZSBzaWxlbnRseSBmYWxscyBiYWNrIHRvIHRoZSByZWxpYWJsZSBlbGVtLnN0eWxlXHJcblx0XHR2YWx1ZUlzQm9yZGVyQm94ID0gaXNCb3JkZXJCb3ggJiZcclxuXHRcdFx0KCBzdXBwb3J0LmJveFNpemluZ1JlbGlhYmxlKCkgfHwgdmFsID09PSBlbGVtLnN0eWxlWyBuYW1lIF0gKTtcclxuXHJcblx0XHQvLyBOb3JtYWxpemUgXCJcIiwgYXV0bywgYW5kIHByZXBhcmUgZm9yIGV4dHJhXHJcblx0XHR2YWwgPSBwYXJzZUZsb2F0KCB2YWwgKSB8fCAwO1xyXG5cdH1cclxuXHJcblx0Ly8gVXNlIHRoZSBhY3RpdmUgYm94LXNpemluZyBtb2RlbCB0byBhZGQvc3VidHJhY3QgaXJyZWxldmFudCBzdHlsZXNcclxuXHRyZXR1cm4gKCB2YWwgK1xyXG5cdFx0YXVnbWVudFdpZHRoT3JIZWlnaHQoXHJcblx0XHRcdGVsZW0sXHJcblx0XHRcdG5hbWUsXHJcblx0XHRcdGV4dHJhIHx8ICggaXNCb3JkZXJCb3ggPyBcImJvcmRlclwiIDogXCJjb250ZW50XCIgKSxcclxuXHRcdFx0dmFsdWVJc0JvcmRlckJveCxcclxuXHRcdFx0c3R5bGVzXHJcblx0XHQpXHJcblx0KSArIFwicHhcIjtcclxufVxyXG5cclxuZnVuY3Rpb24gc2hvd0hpZGUoIGVsZW1lbnRzLCBzaG93ICkge1xyXG5cdHZhciBkaXNwbGF5LCBlbGVtLCBoaWRkZW4sXHJcblx0XHR2YWx1ZXMgPSBbXSxcclxuXHRcdGluZGV4ID0gMCxcclxuXHRcdGxlbmd0aCA9IGVsZW1lbnRzLmxlbmd0aDtcclxuXHJcblx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcclxuXHRcdGVsZW0gPSBlbGVtZW50c1sgaW5kZXggXTtcclxuXHRcdGlmICggIWVsZW0uc3R5bGUgKSB7XHJcblx0XHRcdGNvbnRpbnVlO1xyXG5cdFx0fVxyXG5cclxuXHRcdHZhbHVlc1sgaW5kZXggXSA9IGRhdGFfcHJpdi5nZXQoIGVsZW0sIFwib2xkZGlzcGxheVwiICk7XHJcblx0XHRkaXNwbGF5ID0gZWxlbS5zdHlsZS5kaXNwbGF5O1xyXG5cdFx0aWYgKCBzaG93ICkge1xyXG5cdFx0XHQvLyBSZXNldCB0aGUgaW5saW5lIGRpc3BsYXkgb2YgdGhpcyBlbGVtZW50IHRvIGxlYXJuIGlmIGl0IGlzXHJcblx0XHRcdC8vIGJlaW5nIGhpZGRlbiBieSBjYXNjYWRlZCBydWxlcyBvciBub3RcclxuXHRcdFx0aWYgKCAhdmFsdWVzWyBpbmRleCBdICYmIGRpc3BsYXkgPT09IFwibm9uZVwiICkge1xyXG5cdFx0XHRcdGVsZW0uc3R5bGUuZGlzcGxheSA9IFwiXCI7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIFNldCBlbGVtZW50cyB3aGljaCBoYXZlIGJlZW4gb3ZlcnJpZGRlbiB3aXRoIGRpc3BsYXk6IG5vbmVcclxuXHRcdFx0Ly8gaW4gYSBzdHlsZXNoZWV0IHRvIHdoYXRldmVyIHRoZSBkZWZhdWx0IGJyb3dzZXIgc3R5bGUgaXNcclxuXHRcdFx0Ly8gZm9yIHN1Y2ggYW4gZWxlbWVudFxyXG5cdFx0XHRpZiAoIGVsZW0uc3R5bGUuZGlzcGxheSA9PT0gXCJcIiAmJiBpc0hpZGRlbiggZWxlbSApICkge1xyXG5cdFx0XHRcdHZhbHVlc1sgaW5kZXggXSA9IGRhdGFfcHJpdi5hY2Nlc3MoIGVsZW0sIFwib2xkZGlzcGxheVwiLCBkZWZhdWx0RGlzcGxheShlbGVtLm5vZGVOYW1lKSApO1xyXG5cdFx0XHR9XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRoaWRkZW4gPSBpc0hpZGRlbiggZWxlbSApO1xyXG5cclxuXHRcdFx0aWYgKCBkaXNwbGF5ICE9PSBcIm5vbmVcIiB8fCAhaGlkZGVuICkge1xyXG5cdFx0XHRcdGRhdGFfcHJpdi5zZXQoIGVsZW0sIFwib2xkZGlzcGxheVwiLCBoaWRkZW4gPyBkaXNwbGF5IDogalF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKSApO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHQvLyBTZXQgdGhlIGRpc3BsYXkgb2YgbW9zdCBvZiB0aGUgZWxlbWVudHMgaW4gYSBzZWNvbmQgbG9vcFxyXG5cdC8vIHRvIGF2b2lkIHRoZSBjb25zdGFudCByZWZsb3dcclxuXHRmb3IgKCBpbmRleCA9IDA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xyXG5cdFx0ZWxlbSA9IGVsZW1lbnRzWyBpbmRleCBdO1xyXG5cdFx0aWYgKCAhZWxlbS5zdHlsZSApIHtcclxuXHRcdFx0Y29udGludWU7XHJcblx0XHR9XHJcblx0XHRpZiAoICFzaG93IHx8IGVsZW0uc3R5bGUuZGlzcGxheSA9PT0gXCJub25lXCIgfHwgZWxlbS5zdHlsZS5kaXNwbGF5ID09PSBcIlwiICkge1xyXG5cdFx0XHRlbGVtLnN0eWxlLmRpc3BsYXkgPSBzaG93ID8gdmFsdWVzWyBpbmRleCBdIHx8IFwiXCIgOiBcIm5vbmVcIjtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdHJldHVybiBlbGVtZW50cztcclxufVxyXG5cclxualF1ZXJ5LmV4dGVuZCh7XHJcblxyXG5cdC8vIEFkZCBpbiBzdHlsZSBwcm9wZXJ0eSBob29rcyBmb3Igb3ZlcnJpZGluZyB0aGUgZGVmYXVsdFxyXG5cdC8vIGJlaGF2aW9yIG9mIGdldHRpbmcgYW5kIHNldHRpbmcgYSBzdHlsZSBwcm9wZXJ0eVxyXG5cdGNzc0hvb2tzOiB7XHJcblx0XHRvcGFjaXR5OiB7XHJcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkICkge1xyXG5cdFx0XHRcdGlmICggY29tcHV0ZWQgKSB7XHJcblxyXG5cdFx0XHRcdFx0Ly8gV2Ugc2hvdWxkIGFsd2F5cyBnZXQgYSBudW1iZXIgYmFjayBmcm9tIG9wYWNpdHlcclxuXHRcdFx0XHRcdHZhciByZXQgPSBjdXJDU1MoIGVsZW0sIFwib3BhY2l0eVwiICk7XHJcblx0XHRcdFx0XHRyZXR1cm4gcmV0ID09PSBcIlwiID8gXCIxXCIgOiByZXQ7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fSxcclxuXHJcblx0Ly8gRG9uJ3QgYXV0b21hdGljYWxseSBhZGQgXCJweFwiIHRvIHRoZXNlIHBvc3NpYmx5LXVuaXRsZXNzIHByb3BlcnRpZXNcclxuXHRjc3NOdW1iZXI6IHtcclxuXHRcdFwiY29sdW1uQ291bnRcIjogdHJ1ZSxcclxuXHRcdFwiZmlsbE9wYWNpdHlcIjogdHJ1ZSxcclxuXHRcdFwiZmxleEdyb3dcIjogdHJ1ZSxcclxuXHRcdFwiZmxleFNocmlua1wiOiB0cnVlLFxyXG5cdFx0XCJmb250V2VpZ2h0XCI6IHRydWUsXHJcblx0XHRcImxpbmVIZWlnaHRcIjogdHJ1ZSxcclxuXHRcdFwib3BhY2l0eVwiOiB0cnVlLFxyXG5cdFx0XCJvcmRlclwiOiB0cnVlLFxyXG5cdFx0XCJvcnBoYW5zXCI6IHRydWUsXHJcblx0XHRcIndpZG93c1wiOiB0cnVlLFxyXG5cdFx0XCJ6SW5kZXhcIjogdHJ1ZSxcclxuXHRcdFwiem9vbVwiOiB0cnVlXHJcblx0fSxcclxuXHJcblx0Ly8gQWRkIGluIHByb3BlcnRpZXMgd2hvc2UgbmFtZXMgeW91IHdpc2ggdG8gZml4IGJlZm9yZVxyXG5cdC8vIHNldHRpbmcgb3IgZ2V0dGluZyB0aGUgdmFsdWVcclxuXHRjc3NQcm9wczoge1xyXG5cdFx0XCJmbG9hdFwiOiBcImNzc0Zsb2F0XCJcclxuXHR9LFxyXG5cclxuXHQvLyBHZXQgYW5kIHNldCB0aGUgc3R5bGUgcHJvcGVydHkgb24gYSBET00gTm9kZVxyXG5cdHN0eWxlOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUsIGV4dHJhICkge1xyXG5cclxuXHRcdC8vIERvbid0IHNldCBzdHlsZXMgb24gdGV4dCBhbmQgY29tbWVudCBub2Rlc1xyXG5cdFx0aWYgKCAhZWxlbSB8fCBlbGVtLm5vZGVUeXBlID09PSAzIHx8IGVsZW0ubm9kZVR5cGUgPT09IDggfHwgIWVsZW0uc3R5bGUgKSB7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB3ZSdyZSB3b3JraW5nIHdpdGggdGhlIHJpZ2h0IG5hbWVcclxuXHRcdHZhciByZXQsIHR5cGUsIGhvb2tzLFxyXG5cdFx0XHRvcmlnTmFtZSA9IGpRdWVyeS5jYW1lbENhc2UoIG5hbWUgKSxcclxuXHRcdFx0c3R5bGUgPSBlbGVtLnN0eWxlO1xyXG5cclxuXHRcdG5hbWUgPSBqUXVlcnkuY3NzUHJvcHNbIG9yaWdOYW1lIF0gfHwgKCBqUXVlcnkuY3NzUHJvcHNbIG9yaWdOYW1lIF0gPSB2ZW5kb3JQcm9wTmFtZSggc3R5bGUsIG9yaWdOYW1lICkgKTtcclxuXHJcblx0XHQvLyBHZXRzIGhvb2sgZm9yIHRoZSBwcmVmaXhlZCB2ZXJzaW9uLCB0aGVuIHVucHJlZml4ZWQgdmVyc2lvblxyXG5cdFx0aG9va3MgPSBqUXVlcnkuY3NzSG9va3NbIG5hbWUgXSB8fCBqUXVlcnkuY3NzSG9va3NbIG9yaWdOYW1lIF07XHJcblxyXG5cdFx0Ly8gQ2hlY2sgaWYgd2UncmUgc2V0dGluZyBhIHZhbHVlXHJcblx0XHRpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XHJcblx0XHRcdHR5cGUgPSB0eXBlb2YgdmFsdWU7XHJcblxyXG5cdFx0XHQvLyBDb252ZXJ0IFwiKz1cIiBvciBcIi09XCIgdG8gcmVsYXRpdmUgbnVtYmVycyAoIzczNDUpXHJcblx0XHRcdGlmICggdHlwZSA9PT0gXCJzdHJpbmdcIiAmJiAocmV0ID0gcnJlbE51bS5leGVjKCB2YWx1ZSApKSApIHtcclxuXHRcdFx0XHR2YWx1ZSA9ICggcmV0WzFdICsgMSApICogcmV0WzJdICsgcGFyc2VGbG9hdCggalF1ZXJ5LmNzcyggZWxlbSwgbmFtZSApICk7XHJcblx0XHRcdFx0Ly8gRml4ZXMgYnVnICM5MjM3XHJcblx0XHRcdFx0dHlwZSA9IFwibnVtYmVyXCI7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIE1ha2Ugc3VyZSB0aGF0IG51bGwgYW5kIE5hTiB2YWx1ZXMgYXJlbid0IHNldCAoIzcxMTYpXHJcblx0XHRcdGlmICggdmFsdWUgPT0gbnVsbCB8fCB2YWx1ZSAhPT0gdmFsdWUgKSB7XHJcblx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBJZiBhIG51bWJlciwgYWRkICdweCcgdG8gdGhlIChleGNlcHQgZm9yIGNlcnRhaW4gQ1NTIHByb3BlcnRpZXMpXHJcblx0XHRcdGlmICggdHlwZSA9PT0gXCJudW1iZXJcIiAmJiAhalF1ZXJ5LmNzc051bWJlclsgb3JpZ05hbWUgXSApIHtcclxuXHRcdFx0XHR2YWx1ZSArPSBcInB4XCI7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIFN1cHBvcnQ6IElFOS0xMStcclxuXHRcdFx0Ly8gYmFja2dyb3VuZC0qIHByb3BzIGFmZmVjdCBvcmlnaW5hbCBjbG9uZSdzIHZhbHVlc1xyXG5cdFx0XHRpZiAoICFzdXBwb3J0LmNsZWFyQ2xvbmVTdHlsZSAmJiB2YWx1ZSA9PT0gXCJcIiAmJiBuYW1lLmluZGV4T2YoIFwiYmFja2dyb3VuZFwiICkgPT09IDAgKSB7XHJcblx0XHRcdFx0c3R5bGVbIG5hbWUgXSA9IFwiaW5oZXJpdFwiO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBJZiBhIGhvb2sgd2FzIHByb3ZpZGVkLCB1c2UgdGhhdCB2YWx1ZSwgb3RoZXJ3aXNlIGp1c3Qgc2V0IHRoZSBzcGVjaWZpZWQgdmFsdWVcclxuXHRcdFx0aWYgKCAhaG9va3MgfHwgIShcInNldFwiIGluIGhvb2tzKSB8fCAodmFsdWUgPSBob29rcy5zZXQoIGVsZW0sIHZhbHVlLCBleHRyYSApKSAhPT0gdW5kZWZpbmVkICkge1xyXG5cdFx0XHRcdHN0eWxlWyBuYW1lIF0gPSB2YWx1ZTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdC8vIElmIGEgaG9vayB3YXMgcHJvdmlkZWQgZ2V0IHRoZSBub24tY29tcHV0ZWQgdmFsdWUgZnJvbSB0aGVyZVxyXG5cdFx0XHRpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgJiYgKHJldCA9IGhvb2tzLmdldCggZWxlbSwgZmFsc2UsIGV4dHJhICkpICE9PSB1bmRlZmluZWQgKSB7XHJcblx0XHRcdFx0cmV0dXJuIHJldDtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gT3RoZXJ3aXNlIGp1c3QgZ2V0IHRoZSB2YWx1ZSBmcm9tIHRoZSBzdHlsZSBvYmplY3RcclxuXHRcdFx0cmV0dXJuIHN0eWxlWyBuYW1lIF07XHJcblx0XHR9XHJcblx0fSxcclxuXHJcblx0Y3NzOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgZXh0cmEsIHN0eWxlcyApIHtcclxuXHRcdHZhciB2YWwsIG51bSwgaG9va3MsXHJcblx0XHRcdG9yaWdOYW1lID0galF1ZXJ5LmNhbWVsQ2FzZSggbmFtZSApO1xyXG5cclxuXHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHdlJ3JlIHdvcmtpbmcgd2l0aCB0aGUgcmlnaHQgbmFtZVxyXG5cdFx0bmFtZSA9IGpRdWVyeS5jc3NQcm9wc1sgb3JpZ05hbWUgXSB8fCAoIGpRdWVyeS5jc3NQcm9wc1sgb3JpZ05hbWUgXSA9IHZlbmRvclByb3BOYW1lKCBlbGVtLnN0eWxlLCBvcmlnTmFtZSApICk7XHJcblxyXG5cdFx0Ly8gVHJ5IHByZWZpeGVkIG5hbWUgZm9sbG93ZWQgYnkgdGhlIHVucHJlZml4ZWQgbmFtZVxyXG5cdFx0aG9va3MgPSBqUXVlcnkuY3NzSG9va3NbIG5hbWUgXSB8fCBqUXVlcnkuY3NzSG9va3NbIG9yaWdOYW1lIF07XHJcblxyXG5cdFx0Ly8gSWYgYSBob29rIHdhcyBwcm92aWRlZCBnZXQgdGhlIGNvbXB1dGVkIHZhbHVlIGZyb20gdGhlcmVcclxuXHRcdGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyApIHtcclxuXHRcdFx0dmFsID0gaG9va3MuZ2V0KCBlbGVtLCB0cnVlLCBleHRyYSApO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIE90aGVyd2lzZSwgaWYgYSB3YXkgdG8gZ2V0IHRoZSBjb21wdXRlZCB2YWx1ZSBleGlzdHMsIHVzZSB0aGF0XHJcblx0XHRpZiAoIHZhbCA9PT0gdW5kZWZpbmVkICkge1xyXG5cdFx0XHR2YWwgPSBjdXJDU1MoIGVsZW0sIG5hbWUsIHN0eWxlcyApO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIENvbnZlcnQgXCJub3JtYWxcIiB0byBjb21wdXRlZCB2YWx1ZVxyXG5cdFx0aWYgKCB2YWwgPT09IFwibm9ybWFsXCIgJiYgbmFtZSBpbiBjc3NOb3JtYWxUcmFuc2Zvcm0gKSB7XHJcblx0XHRcdHZhbCA9IGNzc05vcm1hbFRyYW5zZm9ybVsgbmFtZSBdO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIE1ha2UgbnVtZXJpYyBpZiBmb3JjZWQgb3IgYSBxdWFsaWZpZXIgd2FzIHByb3ZpZGVkIGFuZCB2YWwgbG9va3MgbnVtZXJpY1xyXG5cdFx0aWYgKCBleHRyYSA9PT0gXCJcIiB8fCBleHRyYSApIHtcclxuXHRcdFx0bnVtID0gcGFyc2VGbG9hdCggdmFsICk7XHJcblx0XHRcdHJldHVybiBleHRyYSA9PT0gdHJ1ZSB8fCBqUXVlcnkuaXNOdW1lcmljKCBudW0gKSA/IG51bSB8fCAwIDogdmFsO1xyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIHZhbDtcclxuXHR9XHJcbn0pO1xyXG5cclxualF1ZXJ5LmVhY2goWyBcImhlaWdodFwiLCBcIndpZHRoXCIgXSwgZnVuY3Rpb24oIGksIG5hbWUgKSB7XHJcblx0alF1ZXJ5LmNzc0hvb2tzWyBuYW1lIF0gPSB7XHJcblx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCwgZXh0cmEgKSB7XHJcblx0XHRcdGlmICggY29tcHV0ZWQgKSB7XHJcblxyXG5cdFx0XHRcdC8vIENlcnRhaW4gZWxlbWVudHMgY2FuIGhhdmUgZGltZW5zaW9uIGluZm8gaWYgd2UgaW52aXNpYmx5IHNob3cgdGhlbVxyXG5cdFx0XHRcdC8vIGJ1dCBpdCBtdXN0IGhhdmUgYSBjdXJyZW50IGRpc3BsYXkgc3R5bGUgdGhhdCB3b3VsZCBiZW5lZml0XHJcblx0XHRcdFx0cmV0dXJuIHJkaXNwbGF5c3dhcC50ZXN0KCBqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApICkgJiYgZWxlbS5vZmZzZXRXaWR0aCA9PT0gMCA/XHJcblx0XHRcdFx0XHRqUXVlcnkuc3dhcCggZWxlbSwgY3NzU2hvdywgZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0XHRcdHJldHVybiBnZXRXaWR0aE9ySGVpZ2h0KCBlbGVtLCBuYW1lLCBleHRyYSApO1xyXG5cdFx0XHRcdFx0fSkgOlxyXG5cdFx0XHRcdFx0Z2V0V2lkdGhPckhlaWdodCggZWxlbSwgbmFtZSwgZXh0cmEgKTtcclxuXHRcdFx0fVxyXG5cdFx0fSxcclxuXHJcblx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSwgZXh0cmEgKSB7XHJcblx0XHRcdHZhciBzdHlsZXMgPSBleHRyYSAmJiBnZXRTdHlsZXMoIGVsZW0gKTtcclxuXHRcdFx0cmV0dXJuIHNldFBvc2l0aXZlTnVtYmVyKCBlbGVtLCB2YWx1ZSwgZXh0cmEgP1xyXG5cdFx0XHRcdGF1Z21lbnRXaWR0aE9ySGVpZ2h0KFxyXG5cdFx0XHRcdFx0ZWxlbSxcclxuXHRcdFx0XHRcdG5hbWUsXHJcblx0XHRcdFx0XHRleHRyYSxcclxuXHRcdFx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIFwiYm94U2l6aW5nXCIsIGZhbHNlLCBzdHlsZXMgKSA9PT0gXCJib3JkZXItYm94XCIsXHJcblx0XHRcdFx0XHRzdHlsZXNcclxuXHRcdFx0XHQpIDogMFxyXG5cdFx0XHQpO1xyXG5cdFx0fVxyXG5cdH07XHJcbn0pO1xyXG5cclxuLy8gU3VwcG9ydDogQW5kcm9pZCAyLjNcclxualF1ZXJ5LmNzc0hvb2tzLm1hcmdpblJpZ2h0ID0gYWRkR2V0SG9va0lmKCBzdXBwb3J0LnJlbGlhYmxlTWFyZ2luUmlnaHQsXHJcblx0ZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkICkge1xyXG5cdFx0aWYgKCBjb21wdXRlZCApIHtcclxuXHRcdFx0cmV0dXJuIGpRdWVyeS5zd2FwKCBlbGVtLCB7IFwiZGlzcGxheVwiOiBcImlubGluZS1ibG9ja1wiIH0sXHJcblx0XHRcdFx0Y3VyQ1NTLCBbIGVsZW0sIFwibWFyZ2luUmlnaHRcIiBdICk7XHJcblx0XHR9XHJcblx0fVxyXG4pO1xyXG5cclxuLy8gVGhlc2UgaG9va3MgYXJlIHVzZWQgYnkgYW5pbWF0ZSB0byBleHBhbmQgcHJvcGVydGllc1xyXG5qUXVlcnkuZWFjaCh7XHJcblx0bWFyZ2luOiBcIlwiLFxyXG5cdHBhZGRpbmc6IFwiXCIsXHJcblx0Ym9yZGVyOiBcIldpZHRoXCJcclxufSwgZnVuY3Rpb24oIHByZWZpeCwgc3VmZml4ICkge1xyXG5cdGpRdWVyeS5jc3NIb29rc1sgcHJlZml4ICsgc3VmZml4IF0gPSB7XHJcblx0XHRleHBhbmQ6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcclxuXHRcdFx0dmFyIGkgPSAwLFxyXG5cdFx0XHRcdGV4cGFuZGVkID0ge30sXHJcblxyXG5cdFx0XHRcdC8vIEFzc3VtZXMgYSBzaW5nbGUgbnVtYmVyIGlmIG5vdCBhIHN0cmluZ1xyXG5cdFx0XHRcdHBhcnRzID0gdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiID8gdmFsdWUuc3BsaXQoXCIgXCIpIDogWyB2YWx1ZSBdO1xyXG5cclxuXHRcdFx0Zm9yICggOyBpIDwgNDsgaSsrICkge1xyXG5cdFx0XHRcdGV4cGFuZGVkWyBwcmVmaXggKyBjc3NFeHBhbmRbIGkgXSArIHN1ZmZpeCBdID1cclxuXHRcdFx0XHRcdHBhcnRzWyBpIF0gfHwgcGFydHNbIGkgLSAyIF0gfHwgcGFydHNbIDAgXTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0cmV0dXJuIGV4cGFuZGVkO1xyXG5cdFx0fVxyXG5cdH07XHJcblxyXG5cdGlmICggIXJtYXJnaW4udGVzdCggcHJlZml4ICkgKSB7XHJcblx0XHRqUXVlcnkuY3NzSG9va3NbIHByZWZpeCArIHN1ZmZpeCBdLnNldCA9IHNldFBvc2l0aXZlTnVtYmVyO1xyXG5cdH1cclxufSk7XHJcblxyXG5qUXVlcnkuZm4uZXh0ZW5kKHtcclxuXHRjc3M6IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSApIHtcclxuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSApIHtcclxuXHRcdFx0dmFyIHN0eWxlcywgbGVuLFxyXG5cdFx0XHRcdG1hcCA9IHt9LFxyXG5cdFx0XHRcdGkgPSAwO1xyXG5cclxuXHRcdFx0aWYgKCBqUXVlcnkuaXNBcnJheSggbmFtZSApICkge1xyXG5cdFx0XHRcdHN0eWxlcyA9IGdldFN0eWxlcyggZWxlbSApO1xyXG5cdFx0XHRcdGxlbiA9IG5hbWUubGVuZ3RoO1xyXG5cclxuXHRcdFx0XHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcclxuXHRcdFx0XHRcdG1hcFsgbmFtZVsgaSBdIF0gPSBqUXVlcnkuY3NzKCBlbGVtLCBuYW1lWyBpIF0sIGZhbHNlLCBzdHlsZXMgKTtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdHJldHVybiBtYXA7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHJldHVybiB2YWx1ZSAhPT0gdW5kZWZpbmVkID9cclxuXHRcdFx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIG5hbWUsIHZhbHVlICkgOlxyXG5cdFx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIG5hbWUgKTtcclxuXHRcdH0sIG5hbWUsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSApO1xyXG5cdH0sXHJcblx0c2hvdzogZnVuY3Rpb24oKSB7XHJcblx0XHRyZXR1cm4gc2hvd0hpZGUoIHRoaXMsIHRydWUgKTtcclxuXHR9LFxyXG5cdGhpZGU6IGZ1bmN0aW9uKCkge1xyXG5cdFx0cmV0dXJuIHNob3dIaWRlKCB0aGlzICk7XHJcblx0fSxcclxuXHR0b2dnbGU6IGZ1bmN0aW9uKCBzdGF0ZSApIHtcclxuXHRcdGlmICggdHlwZW9mIHN0YXRlID09PSBcImJvb2xlYW5cIiApIHtcclxuXHRcdFx0cmV0dXJuIHN0YXRlID8gdGhpcy5zaG93KCkgOiB0aGlzLmhpZGUoKTtcclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRpZiAoIGlzSGlkZGVuKCB0aGlzICkgKSB7XHJcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkuc2hvdygpO1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLmhpZGUoKTtcclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblx0fVxyXG59KTtcclxuXHJcblxyXG5mdW5jdGlvbiBUd2VlbiggZWxlbSwgb3B0aW9ucywgcHJvcCwgZW5kLCBlYXNpbmcgKSB7XHJcblx0cmV0dXJuIG5ldyBUd2Vlbi5wcm90b3R5cGUuaW5pdCggZWxlbSwgb3B0aW9ucywgcHJvcCwgZW5kLCBlYXNpbmcgKTtcclxufVxyXG5qUXVlcnkuVHdlZW4gPSBUd2VlbjtcclxuXHJcblR3ZWVuLnByb3RvdHlwZSA9IHtcclxuXHRjb25zdHJ1Y3RvcjogVHdlZW4sXHJcblx0aW5pdDogZnVuY3Rpb24oIGVsZW0sIG9wdGlvbnMsIHByb3AsIGVuZCwgZWFzaW5nLCB1bml0ICkge1xyXG5cdFx0dGhpcy5lbGVtID0gZWxlbTtcclxuXHRcdHRoaXMucHJvcCA9IHByb3A7XHJcblx0XHR0aGlzLmVhc2luZyA9IGVhc2luZyB8fCBcInN3aW5nXCI7XHJcblx0XHR0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xyXG5cdFx0dGhpcy5zdGFydCA9IHRoaXMubm93ID0gdGhpcy5jdXIoKTtcclxuXHRcdHRoaXMuZW5kID0gZW5kO1xyXG5cdFx0dGhpcy51bml0ID0gdW5pdCB8fCAoIGpRdWVyeS5jc3NOdW1iZXJbIHByb3AgXSA/IFwiXCIgOiBcInB4XCIgKTtcclxuXHR9LFxyXG5cdGN1cjogZnVuY3Rpb24oKSB7XHJcblx0XHR2YXIgaG9va3MgPSBUd2Vlbi5wcm9wSG9va3NbIHRoaXMucHJvcCBdO1xyXG5cclxuXHRcdHJldHVybiBob29rcyAmJiBob29rcy5nZXQgP1xyXG5cdFx0XHRob29rcy5nZXQoIHRoaXMgKSA6XHJcblx0XHRcdFR3ZWVuLnByb3BIb29rcy5fZGVmYXVsdC5nZXQoIHRoaXMgKTtcclxuXHR9LFxyXG5cdHJ1bjogZnVuY3Rpb24oIHBlcmNlbnQgKSB7XHJcblx0XHR2YXIgZWFzZWQsXHJcblx0XHRcdGhvb2tzID0gVHdlZW4ucHJvcEhvb2tzWyB0aGlzLnByb3AgXTtcclxuXHJcblx0XHRpZiAoIHRoaXMub3B0aW9ucy5kdXJhdGlvbiApIHtcclxuXHRcdFx0dGhpcy5wb3MgPSBlYXNlZCA9IGpRdWVyeS5lYXNpbmdbIHRoaXMuZWFzaW5nIF0oXHJcblx0XHRcdFx0cGVyY2VudCwgdGhpcy5vcHRpb25zLmR1cmF0aW9uICogcGVyY2VudCwgMCwgMSwgdGhpcy5vcHRpb25zLmR1cmF0aW9uXHJcblx0XHRcdCk7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHR0aGlzLnBvcyA9IGVhc2VkID0gcGVyY2VudDtcclxuXHRcdH1cclxuXHRcdHRoaXMubm93ID0gKCB0aGlzLmVuZCAtIHRoaXMuc3RhcnQgKSAqIGVhc2VkICsgdGhpcy5zdGFydDtcclxuXHJcblx0XHRpZiAoIHRoaXMub3B0aW9ucy5zdGVwICkge1xyXG5cdFx0XHR0aGlzLm9wdGlvbnMuc3RlcC5jYWxsKCB0aGlzLmVsZW0sIHRoaXMubm93LCB0aGlzICk7XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKCBob29rcyAmJiBob29rcy5zZXQgKSB7XHJcblx0XHRcdGhvb2tzLnNldCggdGhpcyApO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0VHdlZW4ucHJvcEhvb2tzLl9kZWZhdWx0LnNldCggdGhpcyApO1xyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblx0fVxyXG59O1xyXG5cclxuVHdlZW4ucHJvdG90eXBlLmluaXQucHJvdG90eXBlID0gVHdlZW4ucHJvdG90eXBlO1xyXG5cclxuVHdlZW4ucHJvcEhvb2tzID0ge1xyXG5cdF9kZWZhdWx0OiB7XHJcblx0XHRnZXQ6IGZ1bmN0aW9uKCB0d2VlbiApIHtcclxuXHRcdFx0dmFyIHJlc3VsdDtcclxuXHJcblx0XHRcdGlmICggdHdlZW4uZWxlbVsgdHdlZW4ucHJvcCBdICE9IG51bGwgJiZcclxuXHRcdFx0XHQoIXR3ZWVuLmVsZW0uc3R5bGUgfHwgdHdlZW4uZWxlbS5zdHlsZVsgdHdlZW4ucHJvcCBdID09IG51bGwpICkge1xyXG5cdFx0XHRcdHJldHVybiB0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF07XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIFBhc3NpbmcgYW4gZW1wdHkgc3RyaW5nIGFzIGEgM3JkIHBhcmFtZXRlciB0byAuY3NzIHdpbGwgYXV0b21hdGljYWxseVxyXG5cdFx0XHQvLyBhdHRlbXB0IGEgcGFyc2VGbG9hdCBhbmQgZmFsbGJhY2sgdG8gYSBzdHJpbmcgaWYgdGhlIHBhcnNlIGZhaWxzLlxyXG5cdFx0XHQvLyBTaW1wbGUgdmFsdWVzIHN1Y2ggYXMgXCIxMHB4XCIgYXJlIHBhcnNlZCB0byBGbG9hdDtcclxuXHRcdFx0Ly8gY29tcGxleCB2YWx1ZXMgc3VjaCBhcyBcInJvdGF0ZSgxcmFkKVwiIGFyZSByZXR1cm5lZCBhcy1pcy5cclxuXHRcdFx0cmVzdWx0ID0galF1ZXJ5LmNzcyggdHdlZW4uZWxlbSwgdHdlZW4ucHJvcCwgXCJcIiApO1xyXG5cdFx0XHQvLyBFbXB0eSBzdHJpbmdzLCBudWxsLCB1bmRlZmluZWQgYW5kIFwiYXV0b1wiIGFyZSBjb252ZXJ0ZWQgdG8gMC5cclxuXHRcdFx0cmV0dXJuICFyZXN1bHQgfHwgcmVzdWx0ID09PSBcImF1dG9cIiA/IDAgOiByZXN1bHQ7XHJcblx0XHR9LFxyXG5cdFx0c2V0OiBmdW5jdGlvbiggdHdlZW4gKSB7XHJcblx0XHRcdC8vIFVzZSBzdGVwIGhvb2sgZm9yIGJhY2sgY29tcGF0LlxyXG5cdFx0XHQvLyBVc2UgY3NzSG9vayBpZiBpdHMgdGhlcmUuXHJcblx0XHRcdC8vIFVzZSAuc3R5bGUgaWYgYXZhaWxhYmxlIGFuZCB1c2UgcGxhaW4gcHJvcGVydGllcyB3aGVyZSBhdmFpbGFibGUuXHJcblx0XHRcdGlmICggalF1ZXJ5LmZ4LnN0ZXBbIHR3ZWVuLnByb3AgXSApIHtcclxuXHRcdFx0XHRqUXVlcnkuZnguc3RlcFsgdHdlZW4ucHJvcCBdKCB0d2VlbiApO1xyXG5cdFx0XHR9IGVsc2UgaWYgKCB0d2Vlbi5lbGVtLnN0eWxlICYmICggdHdlZW4uZWxlbS5zdHlsZVsgalF1ZXJ5LmNzc1Byb3BzWyB0d2Vlbi5wcm9wIF0gXSAhPSBudWxsIHx8IGpRdWVyeS5jc3NIb29rc1sgdHdlZW4ucHJvcCBdICkgKSB7XHJcblx0XHRcdFx0alF1ZXJ5LnN0eWxlKCB0d2Vlbi5lbGVtLCB0d2Vlbi5wcm9wLCB0d2Vlbi5ub3cgKyB0d2Vlbi51bml0ICk7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0dHdlZW4uZWxlbVsgdHdlZW4ucHJvcCBdID0gdHdlZW4ubm93O1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fVxyXG59O1xyXG5cclxuLy8gU3VwcG9ydDogSUU5XHJcbi8vIFBhbmljIGJhc2VkIGFwcHJvYWNoIHRvIHNldHRpbmcgdGhpbmdzIG9uIGRpc2Nvbm5lY3RlZCBub2Rlc1xyXG5Ud2Vlbi5wcm9wSG9va3Muc2Nyb2xsVG9wID0gVHdlZW4ucHJvcEhvb2tzLnNjcm9sbExlZnQgPSB7XHJcblx0c2V0OiBmdW5jdGlvbiggdHdlZW4gKSB7XHJcblx0XHRpZiAoIHR3ZWVuLmVsZW0ubm9kZVR5cGUgJiYgdHdlZW4uZWxlbS5wYXJlbnROb2RlICkge1xyXG5cdFx0XHR0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF0gPSB0d2Vlbi5ub3c7XHJcblx0XHR9XHJcblx0fVxyXG59O1xyXG5cclxualF1ZXJ5LmVhc2luZyA9IHtcclxuXHRsaW5lYXI6IGZ1bmN0aW9uKCBwICkge1xyXG5cdFx0cmV0dXJuIHA7XHJcblx0fSxcclxuXHRzd2luZzogZnVuY3Rpb24oIHAgKSB7XHJcblx0XHRyZXR1cm4gMC41IC0gTWF0aC5jb3MoIHAgKiBNYXRoLlBJICkgLyAyO1xyXG5cdH1cclxufTtcclxuXHJcbmpRdWVyeS5meCA9IFR3ZWVuLnByb3RvdHlwZS5pbml0O1xyXG5cclxuLy8gQmFjayBDb21wYXQgPDEuOCBleHRlbnNpb24gcG9pbnRcclxualF1ZXJ5LmZ4LnN0ZXAgPSB7fTtcclxuXHJcblxyXG5cclxuXHJcbnZhclxyXG5cdGZ4Tm93LCB0aW1lcklkLFxyXG5cdHJmeHR5cGVzID0gL14oPzp0b2dnbGV8c2hvd3xoaWRlKSQvLFxyXG5cdHJmeG51bSA9IG5ldyBSZWdFeHAoIFwiXig/OihbKy1dKT18KShcIiArIHBudW0gKyBcIikoW2EteiVdKikkXCIsIFwiaVwiICksXHJcblx0cnJ1biA9IC9xdWV1ZUhvb2tzJC8sXHJcblx0YW5pbWF0aW9uUHJlZmlsdGVycyA9IFsgZGVmYXVsdFByZWZpbHRlciBdLFxyXG5cdHR3ZWVuZXJzID0ge1xyXG5cdFx0XCIqXCI6IFsgZnVuY3Rpb24oIHByb3AsIHZhbHVlICkge1xyXG5cdFx0XHR2YXIgdHdlZW4gPSB0aGlzLmNyZWF0ZVR3ZWVuKCBwcm9wLCB2YWx1ZSApLFxyXG5cdFx0XHRcdHRhcmdldCA9IHR3ZWVuLmN1cigpLFxyXG5cdFx0XHRcdHBhcnRzID0gcmZ4bnVtLmV4ZWMoIHZhbHVlICksXHJcblx0XHRcdFx0dW5pdCA9IHBhcnRzICYmIHBhcnRzWyAzIF0gfHwgKCBqUXVlcnkuY3NzTnVtYmVyWyBwcm9wIF0gPyBcIlwiIDogXCJweFwiICksXHJcblxyXG5cdFx0XHRcdC8vIFN0YXJ0aW5nIHZhbHVlIGNvbXB1dGF0aW9uIGlzIHJlcXVpcmVkIGZvciBwb3RlbnRpYWwgdW5pdCBtaXNtYXRjaGVzXHJcblx0XHRcdFx0c3RhcnQgPSAoIGpRdWVyeS5jc3NOdW1iZXJbIHByb3AgXSB8fCB1bml0ICE9PSBcInB4XCIgJiYgK3RhcmdldCApICYmXHJcblx0XHRcdFx0XHRyZnhudW0uZXhlYyggalF1ZXJ5LmNzcyggdHdlZW4uZWxlbSwgcHJvcCApICksXHJcblx0XHRcdFx0c2NhbGUgPSAxLFxyXG5cdFx0XHRcdG1heEl0ZXJhdGlvbnMgPSAyMDtcclxuXHJcblx0XHRcdGlmICggc3RhcnQgJiYgc3RhcnRbIDMgXSAhPT0gdW5pdCApIHtcclxuXHRcdFx0XHQvLyBUcnVzdCB1bml0cyByZXBvcnRlZCBieSBqUXVlcnkuY3NzXHJcblx0XHRcdFx0dW5pdCA9IHVuaXQgfHwgc3RhcnRbIDMgXTtcclxuXHJcblx0XHRcdFx0Ly8gTWFrZSBzdXJlIHdlIHVwZGF0ZSB0aGUgdHdlZW4gcHJvcGVydGllcyBsYXRlciBvblxyXG5cdFx0XHRcdHBhcnRzID0gcGFydHMgfHwgW107XHJcblxyXG5cdFx0XHRcdC8vIEl0ZXJhdGl2ZWx5IGFwcHJveGltYXRlIGZyb20gYSBub256ZXJvIHN0YXJ0aW5nIHBvaW50XHJcblx0XHRcdFx0c3RhcnQgPSArdGFyZ2V0IHx8IDE7XHJcblxyXG5cdFx0XHRcdGRvIHtcclxuXHRcdFx0XHRcdC8vIElmIHByZXZpb3VzIGl0ZXJhdGlvbiB6ZXJvZWQgb3V0LCBkb3VibGUgdW50aWwgd2UgZ2V0ICpzb21ldGhpbmcqLlxyXG5cdFx0XHRcdFx0Ly8gVXNlIHN0cmluZyBmb3IgZG91Ymxpbmcgc28gd2UgZG9uJ3QgYWNjaWRlbnRhbGx5IHNlZSBzY2FsZSBhcyB1bmNoYW5nZWQgYmVsb3dcclxuXHRcdFx0XHRcdHNjYWxlID0gc2NhbGUgfHwgXCIuNVwiO1xyXG5cclxuXHRcdFx0XHRcdC8vIEFkanVzdCBhbmQgYXBwbHlcclxuXHRcdFx0XHRcdHN0YXJ0ID0gc3RhcnQgLyBzY2FsZTtcclxuXHRcdFx0XHRcdGpRdWVyeS5zdHlsZSggdHdlZW4uZWxlbSwgcHJvcCwgc3RhcnQgKyB1bml0ICk7XHJcblxyXG5cdFx0XHRcdC8vIFVwZGF0ZSBzY2FsZSwgdG9sZXJhdGluZyB6ZXJvIG9yIE5hTiBmcm9tIHR3ZWVuLmN1cigpLFxyXG5cdFx0XHRcdC8vIGJyZWFrIHRoZSBsb29wIGlmIHNjYWxlIGlzIHVuY2hhbmdlZCBvciBwZXJmZWN0LCBvciBpZiB3ZSd2ZSBqdXN0IGhhZCBlbm91Z2hcclxuXHRcdFx0XHR9IHdoaWxlICggc2NhbGUgIT09IChzY2FsZSA9IHR3ZWVuLmN1cigpIC8gdGFyZ2V0KSAmJiBzY2FsZSAhPT0gMSAmJiAtLW1heEl0ZXJhdGlvbnMgKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gVXBkYXRlIHR3ZWVuIHByb3BlcnRpZXNcclxuXHRcdFx0aWYgKCBwYXJ0cyApIHtcclxuXHRcdFx0XHRzdGFydCA9IHR3ZWVuLnN0YXJ0ID0gK3N0YXJ0IHx8ICt0YXJnZXQgfHwgMDtcclxuXHRcdFx0XHR0d2Vlbi51bml0ID0gdW5pdDtcclxuXHRcdFx0XHQvLyBJZiBhICs9Ly09IHRva2VuIHdhcyBwcm92aWRlZCwgd2UncmUgZG9pbmcgYSByZWxhdGl2ZSBhbmltYXRpb25cclxuXHRcdFx0XHR0d2Vlbi5lbmQgPSBwYXJ0c1sgMSBdID9cclxuXHRcdFx0XHRcdHN0YXJ0ICsgKCBwYXJ0c1sgMSBdICsgMSApICogcGFydHNbIDIgXSA6XHJcblx0XHRcdFx0XHQrcGFydHNbIDIgXTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0cmV0dXJuIHR3ZWVuO1xyXG5cdFx0fSBdXHJcblx0fTtcclxuXHJcbi8vIEFuaW1hdGlvbnMgY3JlYXRlZCBzeW5jaHJvbm91c2x5IHdpbGwgcnVuIHN5bmNocm9ub3VzbHlcclxuZnVuY3Rpb24gY3JlYXRlRnhOb3coKSB7XHJcblx0c2V0VGltZW91dChmdW5jdGlvbigpIHtcclxuXHRcdGZ4Tm93ID0gdW5kZWZpbmVkO1xyXG5cdH0pO1xyXG5cdHJldHVybiAoIGZ4Tm93ID0galF1ZXJ5Lm5vdygpICk7XHJcbn1cclxuXHJcbi8vIEdlbmVyYXRlIHBhcmFtZXRlcnMgdG8gY3JlYXRlIGEgc3RhbmRhcmQgYW5pbWF0aW9uXHJcbmZ1bmN0aW9uIGdlbkZ4KCB0eXBlLCBpbmNsdWRlV2lkdGggKSB7XHJcblx0dmFyIHdoaWNoLFxyXG5cdFx0aSA9IDAsXHJcblx0XHRhdHRycyA9IHsgaGVpZ2h0OiB0eXBlIH07XHJcblxyXG5cdC8vIElmIHdlIGluY2x1ZGUgd2lkdGgsIHN0ZXAgdmFsdWUgaXMgMSB0byBkbyBhbGwgY3NzRXhwYW5kIHZhbHVlcyxcclxuXHQvLyBvdGhlcndpc2Ugc3RlcCB2YWx1ZSBpcyAyIHRvIHNraXAgb3ZlciBMZWZ0IGFuZCBSaWdodFxyXG5cdGluY2x1ZGVXaWR0aCA9IGluY2x1ZGVXaWR0aCA/IDEgOiAwO1xyXG5cdGZvciAoIDsgaSA8IDQgOyBpICs9IDIgLSBpbmNsdWRlV2lkdGggKSB7XHJcblx0XHR3aGljaCA9IGNzc0V4cGFuZFsgaSBdO1xyXG5cdFx0YXR0cnNbIFwibWFyZ2luXCIgKyB3aGljaCBdID0gYXR0cnNbIFwicGFkZGluZ1wiICsgd2hpY2ggXSA9IHR5cGU7XHJcblx0fVxyXG5cclxuXHRpZiAoIGluY2x1ZGVXaWR0aCApIHtcclxuXHRcdGF0dHJzLm9wYWNpdHkgPSBhdHRycy53aWR0aCA9IHR5cGU7XHJcblx0fVxyXG5cclxuXHRyZXR1cm4gYXR0cnM7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNyZWF0ZVR3ZWVuKCB2YWx1ZSwgcHJvcCwgYW5pbWF0aW9uICkge1xyXG5cdHZhciB0d2VlbixcclxuXHRcdGNvbGxlY3Rpb24gPSAoIHR3ZWVuZXJzWyBwcm9wIF0gfHwgW10gKS5jb25jYXQoIHR3ZWVuZXJzWyBcIipcIiBdICksXHJcblx0XHRpbmRleCA9IDAsXHJcblx0XHRsZW5ndGggPSBjb2xsZWN0aW9uLmxlbmd0aDtcclxuXHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xyXG5cdFx0aWYgKCAodHdlZW4gPSBjb2xsZWN0aW9uWyBpbmRleCBdLmNhbGwoIGFuaW1hdGlvbiwgcHJvcCwgdmFsdWUgKSkgKSB7XHJcblxyXG5cdFx0XHQvLyBXZSdyZSBkb25lIHdpdGggdGhpcyBwcm9wZXJ0eVxyXG5cdFx0XHRyZXR1cm4gdHdlZW47XHJcblx0XHR9XHJcblx0fVxyXG59XHJcblxyXG5mdW5jdGlvbiBkZWZhdWx0UHJlZmlsdGVyKCBlbGVtLCBwcm9wcywgb3B0cyApIHtcclxuXHQvKiBqc2hpbnQgdmFsaWR0aGlzOiB0cnVlICovXHJcblx0dmFyIHByb3AsIHZhbHVlLCB0b2dnbGUsIHR3ZWVuLCBob29rcywgb2xkZmlyZSwgZGlzcGxheSwgY2hlY2tEaXNwbGF5LFxyXG5cdFx0YW5pbSA9IHRoaXMsXHJcblx0XHRvcmlnID0ge30sXHJcblx0XHRzdHlsZSA9IGVsZW0uc3R5bGUsXHJcblx0XHRoaWRkZW4gPSBlbGVtLm5vZGVUeXBlICYmIGlzSGlkZGVuKCBlbGVtICksXHJcblx0XHRkYXRhU2hvdyA9IGRhdGFfcHJpdi5nZXQoIGVsZW0sIFwiZnhzaG93XCIgKTtcclxuXHJcblx0Ly8gSGFuZGxlIHF1ZXVlOiBmYWxzZSBwcm9taXNlc1xyXG5cdGlmICggIW9wdHMucXVldWUgKSB7XHJcblx0XHRob29rcyA9IGpRdWVyeS5fcXVldWVIb29rcyggZWxlbSwgXCJmeFwiICk7XHJcblx0XHRpZiAoIGhvb2tzLnVucXVldWVkID09IG51bGwgKSB7XHJcblx0XHRcdGhvb2tzLnVucXVldWVkID0gMDtcclxuXHRcdFx0b2xkZmlyZSA9IGhvb2tzLmVtcHR5LmZpcmU7XHJcblx0XHRcdGhvb2tzLmVtcHR5LmZpcmUgPSBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRpZiAoICFob29rcy51bnF1ZXVlZCApIHtcclxuXHRcdFx0XHRcdG9sZGZpcmUoKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH07XHJcblx0XHR9XHJcblx0XHRob29rcy51bnF1ZXVlZCsrO1xyXG5cclxuXHRcdGFuaW0uYWx3YXlzKGZ1bmN0aW9uKCkge1xyXG5cdFx0XHQvLyBFbnN1cmUgdGhlIGNvbXBsZXRlIGhhbmRsZXIgaXMgY2FsbGVkIGJlZm9yZSB0aGlzIGNvbXBsZXRlc1xyXG5cdFx0XHRhbmltLmFsd2F5cyhmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRob29rcy51bnF1ZXVlZC0tO1xyXG5cdFx0XHRcdGlmICggIWpRdWVyeS5xdWV1ZSggZWxlbSwgXCJmeFwiICkubGVuZ3RoICkge1xyXG5cdFx0XHRcdFx0aG9va3MuZW1wdHkuZmlyZSgpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSk7XHJcblx0XHR9KTtcclxuXHR9XHJcblxyXG5cdC8vIEhlaWdodC93aWR0aCBvdmVyZmxvdyBwYXNzXHJcblx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICYmICggXCJoZWlnaHRcIiBpbiBwcm9wcyB8fCBcIndpZHRoXCIgaW4gcHJvcHMgKSApIHtcclxuXHRcdC8vIE1ha2Ugc3VyZSB0aGF0IG5vdGhpbmcgc25lYWtzIG91dFxyXG5cdFx0Ly8gUmVjb3JkIGFsbCAzIG92ZXJmbG93IGF0dHJpYnV0ZXMgYmVjYXVzZSBJRTktMTAgZG8gbm90XHJcblx0XHQvLyBjaGFuZ2UgdGhlIG92ZXJmbG93IGF0dHJpYnV0ZSB3aGVuIG92ZXJmbG93WCBhbmRcclxuXHRcdC8vIG92ZXJmbG93WSBhcmUgc2V0IHRvIHRoZSBzYW1lIHZhbHVlXHJcblx0XHRvcHRzLm92ZXJmbG93ID0gWyBzdHlsZS5vdmVyZmxvdywgc3R5bGUub3ZlcmZsb3dYLCBzdHlsZS5vdmVyZmxvd1kgXTtcclxuXHJcblx0XHQvLyBTZXQgZGlzcGxheSBwcm9wZXJ0eSB0byBpbmxpbmUtYmxvY2sgZm9yIGhlaWdodC93aWR0aFxyXG5cdFx0Ly8gYW5pbWF0aW9ucyBvbiBpbmxpbmUgZWxlbWVudHMgdGhhdCBhcmUgaGF2aW5nIHdpZHRoL2hlaWdodCBhbmltYXRlZFxyXG5cdFx0ZGlzcGxheSA9IGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiICk7XHJcblxyXG5cdFx0Ly8gVGVzdCBkZWZhdWx0IGRpc3BsYXkgaWYgZGlzcGxheSBpcyBjdXJyZW50bHkgXCJub25lXCJcclxuXHRcdGNoZWNrRGlzcGxheSA9IGRpc3BsYXkgPT09IFwibm9uZVwiID9cclxuXHRcdFx0ZGF0YV9wcml2LmdldCggZWxlbSwgXCJvbGRkaXNwbGF5XCIgKSB8fCBkZWZhdWx0RGlzcGxheSggZWxlbS5ub2RlTmFtZSApIDogZGlzcGxheTtcclxuXHJcblx0XHRpZiAoIGNoZWNrRGlzcGxheSA9PT0gXCJpbmxpbmVcIiAmJiBqUXVlcnkuY3NzKCBlbGVtLCBcImZsb2F0XCIgKSA9PT0gXCJub25lXCIgKSB7XHJcblx0XHRcdHN0eWxlLmRpc3BsYXkgPSBcImlubGluZS1ibG9ja1wiO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0aWYgKCBvcHRzLm92ZXJmbG93ICkge1xyXG5cdFx0c3R5bGUub3ZlcmZsb3cgPSBcImhpZGRlblwiO1xyXG5cdFx0YW5pbS5hbHdheXMoZnVuY3Rpb24oKSB7XHJcblx0XHRcdHN0eWxlLm92ZXJmbG93ID0gb3B0cy5vdmVyZmxvd1sgMCBdO1xyXG5cdFx0XHRzdHlsZS5vdmVyZmxvd1ggPSBvcHRzLm92ZXJmbG93WyAxIF07XHJcblx0XHRcdHN0eWxlLm92ZXJmbG93WSA9IG9wdHMub3ZlcmZsb3dbIDIgXTtcclxuXHRcdH0pO1xyXG5cdH1cclxuXHJcblx0Ly8gc2hvdy9oaWRlIHBhc3NcclxuXHRmb3IgKCBwcm9wIGluIHByb3BzICkge1xyXG5cdFx0dmFsdWUgPSBwcm9wc1sgcHJvcCBdO1xyXG5cdFx0aWYgKCByZnh0eXBlcy5leGVjKCB2YWx1ZSApICkge1xyXG5cdFx0XHRkZWxldGUgcHJvcHNbIHByb3AgXTtcclxuXHRcdFx0dG9nZ2xlID0gdG9nZ2xlIHx8IHZhbHVlID09PSBcInRvZ2dsZVwiO1xyXG5cdFx0XHRpZiAoIHZhbHVlID09PSAoIGhpZGRlbiA/IFwiaGlkZVwiIDogXCJzaG93XCIgKSApIHtcclxuXHJcblx0XHRcdFx0Ly8gSWYgdGhlcmUgaXMgZGF0YVNob3cgbGVmdCBvdmVyIGZyb20gYSBzdG9wcGVkIGhpZGUgb3Igc2hvdyBhbmQgd2UgYXJlIGdvaW5nIHRvIHByb2NlZWQgd2l0aCBzaG93LCB3ZSBzaG91bGQgcHJldGVuZCB0byBiZSBoaWRkZW5cclxuXHRcdFx0XHRpZiAoIHZhbHVlID09PSBcInNob3dcIiAmJiBkYXRhU2hvdyAmJiBkYXRhU2hvd1sgcHJvcCBdICE9PSB1bmRlZmluZWQgKSB7XHJcblx0XHRcdFx0XHRoaWRkZW4gPSB0cnVlO1xyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRjb250aW51ZTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdFx0b3JpZ1sgcHJvcCBdID0gZGF0YVNob3cgJiYgZGF0YVNob3dbIHByb3AgXSB8fCBqUXVlcnkuc3R5bGUoIGVsZW0sIHByb3AgKTtcclxuXHJcblx0XHQvLyBBbnkgbm9uLWZ4IHZhbHVlIHN0b3BzIHVzIGZyb20gcmVzdG9yaW5nIHRoZSBvcmlnaW5hbCBkaXNwbGF5IHZhbHVlXHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRkaXNwbGF5ID0gdW5kZWZpbmVkO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0aWYgKCAhalF1ZXJ5LmlzRW1wdHlPYmplY3QoIG9yaWcgKSApIHtcclxuXHRcdGlmICggZGF0YVNob3cgKSB7XHJcblx0XHRcdGlmICggXCJoaWRkZW5cIiBpbiBkYXRhU2hvdyApIHtcclxuXHRcdFx0XHRoaWRkZW4gPSBkYXRhU2hvdy5oaWRkZW47XHJcblx0XHRcdH1cclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdGRhdGFTaG93ID0gZGF0YV9wcml2LmFjY2VzcyggZWxlbSwgXCJmeHNob3dcIiwge30gKTtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBTdG9yZSBzdGF0ZSBpZiBpdHMgdG9nZ2xlIC0gZW5hYmxlcyAuc3RvcCgpLnRvZ2dsZSgpIHRvIFwicmV2ZXJzZVwiXHJcblx0XHRpZiAoIHRvZ2dsZSApIHtcclxuXHRcdFx0ZGF0YVNob3cuaGlkZGVuID0gIWhpZGRlbjtcclxuXHRcdH1cclxuXHRcdGlmICggaGlkZGVuICkge1xyXG5cdFx0XHRqUXVlcnkoIGVsZW0gKS5zaG93KCk7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRhbmltLmRvbmUoZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0alF1ZXJ5KCBlbGVtICkuaGlkZSgpO1xyXG5cdFx0XHR9KTtcclxuXHRcdH1cclxuXHRcdGFuaW0uZG9uZShmdW5jdGlvbigpIHtcclxuXHRcdFx0dmFyIHByb3A7XHJcblxyXG5cdFx0XHRkYXRhX3ByaXYucmVtb3ZlKCBlbGVtLCBcImZ4c2hvd1wiICk7XHJcblx0XHRcdGZvciAoIHByb3AgaW4gb3JpZyApIHtcclxuXHRcdFx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIHByb3AsIG9yaWdbIHByb3AgXSApO1xyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHRcdGZvciAoIHByb3AgaW4gb3JpZyApIHtcclxuXHRcdFx0dHdlZW4gPSBjcmVhdGVUd2VlbiggaGlkZGVuID8gZGF0YVNob3dbIHByb3AgXSA6IDAsIHByb3AsIGFuaW0gKTtcclxuXHJcblx0XHRcdGlmICggISggcHJvcCBpbiBkYXRhU2hvdyApICkge1xyXG5cdFx0XHRcdGRhdGFTaG93WyBwcm9wIF0gPSB0d2Vlbi5zdGFydDtcclxuXHRcdFx0XHRpZiAoIGhpZGRlbiApIHtcclxuXHRcdFx0XHRcdHR3ZWVuLmVuZCA9IHR3ZWVuLnN0YXJ0O1xyXG5cdFx0XHRcdFx0dHdlZW4uc3RhcnQgPSBwcm9wID09PSBcIndpZHRoXCIgfHwgcHJvcCA9PT0gXCJoZWlnaHRcIiA/IDEgOiAwO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHQvLyBJZiB0aGlzIGlzIGEgbm9vcCBsaWtlIC5oaWRlKCkuaGlkZSgpLCByZXN0b3JlIGFuIG92ZXJ3cml0dGVuIGRpc3BsYXkgdmFsdWVcclxuXHR9IGVsc2UgaWYgKCAoZGlzcGxheSA9PT0gXCJub25lXCIgPyBkZWZhdWx0RGlzcGxheSggZWxlbS5ub2RlTmFtZSApIDogZGlzcGxheSkgPT09IFwiaW5saW5lXCIgKSB7XHJcblx0XHRzdHlsZS5kaXNwbGF5ID0gZGlzcGxheTtcclxuXHR9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHByb3BGaWx0ZXIoIHByb3BzLCBzcGVjaWFsRWFzaW5nICkge1xyXG5cdHZhciBpbmRleCwgbmFtZSwgZWFzaW5nLCB2YWx1ZSwgaG9va3M7XHJcblxyXG5cdC8vIGNhbWVsQ2FzZSwgc3BlY2lhbEVhc2luZyBhbmQgZXhwYW5kIGNzc0hvb2sgcGFzc1xyXG5cdGZvciAoIGluZGV4IGluIHByb3BzICkge1xyXG5cdFx0bmFtZSA9IGpRdWVyeS5jYW1lbENhc2UoIGluZGV4ICk7XHJcblx0XHRlYXNpbmcgPSBzcGVjaWFsRWFzaW5nWyBuYW1lIF07XHJcblx0XHR2YWx1ZSA9IHByb3BzWyBpbmRleCBdO1xyXG5cdFx0aWYgKCBqUXVlcnkuaXNBcnJheSggdmFsdWUgKSApIHtcclxuXHRcdFx0ZWFzaW5nID0gdmFsdWVbIDEgXTtcclxuXHRcdFx0dmFsdWUgPSBwcm9wc1sgaW5kZXggXSA9IHZhbHVlWyAwIF07XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKCBpbmRleCAhPT0gbmFtZSApIHtcclxuXHRcdFx0cHJvcHNbIG5hbWUgXSA9IHZhbHVlO1xyXG5cdFx0XHRkZWxldGUgcHJvcHNbIGluZGV4IF07XHJcblx0XHR9XHJcblxyXG5cdFx0aG9va3MgPSBqUXVlcnkuY3NzSG9va3NbIG5hbWUgXTtcclxuXHRcdGlmICggaG9va3MgJiYgXCJleHBhbmRcIiBpbiBob29rcyApIHtcclxuXHRcdFx0dmFsdWUgPSBob29rcy5leHBhbmQoIHZhbHVlICk7XHJcblx0XHRcdGRlbGV0ZSBwcm9wc1sgbmFtZSBdO1xyXG5cclxuXHRcdFx0Ly8gTm90IHF1aXRlICQuZXh0ZW5kLCB0aGlzIHdvbid0IG92ZXJ3cml0ZSBleGlzdGluZyBrZXlzLlxyXG5cdFx0XHQvLyBSZXVzaW5nICdpbmRleCcgYmVjYXVzZSB3ZSBoYXZlIHRoZSBjb3JyZWN0IFwibmFtZVwiXHJcblx0XHRcdGZvciAoIGluZGV4IGluIHZhbHVlICkge1xyXG5cdFx0XHRcdGlmICggISggaW5kZXggaW4gcHJvcHMgKSApIHtcclxuXHRcdFx0XHRcdHByb3BzWyBpbmRleCBdID0gdmFsdWVbIGluZGV4IF07XHJcblx0XHRcdFx0XHRzcGVjaWFsRWFzaW5nWyBpbmRleCBdID0gZWFzaW5nO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0c3BlY2lhbEVhc2luZ1sgbmFtZSBdID0gZWFzaW5nO1xyXG5cdFx0fVxyXG5cdH1cclxufVxyXG5cclxuZnVuY3Rpb24gQW5pbWF0aW9uKCBlbGVtLCBwcm9wZXJ0aWVzLCBvcHRpb25zICkge1xyXG5cdHZhciByZXN1bHQsXHJcblx0XHRzdG9wcGVkLFxyXG5cdFx0aW5kZXggPSAwLFxyXG5cdFx0bGVuZ3RoID0gYW5pbWF0aW9uUHJlZmlsdGVycy5sZW5ndGgsXHJcblx0XHRkZWZlcnJlZCA9IGpRdWVyeS5EZWZlcnJlZCgpLmFsd2F5cyggZnVuY3Rpb24oKSB7XHJcblx0XHRcdC8vIERvbid0IG1hdGNoIGVsZW0gaW4gdGhlIDphbmltYXRlZCBzZWxlY3RvclxyXG5cdFx0XHRkZWxldGUgdGljay5lbGVtO1xyXG5cdFx0fSksXHJcblx0XHR0aWNrID0gZnVuY3Rpb24oKSB7XHJcblx0XHRcdGlmICggc3RvcHBlZCApIHtcclxuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XHJcblx0XHRcdH1cclxuXHRcdFx0dmFyIGN1cnJlbnRUaW1lID0gZnhOb3cgfHwgY3JlYXRlRnhOb3coKSxcclxuXHRcdFx0XHRyZW1haW5pbmcgPSBNYXRoLm1heCggMCwgYW5pbWF0aW9uLnN0YXJ0VGltZSArIGFuaW1hdGlvbi5kdXJhdGlvbiAtIGN1cnJlbnRUaW1lICksXHJcblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCAyLjNcclxuXHRcdFx0XHQvLyBBcmNoYWljIGNyYXNoIGJ1ZyB3b24ndCBhbGxvdyB1cyB0byB1c2UgYDEgLSAoIDAuNSB8fCAwIClgICgjMTI0OTcpXHJcblx0XHRcdFx0dGVtcCA9IHJlbWFpbmluZyAvIGFuaW1hdGlvbi5kdXJhdGlvbiB8fCAwLFxyXG5cdFx0XHRcdHBlcmNlbnQgPSAxIC0gdGVtcCxcclxuXHRcdFx0XHRpbmRleCA9IDAsXHJcblx0XHRcdFx0bGVuZ3RoID0gYW5pbWF0aW9uLnR3ZWVucy5sZW5ndGg7XHJcblxyXG5cdFx0XHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoIDsgaW5kZXgrKyApIHtcclxuXHRcdFx0XHRhbmltYXRpb24udHdlZW5zWyBpbmRleCBdLnJ1biggcGVyY2VudCApO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRkZWZlcnJlZC5ub3RpZnlXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgcGVyY2VudCwgcmVtYWluaW5nIF0pO1xyXG5cclxuXHRcdFx0aWYgKCBwZXJjZW50IDwgMSAmJiBsZW5ndGggKSB7XHJcblx0XHRcdFx0cmV0dXJuIHJlbWFpbmluZztcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRkZWZlcnJlZC5yZXNvbHZlV2l0aCggZWxlbSwgWyBhbmltYXRpb24gXSApO1xyXG5cdFx0XHRcdHJldHVybiBmYWxzZTtcclxuXHRcdFx0fVxyXG5cdFx0fSxcclxuXHRcdGFuaW1hdGlvbiA9IGRlZmVycmVkLnByb21pc2Uoe1xyXG5cdFx0XHRlbGVtOiBlbGVtLFxyXG5cdFx0XHRwcm9wczogalF1ZXJ5LmV4dGVuZCgge30sIHByb3BlcnRpZXMgKSxcclxuXHRcdFx0b3B0czogalF1ZXJ5LmV4dGVuZCggdHJ1ZSwgeyBzcGVjaWFsRWFzaW5nOiB7fSB9LCBvcHRpb25zICksXHJcblx0XHRcdG9yaWdpbmFsUHJvcGVydGllczogcHJvcGVydGllcyxcclxuXHRcdFx0b3JpZ2luYWxPcHRpb25zOiBvcHRpb25zLFxyXG5cdFx0XHRzdGFydFRpbWU6IGZ4Tm93IHx8IGNyZWF0ZUZ4Tm93KCksXHJcblx0XHRcdGR1cmF0aW9uOiBvcHRpb25zLmR1cmF0aW9uLFxyXG5cdFx0XHR0d2VlbnM6IFtdLFxyXG5cdFx0XHRjcmVhdGVUd2VlbjogZnVuY3Rpb24oIHByb3AsIGVuZCApIHtcclxuXHRcdFx0XHR2YXIgdHdlZW4gPSBqUXVlcnkuVHdlZW4oIGVsZW0sIGFuaW1hdGlvbi5vcHRzLCBwcm9wLCBlbmQsXHJcblx0XHRcdFx0XHRcdGFuaW1hdGlvbi5vcHRzLnNwZWNpYWxFYXNpbmdbIHByb3AgXSB8fCBhbmltYXRpb24ub3B0cy5lYXNpbmcgKTtcclxuXHRcdFx0XHRhbmltYXRpb24udHdlZW5zLnB1c2goIHR3ZWVuICk7XHJcblx0XHRcdFx0cmV0dXJuIHR3ZWVuO1xyXG5cdFx0XHR9LFxyXG5cdFx0XHRzdG9wOiBmdW5jdGlvbiggZ290b0VuZCApIHtcclxuXHRcdFx0XHR2YXIgaW5kZXggPSAwLFxyXG5cdFx0XHRcdFx0Ly8gSWYgd2UgYXJlIGdvaW5nIHRvIHRoZSBlbmQsIHdlIHdhbnQgdG8gcnVuIGFsbCB0aGUgdHdlZW5zXHJcblx0XHRcdFx0XHQvLyBvdGhlcndpc2Ugd2Ugc2tpcCB0aGlzIHBhcnRcclxuXHRcdFx0XHRcdGxlbmd0aCA9IGdvdG9FbmQgPyBhbmltYXRpb24udHdlZW5zLmxlbmd0aCA6IDA7XHJcblx0XHRcdFx0aWYgKCBzdG9wcGVkICkge1xyXG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdHN0b3BwZWQgPSB0cnVlO1xyXG5cdFx0XHRcdGZvciAoIDsgaW5kZXggPCBsZW5ndGggOyBpbmRleCsrICkge1xyXG5cdFx0XHRcdFx0YW5pbWF0aW9uLnR3ZWVuc1sgaW5kZXggXS5ydW4oIDEgKTtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdC8vIFJlc29sdmUgd2hlbiB3ZSBwbGF5ZWQgdGhlIGxhc3QgZnJhbWU7IG90aGVyd2lzZSwgcmVqZWN0XHJcblx0XHRcdFx0aWYgKCBnb3RvRW5kICkge1xyXG5cdFx0XHRcdFx0ZGVmZXJyZWQucmVzb2x2ZVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCBnb3RvRW5kIF0gKTtcclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0ZGVmZXJyZWQucmVqZWN0V2l0aCggZWxlbSwgWyBhbmltYXRpb24sIGdvdG9FbmQgXSApO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRyZXR1cm4gdGhpcztcclxuXHRcdFx0fVxyXG5cdFx0fSksXHJcblx0XHRwcm9wcyA9IGFuaW1hdGlvbi5wcm9wcztcclxuXHJcblx0cHJvcEZpbHRlciggcHJvcHMsIGFuaW1hdGlvbi5vcHRzLnNwZWNpYWxFYXNpbmcgKTtcclxuXHJcblx0Zm9yICggOyBpbmRleCA8IGxlbmd0aCA7IGluZGV4KysgKSB7XHJcblx0XHRyZXN1bHQgPSBhbmltYXRpb25QcmVmaWx0ZXJzWyBpbmRleCBdLmNhbGwoIGFuaW1hdGlvbiwgZWxlbSwgcHJvcHMsIGFuaW1hdGlvbi5vcHRzICk7XHJcblx0XHRpZiAoIHJlc3VsdCApIHtcclxuXHRcdFx0cmV0dXJuIHJlc3VsdDtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdGpRdWVyeS5tYXAoIHByb3BzLCBjcmVhdGVUd2VlbiwgYW5pbWF0aW9uICk7XHJcblxyXG5cdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIGFuaW1hdGlvbi5vcHRzLnN0YXJ0ICkgKSB7XHJcblx0XHRhbmltYXRpb24ub3B0cy5zdGFydC5jYWxsKCBlbGVtLCBhbmltYXRpb24gKTtcclxuXHR9XHJcblxyXG5cdGpRdWVyeS5meC50aW1lcihcclxuXHRcdGpRdWVyeS5leHRlbmQoIHRpY2ssIHtcclxuXHRcdFx0ZWxlbTogZWxlbSxcclxuXHRcdFx0YW5pbTogYW5pbWF0aW9uLFxyXG5cdFx0XHRxdWV1ZTogYW5pbWF0aW9uLm9wdHMucXVldWVcclxuXHRcdH0pXHJcblx0KTtcclxuXHJcblx0Ly8gYXR0YWNoIGNhbGxiYWNrcyBmcm9tIG9wdGlvbnNcclxuXHRyZXR1cm4gYW5pbWF0aW9uLnByb2dyZXNzKCBhbmltYXRpb24ub3B0cy5wcm9ncmVzcyApXHJcblx0XHQuZG9uZSggYW5pbWF0aW9uLm9wdHMuZG9uZSwgYW5pbWF0aW9uLm9wdHMuY29tcGxldGUgKVxyXG5cdFx0LmZhaWwoIGFuaW1hdGlvbi5vcHRzLmZhaWwgKVxyXG5cdFx0LmFsd2F5cyggYW5pbWF0aW9uLm9wdHMuYWx3YXlzICk7XHJcbn1cclxuXHJcbmpRdWVyeS5BbmltYXRpb24gPSBqUXVlcnkuZXh0ZW5kKCBBbmltYXRpb24sIHtcclxuXHJcblx0dHdlZW5lcjogZnVuY3Rpb24oIHByb3BzLCBjYWxsYmFjayApIHtcclxuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHByb3BzICkgKSB7XHJcblx0XHRcdGNhbGxiYWNrID0gcHJvcHM7XHJcblx0XHRcdHByb3BzID0gWyBcIipcIiBdO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0cHJvcHMgPSBwcm9wcy5zcGxpdChcIiBcIik7XHJcblx0XHR9XHJcblxyXG5cdFx0dmFyIHByb3AsXHJcblx0XHRcdGluZGV4ID0gMCxcclxuXHRcdFx0bGVuZ3RoID0gcHJvcHMubGVuZ3RoO1xyXG5cclxuXHRcdGZvciAoIDsgaW5kZXggPCBsZW5ndGggOyBpbmRleCsrICkge1xyXG5cdFx0XHRwcm9wID0gcHJvcHNbIGluZGV4IF07XHJcblx0XHRcdHR3ZWVuZXJzWyBwcm9wIF0gPSB0d2VlbmVyc1sgcHJvcCBdIHx8IFtdO1xyXG5cdFx0XHR0d2VlbmVyc1sgcHJvcCBdLnVuc2hpZnQoIGNhbGxiYWNrICk7XHJcblx0XHR9XHJcblx0fSxcclxuXHJcblx0cHJlZmlsdGVyOiBmdW5jdGlvbiggY2FsbGJhY2ssIHByZXBlbmQgKSB7XHJcblx0XHRpZiAoIHByZXBlbmQgKSB7XHJcblx0XHRcdGFuaW1hdGlvblByZWZpbHRlcnMudW5zaGlmdCggY2FsbGJhY2sgKTtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdGFuaW1hdGlvblByZWZpbHRlcnMucHVzaCggY2FsbGJhY2sgKTtcclxuXHRcdH1cclxuXHR9XHJcbn0pO1xyXG5cclxualF1ZXJ5LnNwZWVkID0gZnVuY3Rpb24oIHNwZWVkLCBlYXNpbmcsIGZuICkge1xyXG5cdHZhciBvcHQgPSBzcGVlZCAmJiB0eXBlb2Ygc3BlZWQgPT09IFwib2JqZWN0XCIgPyBqUXVlcnkuZXh0ZW5kKCB7fSwgc3BlZWQgKSA6IHtcclxuXHRcdGNvbXBsZXRlOiBmbiB8fCAhZm4gJiYgZWFzaW5nIHx8XHJcblx0XHRcdGpRdWVyeS5pc0Z1bmN0aW9uKCBzcGVlZCApICYmIHNwZWVkLFxyXG5cdFx0ZHVyYXRpb246IHNwZWVkLFxyXG5cdFx0ZWFzaW5nOiBmbiAmJiBlYXNpbmcgfHwgZWFzaW5nICYmICFqUXVlcnkuaXNGdW5jdGlvbiggZWFzaW5nICkgJiYgZWFzaW5nXHJcblx0fTtcclxuXHJcblx0b3B0LmR1cmF0aW9uID0galF1ZXJ5LmZ4Lm9mZiA/IDAgOiB0eXBlb2Ygb3B0LmR1cmF0aW9uID09PSBcIm51bWJlclwiID8gb3B0LmR1cmF0aW9uIDpcclxuXHRcdG9wdC5kdXJhdGlvbiBpbiBqUXVlcnkuZnguc3BlZWRzID8galF1ZXJ5LmZ4LnNwZWVkc1sgb3B0LmR1cmF0aW9uIF0gOiBqUXVlcnkuZnguc3BlZWRzLl9kZWZhdWx0O1xyXG5cclxuXHQvLyBOb3JtYWxpemUgb3B0LnF1ZXVlIC0gdHJ1ZS91bmRlZmluZWQvbnVsbCAtPiBcImZ4XCJcclxuXHRpZiAoIG9wdC5xdWV1ZSA9PSBudWxsIHx8IG9wdC5xdWV1ZSA9PT0gdHJ1ZSApIHtcclxuXHRcdG9wdC5xdWV1ZSA9IFwiZnhcIjtcclxuXHR9XHJcblxyXG5cdC8vIFF1ZXVlaW5nXHJcblx0b3B0Lm9sZCA9IG9wdC5jb21wbGV0ZTtcclxuXHJcblx0b3B0LmNvbXBsZXRlID0gZnVuY3Rpb24oKSB7XHJcblx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBvcHQub2xkICkgKSB7XHJcblx0XHRcdG9wdC5vbGQuY2FsbCggdGhpcyApO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmICggb3B0LnF1ZXVlICkge1xyXG5cdFx0XHRqUXVlcnkuZGVxdWV1ZSggdGhpcywgb3B0LnF1ZXVlICk7XHJcblx0XHR9XHJcblx0fTtcclxuXHJcblx0cmV0dXJuIG9wdDtcclxufTtcclxuXHJcbmpRdWVyeS5mbi5leHRlbmQoe1xyXG5cdGZhZGVUbzogZnVuY3Rpb24oIHNwZWVkLCB0bywgZWFzaW5nLCBjYWxsYmFjayApIHtcclxuXHJcblx0XHQvLyBTaG93IGFueSBoaWRkZW4gZWxlbWVudHMgYWZ0ZXIgc2V0dGluZyBvcGFjaXR5IHRvIDBcclxuXHRcdHJldHVybiB0aGlzLmZpbHRlciggaXNIaWRkZW4gKS5jc3MoIFwib3BhY2l0eVwiLCAwICkuc2hvdygpXHJcblxyXG5cdFx0XHQvLyBBbmltYXRlIHRvIHRoZSB2YWx1ZSBzcGVjaWZpZWRcclxuXHRcdFx0LmVuZCgpLmFuaW1hdGUoeyBvcGFjaXR5OiB0byB9LCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApO1xyXG5cdH0sXHJcblx0YW5pbWF0ZTogZnVuY3Rpb24oIHByb3AsIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICkge1xyXG5cdFx0dmFyIGVtcHR5ID0galF1ZXJ5LmlzRW1wdHlPYmplY3QoIHByb3AgKSxcclxuXHRcdFx0b3B0YWxsID0galF1ZXJ5LnNwZWVkKCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApLFxyXG5cdFx0XHRkb0FuaW1hdGlvbiA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdC8vIE9wZXJhdGUgb24gYSBjb3B5IG9mIHByb3Agc28gcGVyLXByb3BlcnR5IGVhc2luZyB3b24ndCBiZSBsb3N0XHJcblx0XHRcdFx0dmFyIGFuaW0gPSBBbmltYXRpb24oIHRoaXMsIGpRdWVyeS5leHRlbmQoIHt9LCBwcm9wICksIG9wdGFsbCApO1xyXG5cclxuXHRcdFx0XHQvLyBFbXB0eSBhbmltYXRpb25zLCBvciBmaW5pc2hpbmcgcmVzb2x2ZXMgaW1tZWRpYXRlbHlcclxuXHRcdFx0XHRpZiAoIGVtcHR5IHx8IGRhdGFfcHJpdi5nZXQoIHRoaXMsIFwiZmluaXNoXCIgKSApIHtcclxuXHRcdFx0XHRcdGFuaW0uc3RvcCggdHJ1ZSApO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fTtcclxuXHRcdFx0ZG9BbmltYXRpb24uZmluaXNoID0gZG9BbmltYXRpb247XHJcblxyXG5cdFx0cmV0dXJuIGVtcHR5IHx8IG9wdGFsbC5xdWV1ZSA9PT0gZmFsc2UgP1xyXG5cdFx0XHR0aGlzLmVhY2goIGRvQW5pbWF0aW9uICkgOlxyXG5cdFx0XHR0aGlzLnF1ZXVlKCBvcHRhbGwucXVldWUsIGRvQW5pbWF0aW9uICk7XHJcblx0fSxcclxuXHRzdG9wOiBmdW5jdGlvbiggdHlwZSwgY2xlYXJRdWV1ZSwgZ290b0VuZCApIHtcclxuXHRcdHZhciBzdG9wUXVldWUgPSBmdW5jdGlvbiggaG9va3MgKSB7XHJcblx0XHRcdHZhciBzdG9wID0gaG9va3Muc3RvcDtcclxuXHRcdFx0ZGVsZXRlIGhvb2tzLnN0b3A7XHJcblx0XHRcdHN0b3AoIGdvdG9FbmQgKTtcclxuXHRcdH07XHJcblxyXG5cdFx0aWYgKCB0eXBlb2YgdHlwZSAhPT0gXCJzdHJpbmdcIiApIHtcclxuXHRcdFx0Z290b0VuZCA9IGNsZWFyUXVldWU7XHJcblx0XHRcdGNsZWFyUXVldWUgPSB0eXBlO1xyXG5cdFx0XHR0eXBlID0gdW5kZWZpbmVkO1xyXG5cdFx0fVxyXG5cdFx0aWYgKCBjbGVhclF1ZXVlICYmIHR5cGUgIT09IGZhbHNlICkge1xyXG5cdFx0XHR0aGlzLnF1ZXVlKCB0eXBlIHx8IFwiZnhcIiwgW10gKTtcclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCkge1xyXG5cdFx0XHR2YXIgZGVxdWV1ZSA9IHRydWUsXHJcblx0XHRcdFx0aW5kZXggPSB0eXBlICE9IG51bGwgJiYgdHlwZSArIFwicXVldWVIb29rc1wiLFxyXG5cdFx0XHRcdHRpbWVycyA9IGpRdWVyeS50aW1lcnMsXHJcblx0XHRcdFx0ZGF0YSA9IGRhdGFfcHJpdi5nZXQoIHRoaXMgKTtcclxuXHJcblx0XHRcdGlmICggaW5kZXggKSB7XHJcblx0XHRcdFx0aWYgKCBkYXRhWyBpbmRleCBdICYmIGRhdGFbIGluZGV4IF0uc3RvcCApIHtcclxuXHRcdFx0XHRcdHN0b3BRdWV1ZSggZGF0YVsgaW5kZXggXSApO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRmb3IgKCBpbmRleCBpbiBkYXRhICkge1xyXG5cdFx0XHRcdFx0aWYgKCBkYXRhWyBpbmRleCBdICYmIGRhdGFbIGluZGV4IF0uc3RvcCAmJiBycnVuLnRlc3QoIGluZGV4ICkgKSB7XHJcblx0XHRcdFx0XHRcdHN0b3BRdWV1ZSggZGF0YVsgaW5kZXggXSApO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Zm9yICggaW5kZXggPSB0aW1lcnMubGVuZ3RoOyBpbmRleC0tOyApIHtcclxuXHRcdFx0XHRpZiAoIHRpbWVyc1sgaW5kZXggXS5lbGVtID09PSB0aGlzICYmICh0eXBlID09IG51bGwgfHwgdGltZXJzWyBpbmRleCBdLnF1ZXVlID09PSB0eXBlKSApIHtcclxuXHRcdFx0XHRcdHRpbWVyc1sgaW5kZXggXS5hbmltLnN0b3AoIGdvdG9FbmQgKTtcclxuXHRcdFx0XHRcdGRlcXVldWUgPSBmYWxzZTtcclxuXHRcdFx0XHRcdHRpbWVycy5zcGxpY2UoIGluZGV4LCAxICk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBTdGFydCB0aGUgbmV4dCBpbiB0aGUgcXVldWUgaWYgdGhlIGxhc3Qgc3RlcCB3YXNuJ3QgZm9yY2VkLlxyXG5cdFx0XHQvLyBUaW1lcnMgY3VycmVudGx5IHdpbGwgY2FsbCB0aGVpciBjb21wbGV0ZSBjYWxsYmFja3MsIHdoaWNoXHJcblx0XHRcdC8vIHdpbGwgZGVxdWV1ZSBidXQgb25seSBpZiB0aGV5IHdlcmUgZ290b0VuZC5cclxuXHRcdFx0aWYgKCBkZXF1ZXVlIHx8ICFnb3RvRW5kICkge1xyXG5cdFx0XHRcdGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCB0eXBlICk7XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cdH0sXHJcblx0ZmluaXNoOiBmdW5jdGlvbiggdHlwZSApIHtcclxuXHRcdGlmICggdHlwZSAhPT0gZmFsc2UgKSB7XHJcblx0XHRcdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcclxuXHRcdH1cclxuXHRcdHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKSB7XHJcblx0XHRcdHZhciBpbmRleCxcclxuXHRcdFx0XHRkYXRhID0gZGF0YV9wcml2LmdldCggdGhpcyApLFxyXG5cdFx0XHRcdHF1ZXVlID0gZGF0YVsgdHlwZSArIFwicXVldWVcIiBdLFxyXG5cdFx0XHRcdGhvb2tzID0gZGF0YVsgdHlwZSArIFwicXVldWVIb29rc1wiIF0sXHJcblx0XHRcdFx0dGltZXJzID0galF1ZXJ5LnRpbWVycyxcclxuXHRcdFx0XHRsZW5ndGggPSBxdWV1ZSA/IHF1ZXVlLmxlbmd0aCA6IDA7XHJcblxyXG5cdFx0XHQvLyBFbmFibGUgZmluaXNoaW5nIGZsYWcgb24gcHJpdmF0ZSBkYXRhXHJcblx0XHRcdGRhdGEuZmluaXNoID0gdHJ1ZTtcclxuXHJcblx0XHRcdC8vIEVtcHR5IHRoZSBxdWV1ZSBmaXJzdFxyXG5cdFx0XHRqUXVlcnkucXVldWUoIHRoaXMsIHR5cGUsIFtdICk7XHJcblxyXG5cdFx0XHRpZiAoIGhvb2tzICYmIGhvb2tzLnN0b3AgKSB7XHJcblx0XHRcdFx0aG9va3Muc3RvcC5jYWxsKCB0aGlzLCB0cnVlICk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIExvb2sgZm9yIGFueSBhY3RpdmUgYW5pbWF0aW9ucywgYW5kIGZpbmlzaCB0aGVtXHJcblx0XHRcdGZvciAoIGluZGV4ID0gdGltZXJzLmxlbmd0aDsgaW5kZXgtLTsgKSB7XHJcblx0XHRcdFx0aWYgKCB0aW1lcnNbIGluZGV4IF0uZWxlbSA9PT0gdGhpcyAmJiB0aW1lcnNbIGluZGV4IF0ucXVldWUgPT09IHR5cGUgKSB7XHJcblx0XHRcdFx0XHR0aW1lcnNbIGluZGV4IF0uYW5pbS5zdG9wKCB0cnVlICk7XHJcblx0XHRcdFx0XHR0aW1lcnMuc3BsaWNlKCBpbmRleCwgMSApO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gTG9vayBmb3IgYW55IGFuaW1hdGlvbnMgaW4gdGhlIG9sZCBxdWV1ZSBhbmQgZmluaXNoIHRoZW1cclxuXHRcdFx0Zm9yICggaW5kZXggPSAwOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcclxuXHRcdFx0XHRpZiAoIHF1ZXVlWyBpbmRleCBdICYmIHF1ZXVlWyBpbmRleCBdLmZpbmlzaCApIHtcclxuXHRcdFx0XHRcdHF1ZXVlWyBpbmRleCBdLmZpbmlzaC5jYWxsKCB0aGlzICk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBUdXJuIG9mZiBmaW5pc2hpbmcgZmxhZ1xyXG5cdFx0XHRkZWxldGUgZGF0YS5maW5pc2g7XHJcblx0XHR9KTtcclxuXHR9XHJcbn0pO1xyXG5cclxualF1ZXJ5LmVhY2goWyBcInRvZ2dsZVwiLCBcInNob3dcIiwgXCJoaWRlXCIgXSwgZnVuY3Rpb24oIGksIG5hbWUgKSB7XHJcblx0dmFyIGNzc0ZuID0galF1ZXJ5LmZuWyBuYW1lIF07XHJcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSB7XHJcblx0XHRyZXR1cm4gc3BlZWQgPT0gbnVsbCB8fCB0eXBlb2Ygc3BlZWQgPT09IFwiYm9vbGVhblwiID9cclxuXHRcdFx0Y3NzRm4uYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApIDpcclxuXHRcdFx0dGhpcy5hbmltYXRlKCBnZW5GeCggbmFtZSwgdHJ1ZSApLCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApO1xyXG5cdH07XHJcbn0pO1xyXG5cclxuLy8gR2VuZXJhdGUgc2hvcnRjdXRzIGZvciBjdXN0b20gYW5pbWF0aW9uc1xyXG5qUXVlcnkuZWFjaCh7XHJcblx0c2xpZGVEb3duOiBnZW5GeChcInNob3dcIiksXHJcblx0c2xpZGVVcDogZ2VuRngoXCJoaWRlXCIpLFxyXG5cdHNsaWRlVG9nZ2xlOiBnZW5GeChcInRvZ2dsZVwiKSxcclxuXHRmYWRlSW46IHsgb3BhY2l0eTogXCJzaG93XCIgfSxcclxuXHRmYWRlT3V0OiB7IG9wYWNpdHk6IFwiaGlkZVwiIH0sXHJcblx0ZmFkZVRvZ2dsZTogeyBvcGFjaXR5OiBcInRvZ2dsZVwiIH1cclxufSwgZnVuY3Rpb24oIG5hbWUsIHByb3BzICkge1xyXG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICkge1xyXG5cdFx0cmV0dXJuIHRoaXMuYW5pbWF0ZSggcHJvcHMsIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICk7XHJcblx0fTtcclxufSk7XHJcblxyXG5qUXVlcnkudGltZXJzID0gW107XHJcbmpRdWVyeS5meC50aWNrID0gZnVuY3Rpb24oKSB7XHJcblx0dmFyIHRpbWVyLFxyXG5cdFx0aSA9IDAsXHJcblx0XHR0aW1lcnMgPSBqUXVlcnkudGltZXJzO1xyXG5cclxuXHRmeE5vdyA9IGpRdWVyeS5ub3coKTtcclxuXHJcblx0Zm9yICggOyBpIDwgdGltZXJzLmxlbmd0aDsgaSsrICkge1xyXG5cdFx0dGltZXIgPSB0aW1lcnNbIGkgXTtcclxuXHRcdC8vIENoZWNrcyB0aGUgdGltZXIgaGFzIG5vdCBhbHJlYWR5IGJlZW4gcmVtb3ZlZFxyXG5cdFx0aWYgKCAhdGltZXIoKSAmJiB0aW1lcnNbIGkgXSA9PT0gdGltZXIgKSB7XHJcblx0XHRcdHRpbWVycy5zcGxpY2UoIGktLSwgMSApO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0aWYgKCAhdGltZXJzLmxlbmd0aCApIHtcclxuXHRcdGpRdWVyeS5meC5zdG9wKCk7XHJcblx0fVxyXG5cdGZ4Tm93ID0gdW5kZWZpbmVkO1xyXG59O1xyXG5cclxualF1ZXJ5LmZ4LnRpbWVyID0gZnVuY3Rpb24oIHRpbWVyICkge1xyXG5cdGpRdWVyeS50aW1lcnMucHVzaCggdGltZXIgKTtcclxuXHRpZiAoIHRpbWVyKCkgKSB7XHJcblx0XHRqUXVlcnkuZnguc3RhcnQoKTtcclxuXHR9IGVsc2Uge1xyXG5cdFx0alF1ZXJ5LnRpbWVycy5wb3AoKTtcclxuXHR9XHJcbn07XHJcblxyXG5qUXVlcnkuZnguaW50ZXJ2YWwgPSAxMztcclxuXHJcbmpRdWVyeS5meC5zdGFydCA9IGZ1bmN0aW9uKCkge1xyXG5cdGlmICggIXRpbWVySWQgKSB7XHJcblx0XHR0aW1lcklkID0gc2V0SW50ZXJ2YWwoIGpRdWVyeS5meC50aWNrLCBqUXVlcnkuZnguaW50ZXJ2YWwgKTtcclxuXHR9XHJcbn07XHJcblxyXG5qUXVlcnkuZnguc3RvcCA9IGZ1bmN0aW9uKCkge1xyXG5cdGNsZWFySW50ZXJ2YWwoIHRpbWVySWQgKTtcclxuXHR0aW1lcklkID0gbnVsbDtcclxufTtcclxuXHJcbmpRdWVyeS5meC5zcGVlZHMgPSB7XHJcblx0c2xvdzogNjAwLFxyXG5cdGZhc3Q6IDIwMCxcclxuXHQvLyBEZWZhdWx0IHNwZWVkXHJcblx0X2RlZmF1bHQ6IDQwMFxyXG59O1xyXG5cclxuXHJcbi8vIEJhc2VkIG9mZiBvZiB0aGUgcGx1Z2luIGJ5IENsaW50IEhlbGZlcnMsIHdpdGggcGVybWlzc2lvbi5cclxuLy8gaHR0cDovL2JsaW5kc2lnbmFscy5jb20vaW5kZXgucGhwLzIwMDkvMDcvanF1ZXJ5LWRlbGF5L1xyXG5qUXVlcnkuZm4uZGVsYXkgPSBmdW5jdGlvbiggdGltZSwgdHlwZSApIHtcclxuXHR0aW1lID0galF1ZXJ5LmZ4ID8galF1ZXJ5LmZ4LnNwZWVkc1sgdGltZSBdIHx8IHRpbWUgOiB0aW1lO1xyXG5cdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcclxuXHJcblx0cmV0dXJuIHRoaXMucXVldWUoIHR5cGUsIGZ1bmN0aW9uKCBuZXh0LCBob29rcyApIHtcclxuXHRcdHZhciB0aW1lb3V0ID0gc2V0VGltZW91dCggbmV4dCwgdGltZSApO1xyXG5cdFx0aG9va3Muc3RvcCA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRjbGVhclRpbWVvdXQoIHRpbWVvdXQgKTtcclxuXHRcdH07XHJcblx0fSk7XHJcbn07XHJcblxyXG5cclxuKGZ1bmN0aW9uKCkge1xyXG5cdHZhciBpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiaW5wdXRcIiApLFxyXG5cdFx0c2VsZWN0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJzZWxlY3RcIiApLFxyXG5cdFx0b3B0ID0gc2VsZWN0LmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcIm9wdGlvblwiICkgKTtcclxuXHJcblx0aW5wdXQudHlwZSA9IFwiY2hlY2tib3hcIjtcclxuXHJcblx0Ly8gU3VwcG9ydDogaU9TPD01LjEsIEFuZHJvaWQ8PTQuMitcclxuXHQvLyBEZWZhdWx0IHZhbHVlIGZvciBhIGNoZWNrYm94IHNob3VsZCBiZSBcIm9uXCJcclxuXHRzdXBwb3J0LmNoZWNrT24gPSBpbnB1dC52YWx1ZSAhPT0gXCJcIjtcclxuXHJcblx0Ly8gU3VwcG9ydDogSUU8PTExK1xyXG5cdC8vIE11c3QgYWNjZXNzIHNlbGVjdGVkSW5kZXggdG8gbWFrZSBkZWZhdWx0IG9wdGlvbnMgc2VsZWN0XHJcblx0c3VwcG9ydC5vcHRTZWxlY3RlZCA9IG9wdC5zZWxlY3RlZDtcclxuXHJcblx0Ly8gU3VwcG9ydDogQW5kcm9pZDw9Mi4zXHJcblx0Ly8gT3B0aW9ucyBpbnNpZGUgZGlzYWJsZWQgc2VsZWN0cyBhcmUgaW5jb3JyZWN0bHkgbWFya2VkIGFzIGRpc2FibGVkXHJcblx0c2VsZWN0LmRpc2FibGVkID0gdHJ1ZTtcclxuXHRzdXBwb3J0Lm9wdERpc2FibGVkID0gIW9wdC5kaXNhYmxlZDtcclxuXHJcblx0Ly8gU3VwcG9ydDogSUU8PTExK1xyXG5cdC8vIEFuIGlucHV0IGxvc2VzIGl0cyB2YWx1ZSBhZnRlciBiZWNvbWluZyBhIHJhZGlvXHJcblx0aW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImlucHV0XCIgKTtcclxuXHRpbnB1dC52YWx1ZSA9IFwidFwiO1xyXG5cdGlucHV0LnR5cGUgPSBcInJhZGlvXCI7XHJcblx0c3VwcG9ydC5yYWRpb1ZhbHVlID0gaW5wdXQudmFsdWUgPT09IFwidFwiO1xyXG59KSgpO1xyXG5cclxuXHJcbnZhciBub2RlSG9vaywgYm9vbEhvb2ssXHJcblx0YXR0ckhhbmRsZSA9IGpRdWVyeS5leHByLmF0dHJIYW5kbGU7XHJcblxyXG5qUXVlcnkuZm4uZXh0ZW5kKHtcclxuXHRhdHRyOiBmdW5jdGlvbiggbmFtZSwgdmFsdWUgKSB7XHJcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBqUXVlcnkuYXR0ciwgbmFtZSwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxICk7XHJcblx0fSxcclxuXHJcblx0cmVtb3ZlQXR0cjogZnVuY3Rpb24oIG5hbWUgKSB7XHJcblx0XHRyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRqUXVlcnkucmVtb3ZlQXR0ciggdGhpcywgbmFtZSApO1xyXG5cdFx0fSk7XHJcblx0fVxyXG59KTtcclxuXHJcbmpRdWVyeS5leHRlbmQoe1xyXG5cdGF0dHI6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSApIHtcclxuXHRcdHZhciBob29rcywgcmV0LFxyXG5cdFx0XHRuVHlwZSA9IGVsZW0ubm9kZVR5cGU7XHJcblxyXG5cdFx0Ly8gZG9uJ3QgZ2V0L3NldCBhdHRyaWJ1dGVzIG9uIHRleHQsIGNvbW1lbnQgYW5kIGF0dHJpYnV0ZSBub2Rlc1xyXG5cdFx0aWYgKCAhZWxlbSB8fCBuVHlwZSA9PT0gMyB8fCBuVHlwZSA9PT0gOCB8fCBuVHlwZSA9PT0gMiApIHtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIEZhbGxiYWNrIHRvIHByb3Agd2hlbiBhdHRyaWJ1dGVzIGFyZSBub3Qgc3VwcG9ydGVkXHJcblx0XHRpZiAoIHR5cGVvZiBlbGVtLmdldEF0dHJpYnV0ZSA9PT0gc3RydW5kZWZpbmVkICkge1xyXG5cdFx0XHRyZXR1cm4galF1ZXJ5LnByb3AoIGVsZW0sIG5hbWUsIHZhbHVlICk7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gQWxsIGF0dHJpYnV0ZXMgYXJlIGxvd2VyY2FzZVxyXG5cdFx0Ly8gR3JhYiBuZWNlc3NhcnkgaG9vayBpZiBvbmUgaXMgZGVmaW5lZFxyXG5cdFx0aWYgKCBuVHlwZSAhPT0gMSB8fCAhalF1ZXJ5LmlzWE1MRG9jKCBlbGVtICkgKSB7XHJcblx0XHRcdG5hbWUgPSBuYW1lLnRvTG93ZXJDYXNlKCk7XHJcblx0XHRcdGhvb2tzID0galF1ZXJ5LmF0dHJIb29rc1sgbmFtZSBdIHx8XHJcblx0XHRcdFx0KCBqUXVlcnkuZXhwci5tYXRjaC5ib29sLnRlc3QoIG5hbWUgKSA/IGJvb2xIb29rIDogbm9kZUhvb2sgKTtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XHJcblxyXG5cdFx0XHRpZiAoIHZhbHVlID09PSBudWxsICkge1xyXG5cdFx0XHRcdGpRdWVyeS5yZW1vdmVBdHRyKCBlbGVtLCBuYW1lICk7XHJcblxyXG5cdFx0XHR9IGVsc2UgaWYgKCBob29rcyAmJiBcInNldFwiIGluIGhvb2tzICYmIChyZXQgPSBob29rcy5zZXQoIGVsZW0sIHZhbHVlLCBuYW1lICkpICE9PSB1bmRlZmluZWQgKSB7XHJcblx0XHRcdFx0cmV0dXJuIHJldDtcclxuXHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIG5hbWUsIHZhbHVlICsgXCJcIiApO1xyXG5cdFx0XHRcdHJldHVybiB2YWx1ZTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdH0gZWxzZSBpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgJiYgKHJldCA9IGhvb2tzLmdldCggZWxlbSwgbmFtZSApKSAhPT0gbnVsbCApIHtcclxuXHRcdFx0cmV0dXJuIHJldDtcclxuXHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRyZXQgPSBqUXVlcnkuZmluZC5hdHRyKCBlbGVtLCBuYW1lICk7XHJcblxyXG5cdFx0XHQvLyBOb24tZXhpc3RlbnQgYXR0cmlidXRlcyByZXR1cm4gbnVsbCwgd2Ugbm9ybWFsaXplIHRvIHVuZGVmaW5lZFxyXG5cdFx0XHRyZXR1cm4gcmV0ID09IG51bGwgP1xyXG5cdFx0XHRcdHVuZGVmaW5lZCA6XHJcblx0XHRcdFx0cmV0O1xyXG5cdFx0fVxyXG5cdH0sXHJcblxyXG5cdHJlbW92ZUF0dHI6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcclxuXHRcdHZhciBuYW1lLCBwcm9wTmFtZSxcclxuXHRcdFx0aSA9IDAsXHJcblx0XHRcdGF0dHJOYW1lcyA9IHZhbHVlICYmIHZhbHVlLm1hdGNoKCBybm90d2hpdGUgKTtcclxuXHJcblx0XHRpZiAoIGF0dHJOYW1lcyAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xyXG5cdFx0XHR3aGlsZSAoIChuYW1lID0gYXR0ck5hbWVzW2krK10pICkge1xyXG5cdFx0XHRcdHByb3BOYW1lID0galF1ZXJ5LnByb3BGaXhbIG5hbWUgXSB8fCBuYW1lO1xyXG5cclxuXHRcdFx0XHQvLyBCb29sZWFuIGF0dHJpYnV0ZXMgZ2V0IHNwZWNpYWwgdHJlYXRtZW50ICgjMTA4NzApXHJcblx0XHRcdFx0aWYgKCBqUXVlcnkuZXhwci5tYXRjaC5ib29sLnRlc3QoIG5hbWUgKSApIHtcclxuXHRcdFx0XHRcdC8vIFNldCBjb3JyZXNwb25kaW5nIHByb3BlcnR5IHRvIGZhbHNlXHJcblx0XHRcdFx0XHRlbGVtWyBwcm9wTmFtZSBdID0gZmFsc2U7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRlbGVtLnJlbW92ZUF0dHJpYnV0ZSggbmFtZSApO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fSxcclxuXHJcblx0YXR0ckhvb2tzOiB7XHJcblx0XHR0eXBlOiB7XHJcblx0XHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xyXG5cdFx0XHRcdGlmICggIXN1cHBvcnQucmFkaW9WYWx1ZSAmJiB2YWx1ZSA9PT0gXCJyYWRpb1wiICYmXHJcblx0XHRcdFx0XHRqUXVlcnkubm9kZU5hbWUoIGVsZW0sIFwiaW5wdXRcIiApICkge1xyXG5cdFx0XHRcdFx0dmFyIHZhbCA9IGVsZW0udmFsdWU7XHJcblx0XHRcdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggXCJ0eXBlXCIsIHZhbHVlICk7XHJcblx0XHRcdFx0XHRpZiAoIHZhbCApIHtcclxuXHRcdFx0XHRcdFx0ZWxlbS52YWx1ZSA9IHZhbDtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdHJldHVybiB2YWx1ZTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcbn0pO1xyXG5cclxuLy8gSG9va3MgZm9yIGJvb2xlYW4gYXR0cmlidXRlc1xyXG5ib29sSG9vayA9IHtcclxuXHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSwgbmFtZSApIHtcclxuXHRcdGlmICggdmFsdWUgPT09IGZhbHNlICkge1xyXG5cdFx0XHQvLyBSZW1vdmUgYm9vbGVhbiBhdHRyaWJ1dGVzIHdoZW4gc2V0IHRvIGZhbHNlXHJcblx0XHRcdGpRdWVyeS5yZW1vdmVBdHRyKCBlbGVtLCBuYW1lICk7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggbmFtZSwgbmFtZSApO1xyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIG5hbWU7XHJcblx0fVxyXG59O1xyXG5qUXVlcnkuZWFjaCggalF1ZXJ5LmV4cHIubWF0Y2guYm9vbC5zb3VyY2UubWF0Y2goIC9cXHcrL2cgKSwgZnVuY3Rpb24oIGksIG5hbWUgKSB7XHJcblx0dmFyIGdldHRlciA9IGF0dHJIYW5kbGVbIG5hbWUgXSB8fCBqUXVlcnkuZmluZC5hdHRyO1xyXG5cclxuXHRhdHRySGFuZGxlWyBuYW1lIF0gPSBmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7XHJcblx0XHR2YXIgcmV0LCBoYW5kbGU7XHJcblx0XHRpZiAoICFpc1hNTCApIHtcclxuXHRcdFx0Ly8gQXZvaWQgYW4gaW5maW5pdGUgbG9vcCBieSB0ZW1wb3JhcmlseSByZW1vdmluZyB0aGlzIGZ1bmN0aW9uIGZyb20gdGhlIGdldHRlclxyXG5cdFx0XHRoYW5kbGUgPSBhdHRySGFuZGxlWyBuYW1lIF07XHJcblx0XHRcdGF0dHJIYW5kbGVbIG5hbWUgXSA9IHJldDtcclxuXHRcdFx0cmV0ID0gZ2V0dGVyKCBlbGVtLCBuYW1lLCBpc1hNTCApICE9IG51bGwgP1xyXG5cdFx0XHRcdG5hbWUudG9Mb3dlckNhc2UoKSA6XHJcblx0XHRcdFx0bnVsbDtcclxuXHRcdFx0YXR0ckhhbmRsZVsgbmFtZSBdID0gaGFuZGxlO1xyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIHJldDtcclxuXHR9O1xyXG59KTtcclxuXHJcblxyXG5cclxuXHJcbnZhciByZm9jdXNhYmxlID0gL14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWF8YnV0dG9uKSQvaTtcclxuXHJcbmpRdWVyeS5mbi5leHRlbmQoe1xyXG5cdHByb3A6IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSApIHtcclxuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGpRdWVyeS5wcm9wLCBuYW1lLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgKTtcclxuXHR9LFxyXG5cclxuXHRyZW1vdmVQcm9wOiBmdW5jdGlvbiggbmFtZSApIHtcclxuXHRcdHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKSB7XHJcblx0XHRcdGRlbGV0ZSB0aGlzWyBqUXVlcnkucHJvcEZpeFsgbmFtZSBdIHx8IG5hbWUgXTtcclxuXHRcdH0pO1xyXG5cdH1cclxufSk7XHJcblxyXG5qUXVlcnkuZXh0ZW5kKHtcclxuXHRwcm9wRml4OiB7XHJcblx0XHRcImZvclwiOiBcImh0bWxGb3JcIixcclxuXHRcdFwiY2xhc3NcIjogXCJjbGFzc05hbWVcIlxyXG5cdH0sXHJcblxyXG5cdHByb3A6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSApIHtcclxuXHRcdHZhciByZXQsIGhvb2tzLCBub3R4bWwsXHJcblx0XHRcdG5UeXBlID0gZWxlbS5ub2RlVHlwZTtcclxuXHJcblx0XHQvLyBEb24ndCBnZXQvc2V0IHByb3BlcnRpZXMgb24gdGV4dCwgY29tbWVudCBhbmQgYXR0cmlidXRlIG5vZGVzXHJcblx0XHRpZiAoICFlbGVtIHx8IG5UeXBlID09PSAzIHx8IG5UeXBlID09PSA4IHx8IG5UeXBlID09PSAyICkge1xyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblxyXG5cdFx0bm90eG1sID0gblR5cGUgIT09IDEgfHwgIWpRdWVyeS5pc1hNTERvYyggZWxlbSApO1xyXG5cclxuXHRcdGlmICggbm90eG1sICkge1xyXG5cdFx0XHQvLyBGaXggbmFtZSBhbmQgYXR0YWNoIGhvb2tzXHJcblx0XHRcdG5hbWUgPSBqUXVlcnkucHJvcEZpeFsgbmFtZSBdIHx8IG5hbWU7XHJcblx0XHRcdGhvb2tzID0galF1ZXJ5LnByb3BIb29rc1sgbmFtZSBdO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcclxuXHRcdFx0cmV0dXJuIGhvb2tzICYmIFwic2V0XCIgaW4gaG9va3MgJiYgKHJldCA9IGhvb2tzLnNldCggZWxlbSwgdmFsdWUsIG5hbWUgKSkgIT09IHVuZGVmaW5lZCA/XHJcblx0XHRcdFx0cmV0IDpcclxuXHRcdFx0XHQoIGVsZW1bIG5hbWUgXSA9IHZhbHVlICk7XHJcblxyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0cmV0dXJuIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgJiYgKHJldCA9IGhvb2tzLmdldCggZWxlbSwgbmFtZSApKSAhPT0gbnVsbCA/XHJcblx0XHRcdFx0cmV0IDpcclxuXHRcdFx0XHRlbGVtWyBuYW1lIF07XHJcblx0XHR9XHJcblx0fSxcclxuXHJcblx0cHJvcEhvb2tzOiB7XHJcblx0XHR0YWJJbmRleDoge1xyXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0XHRcdHJldHVybiBlbGVtLmhhc0F0dHJpYnV0ZSggXCJ0YWJpbmRleFwiICkgfHwgcmZvY3VzYWJsZS50ZXN0KCBlbGVtLm5vZGVOYW1lICkgfHwgZWxlbS5ocmVmID9cclxuXHRcdFx0XHRcdGVsZW0udGFiSW5kZXggOlxyXG5cdFx0XHRcdFx0LTE7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcbn0pO1xyXG5cclxuaWYgKCAhc3VwcG9ydC5vcHRTZWxlY3RlZCApIHtcclxuXHRqUXVlcnkucHJvcEhvb2tzLnNlbGVjdGVkID0ge1xyXG5cdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSApIHtcclxuXHRcdFx0dmFyIHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZTtcclxuXHRcdFx0aWYgKCBwYXJlbnQgJiYgcGFyZW50LnBhcmVudE5vZGUgKSB7XHJcblx0XHRcdFx0cGFyZW50LnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleDtcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gbnVsbDtcclxuXHRcdH1cclxuXHR9O1xyXG59XHJcblxyXG5qUXVlcnkuZWFjaChbXHJcblx0XCJ0YWJJbmRleFwiLFxyXG5cdFwicmVhZE9ubHlcIixcclxuXHRcIm1heExlbmd0aFwiLFxyXG5cdFwiY2VsbFNwYWNpbmdcIixcclxuXHRcImNlbGxQYWRkaW5nXCIsXHJcblx0XCJyb3dTcGFuXCIsXHJcblx0XCJjb2xTcGFuXCIsXHJcblx0XCJ1c2VNYXBcIixcclxuXHRcImZyYW1lQm9yZGVyXCIsXHJcblx0XCJjb250ZW50RWRpdGFibGVcIlxyXG5dLCBmdW5jdGlvbigpIHtcclxuXHRqUXVlcnkucHJvcEZpeFsgdGhpcy50b0xvd2VyQ2FzZSgpIF0gPSB0aGlzO1xyXG59KTtcclxuXHJcblxyXG5cclxuXHJcbnZhciByY2xhc3MgPSAvW1xcdFxcclxcblxcZl0vZztcclxuXHJcbmpRdWVyeS5mbi5leHRlbmQoe1xyXG5cdGFkZENsYXNzOiBmdW5jdGlvbiggdmFsdWUgKSB7XHJcblx0XHR2YXIgY2xhc3NlcywgZWxlbSwgY3VyLCBjbGF6eiwgaiwgZmluYWxWYWx1ZSxcclxuXHRcdFx0cHJvY2VlZCA9IHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiAmJiB2YWx1ZSxcclxuXHRcdFx0aSA9IDAsXHJcblx0XHRcdGxlbiA9IHRoaXMubGVuZ3RoO1xyXG5cclxuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XHJcblx0XHRcdHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oIGogKSB7XHJcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkuYWRkQ2xhc3MoIHZhbHVlLmNhbGwoIHRoaXMsIGosIHRoaXMuY2xhc3NOYW1lICkgKTtcclxuXHRcdFx0fSk7XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKCBwcm9jZWVkICkge1xyXG5cdFx0XHQvLyBUaGUgZGlzanVuY3Rpb24gaGVyZSBpcyBmb3IgYmV0dGVyIGNvbXByZXNzaWJpbGl0eSAoc2VlIHJlbW92ZUNsYXNzKVxyXG5cdFx0XHRjbGFzc2VzID0gKCB2YWx1ZSB8fCBcIlwiICkubWF0Y2goIHJub3R3aGl0ZSApIHx8IFtdO1xyXG5cclxuXHRcdFx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XHJcblx0XHRcdFx0ZWxlbSA9IHRoaXNbIGkgXTtcclxuXHRcdFx0XHRjdXIgPSBlbGVtLm5vZGVUeXBlID09PSAxICYmICggZWxlbS5jbGFzc05hbWUgP1xyXG5cdFx0XHRcdFx0KCBcIiBcIiArIGVsZW0uY2xhc3NOYW1lICsgXCIgXCIgKS5yZXBsYWNlKCByY2xhc3MsIFwiIFwiICkgOlxyXG5cdFx0XHRcdFx0XCIgXCJcclxuXHRcdFx0XHQpO1xyXG5cclxuXHRcdFx0XHRpZiAoIGN1ciApIHtcclxuXHRcdFx0XHRcdGogPSAwO1xyXG5cdFx0XHRcdFx0d2hpbGUgKCAoY2xhenogPSBjbGFzc2VzW2orK10pICkge1xyXG5cdFx0XHRcdFx0XHRpZiAoIGN1ci5pbmRleE9mKCBcIiBcIiArIGNsYXp6ICsgXCIgXCIgKSA8IDAgKSB7XHJcblx0XHRcdFx0XHRcdFx0Y3VyICs9IGNsYXp6ICsgXCIgXCI7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHQvLyBvbmx5IGFzc2lnbiBpZiBkaWZmZXJlbnQgdG8gYXZvaWQgdW5uZWVkZWQgcmVuZGVyaW5nLlxyXG5cdFx0XHRcdFx0ZmluYWxWYWx1ZSA9IGpRdWVyeS50cmltKCBjdXIgKTtcclxuXHRcdFx0XHRcdGlmICggZWxlbS5jbGFzc05hbWUgIT09IGZpbmFsVmFsdWUgKSB7XHJcblx0XHRcdFx0XHRcdGVsZW0uY2xhc3NOYW1lID0gZmluYWxWYWx1ZTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHR9LFxyXG5cclxuXHRyZW1vdmVDbGFzczogZnVuY3Rpb24oIHZhbHVlICkge1xyXG5cdFx0dmFyIGNsYXNzZXMsIGVsZW0sIGN1ciwgY2xhenosIGosIGZpbmFsVmFsdWUsXHJcblx0XHRcdHByb2NlZWQgPSBhcmd1bWVudHMubGVuZ3RoID09PSAwIHx8IHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiAmJiB2YWx1ZSxcclxuXHRcdFx0aSA9IDAsXHJcblx0XHRcdGxlbiA9IHRoaXMubGVuZ3RoO1xyXG5cclxuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XHJcblx0XHRcdHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oIGogKSB7XHJcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkucmVtb3ZlQ2xhc3MoIHZhbHVlLmNhbGwoIHRoaXMsIGosIHRoaXMuY2xhc3NOYW1lICkgKTtcclxuXHRcdFx0fSk7XHJcblx0XHR9XHJcblx0XHRpZiAoIHByb2NlZWQgKSB7XHJcblx0XHRcdGNsYXNzZXMgPSAoIHZhbHVlIHx8IFwiXCIgKS5tYXRjaCggcm5vdHdoaXRlICkgfHwgW107XHJcblxyXG5cdFx0XHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcclxuXHRcdFx0XHRlbGVtID0gdGhpc1sgaSBdO1xyXG5cdFx0XHRcdC8vIFRoaXMgZXhwcmVzc2lvbiBpcyBoZXJlIGZvciBiZXR0ZXIgY29tcHJlc3NpYmlsaXR5IChzZWUgYWRkQ2xhc3MpXHJcblx0XHRcdFx0Y3VyID0gZWxlbS5ub2RlVHlwZSA9PT0gMSAmJiAoIGVsZW0uY2xhc3NOYW1lID9cclxuXHRcdFx0XHRcdCggXCIgXCIgKyBlbGVtLmNsYXNzTmFtZSArIFwiIFwiICkucmVwbGFjZSggcmNsYXNzLCBcIiBcIiApIDpcclxuXHRcdFx0XHRcdFwiXCJcclxuXHRcdFx0XHQpO1xyXG5cclxuXHRcdFx0XHRpZiAoIGN1ciApIHtcclxuXHRcdFx0XHRcdGogPSAwO1xyXG5cdFx0XHRcdFx0d2hpbGUgKCAoY2xhenogPSBjbGFzc2VzW2orK10pICkge1xyXG5cdFx0XHRcdFx0XHQvLyBSZW1vdmUgKmFsbCogaW5zdGFuY2VzXHJcblx0XHRcdFx0XHRcdHdoaWxlICggY3VyLmluZGV4T2YoIFwiIFwiICsgY2xhenogKyBcIiBcIiApID49IDAgKSB7XHJcblx0XHRcdFx0XHRcdFx0Y3VyID0gY3VyLnJlcGxhY2UoIFwiIFwiICsgY2xhenogKyBcIiBcIiwgXCIgXCIgKTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdC8vIE9ubHkgYXNzaWduIGlmIGRpZmZlcmVudCB0byBhdm9pZCB1bm5lZWRlZCByZW5kZXJpbmcuXHJcblx0XHRcdFx0XHRmaW5hbFZhbHVlID0gdmFsdWUgPyBqUXVlcnkudHJpbSggY3VyICkgOiBcIlwiO1xyXG5cdFx0XHRcdFx0aWYgKCBlbGVtLmNsYXNzTmFtZSAhPT0gZmluYWxWYWx1ZSApIHtcclxuXHRcdFx0XHRcdFx0ZWxlbS5jbGFzc05hbWUgPSBmaW5hbFZhbHVlO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cdH0sXHJcblxyXG5cdHRvZ2dsZUNsYXNzOiBmdW5jdGlvbiggdmFsdWUsIHN0YXRlVmFsICkge1xyXG5cdFx0dmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XHJcblxyXG5cdFx0aWYgKCB0eXBlb2Ygc3RhdGVWYWwgPT09IFwiYm9vbGVhblwiICYmIHR5cGUgPT09IFwic3RyaW5nXCIgKSB7XHJcblx0XHRcdHJldHVybiBzdGF0ZVZhbCA/IHRoaXMuYWRkQ2xhc3MoIHZhbHVlICkgOiB0aGlzLnJlbW92ZUNsYXNzKCB2YWx1ZSApO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XHJcblx0XHRcdHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oIGkgKSB7XHJcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkudG9nZ2xlQ2xhc3MoIHZhbHVlLmNhbGwodGhpcywgaSwgdGhpcy5jbGFzc05hbWUsIHN0YXRlVmFsKSwgc3RhdGVWYWwgKTtcclxuXHRcdFx0fSk7XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpIHtcclxuXHRcdFx0aWYgKCB0eXBlID09PSBcInN0cmluZ1wiICkge1xyXG5cdFx0XHRcdC8vIFRvZ2dsZSBpbmRpdmlkdWFsIGNsYXNzIG5hbWVzXHJcblx0XHRcdFx0dmFyIGNsYXNzTmFtZSxcclxuXHRcdFx0XHRcdGkgPSAwLFxyXG5cdFx0XHRcdFx0c2VsZiA9IGpRdWVyeSggdGhpcyApLFxyXG5cdFx0XHRcdFx0Y2xhc3NOYW1lcyA9IHZhbHVlLm1hdGNoKCBybm90d2hpdGUgKSB8fCBbXTtcclxuXHJcblx0XHRcdFx0d2hpbGUgKCAoY2xhc3NOYW1lID0gY2xhc3NOYW1lc1sgaSsrIF0pICkge1xyXG5cdFx0XHRcdFx0Ly8gQ2hlY2sgZWFjaCBjbGFzc05hbWUgZ2l2ZW4sIHNwYWNlIHNlcGFyYXRlZCBsaXN0XHJcblx0XHRcdFx0XHRpZiAoIHNlbGYuaGFzQ2xhc3MoIGNsYXNzTmFtZSApICkge1xyXG5cdFx0XHRcdFx0XHRzZWxmLnJlbW92ZUNsYXNzKCBjbGFzc05hbWUgKTtcclxuXHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdHNlbGYuYWRkQ2xhc3MoIGNsYXNzTmFtZSApO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdC8vIFRvZ2dsZSB3aG9sZSBjbGFzcyBuYW1lXHJcblx0XHRcdH0gZWxzZSBpZiAoIHR5cGUgPT09IHN0cnVuZGVmaW5lZCB8fCB0eXBlID09PSBcImJvb2xlYW5cIiApIHtcclxuXHRcdFx0XHRpZiAoIHRoaXMuY2xhc3NOYW1lICkge1xyXG5cdFx0XHRcdFx0Ly8gc3RvcmUgY2xhc3NOYW1lIGlmIHNldFxyXG5cdFx0XHRcdFx0ZGF0YV9wcml2LnNldCggdGhpcywgXCJfX2NsYXNzTmFtZV9fXCIsIHRoaXMuY2xhc3NOYW1lICk7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHQvLyBJZiB0aGUgZWxlbWVudCBoYXMgYSBjbGFzcyBuYW1lIG9yIGlmIHdlJ3JlIHBhc3NlZCBgZmFsc2VgLFxyXG5cdFx0XHRcdC8vIHRoZW4gcmVtb3ZlIHRoZSB3aG9sZSBjbGFzc25hbWUgKGlmIHRoZXJlIHdhcyBvbmUsIHRoZSBhYm92ZSBzYXZlZCBpdCkuXHJcblx0XHRcdFx0Ly8gT3RoZXJ3aXNlIGJyaW5nIGJhY2sgd2hhdGV2ZXIgd2FzIHByZXZpb3VzbHkgc2F2ZWQgKGlmIGFueXRoaW5nKSxcclxuXHRcdFx0XHQvLyBmYWxsaW5nIGJhY2sgdG8gdGhlIGVtcHR5IHN0cmluZyBpZiBub3RoaW5nIHdhcyBzdG9yZWQuXHJcblx0XHRcdFx0dGhpcy5jbGFzc05hbWUgPSB0aGlzLmNsYXNzTmFtZSB8fCB2YWx1ZSA9PT0gZmFsc2UgPyBcIlwiIDogZGF0YV9wcml2LmdldCggdGhpcywgXCJfX2NsYXNzTmFtZV9fXCIgKSB8fCBcIlwiO1xyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHR9LFxyXG5cclxuXHRoYXNDbGFzczogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xyXG5cdFx0dmFyIGNsYXNzTmFtZSA9IFwiIFwiICsgc2VsZWN0b3IgKyBcIiBcIixcclxuXHRcdFx0aSA9IDAsXHJcblx0XHRcdGwgPSB0aGlzLmxlbmd0aDtcclxuXHRcdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcclxuXHRcdFx0aWYgKCB0aGlzW2ldLm5vZGVUeXBlID09PSAxICYmIChcIiBcIiArIHRoaXNbaV0uY2xhc3NOYW1lICsgXCIgXCIpLnJlcGxhY2UocmNsYXNzLCBcIiBcIikuaW5kZXhPZiggY2xhc3NOYW1lICkgPj0gMCApIHtcclxuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiBmYWxzZTtcclxuXHR9XHJcbn0pO1xyXG5cclxuXHJcblxyXG5cclxudmFyIHJyZXR1cm4gPSAvXFxyL2c7XHJcblxyXG5qUXVlcnkuZm4uZXh0ZW5kKHtcclxuXHR2YWw6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcclxuXHRcdHZhciBob29rcywgcmV0LCBpc0Z1bmN0aW9uLFxyXG5cdFx0XHRlbGVtID0gdGhpc1swXTtcclxuXHJcblx0XHRpZiAoICFhcmd1bWVudHMubGVuZ3RoICkge1xyXG5cdFx0XHRpZiAoIGVsZW0gKSB7XHJcblx0XHRcdFx0aG9va3MgPSBqUXVlcnkudmFsSG9va3NbIGVsZW0udHlwZSBdIHx8IGpRdWVyeS52YWxIb29rc1sgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpIF07XHJcblxyXG5cdFx0XHRcdGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyAmJiAocmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBcInZhbHVlXCIgKSkgIT09IHVuZGVmaW5lZCApIHtcclxuXHRcdFx0XHRcdHJldHVybiByZXQ7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRyZXQgPSBlbGVtLnZhbHVlO1xyXG5cclxuXHRcdFx0XHRyZXR1cm4gdHlwZW9mIHJldCA9PT0gXCJzdHJpbmdcIiA/XHJcblx0XHRcdFx0XHQvLyBIYW5kbGUgbW9zdCBjb21tb24gc3RyaW5nIGNhc2VzXHJcblx0XHRcdFx0XHRyZXQucmVwbGFjZShycmV0dXJuLCBcIlwiKSA6XHJcblx0XHRcdFx0XHQvLyBIYW5kbGUgY2FzZXMgd2hlcmUgdmFsdWUgaXMgbnVsbC91bmRlZiBvciBudW1iZXJcclxuXHRcdFx0XHRcdHJldCA9PSBudWxsID8gXCJcIiA6IHJldDtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlzRnVuY3Rpb24gPSBqUXVlcnkuaXNGdW5jdGlvbiggdmFsdWUgKTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCBpICkge1xyXG5cdFx0XHR2YXIgdmFsO1xyXG5cclxuXHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlICE9PSAxICkge1xyXG5cdFx0XHRcdHJldHVybjtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0aWYgKCBpc0Z1bmN0aW9uICkge1xyXG5cdFx0XHRcdHZhbCA9IHZhbHVlLmNhbGwoIHRoaXMsIGksIGpRdWVyeSggdGhpcyApLnZhbCgpICk7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0dmFsID0gdmFsdWU7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIFRyZWF0IG51bGwvdW5kZWZpbmVkIGFzIFwiXCI7IGNvbnZlcnQgbnVtYmVycyB0byBzdHJpbmdcclxuXHRcdFx0aWYgKCB2YWwgPT0gbnVsbCApIHtcclxuXHRcdFx0XHR2YWwgPSBcIlwiO1xyXG5cclxuXHRcdFx0fSBlbHNlIGlmICggdHlwZW9mIHZhbCA9PT0gXCJudW1iZXJcIiApIHtcclxuXHRcdFx0XHR2YWwgKz0gXCJcIjtcclxuXHJcblx0XHRcdH0gZWxzZSBpZiAoIGpRdWVyeS5pc0FycmF5KCB2YWwgKSApIHtcclxuXHRcdFx0XHR2YWwgPSBqUXVlcnkubWFwKCB2YWwsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcclxuXHRcdFx0XHRcdHJldHVybiB2YWx1ZSA9PSBudWxsID8gXCJcIiA6IHZhbHVlICsgXCJcIjtcclxuXHRcdFx0XHR9KTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0aG9va3MgPSBqUXVlcnkudmFsSG9va3NbIHRoaXMudHlwZSBdIHx8IGpRdWVyeS52YWxIb29rc1sgdGhpcy5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpIF07XHJcblxyXG5cdFx0XHQvLyBJZiBzZXQgcmV0dXJucyB1bmRlZmluZWQsIGZhbGwgYmFjayB0byBub3JtYWwgc2V0dGluZ1xyXG5cdFx0XHRpZiAoICFob29rcyB8fCAhKFwic2V0XCIgaW4gaG9va3MpIHx8IGhvb2tzLnNldCggdGhpcywgdmFsLCBcInZhbHVlXCIgKSA9PT0gdW5kZWZpbmVkICkge1xyXG5cdFx0XHRcdHRoaXMudmFsdWUgPSB2YWw7XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cdH1cclxufSk7XHJcblxyXG5qUXVlcnkuZXh0ZW5kKHtcclxuXHR2YWxIb29rczoge1xyXG5cdFx0b3B0aW9uOiB7XHJcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRcdFx0dmFyIHZhbCA9IGpRdWVyeS5maW5kLmF0dHIoIGVsZW0sIFwidmFsdWVcIiApO1xyXG5cdFx0XHRcdHJldHVybiB2YWwgIT0gbnVsbCA/XHJcblx0XHRcdFx0XHR2YWwgOlxyXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUxMC0xMStcclxuXHRcdFx0XHRcdC8vIG9wdGlvbi50ZXh0IHRocm93cyBleGNlcHRpb25zICgjMTQ2ODYsICMxNDg1OClcclxuXHRcdFx0XHRcdGpRdWVyeS50cmltKCBqUXVlcnkudGV4dCggZWxlbSApICk7XHJcblx0XHRcdH1cclxuXHRcdH0sXHJcblx0XHRzZWxlY3Q6IHtcclxuXHRcdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSApIHtcclxuXHRcdFx0XHR2YXIgdmFsdWUsIG9wdGlvbixcclxuXHRcdFx0XHRcdG9wdGlvbnMgPSBlbGVtLm9wdGlvbnMsXHJcblx0XHRcdFx0XHRpbmRleCA9IGVsZW0uc2VsZWN0ZWRJbmRleCxcclxuXHRcdFx0XHRcdG9uZSA9IGVsZW0udHlwZSA9PT0gXCJzZWxlY3Qtb25lXCIgfHwgaW5kZXggPCAwLFxyXG5cdFx0XHRcdFx0dmFsdWVzID0gb25lID8gbnVsbCA6IFtdLFxyXG5cdFx0XHRcdFx0bWF4ID0gb25lID8gaW5kZXggKyAxIDogb3B0aW9ucy5sZW5ndGgsXHJcblx0XHRcdFx0XHRpID0gaW5kZXggPCAwID9cclxuXHRcdFx0XHRcdFx0bWF4IDpcclxuXHRcdFx0XHRcdFx0b25lID8gaW5kZXggOiAwO1xyXG5cclxuXHRcdFx0XHQvLyBMb29wIHRocm91Z2ggYWxsIHRoZSBzZWxlY3RlZCBvcHRpb25zXHJcblx0XHRcdFx0Zm9yICggOyBpIDwgbWF4OyBpKysgKSB7XHJcblx0XHRcdFx0XHRvcHRpb24gPSBvcHRpb25zWyBpIF07XHJcblxyXG5cdFx0XHRcdFx0Ly8gSUU2LTkgZG9lc24ndCB1cGRhdGUgc2VsZWN0ZWQgYWZ0ZXIgZm9ybSByZXNldCAoIzI1NTEpXHJcblx0XHRcdFx0XHRpZiAoICggb3B0aW9uLnNlbGVjdGVkIHx8IGkgPT09IGluZGV4ICkgJiZcclxuXHRcdFx0XHRcdFx0XHQvLyBEb24ndCByZXR1cm4gb3B0aW9ucyB0aGF0IGFyZSBkaXNhYmxlZCBvciBpbiBhIGRpc2FibGVkIG9wdGdyb3VwXHJcblx0XHRcdFx0XHRcdFx0KCBzdXBwb3J0Lm9wdERpc2FibGVkID8gIW9wdGlvbi5kaXNhYmxlZCA6IG9wdGlvbi5nZXRBdHRyaWJ1dGUoIFwiZGlzYWJsZWRcIiApID09PSBudWxsICkgJiZcclxuXHRcdFx0XHRcdFx0XHQoICFvcHRpb24ucGFyZW50Tm9kZS5kaXNhYmxlZCB8fCAhalF1ZXJ5Lm5vZGVOYW1lKCBvcHRpb24ucGFyZW50Tm9kZSwgXCJvcHRncm91cFwiICkgKSApIHtcclxuXHJcblx0XHRcdFx0XHRcdC8vIEdldCB0aGUgc3BlY2lmaWMgdmFsdWUgZm9yIHRoZSBvcHRpb25cclxuXHRcdFx0XHRcdFx0dmFsdWUgPSBqUXVlcnkoIG9wdGlvbiApLnZhbCgpO1xyXG5cclxuXHRcdFx0XHRcdFx0Ly8gV2UgZG9uJ3QgbmVlZCBhbiBhcnJheSBmb3Igb25lIHNlbGVjdHNcclxuXHRcdFx0XHRcdFx0aWYgKCBvbmUgKSB7XHJcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHZhbHVlO1xyXG5cdFx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0XHQvLyBNdWx0aS1TZWxlY3RzIHJldHVybiBhbiBhcnJheVxyXG5cdFx0XHRcdFx0XHR2YWx1ZXMucHVzaCggdmFsdWUgKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdHJldHVybiB2YWx1ZXM7XHJcblx0XHRcdH0sXHJcblxyXG5cdFx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcclxuXHRcdFx0XHR2YXIgb3B0aW9uU2V0LCBvcHRpb24sXHJcblx0XHRcdFx0XHRvcHRpb25zID0gZWxlbS5vcHRpb25zLFxyXG5cdFx0XHRcdFx0dmFsdWVzID0galF1ZXJ5Lm1ha2VBcnJheSggdmFsdWUgKSxcclxuXHRcdFx0XHRcdGkgPSBvcHRpb25zLmxlbmd0aDtcclxuXHJcblx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XHJcblx0XHRcdFx0XHRvcHRpb24gPSBvcHRpb25zWyBpIF07XHJcblx0XHRcdFx0XHRpZiAoIChvcHRpb24uc2VsZWN0ZWQgPSBqUXVlcnkuaW5BcnJheSggb3B0aW9uLnZhbHVlLCB2YWx1ZXMgKSA+PSAwKSApIHtcclxuXHRcdFx0XHRcdFx0b3B0aW9uU2V0ID0gdHJ1ZTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdC8vIEZvcmNlIGJyb3dzZXJzIHRvIGJlaGF2ZSBjb25zaXN0ZW50bHkgd2hlbiBub24tbWF0Y2hpbmcgdmFsdWUgaXMgc2V0XHJcblx0XHRcdFx0aWYgKCAhb3B0aW9uU2V0ICkge1xyXG5cdFx0XHRcdFx0ZWxlbS5zZWxlY3RlZEluZGV4ID0gLTE7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdHJldHVybiB2YWx1ZXM7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcbn0pO1xyXG5cclxuLy8gUmFkaW9zIGFuZCBjaGVja2JveGVzIGdldHRlci9zZXR0ZXJcclxualF1ZXJ5LmVhY2goWyBcInJhZGlvXCIsIFwiY2hlY2tib3hcIiBdLCBmdW5jdGlvbigpIHtcclxuXHRqUXVlcnkudmFsSG9va3NbIHRoaXMgXSA9IHtcclxuXHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xyXG5cdFx0XHRpZiAoIGpRdWVyeS5pc0FycmF5KCB2YWx1ZSApICkge1xyXG5cdFx0XHRcdHJldHVybiAoIGVsZW0uY2hlY2tlZCA9IGpRdWVyeS5pbkFycmF5KCBqUXVlcnkoZWxlbSkudmFsKCksIHZhbHVlICkgPj0gMCApO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fTtcclxuXHRpZiAoICFzdXBwb3J0LmNoZWNrT24gKSB7XHJcblx0XHRqUXVlcnkudmFsSG9va3NbIHRoaXMgXS5nZXQgPSBmdW5jdGlvbiggZWxlbSApIHtcclxuXHRcdFx0cmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlKFwidmFsdWVcIikgPT09IG51bGwgPyBcIm9uXCIgOiBlbGVtLnZhbHVlO1xyXG5cdFx0fTtcclxuXHR9XHJcbn0pO1xyXG5cclxuXHJcblxyXG5cclxuLy8gUmV0dXJuIGpRdWVyeSBmb3IgYXR0cmlidXRlcy1vbmx5IGluY2x1c2lvblxyXG5cclxuXHJcbmpRdWVyeS5lYWNoKCAoXCJibHVyIGZvY3VzIGZvY3VzaW4gZm9jdXNvdXQgbG9hZCByZXNpemUgc2Nyb2xsIHVubG9hZCBjbGljayBkYmxjbGljayBcIiArXHJcblx0XCJtb3VzZWRvd24gbW91c2V1cCBtb3VzZW1vdmUgbW91c2VvdmVyIG1vdXNlb3V0IG1vdXNlZW50ZXIgbW91c2VsZWF2ZSBcIiArXHJcblx0XCJjaGFuZ2Ugc2VsZWN0IHN1Ym1pdCBrZXlkb3duIGtleXByZXNzIGtleXVwIGVycm9yIGNvbnRleHRtZW51XCIpLnNwbGl0KFwiIFwiKSwgZnVuY3Rpb24oIGksIG5hbWUgKSB7XHJcblxyXG5cdC8vIEhhbmRsZSBldmVudCBiaW5kaW5nXHJcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggZGF0YSwgZm4gKSB7XHJcblx0XHRyZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA+IDAgP1xyXG5cdFx0XHR0aGlzLm9uKCBuYW1lLCBudWxsLCBkYXRhLCBmbiApIDpcclxuXHRcdFx0dGhpcy50cmlnZ2VyKCBuYW1lICk7XHJcblx0fTtcclxufSk7XHJcblxyXG5qUXVlcnkuZm4uZXh0ZW5kKHtcclxuXHRob3ZlcjogZnVuY3Rpb24oIGZuT3ZlciwgZm5PdXQgKSB7XHJcblx0XHRyZXR1cm4gdGhpcy5tb3VzZWVudGVyKCBmbk92ZXIgKS5tb3VzZWxlYXZlKCBmbk91dCB8fCBmbk92ZXIgKTtcclxuXHR9LFxyXG5cclxuXHRiaW5kOiBmdW5jdGlvbiggdHlwZXMsIGRhdGEsIGZuICkge1xyXG5cdFx0cmV0dXJuIHRoaXMub24oIHR5cGVzLCBudWxsLCBkYXRhLCBmbiApO1xyXG5cdH0sXHJcblx0dW5iaW5kOiBmdW5jdGlvbiggdHlwZXMsIGZuICkge1xyXG5cdFx0cmV0dXJuIHRoaXMub2ZmKCB0eXBlcywgbnVsbCwgZm4gKTtcclxuXHR9LFxyXG5cclxuXHRkZWxlZ2F0ZTogZnVuY3Rpb24oIHNlbGVjdG9yLCB0eXBlcywgZGF0YSwgZm4gKSB7XHJcblx0XHRyZXR1cm4gdGhpcy5vbiggdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApO1xyXG5cdH0sXHJcblx0dW5kZWxlZ2F0ZTogZnVuY3Rpb24oIHNlbGVjdG9yLCB0eXBlcywgZm4gKSB7XHJcblx0XHQvLyAoIG5hbWVzcGFjZSApIG9yICggc2VsZWN0b3IsIHR5cGVzIFssIGZuXSApXHJcblx0XHRyZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA9PT0gMSA/IHRoaXMub2ZmKCBzZWxlY3RvciwgXCIqKlwiICkgOiB0aGlzLm9mZiggdHlwZXMsIHNlbGVjdG9yIHx8IFwiKipcIiwgZm4gKTtcclxuXHR9XHJcbn0pO1xyXG5cclxuXHJcbnZhciBub25jZSA9IGpRdWVyeS5ub3coKTtcclxuXHJcbnZhciBycXVlcnkgPSAoL1xcPy8pO1xyXG5cclxuXHJcblxyXG4vLyBTdXBwb3J0OiBBbmRyb2lkIDIuM1xyXG4vLyBXb3JrYXJvdW5kIGZhaWx1cmUgdG8gc3RyaW5nLWNhc3QgbnVsbCBpbnB1dFxyXG5qUXVlcnkucGFyc2VKU09OID0gZnVuY3Rpb24oIGRhdGEgKSB7XHJcblx0cmV0dXJuIEpTT04ucGFyc2UoIGRhdGEgKyBcIlwiICk7XHJcbn07XHJcblxyXG5cclxuLy8gQ3Jvc3MtYnJvd3NlciB4bWwgcGFyc2luZ1xyXG5qUXVlcnkucGFyc2VYTUwgPSBmdW5jdGlvbiggZGF0YSApIHtcclxuXHR2YXIgeG1sLCB0bXA7XHJcblx0aWYgKCAhZGF0YSB8fCB0eXBlb2YgZGF0YSAhPT0gXCJzdHJpbmdcIiApIHtcclxuXHRcdHJldHVybiBudWxsO1xyXG5cdH1cclxuXHJcblx0Ly8gU3VwcG9ydDogSUU5XHJcblx0dHJ5IHtcclxuXHRcdHRtcCA9IG5ldyBET01QYXJzZXIoKTtcclxuXHRcdHhtbCA9IHRtcC5wYXJzZUZyb21TdHJpbmcoIGRhdGEsIFwidGV4dC94bWxcIiApO1xyXG5cdH0gY2F0Y2ggKCBlICkge1xyXG5cdFx0eG1sID0gdW5kZWZpbmVkO1xyXG5cdH1cclxuXHJcblx0aWYgKCAheG1sIHx8IHhtbC5nZXRFbGVtZW50c0J5VGFnTmFtZSggXCJwYXJzZXJlcnJvclwiICkubGVuZ3RoICkge1xyXG5cdFx0alF1ZXJ5LmVycm9yKCBcIkludmFsaWQgWE1MOiBcIiArIGRhdGEgKTtcclxuXHR9XHJcblx0cmV0dXJuIHhtbDtcclxufTtcclxuXHJcblxyXG52YXJcclxuXHRyaGFzaCA9IC8jLiokLyxcclxuXHRydHMgPSAvKFs/Jl0pXz1bXiZdKi8sXHJcblx0cmhlYWRlcnMgPSAvXiguKj8pOlsgXFx0XSooW15cXHJcXG5dKikkL21nLFxyXG5cdC8vICM3NjUzLCAjODEyNSwgIzgxNTI6IGxvY2FsIHByb3RvY29sIGRldGVjdGlvblxyXG5cdHJsb2NhbFByb3RvY29sID0gL14oPzphYm91dHxhcHB8YXBwLXN0b3JhZ2V8ListZXh0ZW5zaW9ufGZpbGV8cmVzfHdpZGdldCk6JC8sXHJcblx0cm5vQ29udGVudCA9IC9eKD86R0VUfEhFQUQpJC8sXHJcblx0cnByb3RvY29sID0gL15cXC9cXC8vLFxyXG5cdHJ1cmwgPSAvXihbXFx3ListXSs6KSg/OlxcL1xcLyg/OlteXFwvPyNdKkB8KShbXlxcLz8jOl0qKSg/OjooXFxkKyl8KXwpLyxcclxuXHJcblx0LyogUHJlZmlsdGVyc1xyXG5cdCAqIDEpIFRoZXkgYXJlIHVzZWZ1bCB0byBpbnRyb2R1Y2UgY3VzdG9tIGRhdGFUeXBlcyAoc2VlIGFqYXgvanNvbnAuanMgZm9yIGFuIGV4YW1wbGUpXHJcblx0ICogMikgVGhlc2UgYXJlIGNhbGxlZDpcclxuXHQgKiAgICAtIEJFRk9SRSBhc2tpbmcgZm9yIGEgdHJhbnNwb3J0XHJcblx0ICogICAgLSBBRlRFUiBwYXJhbSBzZXJpYWxpemF0aW9uIChzLmRhdGEgaXMgYSBzdHJpbmcgaWYgcy5wcm9jZXNzRGF0YSBpcyB0cnVlKVxyXG5cdCAqIDMpIGtleSBpcyB0aGUgZGF0YVR5cGVcclxuXHQgKiA0KSB0aGUgY2F0Y2hhbGwgc3ltYm9sIFwiKlwiIGNhbiBiZSB1c2VkXHJcblx0ICogNSkgZXhlY3V0aW9uIHdpbGwgc3RhcnQgd2l0aCB0cmFuc3BvcnQgZGF0YVR5cGUgYW5kIFRIRU4gY29udGludWUgZG93biB0byBcIipcIiBpZiBuZWVkZWRcclxuXHQgKi9cclxuXHRwcmVmaWx0ZXJzID0ge30sXHJcblxyXG5cdC8qIFRyYW5zcG9ydHMgYmluZGluZ3NcclxuXHQgKiAxKSBrZXkgaXMgdGhlIGRhdGFUeXBlXHJcblx0ICogMikgdGhlIGNhdGNoYWxsIHN5bWJvbCBcIipcIiBjYW4gYmUgdXNlZFxyXG5cdCAqIDMpIHNlbGVjdGlvbiB3aWxsIHN0YXJ0IHdpdGggdHJhbnNwb3J0IGRhdGFUeXBlIGFuZCBUSEVOIGdvIHRvIFwiKlwiIGlmIG5lZWRlZFxyXG5cdCAqL1xyXG5cdHRyYW5zcG9ydHMgPSB7fSxcclxuXHJcblx0Ly8gQXZvaWQgY29tbWVudC1wcm9sb2cgY2hhciBzZXF1ZW5jZSAoIzEwMDk4KTsgbXVzdCBhcHBlYXNlIGxpbnQgYW5kIGV2YWRlIGNvbXByZXNzaW9uXHJcblx0YWxsVHlwZXMgPSBcIiovXCIuY29uY2F0KCBcIipcIiApLFxyXG5cclxuXHQvLyBEb2N1bWVudCBsb2NhdGlvblxyXG5cdGFqYXhMb2NhdGlvbiA9IHdpbmRvdy5sb2NhdGlvbi5ocmVmLFxyXG5cclxuXHQvLyBTZWdtZW50IGxvY2F0aW9uIGludG8gcGFydHNcclxuXHRhamF4TG9jUGFydHMgPSBydXJsLmV4ZWMoIGFqYXhMb2NhdGlvbi50b0xvd2VyQ2FzZSgpICkgfHwgW107XHJcblxyXG4vLyBCYXNlIFwiY29uc3RydWN0b3JcIiBmb3IgalF1ZXJ5LmFqYXhQcmVmaWx0ZXIgYW5kIGpRdWVyeS5hamF4VHJhbnNwb3J0XHJcbmZ1bmN0aW9uIGFkZFRvUHJlZmlsdGVyc09yVHJhbnNwb3J0cyggc3RydWN0dXJlICkge1xyXG5cclxuXHQvLyBkYXRhVHlwZUV4cHJlc3Npb24gaXMgb3B0aW9uYWwgYW5kIGRlZmF1bHRzIHRvIFwiKlwiXHJcblx0cmV0dXJuIGZ1bmN0aW9uKCBkYXRhVHlwZUV4cHJlc3Npb24sIGZ1bmMgKSB7XHJcblxyXG5cdFx0aWYgKCB0eXBlb2YgZGF0YVR5cGVFeHByZXNzaW9uICE9PSBcInN0cmluZ1wiICkge1xyXG5cdFx0XHRmdW5jID0gZGF0YVR5cGVFeHByZXNzaW9uO1xyXG5cdFx0XHRkYXRhVHlwZUV4cHJlc3Npb24gPSBcIipcIjtcclxuXHRcdH1cclxuXHJcblx0XHR2YXIgZGF0YVR5cGUsXHJcblx0XHRcdGkgPSAwLFxyXG5cdFx0XHRkYXRhVHlwZXMgPSBkYXRhVHlwZUV4cHJlc3Npb24udG9Mb3dlckNhc2UoKS5tYXRjaCggcm5vdHdoaXRlICkgfHwgW107XHJcblxyXG5cdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggZnVuYyApICkge1xyXG5cdFx0XHQvLyBGb3IgZWFjaCBkYXRhVHlwZSBpbiB0aGUgZGF0YVR5cGVFeHByZXNzaW9uXHJcblx0XHRcdHdoaWxlICggKGRhdGFUeXBlID0gZGF0YVR5cGVzW2krK10pICkge1xyXG5cdFx0XHRcdC8vIFByZXBlbmQgaWYgcmVxdWVzdGVkXHJcblx0XHRcdFx0aWYgKCBkYXRhVHlwZVswXSA9PT0gXCIrXCIgKSB7XHJcblx0XHRcdFx0XHRkYXRhVHlwZSA9IGRhdGFUeXBlLnNsaWNlKCAxICkgfHwgXCIqXCI7XHJcblx0XHRcdFx0XHQoc3RydWN0dXJlWyBkYXRhVHlwZSBdID0gc3RydWN0dXJlWyBkYXRhVHlwZSBdIHx8IFtdKS51bnNoaWZ0KCBmdW5jICk7XHJcblxyXG5cdFx0XHRcdC8vIE90aGVyd2lzZSBhcHBlbmRcclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0KHN0cnVjdHVyZVsgZGF0YVR5cGUgXSA9IHN0cnVjdHVyZVsgZGF0YVR5cGUgXSB8fCBbXSkucHVzaCggZnVuYyApO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH07XHJcbn1cclxuXHJcbi8vIEJhc2UgaW5zcGVjdGlvbiBmdW5jdGlvbiBmb3IgcHJlZmlsdGVycyBhbmQgdHJhbnNwb3J0c1xyXG5mdW5jdGlvbiBpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyggc3RydWN0dXJlLCBvcHRpb25zLCBvcmlnaW5hbE9wdGlvbnMsIGpxWEhSICkge1xyXG5cclxuXHR2YXIgaW5zcGVjdGVkID0ge30sXHJcblx0XHRzZWVraW5nVHJhbnNwb3J0ID0gKCBzdHJ1Y3R1cmUgPT09IHRyYW5zcG9ydHMgKTtcclxuXHJcblx0ZnVuY3Rpb24gaW5zcGVjdCggZGF0YVR5cGUgKSB7XHJcblx0XHR2YXIgc2VsZWN0ZWQ7XHJcblx0XHRpbnNwZWN0ZWRbIGRhdGFUeXBlIF0gPSB0cnVlO1xyXG5cdFx0alF1ZXJ5LmVhY2goIHN0cnVjdHVyZVsgZGF0YVR5cGUgXSB8fCBbXSwgZnVuY3Rpb24oIF8sIHByZWZpbHRlck9yRmFjdG9yeSApIHtcclxuXHRcdFx0dmFyIGRhdGFUeXBlT3JUcmFuc3BvcnQgPSBwcmVmaWx0ZXJPckZhY3RvcnkoIG9wdGlvbnMsIG9yaWdpbmFsT3B0aW9ucywganFYSFIgKTtcclxuXHRcdFx0aWYgKCB0eXBlb2YgZGF0YVR5cGVPclRyYW5zcG9ydCA9PT0gXCJzdHJpbmdcIiAmJiAhc2Vla2luZ1RyYW5zcG9ydCAmJiAhaW5zcGVjdGVkWyBkYXRhVHlwZU9yVHJhbnNwb3J0IF0gKSB7XHJcblx0XHRcdFx0b3B0aW9ucy5kYXRhVHlwZXMudW5zaGlmdCggZGF0YVR5cGVPclRyYW5zcG9ydCApO1xyXG5cdFx0XHRcdGluc3BlY3QoIGRhdGFUeXBlT3JUcmFuc3BvcnQgKTtcclxuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XHJcblx0XHRcdH0gZWxzZSBpZiAoIHNlZWtpbmdUcmFuc3BvcnQgKSB7XHJcblx0XHRcdFx0cmV0dXJuICEoIHNlbGVjdGVkID0gZGF0YVR5cGVPclRyYW5zcG9ydCApO1xyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHRcdHJldHVybiBzZWxlY3RlZDtcclxuXHR9XHJcblxyXG5cdHJldHVybiBpbnNwZWN0KCBvcHRpb25zLmRhdGFUeXBlc1sgMCBdICkgfHwgIWluc3BlY3RlZFsgXCIqXCIgXSAmJiBpbnNwZWN0KCBcIipcIiApO1xyXG59XHJcblxyXG4vLyBBIHNwZWNpYWwgZXh0ZW5kIGZvciBhamF4IG9wdGlvbnNcclxuLy8gdGhhdCB0YWtlcyBcImZsYXRcIiBvcHRpb25zIChub3QgdG8gYmUgZGVlcCBleHRlbmRlZClcclxuLy8gRml4ZXMgIzk4ODdcclxuZnVuY3Rpb24gYWpheEV4dGVuZCggdGFyZ2V0LCBzcmMgKSB7XHJcblx0dmFyIGtleSwgZGVlcCxcclxuXHRcdGZsYXRPcHRpb25zID0galF1ZXJ5LmFqYXhTZXR0aW5ncy5mbGF0T3B0aW9ucyB8fCB7fTtcclxuXHJcblx0Zm9yICgga2V5IGluIHNyYyApIHtcclxuXHRcdGlmICggc3JjWyBrZXkgXSAhPT0gdW5kZWZpbmVkICkge1xyXG5cdFx0XHQoIGZsYXRPcHRpb25zWyBrZXkgXSA/IHRhcmdldCA6ICggZGVlcCB8fCAoZGVlcCA9IHt9KSApIClbIGtleSBdID0gc3JjWyBrZXkgXTtcclxuXHRcdH1cclxuXHR9XHJcblx0aWYgKCBkZWVwICkge1xyXG5cdFx0alF1ZXJ5LmV4dGVuZCggdHJ1ZSwgdGFyZ2V0LCBkZWVwICk7XHJcblx0fVxyXG5cclxuXHRyZXR1cm4gdGFyZ2V0O1xyXG59XHJcblxyXG4vKiBIYW5kbGVzIHJlc3BvbnNlcyB0byBhbiBhamF4IHJlcXVlc3Q6XHJcbiAqIC0gZmluZHMgdGhlIHJpZ2h0IGRhdGFUeXBlIChtZWRpYXRlcyBiZXR3ZWVuIGNvbnRlbnQtdHlwZSBhbmQgZXhwZWN0ZWQgZGF0YVR5cGUpXHJcbiAqIC0gcmV0dXJucyB0aGUgY29ycmVzcG9uZGluZyByZXNwb25zZVxyXG4gKi9cclxuZnVuY3Rpb24gYWpheEhhbmRsZVJlc3BvbnNlcyggcywganFYSFIsIHJlc3BvbnNlcyApIHtcclxuXHJcblx0dmFyIGN0LCB0eXBlLCBmaW5hbERhdGFUeXBlLCBmaXJzdERhdGFUeXBlLFxyXG5cdFx0Y29udGVudHMgPSBzLmNvbnRlbnRzLFxyXG5cdFx0ZGF0YVR5cGVzID0gcy5kYXRhVHlwZXM7XHJcblxyXG5cdC8vIFJlbW92ZSBhdXRvIGRhdGFUeXBlIGFuZCBnZXQgY29udGVudC10eXBlIGluIHRoZSBwcm9jZXNzXHJcblx0d2hpbGUgKCBkYXRhVHlwZXNbIDAgXSA9PT0gXCIqXCIgKSB7XHJcblx0XHRkYXRhVHlwZXMuc2hpZnQoKTtcclxuXHRcdGlmICggY3QgPT09IHVuZGVmaW5lZCApIHtcclxuXHRcdFx0Y3QgPSBzLm1pbWVUeXBlIHx8IGpxWEhSLmdldFJlc3BvbnNlSGVhZGVyKFwiQ29udGVudC1UeXBlXCIpO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0Ly8gQ2hlY2sgaWYgd2UncmUgZGVhbGluZyB3aXRoIGEga25vd24gY29udGVudC10eXBlXHJcblx0aWYgKCBjdCApIHtcclxuXHRcdGZvciAoIHR5cGUgaW4gY29udGVudHMgKSB7XHJcblx0XHRcdGlmICggY29udGVudHNbIHR5cGUgXSAmJiBjb250ZW50c1sgdHlwZSBdLnRlc3QoIGN0ICkgKSB7XHJcblx0XHRcdFx0ZGF0YVR5cGVzLnVuc2hpZnQoIHR5cGUgKTtcclxuXHRcdFx0XHRicmVhaztcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0Ly8gQ2hlY2sgdG8gc2VlIGlmIHdlIGhhdmUgYSByZXNwb25zZSBmb3IgdGhlIGV4cGVjdGVkIGRhdGFUeXBlXHJcblx0aWYgKCBkYXRhVHlwZXNbIDAgXSBpbiByZXNwb25zZXMgKSB7XHJcblx0XHRmaW5hbERhdGFUeXBlID0gZGF0YVR5cGVzWyAwIF07XHJcblx0fSBlbHNlIHtcclxuXHRcdC8vIFRyeSBjb252ZXJ0aWJsZSBkYXRhVHlwZXNcclxuXHRcdGZvciAoIHR5cGUgaW4gcmVzcG9uc2VzICkge1xyXG5cdFx0XHRpZiAoICFkYXRhVHlwZXNbIDAgXSB8fCBzLmNvbnZlcnRlcnNbIHR5cGUgKyBcIiBcIiArIGRhdGFUeXBlc1swXSBdICkge1xyXG5cdFx0XHRcdGZpbmFsRGF0YVR5cGUgPSB0eXBlO1xyXG5cdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHR9XHJcblx0XHRcdGlmICggIWZpcnN0RGF0YVR5cGUgKSB7XHJcblx0XHRcdFx0Zmlyc3REYXRhVHlwZSA9IHR5cGU7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHRcdC8vIE9yIGp1c3QgdXNlIGZpcnN0IG9uZVxyXG5cdFx0ZmluYWxEYXRhVHlwZSA9IGZpbmFsRGF0YVR5cGUgfHwgZmlyc3REYXRhVHlwZTtcclxuXHR9XHJcblxyXG5cdC8vIElmIHdlIGZvdW5kIGEgZGF0YVR5cGVcclxuXHQvLyBXZSBhZGQgdGhlIGRhdGFUeXBlIHRvIHRoZSBsaXN0IGlmIG5lZWRlZFxyXG5cdC8vIGFuZCByZXR1cm4gdGhlIGNvcnJlc3BvbmRpbmcgcmVzcG9uc2VcclxuXHRpZiAoIGZpbmFsRGF0YVR5cGUgKSB7XHJcblx0XHRpZiAoIGZpbmFsRGF0YVR5cGUgIT09IGRhdGFUeXBlc1sgMCBdICkge1xyXG5cdFx0XHRkYXRhVHlwZXMudW5zaGlmdCggZmluYWxEYXRhVHlwZSApO1xyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIHJlc3BvbnNlc1sgZmluYWxEYXRhVHlwZSBdO1xyXG5cdH1cclxufVxyXG5cclxuLyogQ2hhaW4gY29udmVyc2lvbnMgZ2l2ZW4gdGhlIHJlcXVlc3QgYW5kIHRoZSBvcmlnaW5hbCByZXNwb25zZVxyXG4gKiBBbHNvIHNldHMgdGhlIHJlc3BvbnNlWFhYIGZpZWxkcyBvbiB0aGUganFYSFIgaW5zdGFuY2VcclxuICovXHJcbmZ1bmN0aW9uIGFqYXhDb252ZXJ0KCBzLCByZXNwb25zZSwganFYSFIsIGlzU3VjY2VzcyApIHtcclxuXHR2YXIgY29udjIsIGN1cnJlbnQsIGNvbnYsIHRtcCwgcHJldixcclxuXHRcdGNvbnZlcnRlcnMgPSB7fSxcclxuXHRcdC8vIFdvcmsgd2l0aCBhIGNvcHkgb2YgZGF0YVR5cGVzIGluIGNhc2Ugd2UgbmVlZCB0byBtb2RpZnkgaXQgZm9yIGNvbnZlcnNpb25cclxuXHRcdGRhdGFUeXBlcyA9IHMuZGF0YVR5cGVzLnNsaWNlKCk7XHJcblxyXG5cdC8vIENyZWF0ZSBjb252ZXJ0ZXJzIG1hcCB3aXRoIGxvd2VyY2FzZWQga2V5c1xyXG5cdGlmICggZGF0YVR5cGVzWyAxIF0gKSB7XHJcblx0XHRmb3IgKCBjb252IGluIHMuY29udmVydGVycyApIHtcclxuXHRcdFx0Y29udmVydGVyc1sgY29udi50b0xvd2VyQ2FzZSgpIF0gPSBzLmNvbnZlcnRlcnNbIGNvbnYgXTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdGN1cnJlbnQgPSBkYXRhVHlwZXMuc2hpZnQoKTtcclxuXHJcblx0Ly8gQ29udmVydCB0byBlYWNoIHNlcXVlbnRpYWwgZGF0YVR5cGVcclxuXHR3aGlsZSAoIGN1cnJlbnQgKSB7XHJcblxyXG5cdFx0aWYgKCBzLnJlc3BvbnNlRmllbGRzWyBjdXJyZW50IF0gKSB7XHJcblx0XHRcdGpxWEhSWyBzLnJlc3BvbnNlRmllbGRzWyBjdXJyZW50IF0gXSA9IHJlc3BvbnNlO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIEFwcGx5IHRoZSBkYXRhRmlsdGVyIGlmIHByb3ZpZGVkXHJcblx0XHRpZiAoICFwcmV2ICYmIGlzU3VjY2VzcyAmJiBzLmRhdGFGaWx0ZXIgKSB7XHJcblx0XHRcdHJlc3BvbnNlID0gcy5kYXRhRmlsdGVyKCByZXNwb25zZSwgcy5kYXRhVHlwZSApO1xyXG5cdFx0fVxyXG5cclxuXHRcdHByZXYgPSBjdXJyZW50O1xyXG5cdFx0Y3VycmVudCA9IGRhdGFUeXBlcy5zaGlmdCgpO1xyXG5cclxuXHRcdGlmICggY3VycmVudCApIHtcclxuXHJcblx0XHQvLyBUaGVyZSdzIG9ubHkgd29yayB0byBkbyBpZiBjdXJyZW50IGRhdGFUeXBlIGlzIG5vbi1hdXRvXHJcblx0XHRcdGlmICggY3VycmVudCA9PT0gXCIqXCIgKSB7XHJcblxyXG5cdFx0XHRcdGN1cnJlbnQgPSBwcmV2O1xyXG5cclxuXHRcdFx0Ly8gQ29udmVydCByZXNwb25zZSBpZiBwcmV2IGRhdGFUeXBlIGlzIG5vbi1hdXRvIGFuZCBkaWZmZXJzIGZyb20gY3VycmVudFxyXG5cdFx0XHR9IGVsc2UgaWYgKCBwcmV2ICE9PSBcIipcIiAmJiBwcmV2ICE9PSBjdXJyZW50ICkge1xyXG5cclxuXHRcdFx0XHQvLyBTZWVrIGEgZGlyZWN0IGNvbnZlcnRlclxyXG5cdFx0XHRcdGNvbnYgPSBjb252ZXJ0ZXJzWyBwcmV2ICsgXCIgXCIgKyBjdXJyZW50IF0gfHwgY29udmVydGVyc1sgXCIqIFwiICsgY3VycmVudCBdO1xyXG5cclxuXHRcdFx0XHQvLyBJZiBub25lIGZvdW5kLCBzZWVrIGEgcGFpclxyXG5cdFx0XHRcdGlmICggIWNvbnYgKSB7XHJcblx0XHRcdFx0XHRmb3IgKCBjb252MiBpbiBjb252ZXJ0ZXJzICkge1xyXG5cclxuXHRcdFx0XHRcdFx0Ly8gSWYgY29udjIgb3V0cHV0cyBjdXJyZW50XHJcblx0XHRcdFx0XHRcdHRtcCA9IGNvbnYyLnNwbGl0KCBcIiBcIiApO1xyXG5cdFx0XHRcdFx0XHRpZiAoIHRtcFsgMSBdID09PSBjdXJyZW50ICkge1xyXG5cclxuXHRcdFx0XHRcdFx0XHQvLyBJZiBwcmV2IGNhbiBiZSBjb252ZXJ0ZWQgdG8gYWNjZXB0ZWQgaW5wdXRcclxuXHRcdFx0XHRcdFx0XHRjb252ID0gY29udmVydGVyc1sgcHJldiArIFwiIFwiICsgdG1wWyAwIF0gXSB8fFxyXG5cdFx0XHRcdFx0XHRcdFx0Y29udmVydGVyc1sgXCIqIFwiICsgdG1wWyAwIF0gXTtcclxuXHRcdFx0XHRcdFx0XHRpZiAoIGNvbnYgKSB7XHJcblx0XHRcdFx0XHRcdFx0XHQvLyBDb25kZW5zZSBlcXVpdmFsZW5jZSBjb252ZXJ0ZXJzXHJcblx0XHRcdFx0XHRcdFx0XHRpZiAoIGNvbnYgPT09IHRydWUgKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdGNvbnYgPSBjb252ZXJ0ZXJzWyBjb252MiBdO1xyXG5cclxuXHRcdFx0XHRcdFx0XHRcdC8vIE90aGVyd2lzZSwgaW5zZXJ0IHRoZSBpbnRlcm1lZGlhdGUgZGF0YVR5cGVcclxuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoIGNvbnZlcnRlcnNbIGNvbnYyIF0gIT09IHRydWUgKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdGN1cnJlbnQgPSB0bXBbIDAgXTtcclxuXHRcdFx0XHRcdFx0XHRcdFx0ZGF0YVR5cGVzLnVuc2hpZnQoIHRtcFsgMSBdICk7XHJcblx0XHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdC8vIEFwcGx5IGNvbnZlcnRlciAoaWYgbm90IGFuIGVxdWl2YWxlbmNlKVxyXG5cdFx0XHRcdGlmICggY29udiAhPT0gdHJ1ZSApIHtcclxuXHJcblx0XHRcdFx0XHQvLyBVbmxlc3MgZXJyb3JzIGFyZSBhbGxvd2VkIHRvIGJ1YmJsZSwgY2F0Y2ggYW5kIHJldHVybiB0aGVtXHJcblx0XHRcdFx0XHRpZiAoIGNvbnYgJiYgc1sgXCJ0aHJvd3NcIiBdICkge1xyXG5cdFx0XHRcdFx0XHRyZXNwb25zZSA9IGNvbnYoIHJlc3BvbnNlICk7XHJcblx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHR0cnkge1xyXG5cdFx0XHRcdFx0XHRcdHJlc3BvbnNlID0gY29udiggcmVzcG9uc2UgKTtcclxuXHRcdFx0XHRcdFx0fSBjYXRjaCAoIGUgKSB7XHJcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHsgc3RhdGU6IFwicGFyc2VyZXJyb3JcIiwgZXJyb3I6IGNvbnYgPyBlIDogXCJObyBjb252ZXJzaW9uIGZyb20gXCIgKyBwcmV2ICsgXCIgdG8gXCIgKyBjdXJyZW50IH07XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdHJldHVybiB7IHN0YXRlOiBcInN1Y2Nlc3NcIiwgZGF0YTogcmVzcG9uc2UgfTtcclxufVxyXG5cclxualF1ZXJ5LmV4dGVuZCh7XHJcblxyXG5cdC8vIENvdW50ZXIgZm9yIGhvbGRpbmcgdGhlIG51bWJlciBvZiBhY3RpdmUgcXVlcmllc1xyXG5cdGFjdGl2ZTogMCxcclxuXHJcblx0Ly8gTGFzdC1Nb2RpZmllZCBoZWFkZXIgY2FjaGUgZm9yIG5leHQgcmVxdWVzdFxyXG5cdGxhc3RNb2RpZmllZDoge30sXHJcblx0ZXRhZzoge30sXHJcblxyXG5cdGFqYXhTZXR0aW5nczoge1xyXG5cdFx0dXJsOiBhamF4TG9jYXRpb24sXHJcblx0XHR0eXBlOiBcIkdFVFwiLFxyXG5cdFx0aXNMb2NhbDogcmxvY2FsUHJvdG9jb2wudGVzdCggYWpheExvY1BhcnRzWyAxIF0gKSxcclxuXHRcdGdsb2JhbDogdHJ1ZSxcclxuXHRcdHByb2Nlc3NEYXRhOiB0cnVlLFxyXG5cdFx0YXN5bmM6IHRydWUsXHJcblx0XHRjb250ZW50VHlwZTogXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7IGNoYXJzZXQ9VVRGLThcIixcclxuXHRcdC8qXHJcblx0XHR0aW1lb3V0OiAwLFxyXG5cdFx0ZGF0YTogbnVsbCxcclxuXHRcdGRhdGFUeXBlOiBudWxsLFxyXG5cdFx0dXNlcm5hbWU6IG51bGwsXHJcblx0XHRwYXNzd29yZDogbnVsbCxcclxuXHRcdGNhY2hlOiBudWxsLFxyXG5cdFx0dGhyb3dzOiBmYWxzZSxcclxuXHRcdHRyYWRpdGlvbmFsOiBmYWxzZSxcclxuXHRcdGhlYWRlcnM6IHt9LFxyXG5cdFx0Ki9cclxuXHJcblx0XHRhY2NlcHRzOiB7XHJcblx0XHRcdFwiKlwiOiBhbGxUeXBlcyxcclxuXHRcdFx0dGV4dDogXCJ0ZXh0L3BsYWluXCIsXHJcblx0XHRcdGh0bWw6IFwidGV4dC9odG1sXCIsXHJcblx0XHRcdHhtbDogXCJhcHBsaWNhdGlvbi94bWwsIHRleHQveG1sXCIsXHJcblx0XHRcdGpzb246IFwiYXBwbGljYXRpb24vanNvbiwgdGV4dC9qYXZhc2NyaXB0XCJcclxuXHRcdH0sXHJcblxyXG5cdFx0Y29udGVudHM6IHtcclxuXHRcdFx0eG1sOiAveG1sLyxcclxuXHRcdFx0aHRtbDogL2h0bWwvLFxyXG5cdFx0XHRqc29uOiAvanNvbi9cclxuXHRcdH0sXHJcblxyXG5cdFx0cmVzcG9uc2VGaWVsZHM6IHtcclxuXHRcdFx0eG1sOiBcInJlc3BvbnNlWE1MXCIsXHJcblx0XHRcdHRleHQ6IFwicmVzcG9uc2VUZXh0XCIsXHJcblx0XHRcdGpzb246IFwicmVzcG9uc2VKU09OXCJcclxuXHRcdH0sXHJcblxyXG5cdFx0Ly8gRGF0YSBjb252ZXJ0ZXJzXHJcblx0XHQvLyBLZXlzIHNlcGFyYXRlIHNvdXJjZSAob3IgY2F0Y2hhbGwgXCIqXCIpIGFuZCBkZXN0aW5hdGlvbiB0eXBlcyB3aXRoIGEgc2luZ2xlIHNwYWNlXHJcblx0XHRjb252ZXJ0ZXJzOiB7XHJcblxyXG5cdFx0XHQvLyBDb252ZXJ0IGFueXRoaW5nIHRvIHRleHRcclxuXHRcdFx0XCIqIHRleHRcIjogU3RyaW5nLFxyXG5cclxuXHRcdFx0Ly8gVGV4dCB0byBodG1sICh0cnVlID0gbm8gdHJhbnNmb3JtYXRpb24pXHJcblx0XHRcdFwidGV4dCBodG1sXCI6IHRydWUsXHJcblxyXG5cdFx0XHQvLyBFdmFsdWF0ZSB0ZXh0IGFzIGEganNvbiBleHByZXNzaW9uXHJcblx0XHRcdFwidGV4dCBqc29uXCI6IGpRdWVyeS5wYXJzZUpTT04sXHJcblxyXG5cdFx0XHQvLyBQYXJzZSB0ZXh0IGFzIHhtbFxyXG5cdFx0XHRcInRleHQgeG1sXCI6IGpRdWVyeS5wYXJzZVhNTFxyXG5cdFx0fSxcclxuXHJcblx0XHQvLyBGb3Igb3B0aW9ucyB0aGF0IHNob3VsZG4ndCBiZSBkZWVwIGV4dGVuZGVkOlxyXG5cdFx0Ly8geW91IGNhbiBhZGQgeW91ciBvd24gY3VzdG9tIG9wdGlvbnMgaGVyZSBpZlxyXG5cdFx0Ly8gYW5kIHdoZW4geW91IGNyZWF0ZSBvbmUgdGhhdCBzaG91bGRuJ3QgYmVcclxuXHRcdC8vIGRlZXAgZXh0ZW5kZWQgKHNlZSBhamF4RXh0ZW5kKVxyXG5cdFx0ZmxhdE9wdGlvbnM6IHtcclxuXHRcdFx0dXJsOiB0cnVlLFxyXG5cdFx0XHRjb250ZXh0OiB0cnVlXHJcblx0XHR9XHJcblx0fSxcclxuXHJcblx0Ly8gQ3JlYXRlcyBhIGZ1bGwgZmxlZGdlZCBzZXR0aW5ncyBvYmplY3QgaW50byB0YXJnZXRcclxuXHQvLyB3aXRoIGJvdGggYWpheFNldHRpbmdzIGFuZCBzZXR0aW5ncyBmaWVsZHMuXHJcblx0Ly8gSWYgdGFyZ2V0IGlzIG9taXR0ZWQsIHdyaXRlcyBpbnRvIGFqYXhTZXR0aW5ncy5cclxuXHRhamF4U2V0dXA6IGZ1bmN0aW9uKCB0YXJnZXQsIHNldHRpbmdzICkge1xyXG5cdFx0cmV0dXJuIHNldHRpbmdzID9cclxuXHJcblx0XHRcdC8vIEJ1aWxkaW5nIGEgc2V0dGluZ3Mgb2JqZWN0XHJcblx0XHRcdGFqYXhFeHRlbmQoIGFqYXhFeHRlbmQoIHRhcmdldCwgalF1ZXJ5LmFqYXhTZXR0aW5ncyApLCBzZXR0aW5ncyApIDpcclxuXHJcblx0XHRcdC8vIEV4dGVuZGluZyBhamF4U2V0dGluZ3NcclxuXHRcdFx0YWpheEV4dGVuZCggalF1ZXJ5LmFqYXhTZXR0aW5ncywgdGFyZ2V0ICk7XHJcblx0fSxcclxuXHJcblx0YWpheFByZWZpbHRlcjogYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBwcmVmaWx0ZXJzICksXHJcblx0YWpheFRyYW5zcG9ydDogYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCB0cmFuc3BvcnRzICksXHJcblxyXG5cdC8vIE1haW4gbWV0aG9kXHJcblx0YWpheDogZnVuY3Rpb24oIHVybCwgb3B0aW9ucyApIHtcclxuXHJcblx0XHQvLyBJZiB1cmwgaXMgYW4gb2JqZWN0LCBzaW11bGF0ZSBwcmUtMS41IHNpZ25hdHVyZVxyXG5cdFx0aWYgKCB0eXBlb2YgdXJsID09PSBcIm9iamVjdFwiICkge1xyXG5cdFx0XHRvcHRpb25zID0gdXJsO1xyXG5cdFx0XHR1cmwgPSB1bmRlZmluZWQ7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gRm9yY2Ugb3B0aW9ucyB0byBiZSBhbiBvYmplY3RcclxuXHRcdG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xyXG5cclxuXHRcdHZhciB0cmFuc3BvcnQsXHJcblx0XHRcdC8vIFVSTCB3aXRob3V0IGFudGktY2FjaGUgcGFyYW1cclxuXHRcdFx0Y2FjaGVVUkwsXHJcblx0XHRcdC8vIFJlc3BvbnNlIGhlYWRlcnNcclxuXHRcdFx0cmVzcG9uc2VIZWFkZXJzU3RyaW5nLFxyXG5cdFx0XHRyZXNwb25zZUhlYWRlcnMsXHJcblx0XHRcdC8vIHRpbWVvdXQgaGFuZGxlXHJcblx0XHRcdHRpbWVvdXRUaW1lcixcclxuXHRcdFx0Ly8gQ3Jvc3MtZG9tYWluIGRldGVjdGlvbiB2YXJzXHJcblx0XHRcdHBhcnRzLFxyXG5cdFx0XHQvLyBUbyBrbm93IGlmIGdsb2JhbCBldmVudHMgYXJlIHRvIGJlIGRpc3BhdGNoZWRcclxuXHRcdFx0ZmlyZUdsb2JhbHMsXHJcblx0XHRcdC8vIExvb3AgdmFyaWFibGVcclxuXHRcdFx0aSxcclxuXHRcdFx0Ly8gQ3JlYXRlIHRoZSBmaW5hbCBvcHRpb25zIG9iamVjdFxyXG5cdFx0XHRzID0galF1ZXJ5LmFqYXhTZXR1cCgge30sIG9wdGlvbnMgKSxcclxuXHRcdFx0Ly8gQ2FsbGJhY2tzIGNvbnRleHRcclxuXHRcdFx0Y2FsbGJhY2tDb250ZXh0ID0gcy5jb250ZXh0IHx8IHMsXHJcblx0XHRcdC8vIENvbnRleHQgZm9yIGdsb2JhbCBldmVudHMgaXMgY2FsbGJhY2tDb250ZXh0IGlmIGl0IGlzIGEgRE9NIG5vZGUgb3IgalF1ZXJ5IGNvbGxlY3Rpb25cclxuXHRcdFx0Z2xvYmFsRXZlbnRDb250ZXh0ID0gcy5jb250ZXh0ICYmICggY2FsbGJhY2tDb250ZXh0Lm5vZGVUeXBlIHx8IGNhbGxiYWNrQ29udGV4dC5qcXVlcnkgKSA/XHJcblx0XHRcdFx0alF1ZXJ5KCBjYWxsYmFja0NvbnRleHQgKSA6XHJcblx0XHRcdFx0alF1ZXJ5LmV2ZW50LFxyXG5cdFx0XHQvLyBEZWZlcnJlZHNcclxuXHRcdFx0ZGVmZXJyZWQgPSBqUXVlcnkuRGVmZXJyZWQoKSxcclxuXHRcdFx0Y29tcGxldGVEZWZlcnJlZCA9IGpRdWVyeS5DYWxsYmFja3MoXCJvbmNlIG1lbW9yeVwiKSxcclxuXHRcdFx0Ly8gU3RhdHVzLWRlcGVuZGVudCBjYWxsYmFja3NcclxuXHRcdFx0c3RhdHVzQ29kZSA9IHMuc3RhdHVzQ29kZSB8fCB7fSxcclxuXHRcdFx0Ly8gSGVhZGVycyAodGhleSBhcmUgc2VudCBhbGwgYXQgb25jZSlcclxuXHRcdFx0cmVxdWVzdEhlYWRlcnMgPSB7fSxcclxuXHRcdFx0cmVxdWVzdEhlYWRlcnNOYW1lcyA9IHt9LFxyXG5cdFx0XHQvLyBUaGUganFYSFIgc3RhdGVcclxuXHRcdFx0c3RhdGUgPSAwLFxyXG5cdFx0XHQvLyBEZWZhdWx0IGFib3J0IG1lc3NhZ2VcclxuXHRcdFx0c3RyQWJvcnQgPSBcImNhbmNlbGVkXCIsXHJcblx0XHRcdC8vIEZha2UgeGhyXHJcblx0XHRcdGpxWEhSID0ge1xyXG5cdFx0XHRcdHJlYWR5U3RhdGU6IDAsXHJcblxyXG5cdFx0XHRcdC8vIEJ1aWxkcyBoZWFkZXJzIGhhc2h0YWJsZSBpZiBuZWVkZWRcclxuXHRcdFx0XHRnZXRSZXNwb25zZUhlYWRlcjogZnVuY3Rpb24oIGtleSApIHtcclxuXHRcdFx0XHRcdHZhciBtYXRjaDtcclxuXHRcdFx0XHRcdGlmICggc3RhdGUgPT09IDIgKSB7XHJcblx0XHRcdFx0XHRcdGlmICggIXJlc3BvbnNlSGVhZGVycyApIHtcclxuXHRcdFx0XHRcdFx0XHRyZXNwb25zZUhlYWRlcnMgPSB7fTtcclxuXHRcdFx0XHRcdFx0XHR3aGlsZSAoIChtYXRjaCA9IHJoZWFkZXJzLmV4ZWMoIHJlc3BvbnNlSGVhZGVyc1N0cmluZyApKSApIHtcclxuXHRcdFx0XHRcdFx0XHRcdHJlc3BvbnNlSGVhZGVyc1sgbWF0Y2hbMV0udG9Mb3dlckNhc2UoKSBdID0gbWF0Y2hbIDIgXTtcclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0bWF0Y2ggPSByZXNwb25zZUhlYWRlcnNbIGtleS50b0xvd2VyQ2FzZSgpIF07XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRyZXR1cm4gbWF0Y2ggPT0gbnVsbCA/IG51bGwgOiBtYXRjaDtcclxuXHRcdFx0XHR9LFxyXG5cclxuXHRcdFx0XHQvLyBSYXcgc3RyaW5nXHJcblx0XHRcdFx0Z2V0QWxsUmVzcG9uc2VIZWFkZXJzOiBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRcdHJldHVybiBzdGF0ZSA9PT0gMiA/IHJlc3BvbnNlSGVhZGVyc1N0cmluZyA6IG51bGw7XHJcblx0XHRcdFx0fSxcclxuXHJcblx0XHRcdFx0Ly8gQ2FjaGVzIHRoZSBoZWFkZXJcclxuXHRcdFx0XHRzZXRSZXF1ZXN0SGVhZGVyOiBmdW5jdGlvbiggbmFtZSwgdmFsdWUgKSB7XHJcblx0XHRcdFx0XHR2YXIgbG5hbWUgPSBuYW1lLnRvTG93ZXJDYXNlKCk7XHJcblx0XHRcdFx0XHRpZiAoICFzdGF0ZSApIHtcclxuXHRcdFx0XHRcdFx0bmFtZSA9IHJlcXVlc3RIZWFkZXJzTmFtZXNbIGxuYW1lIF0gPSByZXF1ZXN0SGVhZGVyc05hbWVzWyBsbmFtZSBdIHx8IG5hbWU7XHJcblx0XHRcdFx0XHRcdHJlcXVlc3RIZWFkZXJzWyBuYW1lIF0gPSB2YWx1ZTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xyXG5cdFx0XHRcdH0sXHJcblxyXG5cdFx0XHRcdC8vIE92ZXJyaWRlcyByZXNwb25zZSBjb250ZW50LXR5cGUgaGVhZGVyXHJcblx0XHRcdFx0b3ZlcnJpZGVNaW1lVHlwZTogZnVuY3Rpb24oIHR5cGUgKSB7XHJcblx0XHRcdFx0XHRpZiAoICFzdGF0ZSApIHtcclxuXHRcdFx0XHRcdFx0cy5taW1lVHlwZSA9IHR5cGU7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcclxuXHRcdFx0XHR9LFxyXG5cclxuXHRcdFx0XHQvLyBTdGF0dXMtZGVwZW5kZW50IGNhbGxiYWNrc1xyXG5cdFx0XHRcdHN0YXR1c0NvZGU6IGZ1bmN0aW9uKCBtYXAgKSB7XHJcblx0XHRcdFx0XHR2YXIgY29kZTtcclxuXHRcdFx0XHRcdGlmICggbWFwICkge1xyXG5cdFx0XHRcdFx0XHRpZiAoIHN0YXRlIDwgMiApIHtcclxuXHRcdFx0XHRcdFx0XHRmb3IgKCBjb2RlIGluIG1hcCApIHtcclxuXHRcdFx0XHRcdFx0XHRcdC8vIExhenktYWRkIHRoZSBuZXcgY2FsbGJhY2sgaW4gYSB3YXkgdGhhdCBwcmVzZXJ2ZXMgb2xkIG9uZXNcclxuXHRcdFx0XHRcdFx0XHRcdHN0YXR1c0NvZGVbIGNvZGUgXSA9IFsgc3RhdHVzQ29kZVsgY29kZSBdLCBtYXBbIGNvZGUgXSBdO1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0XHQvLyBFeGVjdXRlIHRoZSBhcHByb3ByaWF0ZSBjYWxsYmFja3NcclxuXHRcdFx0XHRcdFx0XHRqcVhIUi5hbHdheXMoIG1hcFsganFYSFIuc3RhdHVzIF0gKTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XHJcblx0XHRcdFx0fSxcclxuXHJcblx0XHRcdFx0Ly8gQ2FuY2VsIHRoZSByZXF1ZXN0XHJcblx0XHRcdFx0YWJvcnQ6IGZ1bmN0aW9uKCBzdGF0dXNUZXh0ICkge1xyXG5cdFx0XHRcdFx0dmFyIGZpbmFsVGV4dCA9IHN0YXR1c1RleHQgfHwgc3RyQWJvcnQ7XHJcblx0XHRcdFx0XHRpZiAoIHRyYW5zcG9ydCApIHtcclxuXHRcdFx0XHRcdFx0dHJhbnNwb3J0LmFib3J0KCBmaW5hbFRleHQgKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdGRvbmUoIDAsIGZpbmFsVGV4dCApO1xyXG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9O1xyXG5cclxuXHRcdC8vIEF0dGFjaCBkZWZlcnJlZHNcclxuXHRcdGRlZmVycmVkLnByb21pc2UoIGpxWEhSICkuY29tcGxldGUgPSBjb21wbGV0ZURlZmVycmVkLmFkZDtcclxuXHRcdGpxWEhSLnN1Y2Nlc3MgPSBqcVhIUi5kb25lO1xyXG5cdFx0anFYSFIuZXJyb3IgPSBqcVhIUi5mYWlsO1xyXG5cclxuXHRcdC8vIFJlbW92ZSBoYXNoIGNoYXJhY3RlciAoIzc1MzE6IGFuZCBzdHJpbmcgcHJvbW90aW9uKVxyXG5cdFx0Ly8gQWRkIHByb3RvY29sIGlmIG5vdCBwcm92aWRlZCAocHJlZmlsdGVycyBtaWdodCBleHBlY3QgaXQpXHJcblx0XHQvLyBIYW5kbGUgZmFsc3kgdXJsIGluIHRoZSBzZXR0aW5ncyBvYmplY3QgKCMxMDA5MzogY29uc2lzdGVuY3kgd2l0aCBvbGQgc2lnbmF0dXJlKVxyXG5cdFx0Ly8gV2UgYWxzbyB1c2UgdGhlIHVybCBwYXJhbWV0ZXIgaWYgYXZhaWxhYmxlXHJcblx0XHRzLnVybCA9ICggKCB1cmwgfHwgcy51cmwgfHwgYWpheExvY2F0aW9uICkgKyBcIlwiICkucmVwbGFjZSggcmhhc2gsIFwiXCIgKVxyXG5cdFx0XHQucmVwbGFjZSggcnByb3RvY29sLCBhamF4TG9jUGFydHNbIDEgXSArIFwiLy9cIiApO1xyXG5cclxuXHRcdC8vIEFsaWFzIG1ldGhvZCBvcHRpb24gdG8gdHlwZSBhcyBwZXIgdGlja2V0ICMxMjAwNFxyXG5cdFx0cy50eXBlID0gb3B0aW9ucy5tZXRob2QgfHwgb3B0aW9ucy50eXBlIHx8IHMubWV0aG9kIHx8IHMudHlwZTtcclxuXHJcblx0XHQvLyBFeHRyYWN0IGRhdGFUeXBlcyBsaXN0XHJcblx0XHRzLmRhdGFUeXBlcyA9IGpRdWVyeS50cmltKCBzLmRhdGFUeXBlIHx8IFwiKlwiICkudG9Mb3dlckNhc2UoKS5tYXRjaCggcm5vdHdoaXRlICkgfHwgWyBcIlwiIF07XHJcblxyXG5cdFx0Ly8gQSBjcm9zcy1kb21haW4gcmVxdWVzdCBpcyBpbiBvcmRlciB3aGVuIHdlIGhhdmUgYSBwcm90b2NvbDpob3N0OnBvcnQgbWlzbWF0Y2hcclxuXHRcdGlmICggcy5jcm9zc0RvbWFpbiA9PSBudWxsICkge1xyXG5cdFx0XHRwYXJ0cyA9IHJ1cmwuZXhlYyggcy51cmwudG9Mb3dlckNhc2UoKSApO1xyXG5cdFx0XHRzLmNyb3NzRG9tYWluID0gISEoIHBhcnRzICYmXHJcblx0XHRcdFx0KCBwYXJ0c1sgMSBdICE9PSBhamF4TG9jUGFydHNbIDEgXSB8fCBwYXJ0c1sgMiBdICE9PSBhamF4TG9jUGFydHNbIDIgXSB8fFxyXG5cdFx0XHRcdFx0KCBwYXJ0c1sgMyBdIHx8ICggcGFydHNbIDEgXSA9PT0gXCJodHRwOlwiID8gXCI4MFwiIDogXCI0NDNcIiApICkgIT09XHJcblx0XHRcdFx0XHRcdCggYWpheExvY1BhcnRzWyAzIF0gfHwgKCBhamF4TG9jUGFydHNbIDEgXSA9PT0gXCJodHRwOlwiID8gXCI4MFwiIDogXCI0NDNcIiApICkgKVxyXG5cdFx0XHQpO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIENvbnZlcnQgZGF0YSBpZiBub3QgYWxyZWFkeSBhIHN0cmluZ1xyXG5cdFx0aWYgKCBzLmRhdGEgJiYgcy5wcm9jZXNzRGF0YSAmJiB0eXBlb2Ygcy5kYXRhICE9PSBcInN0cmluZ1wiICkge1xyXG5cdFx0XHRzLmRhdGEgPSBqUXVlcnkucGFyYW0oIHMuZGF0YSwgcy50cmFkaXRpb25hbCApO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIEFwcGx5IHByZWZpbHRlcnNcclxuXHRcdGluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBwcmVmaWx0ZXJzLCBzLCBvcHRpb25zLCBqcVhIUiApO1xyXG5cclxuXHRcdC8vIElmIHJlcXVlc3Qgd2FzIGFib3J0ZWQgaW5zaWRlIGEgcHJlZmlsdGVyLCBzdG9wIHRoZXJlXHJcblx0XHRpZiAoIHN0YXRlID09PSAyICkge1xyXG5cdFx0XHRyZXR1cm4ganFYSFI7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gV2UgY2FuIGZpcmUgZ2xvYmFsIGV2ZW50cyBhcyBvZiBub3cgaWYgYXNrZWQgdG9cclxuXHRcdC8vIERvbid0IGZpcmUgZXZlbnRzIGlmIGpRdWVyeS5ldmVudCBpcyB1bmRlZmluZWQgaW4gYW4gQU1ELXVzYWdlIHNjZW5hcmlvICgjMTUxMTgpXHJcblx0XHRmaXJlR2xvYmFscyA9IGpRdWVyeS5ldmVudCAmJiBzLmdsb2JhbDtcclxuXHJcblx0XHQvLyBXYXRjaCBmb3IgYSBuZXcgc2V0IG9mIHJlcXVlc3RzXHJcblx0XHRpZiAoIGZpcmVHbG9iYWxzICYmIGpRdWVyeS5hY3RpdmUrKyA9PT0gMCApIHtcclxuXHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoXCJhamF4U3RhcnRcIik7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gVXBwZXJjYXNlIHRoZSB0eXBlXHJcblx0XHRzLnR5cGUgPSBzLnR5cGUudG9VcHBlckNhc2UoKTtcclxuXHJcblx0XHQvLyBEZXRlcm1pbmUgaWYgcmVxdWVzdCBoYXMgY29udGVudFxyXG5cdFx0cy5oYXNDb250ZW50ID0gIXJub0NvbnRlbnQudGVzdCggcy50eXBlICk7XHJcblxyXG5cdFx0Ly8gU2F2ZSB0aGUgVVJMIGluIGNhc2Ugd2UncmUgdG95aW5nIHdpdGggdGhlIElmLU1vZGlmaWVkLVNpbmNlXHJcblx0XHQvLyBhbmQvb3IgSWYtTm9uZS1NYXRjaCBoZWFkZXIgbGF0ZXIgb25cclxuXHRcdGNhY2hlVVJMID0gcy51cmw7XHJcblxyXG5cdFx0Ly8gTW9yZSBvcHRpb25zIGhhbmRsaW5nIGZvciByZXF1ZXN0cyB3aXRoIG5vIGNvbnRlbnRcclxuXHRcdGlmICggIXMuaGFzQ29udGVudCApIHtcclxuXHJcblx0XHRcdC8vIElmIGRhdGEgaXMgYXZhaWxhYmxlLCBhcHBlbmQgZGF0YSB0byB1cmxcclxuXHRcdFx0aWYgKCBzLmRhdGEgKSB7XHJcblx0XHRcdFx0Y2FjaGVVUkwgPSAoIHMudXJsICs9ICggcnF1ZXJ5LnRlc3QoIGNhY2hlVVJMICkgPyBcIiZcIiA6IFwiP1wiICkgKyBzLmRhdGEgKTtcclxuXHRcdFx0XHQvLyAjOTY4MjogcmVtb3ZlIGRhdGEgc28gdGhhdCBpdCdzIG5vdCB1c2VkIGluIGFuIGV2ZW50dWFsIHJldHJ5XHJcblx0XHRcdFx0ZGVsZXRlIHMuZGF0YTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gQWRkIGFudGktY2FjaGUgaW4gdXJsIGlmIG5lZWRlZFxyXG5cdFx0XHRpZiAoIHMuY2FjaGUgPT09IGZhbHNlICkge1xyXG5cdFx0XHRcdHMudXJsID0gcnRzLnRlc3QoIGNhY2hlVVJMICkgP1xyXG5cclxuXHRcdFx0XHRcdC8vIElmIHRoZXJlIGlzIGFscmVhZHkgYSAnXycgcGFyYW1ldGVyLCBzZXQgaXRzIHZhbHVlXHJcblx0XHRcdFx0XHRjYWNoZVVSTC5yZXBsYWNlKCBydHMsIFwiJDFfPVwiICsgbm9uY2UrKyApIDpcclxuXHJcblx0XHRcdFx0XHQvLyBPdGhlcndpc2UgYWRkIG9uZSB0byB0aGUgZW5kXHJcblx0XHRcdFx0XHRjYWNoZVVSTCArICggcnF1ZXJ5LnRlc3QoIGNhY2hlVVJMICkgPyBcIiZcIiA6IFwiP1wiICkgKyBcIl89XCIgKyBub25jZSsrO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gU2V0IHRoZSBJZi1Nb2RpZmllZC1TaW5jZSBhbmQvb3IgSWYtTm9uZS1NYXRjaCBoZWFkZXIsIGlmIGluIGlmTW9kaWZpZWQgbW9kZS5cclxuXHRcdGlmICggcy5pZk1vZGlmaWVkICkge1xyXG5cdFx0XHRpZiAoIGpRdWVyeS5sYXN0TW9kaWZpZWRbIGNhY2hlVVJMIF0gKSB7XHJcblx0XHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggXCJJZi1Nb2RpZmllZC1TaW5jZVwiLCBqUXVlcnkubGFzdE1vZGlmaWVkWyBjYWNoZVVSTCBdICk7XHJcblx0XHRcdH1cclxuXHRcdFx0aWYgKCBqUXVlcnkuZXRhZ1sgY2FjaGVVUkwgXSApIHtcclxuXHRcdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBcIklmLU5vbmUtTWF0Y2hcIiwgalF1ZXJ5LmV0YWdbIGNhY2hlVVJMIF0gKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdC8vIFNldCB0aGUgY29ycmVjdCBoZWFkZXIsIGlmIGRhdGEgaXMgYmVpbmcgc2VudFxyXG5cdFx0aWYgKCBzLmRhdGEgJiYgcy5oYXNDb250ZW50ICYmIHMuY29udGVudFR5cGUgIT09IGZhbHNlIHx8IG9wdGlvbnMuY29udGVudFR5cGUgKSB7XHJcblx0XHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIFwiQ29udGVudC1UeXBlXCIsIHMuY29udGVudFR5cGUgKTtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBTZXQgdGhlIEFjY2VwdHMgaGVhZGVyIGZvciB0aGUgc2VydmVyLCBkZXBlbmRpbmcgb24gdGhlIGRhdGFUeXBlXHJcblx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKFxyXG5cdFx0XHRcIkFjY2VwdFwiLFxyXG5cdFx0XHRzLmRhdGFUeXBlc1sgMCBdICYmIHMuYWNjZXB0c1sgcy5kYXRhVHlwZXNbMF0gXSA/XHJcblx0XHRcdFx0cy5hY2NlcHRzWyBzLmRhdGFUeXBlc1swXSBdICsgKCBzLmRhdGFUeXBlc1sgMCBdICE9PSBcIipcIiA/IFwiLCBcIiArIGFsbFR5cGVzICsgXCI7IHE9MC4wMVwiIDogXCJcIiApIDpcclxuXHRcdFx0XHRzLmFjY2VwdHNbIFwiKlwiIF1cclxuXHRcdCk7XHJcblxyXG5cdFx0Ly8gQ2hlY2sgZm9yIGhlYWRlcnMgb3B0aW9uXHJcblx0XHRmb3IgKCBpIGluIHMuaGVhZGVycyApIHtcclxuXHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggaSwgcy5oZWFkZXJzWyBpIF0gKTtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBBbGxvdyBjdXN0b20gaGVhZGVycy9taW1ldHlwZXMgYW5kIGVhcmx5IGFib3J0XHJcblx0XHRpZiAoIHMuYmVmb3JlU2VuZCAmJiAoIHMuYmVmb3JlU2VuZC5jYWxsKCBjYWxsYmFja0NvbnRleHQsIGpxWEhSLCBzICkgPT09IGZhbHNlIHx8IHN0YXRlID09PSAyICkgKSB7XHJcblx0XHRcdC8vIEFib3J0IGlmIG5vdCBkb25lIGFscmVhZHkgYW5kIHJldHVyblxyXG5cdFx0XHRyZXR1cm4ganFYSFIuYWJvcnQoKTtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBBYm9ydGluZyBpcyBubyBsb25nZXIgYSBjYW5jZWxsYXRpb25cclxuXHRcdHN0ckFib3J0ID0gXCJhYm9ydFwiO1xyXG5cclxuXHRcdC8vIEluc3RhbGwgY2FsbGJhY2tzIG9uIGRlZmVycmVkc1xyXG5cdFx0Zm9yICggaSBpbiB7IHN1Y2Nlc3M6IDEsIGVycm9yOiAxLCBjb21wbGV0ZTogMSB9ICkge1xyXG5cdFx0XHRqcVhIUlsgaSBdKCBzWyBpIF0gKTtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBHZXQgdHJhbnNwb3J0XHJcblx0XHR0cmFuc3BvcnQgPSBpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyggdHJhbnNwb3J0cywgcywgb3B0aW9ucywganFYSFIgKTtcclxuXHJcblx0XHQvLyBJZiBubyB0cmFuc3BvcnQsIHdlIGF1dG8tYWJvcnRcclxuXHRcdGlmICggIXRyYW5zcG9ydCApIHtcclxuXHRcdFx0ZG9uZSggLTEsIFwiTm8gVHJhbnNwb3J0XCIgKTtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdGpxWEhSLnJlYWR5U3RhdGUgPSAxO1xyXG5cclxuXHRcdFx0Ly8gU2VuZCBnbG9iYWwgZXZlbnRcclxuXHRcdFx0aWYgKCBmaXJlR2xvYmFscyApIHtcclxuXHRcdFx0XHRnbG9iYWxFdmVudENvbnRleHQudHJpZ2dlciggXCJhamF4U2VuZFwiLCBbIGpxWEhSLCBzIF0gKTtcclxuXHRcdFx0fVxyXG5cdFx0XHQvLyBUaW1lb3V0XHJcblx0XHRcdGlmICggcy5hc3luYyAmJiBzLnRpbWVvdXQgPiAwICkge1xyXG5cdFx0XHRcdHRpbWVvdXRUaW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0XHRqcVhIUi5hYm9ydChcInRpbWVvdXRcIik7XHJcblx0XHRcdFx0fSwgcy50aW1lb3V0ICk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHRyeSB7XHJcblx0XHRcdFx0c3RhdGUgPSAxO1xyXG5cdFx0XHRcdHRyYW5zcG9ydC5zZW5kKCByZXF1ZXN0SGVhZGVycywgZG9uZSApO1xyXG5cdFx0XHR9IGNhdGNoICggZSApIHtcclxuXHRcdFx0XHQvLyBQcm9wYWdhdGUgZXhjZXB0aW9uIGFzIGVycm9yIGlmIG5vdCBkb25lXHJcblx0XHRcdFx0aWYgKCBzdGF0ZSA8IDIgKSB7XHJcblx0XHRcdFx0XHRkb25lKCAtMSwgZSApO1xyXG5cdFx0XHRcdC8vIFNpbXBseSByZXRocm93IG90aGVyd2lzZVxyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHR0aHJvdyBlO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdC8vIENhbGxiYWNrIGZvciB3aGVuIGV2ZXJ5dGhpbmcgaXMgZG9uZVxyXG5cdFx0ZnVuY3Rpb24gZG9uZSggc3RhdHVzLCBuYXRpdmVTdGF0dXNUZXh0LCByZXNwb25zZXMsIGhlYWRlcnMgKSB7XHJcblx0XHRcdHZhciBpc1N1Y2Nlc3MsIHN1Y2Nlc3MsIGVycm9yLCByZXNwb25zZSwgbW9kaWZpZWQsXHJcblx0XHRcdFx0c3RhdHVzVGV4dCA9IG5hdGl2ZVN0YXR1c1RleHQ7XHJcblxyXG5cdFx0XHQvLyBDYWxsZWQgb25jZVxyXG5cdFx0XHRpZiAoIHN0YXRlID09PSAyICkge1xyXG5cdFx0XHRcdHJldHVybjtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gU3RhdGUgaXMgXCJkb25lXCIgbm93XHJcblx0XHRcdHN0YXRlID0gMjtcclxuXHJcblx0XHRcdC8vIENsZWFyIHRpbWVvdXQgaWYgaXQgZXhpc3RzXHJcblx0XHRcdGlmICggdGltZW91dFRpbWVyICkge1xyXG5cdFx0XHRcdGNsZWFyVGltZW91dCggdGltZW91dFRpbWVyICk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIERlcmVmZXJlbmNlIHRyYW5zcG9ydCBmb3IgZWFybHkgZ2FyYmFnZSBjb2xsZWN0aW9uXHJcblx0XHRcdC8vIChubyBtYXR0ZXIgaG93IGxvbmcgdGhlIGpxWEhSIG9iamVjdCB3aWxsIGJlIHVzZWQpXHJcblx0XHRcdHRyYW5zcG9ydCA9IHVuZGVmaW5lZDtcclxuXHJcblx0XHRcdC8vIENhY2hlIHJlc3BvbnNlIGhlYWRlcnNcclxuXHRcdFx0cmVzcG9uc2VIZWFkZXJzU3RyaW5nID0gaGVhZGVycyB8fCBcIlwiO1xyXG5cclxuXHRcdFx0Ly8gU2V0IHJlYWR5U3RhdGVcclxuXHRcdFx0anFYSFIucmVhZHlTdGF0ZSA9IHN0YXR1cyA+IDAgPyA0IDogMDtcclxuXHJcblx0XHRcdC8vIERldGVybWluZSBpZiBzdWNjZXNzZnVsXHJcblx0XHRcdGlzU3VjY2VzcyA9IHN0YXR1cyA+PSAyMDAgJiYgc3RhdHVzIDwgMzAwIHx8IHN0YXR1cyA9PT0gMzA0O1xyXG5cclxuXHRcdFx0Ly8gR2V0IHJlc3BvbnNlIGRhdGFcclxuXHRcdFx0aWYgKCByZXNwb25zZXMgKSB7XHJcblx0XHRcdFx0cmVzcG9uc2UgPSBhamF4SGFuZGxlUmVzcG9uc2VzKCBzLCBqcVhIUiwgcmVzcG9uc2VzICk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIENvbnZlcnQgbm8gbWF0dGVyIHdoYXQgKHRoYXQgd2F5IHJlc3BvbnNlWFhYIGZpZWxkcyBhcmUgYWx3YXlzIHNldClcclxuXHRcdFx0cmVzcG9uc2UgPSBhamF4Q29udmVydCggcywgcmVzcG9uc2UsIGpxWEhSLCBpc1N1Y2Nlc3MgKTtcclxuXHJcblx0XHRcdC8vIElmIHN1Y2Nlc3NmdWwsIGhhbmRsZSB0eXBlIGNoYWluaW5nXHJcblx0XHRcdGlmICggaXNTdWNjZXNzICkge1xyXG5cclxuXHRcdFx0XHQvLyBTZXQgdGhlIElmLU1vZGlmaWVkLVNpbmNlIGFuZC9vciBJZi1Ob25lLU1hdGNoIGhlYWRlciwgaWYgaW4gaWZNb2RpZmllZCBtb2RlLlxyXG5cdFx0XHRcdGlmICggcy5pZk1vZGlmaWVkICkge1xyXG5cdFx0XHRcdFx0bW9kaWZpZWQgPSBqcVhIUi5nZXRSZXNwb25zZUhlYWRlcihcIkxhc3QtTW9kaWZpZWRcIik7XHJcblx0XHRcdFx0XHRpZiAoIG1vZGlmaWVkICkge1xyXG5cdFx0XHRcdFx0XHRqUXVlcnkubGFzdE1vZGlmaWVkWyBjYWNoZVVSTCBdID0gbW9kaWZpZWQ7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRtb2RpZmllZCA9IGpxWEhSLmdldFJlc3BvbnNlSGVhZGVyKFwiZXRhZ1wiKTtcclxuXHRcdFx0XHRcdGlmICggbW9kaWZpZWQgKSB7XHJcblx0XHRcdFx0XHRcdGpRdWVyeS5ldGFnWyBjYWNoZVVSTCBdID0gbW9kaWZpZWQ7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHQvLyBpZiBubyBjb250ZW50XHJcblx0XHRcdFx0aWYgKCBzdGF0dXMgPT09IDIwNCB8fCBzLnR5cGUgPT09IFwiSEVBRFwiICkge1xyXG5cdFx0XHRcdFx0c3RhdHVzVGV4dCA9IFwibm9jb250ZW50XCI7XHJcblxyXG5cdFx0XHRcdC8vIGlmIG5vdCBtb2RpZmllZFxyXG5cdFx0XHRcdH0gZWxzZSBpZiAoIHN0YXR1cyA9PT0gMzA0ICkge1xyXG5cdFx0XHRcdFx0c3RhdHVzVGV4dCA9IFwibm90bW9kaWZpZWRcIjtcclxuXHJcblx0XHRcdFx0Ly8gSWYgd2UgaGF2ZSBkYXRhLCBsZXQncyBjb252ZXJ0IGl0XHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdHN0YXR1c1RleHQgPSByZXNwb25zZS5zdGF0ZTtcclxuXHRcdFx0XHRcdHN1Y2Nlc3MgPSByZXNwb25zZS5kYXRhO1xyXG5cdFx0XHRcdFx0ZXJyb3IgPSByZXNwb25zZS5lcnJvcjtcclxuXHRcdFx0XHRcdGlzU3VjY2VzcyA9ICFlcnJvcjtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0Ly8gRXh0cmFjdCBlcnJvciBmcm9tIHN0YXR1c1RleHQgYW5kIG5vcm1hbGl6ZSBmb3Igbm9uLWFib3J0c1xyXG5cdFx0XHRcdGVycm9yID0gc3RhdHVzVGV4dDtcclxuXHRcdFx0XHRpZiAoIHN0YXR1cyB8fCAhc3RhdHVzVGV4dCApIHtcclxuXHRcdFx0XHRcdHN0YXR1c1RleHQgPSBcImVycm9yXCI7XHJcblx0XHRcdFx0XHRpZiAoIHN0YXR1cyA8IDAgKSB7XHJcblx0XHRcdFx0XHRcdHN0YXR1cyA9IDA7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBTZXQgZGF0YSBmb3IgdGhlIGZha2UgeGhyIG9iamVjdFxyXG5cdFx0XHRqcVhIUi5zdGF0dXMgPSBzdGF0dXM7XHJcblx0XHRcdGpxWEhSLnN0YXR1c1RleHQgPSAoIG5hdGl2ZVN0YXR1c1RleHQgfHwgc3RhdHVzVGV4dCApICsgXCJcIjtcclxuXHJcblx0XHRcdC8vIFN1Y2Nlc3MvRXJyb3JcclxuXHRcdFx0aWYgKCBpc1N1Y2Nlc3MgKSB7XHJcblx0XHRcdFx0ZGVmZXJyZWQucmVzb2x2ZVdpdGgoIGNhbGxiYWNrQ29udGV4dCwgWyBzdWNjZXNzLCBzdGF0dXNUZXh0LCBqcVhIUiBdICk7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0ZGVmZXJyZWQucmVqZWN0V2l0aCggY2FsbGJhY2tDb250ZXh0LCBbIGpxWEhSLCBzdGF0dXNUZXh0LCBlcnJvciBdICk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIFN0YXR1cy1kZXBlbmRlbnQgY2FsbGJhY2tzXHJcblx0XHRcdGpxWEhSLnN0YXR1c0NvZGUoIHN0YXR1c0NvZGUgKTtcclxuXHRcdFx0c3RhdHVzQ29kZSA9IHVuZGVmaW5lZDtcclxuXHJcblx0XHRcdGlmICggZmlyZUdsb2JhbHMgKSB7XHJcblx0XHRcdFx0Z2xvYmFsRXZlbnRDb250ZXh0LnRyaWdnZXIoIGlzU3VjY2VzcyA/IFwiYWpheFN1Y2Nlc3NcIiA6IFwiYWpheEVycm9yXCIsXHJcblx0XHRcdFx0XHRbIGpxWEhSLCBzLCBpc1N1Y2Nlc3MgPyBzdWNjZXNzIDogZXJyb3IgXSApO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBDb21wbGV0ZVxyXG5cdFx0XHRjb21wbGV0ZURlZmVycmVkLmZpcmVXaXRoKCBjYWxsYmFja0NvbnRleHQsIFsganFYSFIsIHN0YXR1c1RleHQgXSApO1xyXG5cclxuXHRcdFx0aWYgKCBmaXJlR2xvYmFscyApIHtcclxuXHRcdFx0XHRnbG9iYWxFdmVudENvbnRleHQudHJpZ2dlciggXCJhamF4Q29tcGxldGVcIiwgWyBqcVhIUiwgcyBdICk7XHJcblx0XHRcdFx0Ly8gSGFuZGxlIHRoZSBnbG9iYWwgQUpBWCBjb3VudGVyXHJcblx0XHRcdFx0aWYgKCAhKCAtLWpRdWVyeS5hY3RpdmUgKSApIHtcclxuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKFwiYWpheFN0b3BcIik7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIGpxWEhSO1xyXG5cdH0sXHJcblxyXG5cdGdldEpTT046IGZ1bmN0aW9uKCB1cmwsIGRhdGEsIGNhbGxiYWNrICkge1xyXG5cdFx0cmV0dXJuIGpRdWVyeS5nZXQoIHVybCwgZGF0YSwgY2FsbGJhY2ssIFwianNvblwiICk7XHJcblx0fSxcclxuXHJcblx0Z2V0U2NyaXB0OiBmdW5jdGlvbiggdXJsLCBjYWxsYmFjayApIHtcclxuXHRcdHJldHVybiBqUXVlcnkuZ2V0KCB1cmwsIHVuZGVmaW5lZCwgY2FsbGJhY2ssIFwic2NyaXB0XCIgKTtcclxuXHR9XHJcbn0pO1xyXG5cclxualF1ZXJ5LmVhY2goIFsgXCJnZXRcIiwgXCJwb3N0XCIgXSwgZnVuY3Rpb24oIGksIG1ldGhvZCApIHtcclxuXHRqUXVlcnlbIG1ldGhvZCBdID0gZnVuY3Rpb24oIHVybCwgZGF0YSwgY2FsbGJhY2ssIHR5cGUgKSB7XHJcblx0XHQvLyBTaGlmdCBhcmd1bWVudHMgaWYgZGF0YSBhcmd1bWVudCB3YXMgb21pdHRlZFxyXG5cdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggZGF0YSApICkge1xyXG5cdFx0XHR0eXBlID0gdHlwZSB8fCBjYWxsYmFjaztcclxuXHRcdFx0Y2FsbGJhY2sgPSBkYXRhO1xyXG5cdFx0XHRkYXRhID0gdW5kZWZpbmVkO1xyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiBqUXVlcnkuYWpheCh7XHJcblx0XHRcdHVybDogdXJsLFxyXG5cdFx0XHR0eXBlOiBtZXRob2QsXHJcblx0XHRcdGRhdGFUeXBlOiB0eXBlLFxyXG5cdFx0XHRkYXRhOiBkYXRhLFxyXG5cdFx0XHRzdWNjZXNzOiBjYWxsYmFja1xyXG5cdFx0fSk7XHJcblx0fTtcclxufSk7XHJcblxyXG5cclxualF1ZXJ5Ll9ldmFsVXJsID0gZnVuY3Rpb24oIHVybCApIHtcclxuXHRyZXR1cm4galF1ZXJ5LmFqYXgoe1xyXG5cdFx0dXJsOiB1cmwsXHJcblx0XHR0eXBlOiBcIkdFVFwiLFxyXG5cdFx0ZGF0YVR5cGU6IFwic2NyaXB0XCIsXHJcblx0XHRhc3luYzogZmFsc2UsXHJcblx0XHRnbG9iYWw6IGZhbHNlLFxyXG5cdFx0XCJ0aHJvd3NcIjogdHJ1ZVxyXG5cdH0pO1xyXG59O1xyXG5cclxuXHJcbmpRdWVyeS5mbi5leHRlbmQoe1xyXG5cdHdyYXBBbGw6IGZ1bmN0aW9uKCBodG1sICkge1xyXG5cdFx0dmFyIHdyYXA7XHJcblxyXG5cdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggaHRtbCApICkge1xyXG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCBpICkge1xyXG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLndyYXBBbGwoIGh0bWwuY2FsbCh0aGlzLCBpKSApO1xyXG5cdFx0XHR9KTtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAoIHRoaXNbIDAgXSApIHtcclxuXHJcblx0XHRcdC8vIFRoZSBlbGVtZW50cyB0byB3cmFwIHRoZSB0YXJnZXQgYXJvdW5kXHJcblx0XHRcdHdyYXAgPSBqUXVlcnkoIGh0bWwsIHRoaXNbIDAgXS5vd25lckRvY3VtZW50ICkuZXEoIDAgKS5jbG9uZSggdHJ1ZSApO1xyXG5cclxuXHRcdFx0aWYgKCB0aGlzWyAwIF0ucGFyZW50Tm9kZSApIHtcclxuXHRcdFx0XHR3cmFwLmluc2VydEJlZm9yZSggdGhpc1sgMCBdICk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHdyYXAubWFwKGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdHZhciBlbGVtID0gdGhpcztcclxuXHJcblx0XHRcdFx0d2hpbGUgKCBlbGVtLmZpcnN0RWxlbWVudENoaWxkICkge1xyXG5cdFx0XHRcdFx0ZWxlbSA9IGVsZW0uZmlyc3RFbGVtZW50Q2hpbGQ7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRyZXR1cm4gZWxlbTtcclxuXHRcdFx0fSkuYXBwZW5kKCB0aGlzICk7XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblx0fSxcclxuXHJcblx0d3JhcElubmVyOiBmdW5jdGlvbiggaHRtbCApIHtcclxuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIGh0bWwgKSApIHtcclxuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiggaSApIHtcclxuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS53cmFwSW5uZXIoIGh0bWwuY2FsbCh0aGlzLCBpKSApO1xyXG5cdFx0XHR9KTtcclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCkge1xyXG5cdFx0XHR2YXIgc2VsZiA9IGpRdWVyeSggdGhpcyApLFxyXG5cdFx0XHRcdGNvbnRlbnRzID0gc2VsZi5jb250ZW50cygpO1xyXG5cclxuXHRcdFx0aWYgKCBjb250ZW50cy5sZW5ndGggKSB7XHJcblx0XHRcdFx0Y29udGVudHMud3JhcEFsbCggaHRtbCApO1xyXG5cclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRzZWxmLmFwcGVuZCggaHRtbCApO1xyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHR9LFxyXG5cclxuXHR3cmFwOiBmdW5jdGlvbiggaHRtbCApIHtcclxuXHRcdHZhciBpc0Z1bmN0aW9uID0galF1ZXJ5LmlzRnVuY3Rpb24oIGh0bWwgKTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCBpICkge1xyXG5cdFx0XHRqUXVlcnkoIHRoaXMgKS53cmFwQWxsKCBpc0Z1bmN0aW9uID8gaHRtbC5jYWxsKHRoaXMsIGkpIDogaHRtbCApO1xyXG5cdFx0fSk7XHJcblx0fSxcclxuXHJcblx0dW53cmFwOiBmdW5jdGlvbigpIHtcclxuXHRcdHJldHVybiB0aGlzLnBhcmVudCgpLmVhY2goZnVuY3Rpb24oKSB7XHJcblx0XHRcdGlmICggIWpRdWVyeS5ub2RlTmFtZSggdGhpcywgXCJib2R5XCIgKSApIHtcclxuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5yZXBsYWNlV2l0aCggdGhpcy5jaGlsZE5vZGVzICk7XHJcblx0XHRcdH1cclxuXHRcdH0pLmVuZCgpO1xyXG5cdH1cclxufSk7XHJcblxyXG5cclxualF1ZXJ5LmV4cHIuZmlsdGVycy5oaWRkZW4gPSBmdW5jdGlvbiggZWxlbSApIHtcclxuXHQvLyBTdXBwb3J0OiBPcGVyYSA8PSAxMi4xMlxyXG5cdC8vIE9wZXJhIHJlcG9ydHMgb2Zmc2V0V2lkdGhzIGFuZCBvZmZzZXRIZWlnaHRzIGxlc3MgdGhhbiB6ZXJvIG9uIHNvbWUgZWxlbWVudHNcclxuXHRyZXR1cm4gZWxlbS5vZmZzZXRXaWR0aCA8PSAwICYmIGVsZW0ub2Zmc2V0SGVpZ2h0IDw9IDA7XHJcbn07XHJcbmpRdWVyeS5leHByLmZpbHRlcnMudmlzaWJsZSA9IGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdHJldHVybiAhalF1ZXJ5LmV4cHIuZmlsdGVycy5oaWRkZW4oIGVsZW0gKTtcclxufTtcclxuXHJcblxyXG5cclxuXHJcbnZhciByMjAgPSAvJTIwL2csXHJcblx0cmJyYWNrZXQgPSAvXFxbXFxdJC8sXHJcblx0ckNSTEYgPSAvXFxyP1xcbi9nLFxyXG5cdHJzdWJtaXR0ZXJUeXBlcyA9IC9eKD86c3VibWl0fGJ1dHRvbnxpbWFnZXxyZXNldHxmaWxlKSQvaSxcclxuXHRyc3VibWl0dGFibGUgPSAvXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxrZXlnZW4pL2k7XHJcblxyXG5mdW5jdGlvbiBidWlsZFBhcmFtcyggcHJlZml4LCBvYmosIHRyYWRpdGlvbmFsLCBhZGQgKSB7XHJcblx0dmFyIG5hbWU7XHJcblxyXG5cdGlmICggalF1ZXJ5LmlzQXJyYXkoIG9iaiApICkge1xyXG5cdFx0Ly8gU2VyaWFsaXplIGFycmF5IGl0ZW0uXHJcblx0XHRqUXVlcnkuZWFjaCggb2JqLCBmdW5jdGlvbiggaSwgdiApIHtcclxuXHRcdFx0aWYgKCB0cmFkaXRpb25hbCB8fCByYnJhY2tldC50ZXN0KCBwcmVmaXggKSApIHtcclxuXHRcdFx0XHQvLyBUcmVhdCBlYWNoIGFycmF5IGl0ZW0gYXMgYSBzY2FsYXIuXHJcblx0XHRcdFx0YWRkKCBwcmVmaXgsIHYgKTtcclxuXHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0Ly8gSXRlbSBpcyBub24tc2NhbGFyIChhcnJheSBvciBvYmplY3QpLCBlbmNvZGUgaXRzIG51bWVyaWMgaW5kZXguXHJcblx0XHRcdFx0YnVpbGRQYXJhbXMoIHByZWZpeCArIFwiW1wiICsgKCB0eXBlb2YgdiA9PT0gXCJvYmplY3RcIiA/IGkgOiBcIlwiICkgKyBcIl1cIiwgdiwgdHJhZGl0aW9uYWwsIGFkZCApO1xyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHJcblx0fSBlbHNlIGlmICggIXRyYWRpdGlvbmFsICYmIGpRdWVyeS50eXBlKCBvYmogKSA9PT0gXCJvYmplY3RcIiApIHtcclxuXHRcdC8vIFNlcmlhbGl6ZSBvYmplY3QgaXRlbS5cclxuXHRcdGZvciAoIG5hbWUgaW4gb2JqICkge1xyXG5cdFx0XHRidWlsZFBhcmFtcyggcHJlZml4ICsgXCJbXCIgKyBuYW1lICsgXCJdXCIsIG9ialsgbmFtZSBdLCB0cmFkaXRpb25hbCwgYWRkICk7XHJcblx0XHR9XHJcblxyXG5cdH0gZWxzZSB7XHJcblx0XHQvLyBTZXJpYWxpemUgc2NhbGFyIGl0ZW0uXHJcblx0XHRhZGQoIHByZWZpeCwgb2JqICk7XHJcblx0fVxyXG59XHJcblxyXG4vLyBTZXJpYWxpemUgYW4gYXJyYXkgb2YgZm9ybSBlbGVtZW50cyBvciBhIHNldCBvZlxyXG4vLyBrZXkvdmFsdWVzIGludG8gYSBxdWVyeSBzdHJpbmdcclxualF1ZXJ5LnBhcmFtID0gZnVuY3Rpb24oIGEsIHRyYWRpdGlvbmFsICkge1xyXG5cdHZhciBwcmVmaXgsXHJcblx0XHRzID0gW10sXHJcblx0XHRhZGQgPSBmdW5jdGlvbigga2V5LCB2YWx1ZSApIHtcclxuXHRcdFx0Ly8gSWYgdmFsdWUgaXMgYSBmdW5jdGlvbiwgaW52b2tlIGl0IGFuZCByZXR1cm4gaXRzIHZhbHVlXHJcblx0XHRcdHZhbHVlID0galF1ZXJ5LmlzRnVuY3Rpb24oIHZhbHVlICkgPyB2YWx1ZSgpIDogKCB2YWx1ZSA9PSBudWxsID8gXCJcIiA6IHZhbHVlICk7XHJcblx0XHRcdHNbIHMubGVuZ3RoIF0gPSBlbmNvZGVVUklDb21wb25lbnQoIGtleSApICsgXCI9XCIgKyBlbmNvZGVVUklDb21wb25lbnQoIHZhbHVlICk7XHJcblx0XHR9O1xyXG5cclxuXHQvLyBTZXQgdHJhZGl0aW9uYWwgdG8gdHJ1ZSBmb3IgalF1ZXJ5IDw9IDEuMy4yIGJlaGF2aW9yLlxyXG5cdGlmICggdHJhZGl0aW9uYWwgPT09IHVuZGVmaW5lZCApIHtcclxuXHRcdHRyYWRpdGlvbmFsID0galF1ZXJ5LmFqYXhTZXR0aW5ncyAmJiBqUXVlcnkuYWpheFNldHRpbmdzLnRyYWRpdGlvbmFsO1xyXG5cdH1cclxuXHJcblx0Ly8gSWYgYW4gYXJyYXkgd2FzIHBhc3NlZCBpbiwgYXNzdW1lIHRoYXQgaXQgaXMgYW4gYXJyYXkgb2YgZm9ybSBlbGVtZW50cy5cclxuXHRpZiAoIGpRdWVyeS5pc0FycmF5KCBhICkgfHwgKCBhLmpxdWVyeSAmJiAhalF1ZXJ5LmlzUGxhaW5PYmplY3QoIGEgKSApICkge1xyXG5cdFx0Ly8gU2VyaWFsaXplIHRoZSBmb3JtIGVsZW1lbnRzXHJcblx0XHRqUXVlcnkuZWFjaCggYSwgZnVuY3Rpb24oKSB7XHJcblx0XHRcdGFkZCggdGhpcy5uYW1lLCB0aGlzLnZhbHVlICk7XHJcblx0XHR9KTtcclxuXHJcblx0fSBlbHNlIHtcclxuXHRcdC8vIElmIHRyYWRpdGlvbmFsLCBlbmNvZGUgdGhlIFwib2xkXCIgd2F5ICh0aGUgd2F5IDEuMy4yIG9yIG9sZGVyXHJcblx0XHQvLyBkaWQgaXQpLCBvdGhlcndpc2UgZW5jb2RlIHBhcmFtcyByZWN1cnNpdmVseS5cclxuXHRcdGZvciAoIHByZWZpeCBpbiBhICkge1xyXG5cdFx0XHRidWlsZFBhcmFtcyggcHJlZml4LCBhWyBwcmVmaXggXSwgdHJhZGl0aW9uYWwsIGFkZCApO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0Ly8gUmV0dXJuIHRoZSByZXN1bHRpbmcgc2VyaWFsaXphdGlvblxyXG5cdHJldHVybiBzLmpvaW4oIFwiJlwiICkucmVwbGFjZSggcjIwLCBcIitcIiApO1xyXG59O1xyXG5cclxualF1ZXJ5LmZuLmV4dGVuZCh7XHJcblx0c2VyaWFsaXplOiBmdW5jdGlvbigpIHtcclxuXHRcdHJldHVybiBqUXVlcnkucGFyYW0oIHRoaXMuc2VyaWFsaXplQXJyYXkoKSApO1xyXG5cdH0sXHJcblx0c2VyaWFsaXplQXJyYXk6IGZ1bmN0aW9uKCkge1xyXG5cdFx0cmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uKCkge1xyXG5cdFx0XHQvLyBDYW4gYWRkIHByb3BIb29rIGZvciBcImVsZW1lbnRzXCIgdG8gZmlsdGVyIG9yIGFkZCBmb3JtIGVsZW1lbnRzXHJcblx0XHRcdHZhciBlbGVtZW50cyA9IGpRdWVyeS5wcm9wKCB0aGlzLCBcImVsZW1lbnRzXCIgKTtcclxuXHRcdFx0cmV0dXJuIGVsZW1lbnRzID8galF1ZXJ5Lm1ha2VBcnJheSggZWxlbWVudHMgKSA6IHRoaXM7XHJcblx0XHR9KVxyXG5cdFx0LmZpbHRlcihmdW5jdGlvbigpIHtcclxuXHRcdFx0dmFyIHR5cGUgPSB0aGlzLnR5cGU7XHJcblxyXG5cdFx0XHQvLyBVc2UgLmlzKCBcIjpkaXNhYmxlZFwiICkgc28gdGhhdCBmaWVsZHNldFtkaXNhYmxlZF0gd29ya3NcclxuXHRcdFx0cmV0dXJuIHRoaXMubmFtZSAmJiAhalF1ZXJ5KCB0aGlzICkuaXMoIFwiOmRpc2FibGVkXCIgKSAmJlxyXG5cdFx0XHRcdHJzdWJtaXR0YWJsZS50ZXN0KCB0aGlzLm5vZGVOYW1lICkgJiYgIXJzdWJtaXR0ZXJUeXBlcy50ZXN0KCB0eXBlICkgJiZcclxuXHRcdFx0XHQoIHRoaXMuY2hlY2tlZCB8fCAhcmNoZWNrYWJsZVR5cGUudGVzdCggdHlwZSApICk7XHJcblx0XHR9KVxyXG5cdFx0Lm1hcChmdW5jdGlvbiggaSwgZWxlbSApIHtcclxuXHRcdFx0dmFyIHZhbCA9IGpRdWVyeSggdGhpcyApLnZhbCgpO1xyXG5cclxuXHRcdFx0cmV0dXJuIHZhbCA9PSBudWxsID9cclxuXHRcdFx0XHRudWxsIDpcclxuXHRcdFx0XHRqUXVlcnkuaXNBcnJheSggdmFsICkgP1xyXG5cdFx0XHRcdFx0alF1ZXJ5Lm1hcCggdmFsLCBmdW5jdGlvbiggdmFsICkge1xyXG5cdFx0XHRcdFx0XHRyZXR1cm4geyBuYW1lOiBlbGVtLm5hbWUsIHZhbHVlOiB2YWwucmVwbGFjZSggckNSTEYsIFwiXFxyXFxuXCIgKSB9O1xyXG5cdFx0XHRcdFx0fSkgOlxyXG5cdFx0XHRcdFx0eyBuYW1lOiBlbGVtLm5hbWUsIHZhbHVlOiB2YWwucmVwbGFjZSggckNSTEYsIFwiXFxyXFxuXCIgKSB9O1xyXG5cdFx0fSkuZ2V0KCk7XHJcblx0fVxyXG59KTtcclxuXHJcblxyXG5qUXVlcnkuYWpheFNldHRpbmdzLnhociA9IGZ1bmN0aW9uKCkge1xyXG5cdHRyeSB7XHJcblx0XHRyZXR1cm4gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XHJcblx0fSBjYXRjaCggZSApIHt9XHJcbn07XHJcblxyXG52YXIgeGhySWQgPSAwLFxyXG5cdHhockNhbGxiYWNrcyA9IHt9LFxyXG5cdHhoclN1Y2Nlc3NTdGF0dXMgPSB7XHJcblx0XHQvLyBmaWxlIHByb3RvY29sIGFsd2F5cyB5aWVsZHMgc3RhdHVzIGNvZGUgMCwgYXNzdW1lIDIwMFxyXG5cdFx0MDogMjAwLFxyXG5cdFx0Ly8gU3VwcG9ydDogSUU5XHJcblx0XHQvLyAjMTQ1MDogc29tZXRpbWVzIElFIHJldHVybnMgMTIyMyB3aGVuIGl0IHNob3VsZCBiZSAyMDRcclxuXHRcdDEyMjM6IDIwNFxyXG5cdH0sXHJcblx0eGhyU3VwcG9ydGVkID0galF1ZXJ5LmFqYXhTZXR0aW5ncy54aHIoKTtcclxuXHJcbi8vIFN1cHBvcnQ6IElFOVxyXG4vLyBPcGVuIHJlcXVlc3RzIG11c3QgYmUgbWFudWFsbHkgYWJvcnRlZCBvbiB1bmxvYWQgKCM1MjgwKVxyXG4vLyBTZWUgaHR0cHM6Ly9zdXBwb3J0Lm1pY3Jvc29mdC5jb20va2IvMjg1Njc0NiBmb3IgbW9yZSBpbmZvXHJcbmlmICggd2luZG93LmF0dGFjaEV2ZW50ICkge1xyXG5cdHdpbmRvdy5hdHRhY2hFdmVudCggXCJvbnVubG9hZFwiLCBmdW5jdGlvbigpIHtcclxuXHRcdGZvciAoIHZhciBrZXkgaW4geGhyQ2FsbGJhY2tzICkge1xyXG5cdFx0XHR4aHJDYWxsYmFja3NbIGtleSBdKCk7XHJcblx0XHR9XHJcblx0fSk7XHJcbn1cclxuXHJcbnN1cHBvcnQuY29ycyA9ICEheGhyU3VwcG9ydGVkICYmICggXCJ3aXRoQ3JlZGVudGlhbHNcIiBpbiB4aHJTdXBwb3J0ZWQgKTtcclxuc3VwcG9ydC5hamF4ID0geGhyU3VwcG9ydGVkID0gISF4aHJTdXBwb3J0ZWQ7XHJcblxyXG5qUXVlcnkuYWpheFRyYW5zcG9ydChmdW5jdGlvbiggb3B0aW9ucyApIHtcclxuXHR2YXIgY2FsbGJhY2s7XHJcblxyXG5cdC8vIENyb3NzIGRvbWFpbiBvbmx5IGFsbG93ZWQgaWYgc3VwcG9ydGVkIHRocm91Z2ggWE1MSHR0cFJlcXVlc3RcclxuXHRpZiAoIHN1cHBvcnQuY29ycyB8fCB4aHJTdXBwb3J0ZWQgJiYgIW9wdGlvbnMuY3Jvc3NEb21haW4gKSB7XHJcblx0XHRyZXR1cm4ge1xyXG5cdFx0XHRzZW5kOiBmdW5jdGlvbiggaGVhZGVycywgY29tcGxldGUgKSB7XHJcblx0XHRcdFx0dmFyIGksXHJcblx0XHRcdFx0XHR4aHIgPSBvcHRpb25zLnhocigpLFxyXG5cdFx0XHRcdFx0aWQgPSArK3hocklkO1xyXG5cclxuXHRcdFx0XHR4aHIub3Blbiggb3B0aW9ucy50eXBlLCBvcHRpb25zLnVybCwgb3B0aW9ucy5hc3luYywgb3B0aW9ucy51c2VybmFtZSwgb3B0aW9ucy5wYXNzd29yZCApO1xyXG5cclxuXHRcdFx0XHQvLyBBcHBseSBjdXN0b20gZmllbGRzIGlmIHByb3ZpZGVkXHJcblx0XHRcdFx0aWYgKCBvcHRpb25zLnhockZpZWxkcyApIHtcclxuXHRcdFx0XHRcdGZvciAoIGkgaW4gb3B0aW9ucy54aHJGaWVsZHMgKSB7XHJcblx0XHRcdFx0XHRcdHhoclsgaSBdID0gb3B0aW9ucy54aHJGaWVsZHNbIGkgXTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdC8vIE92ZXJyaWRlIG1pbWUgdHlwZSBpZiBuZWVkZWRcclxuXHRcdFx0XHRpZiAoIG9wdGlvbnMubWltZVR5cGUgJiYgeGhyLm92ZXJyaWRlTWltZVR5cGUgKSB7XHJcblx0XHRcdFx0XHR4aHIub3ZlcnJpZGVNaW1lVHlwZSggb3B0aW9ucy5taW1lVHlwZSApO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0Ly8gWC1SZXF1ZXN0ZWQtV2l0aCBoZWFkZXJcclxuXHRcdFx0XHQvLyBGb3IgY3Jvc3MtZG9tYWluIHJlcXVlc3RzLCBzZWVpbmcgYXMgY29uZGl0aW9ucyBmb3IgYSBwcmVmbGlnaHQgYXJlXHJcblx0XHRcdFx0Ly8gYWtpbiB0byBhIGppZ3NhdyBwdXp6bGUsIHdlIHNpbXBseSBuZXZlciBzZXQgaXQgdG8gYmUgc3VyZS5cclxuXHRcdFx0XHQvLyAoaXQgY2FuIGFsd2F5cyBiZSBzZXQgb24gYSBwZXItcmVxdWVzdCBiYXNpcyBvciBldmVuIHVzaW5nIGFqYXhTZXR1cClcclxuXHRcdFx0XHQvLyBGb3Igc2FtZS1kb21haW4gcmVxdWVzdHMsIHdvbid0IGNoYW5nZSBoZWFkZXIgaWYgYWxyZWFkeSBwcm92aWRlZC5cclxuXHRcdFx0XHRpZiAoICFvcHRpb25zLmNyb3NzRG9tYWluICYmICFoZWFkZXJzW1wiWC1SZXF1ZXN0ZWQtV2l0aFwiXSApIHtcclxuXHRcdFx0XHRcdGhlYWRlcnNbXCJYLVJlcXVlc3RlZC1XaXRoXCJdID0gXCJYTUxIdHRwUmVxdWVzdFwiO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0Ly8gU2V0IGhlYWRlcnNcclxuXHRcdFx0XHRmb3IgKCBpIGluIGhlYWRlcnMgKSB7XHJcblx0XHRcdFx0XHR4aHIuc2V0UmVxdWVzdEhlYWRlciggaSwgaGVhZGVyc1sgaSBdICk7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHQvLyBDYWxsYmFja1xyXG5cdFx0XHRcdGNhbGxiYWNrID0gZnVuY3Rpb24oIHR5cGUgKSB7XHJcblx0XHRcdFx0XHRyZXR1cm4gZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XHJcblx0XHRcdFx0XHRcdFx0ZGVsZXRlIHhockNhbGxiYWNrc1sgaWQgXTtcclxuXHRcdFx0XHRcdFx0XHRjYWxsYmFjayA9IHhoci5vbmxvYWQgPSB4aHIub25lcnJvciA9IG51bGw7XHJcblxyXG5cdFx0XHRcdFx0XHRcdGlmICggdHlwZSA9PT0gXCJhYm9ydFwiICkge1xyXG5cdFx0XHRcdFx0XHRcdFx0eGhyLmFib3J0KCk7XHJcblx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICggdHlwZSA9PT0gXCJlcnJvclwiICkge1xyXG5cdFx0XHRcdFx0XHRcdFx0Y29tcGxldGUoXHJcblx0XHRcdFx0XHRcdFx0XHRcdC8vIGZpbGU6IHByb3RvY29sIGFsd2F5cyB5aWVsZHMgc3RhdHVzIDA7IHNlZSAjODYwNSwgIzE0MjA3XHJcblx0XHRcdFx0XHRcdFx0XHRcdHhoci5zdGF0dXMsXHJcblx0XHRcdFx0XHRcdFx0XHRcdHhoci5zdGF0dXNUZXh0XHJcblx0XHRcdFx0XHRcdFx0XHQpO1xyXG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdFx0XHRjb21wbGV0ZShcclxuXHRcdFx0XHRcdFx0XHRcdFx0eGhyU3VjY2Vzc1N0YXR1c1sgeGhyLnN0YXR1cyBdIHx8IHhoci5zdGF0dXMsXHJcblx0XHRcdFx0XHRcdFx0XHRcdHhoci5zdGF0dXNUZXh0LFxyXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRTlcclxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gQWNjZXNzaW5nIGJpbmFyeS1kYXRhIHJlc3BvbnNlVGV4dCB0aHJvd3MgYW4gZXhjZXB0aW9uXHJcblx0XHRcdFx0XHRcdFx0XHRcdC8vICgjMTE0MjYpXHJcblx0XHRcdFx0XHRcdFx0XHRcdHR5cGVvZiB4aHIucmVzcG9uc2VUZXh0ID09PSBcInN0cmluZ1wiID8ge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHRleHQ6IHhoci5yZXNwb25zZVRleHRcclxuXHRcdFx0XHRcdFx0XHRcdFx0fSA6IHVuZGVmaW5lZCxcclxuXHRcdFx0XHRcdFx0XHRcdFx0eGhyLmdldEFsbFJlc3BvbnNlSGVhZGVycygpXHJcblx0XHRcdFx0XHRcdFx0XHQpO1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fTtcclxuXHRcdFx0XHR9O1xyXG5cclxuXHRcdFx0XHQvLyBMaXN0ZW4gdG8gZXZlbnRzXHJcblx0XHRcdFx0eGhyLm9ubG9hZCA9IGNhbGxiYWNrKCk7XHJcblx0XHRcdFx0eGhyLm9uZXJyb3IgPSBjYWxsYmFjayhcImVycm9yXCIpO1xyXG5cclxuXHRcdFx0XHQvLyBDcmVhdGUgdGhlIGFib3J0IGNhbGxiYWNrXHJcblx0XHRcdFx0Y2FsbGJhY2sgPSB4aHJDYWxsYmFja3NbIGlkIF0gPSBjYWxsYmFjayhcImFib3J0XCIpO1xyXG5cclxuXHRcdFx0XHR0cnkge1xyXG5cdFx0XHRcdFx0Ly8gRG8gc2VuZCB0aGUgcmVxdWVzdCAodGhpcyBtYXkgcmFpc2UgYW4gZXhjZXB0aW9uKVxyXG5cdFx0XHRcdFx0eGhyLnNlbmQoIG9wdGlvbnMuaGFzQ29udGVudCAmJiBvcHRpb25zLmRhdGEgfHwgbnVsbCApO1xyXG5cdFx0XHRcdH0gY2F0Y2ggKCBlICkge1xyXG5cdFx0XHRcdFx0Ly8gIzE0NjgzOiBPbmx5IHJldGhyb3cgaWYgdGhpcyBoYXNuJ3QgYmVlbiBub3RpZmllZCBhcyBhbiBlcnJvciB5ZXRcclxuXHRcdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XHJcblx0XHRcdFx0XHRcdHRocm93IGU7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9LFxyXG5cclxuXHRcdFx0YWJvcnQ6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XHJcblx0XHRcdFx0XHRjYWxsYmFjaygpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fTtcclxuXHR9XHJcbn0pO1xyXG5cclxuXHJcblxyXG5cclxuLy8gSW5zdGFsbCBzY3JpcHQgZGF0YVR5cGVcclxualF1ZXJ5LmFqYXhTZXR1cCh7XHJcblx0YWNjZXB0czoge1xyXG5cdFx0c2NyaXB0OiBcInRleHQvamF2YXNjcmlwdCwgYXBwbGljYXRpb24vamF2YXNjcmlwdCwgYXBwbGljYXRpb24vZWNtYXNjcmlwdCwgYXBwbGljYXRpb24veC1lY21hc2NyaXB0XCJcclxuXHR9LFxyXG5cdGNvbnRlbnRzOiB7XHJcblx0XHRzY3JpcHQ6IC8oPzpqYXZhfGVjbWEpc2NyaXB0L1xyXG5cdH0sXHJcblx0Y29udmVydGVyczoge1xyXG5cdFx0XCJ0ZXh0IHNjcmlwdFwiOiBmdW5jdGlvbiggdGV4dCApIHtcclxuXHRcdFx0alF1ZXJ5Lmdsb2JhbEV2YWwoIHRleHQgKTtcclxuXHRcdFx0cmV0dXJuIHRleHQ7XHJcblx0XHR9XHJcblx0fVxyXG59KTtcclxuXHJcbi8vIEhhbmRsZSBjYWNoZSdzIHNwZWNpYWwgY2FzZSBhbmQgY3Jvc3NEb21haW5cclxualF1ZXJ5LmFqYXhQcmVmaWx0ZXIoIFwic2NyaXB0XCIsIGZ1bmN0aW9uKCBzICkge1xyXG5cdGlmICggcy5jYWNoZSA9PT0gdW5kZWZpbmVkICkge1xyXG5cdFx0cy5jYWNoZSA9IGZhbHNlO1xyXG5cdH1cclxuXHRpZiAoIHMuY3Jvc3NEb21haW4gKSB7XHJcblx0XHRzLnR5cGUgPSBcIkdFVFwiO1xyXG5cdH1cclxufSk7XHJcblxyXG4vLyBCaW5kIHNjcmlwdCB0YWcgaGFjayB0cmFuc3BvcnRcclxualF1ZXJ5LmFqYXhUcmFuc3BvcnQoIFwic2NyaXB0XCIsIGZ1bmN0aW9uKCBzICkge1xyXG5cdC8vIFRoaXMgdHJhbnNwb3J0IG9ubHkgZGVhbHMgd2l0aCBjcm9zcyBkb21haW4gcmVxdWVzdHNcclxuXHRpZiAoIHMuY3Jvc3NEb21haW4gKSB7XHJcblx0XHR2YXIgc2NyaXB0LCBjYWxsYmFjaztcclxuXHRcdHJldHVybiB7XHJcblx0XHRcdHNlbmQ6IGZ1bmN0aW9uKCBfLCBjb21wbGV0ZSApIHtcclxuXHRcdFx0XHRzY3JpcHQgPSBqUXVlcnkoXCI8c2NyaXB0PlwiKS5wcm9wKHtcclxuXHRcdFx0XHRcdGFzeW5jOiB0cnVlLFxyXG5cdFx0XHRcdFx0Y2hhcnNldDogcy5zY3JpcHRDaGFyc2V0LFxyXG5cdFx0XHRcdFx0c3JjOiBzLnVybFxyXG5cdFx0XHRcdH0pLm9uKFxyXG5cdFx0XHRcdFx0XCJsb2FkIGVycm9yXCIsXHJcblx0XHRcdFx0XHRjYWxsYmFjayA9IGZ1bmN0aW9uKCBldnQgKSB7XHJcblx0XHRcdFx0XHRcdHNjcmlwdC5yZW1vdmUoKTtcclxuXHRcdFx0XHRcdFx0Y2FsbGJhY2sgPSBudWxsO1xyXG5cdFx0XHRcdFx0XHRpZiAoIGV2dCApIHtcclxuXHRcdFx0XHRcdFx0XHRjb21wbGV0ZSggZXZ0LnR5cGUgPT09IFwiZXJyb3JcIiA/IDQwNCA6IDIwMCwgZXZ0LnR5cGUgKTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdCk7XHJcblx0XHRcdFx0ZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZCggc2NyaXB0WyAwIF0gKTtcclxuXHRcdFx0fSxcclxuXHRcdFx0YWJvcnQ6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XHJcblx0XHRcdFx0XHRjYWxsYmFjaygpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fTtcclxuXHR9XHJcbn0pO1xyXG5cclxuXHJcblxyXG5cclxudmFyIG9sZENhbGxiYWNrcyA9IFtdLFxyXG5cdHJqc29ucCA9IC8oPSlcXD8oPz0mfCQpfFxcP1xcPy87XHJcblxyXG4vLyBEZWZhdWx0IGpzb25wIHNldHRpbmdzXHJcbmpRdWVyeS5hamF4U2V0dXAoe1xyXG5cdGpzb25wOiBcImNhbGxiYWNrXCIsXHJcblx0anNvbnBDYWxsYmFjazogZnVuY3Rpb24oKSB7XHJcblx0XHR2YXIgY2FsbGJhY2sgPSBvbGRDYWxsYmFja3MucG9wKCkgfHwgKCBqUXVlcnkuZXhwYW5kbyArIFwiX1wiICsgKCBub25jZSsrICkgKTtcclxuXHRcdHRoaXNbIGNhbGxiYWNrIF0gPSB0cnVlO1xyXG5cdFx0cmV0dXJuIGNhbGxiYWNrO1xyXG5cdH1cclxufSk7XHJcblxyXG4vLyBEZXRlY3QsIG5vcm1hbGl6ZSBvcHRpb25zIGFuZCBpbnN0YWxsIGNhbGxiYWNrcyBmb3IganNvbnAgcmVxdWVzdHNcclxualF1ZXJ5LmFqYXhQcmVmaWx0ZXIoIFwianNvbiBqc29ucFwiLCBmdW5jdGlvbiggcywgb3JpZ2luYWxTZXR0aW5ncywganFYSFIgKSB7XHJcblxyXG5cdHZhciBjYWxsYmFja05hbWUsIG92ZXJ3cml0dGVuLCByZXNwb25zZUNvbnRhaW5lcixcclxuXHRcdGpzb25Qcm9wID0gcy5qc29ucCAhPT0gZmFsc2UgJiYgKCByanNvbnAudGVzdCggcy51cmwgKSA/XHJcblx0XHRcdFwidXJsXCIgOlxyXG5cdFx0XHR0eXBlb2Ygcy5kYXRhID09PSBcInN0cmluZ1wiICYmICEoIHMuY29udGVudFR5cGUgfHwgXCJcIiApLmluZGV4T2YoXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIikgJiYgcmpzb25wLnRlc3QoIHMuZGF0YSApICYmIFwiZGF0YVwiXHJcblx0XHQpO1xyXG5cclxuXHQvLyBIYW5kbGUgaWZmIHRoZSBleHBlY3RlZCBkYXRhIHR5cGUgaXMgXCJqc29ucFwiIG9yIHdlIGhhdmUgYSBwYXJhbWV0ZXIgdG8gc2V0XHJcblx0aWYgKCBqc29uUHJvcCB8fCBzLmRhdGFUeXBlc1sgMCBdID09PSBcImpzb25wXCIgKSB7XHJcblxyXG5cdFx0Ly8gR2V0IGNhbGxiYWNrIG5hbWUsIHJlbWVtYmVyaW5nIHByZWV4aXN0aW5nIHZhbHVlIGFzc29jaWF0ZWQgd2l0aCBpdFxyXG5cdFx0Y2FsbGJhY2tOYW1lID0gcy5qc29ucENhbGxiYWNrID0galF1ZXJ5LmlzRnVuY3Rpb24oIHMuanNvbnBDYWxsYmFjayApID9cclxuXHRcdFx0cy5qc29ucENhbGxiYWNrKCkgOlxyXG5cdFx0XHRzLmpzb25wQ2FsbGJhY2s7XHJcblxyXG5cdFx0Ly8gSW5zZXJ0IGNhbGxiYWNrIGludG8gdXJsIG9yIGZvcm0gZGF0YVxyXG5cdFx0aWYgKCBqc29uUHJvcCApIHtcclxuXHRcdFx0c1sganNvblByb3AgXSA9IHNbIGpzb25Qcm9wIF0ucmVwbGFjZSggcmpzb25wLCBcIiQxXCIgKyBjYWxsYmFja05hbWUgKTtcclxuXHRcdH0gZWxzZSBpZiAoIHMuanNvbnAgIT09IGZhbHNlICkge1xyXG5cdFx0XHRzLnVybCArPSAoIHJxdWVyeS50ZXN0KCBzLnVybCApID8gXCImXCIgOiBcIj9cIiApICsgcy5qc29ucCArIFwiPVwiICsgY2FsbGJhY2tOYW1lO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIFVzZSBkYXRhIGNvbnZlcnRlciB0byByZXRyaWV2ZSBqc29uIGFmdGVyIHNjcmlwdCBleGVjdXRpb25cclxuXHRcdHMuY29udmVydGVyc1tcInNjcmlwdCBqc29uXCJdID0gZnVuY3Rpb24oKSB7XHJcblx0XHRcdGlmICggIXJlc3BvbnNlQ29udGFpbmVyICkge1xyXG5cdFx0XHRcdGpRdWVyeS5lcnJvciggY2FsbGJhY2tOYW1lICsgXCIgd2FzIG5vdCBjYWxsZWRcIiApO1xyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiByZXNwb25zZUNvbnRhaW5lclsgMCBdO1xyXG5cdFx0fTtcclxuXHJcblx0XHQvLyBmb3JjZSBqc29uIGRhdGFUeXBlXHJcblx0XHRzLmRhdGFUeXBlc1sgMCBdID0gXCJqc29uXCI7XHJcblxyXG5cdFx0Ly8gSW5zdGFsbCBjYWxsYmFja1xyXG5cdFx0b3ZlcndyaXR0ZW4gPSB3aW5kb3dbIGNhbGxiYWNrTmFtZSBdO1xyXG5cdFx0d2luZG93WyBjYWxsYmFja05hbWUgXSA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRyZXNwb25zZUNvbnRhaW5lciA9IGFyZ3VtZW50cztcclxuXHRcdH07XHJcblxyXG5cdFx0Ly8gQ2xlYW4tdXAgZnVuY3Rpb24gKGZpcmVzIGFmdGVyIGNvbnZlcnRlcnMpXHJcblx0XHRqcVhIUi5hbHdheXMoZnVuY3Rpb24oKSB7XHJcblx0XHRcdC8vIFJlc3RvcmUgcHJlZXhpc3RpbmcgdmFsdWVcclxuXHRcdFx0d2luZG93WyBjYWxsYmFja05hbWUgXSA9IG92ZXJ3cml0dGVuO1xyXG5cclxuXHRcdFx0Ly8gU2F2ZSBiYWNrIGFzIGZyZWVcclxuXHRcdFx0aWYgKCBzWyBjYWxsYmFja05hbWUgXSApIHtcclxuXHRcdFx0XHQvLyBtYWtlIHN1cmUgdGhhdCByZS11c2luZyB0aGUgb3B0aW9ucyBkb2Vzbid0IHNjcmV3IHRoaW5ncyBhcm91bmRcclxuXHRcdFx0XHRzLmpzb25wQ2FsbGJhY2sgPSBvcmlnaW5hbFNldHRpbmdzLmpzb25wQ2FsbGJhY2s7XHJcblxyXG5cdFx0XHRcdC8vIHNhdmUgdGhlIGNhbGxiYWNrIG5hbWUgZm9yIGZ1dHVyZSB1c2VcclxuXHRcdFx0XHRvbGRDYWxsYmFja3MucHVzaCggY2FsbGJhY2tOYW1lICk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIENhbGwgaWYgaXQgd2FzIGEgZnVuY3Rpb24gYW5kIHdlIGhhdmUgYSByZXNwb25zZVxyXG5cdFx0XHRpZiAoIHJlc3BvbnNlQ29udGFpbmVyICYmIGpRdWVyeS5pc0Z1bmN0aW9uKCBvdmVyd3JpdHRlbiApICkge1xyXG5cdFx0XHRcdG92ZXJ3cml0dGVuKCByZXNwb25zZUNvbnRhaW5lclsgMCBdICk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHJlc3BvbnNlQ29udGFpbmVyID0gb3ZlcndyaXR0ZW4gPSB1bmRlZmluZWQ7XHJcblx0XHR9KTtcclxuXHJcblx0XHQvLyBEZWxlZ2F0ZSB0byBzY3JpcHRcclxuXHRcdHJldHVybiBcInNjcmlwdFwiO1xyXG5cdH1cclxufSk7XHJcblxyXG5cclxuXHJcblxyXG4vLyBkYXRhOiBzdHJpbmcgb2YgaHRtbFxyXG4vLyBjb250ZXh0IChvcHRpb25hbCk6IElmIHNwZWNpZmllZCwgdGhlIGZyYWdtZW50IHdpbGwgYmUgY3JlYXRlZCBpbiB0aGlzIGNvbnRleHQsIGRlZmF1bHRzIHRvIGRvY3VtZW50XHJcbi8vIGtlZXBTY3JpcHRzIChvcHRpb25hbCk6IElmIHRydWUsIHdpbGwgaW5jbHVkZSBzY3JpcHRzIHBhc3NlZCBpbiB0aGUgaHRtbCBzdHJpbmdcclxualF1ZXJ5LnBhcnNlSFRNTCA9IGZ1bmN0aW9uKCBkYXRhLCBjb250ZXh0LCBrZWVwU2NyaXB0cyApIHtcclxuXHRpZiAoICFkYXRhIHx8IHR5cGVvZiBkYXRhICE9PSBcInN0cmluZ1wiICkge1xyXG5cdFx0cmV0dXJuIG51bGw7XHJcblx0fVxyXG5cdGlmICggdHlwZW9mIGNvbnRleHQgPT09IFwiYm9vbGVhblwiICkge1xyXG5cdFx0a2VlcFNjcmlwdHMgPSBjb250ZXh0O1xyXG5cdFx0Y29udGV4dCA9IGZhbHNlO1xyXG5cdH1cclxuXHRjb250ZXh0ID0gY29udGV4dCB8fCBkb2N1bWVudDtcclxuXHJcblx0dmFyIHBhcnNlZCA9IHJzaW5nbGVUYWcuZXhlYyggZGF0YSApLFxyXG5cdFx0c2NyaXB0cyA9ICFrZWVwU2NyaXB0cyAmJiBbXTtcclxuXHJcblx0Ly8gU2luZ2xlIHRhZ1xyXG5cdGlmICggcGFyc2VkICkge1xyXG5cdFx0cmV0dXJuIFsgY29udGV4dC5jcmVhdGVFbGVtZW50KCBwYXJzZWRbMV0gKSBdO1xyXG5cdH1cclxuXHJcblx0cGFyc2VkID0galF1ZXJ5LmJ1aWxkRnJhZ21lbnQoIFsgZGF0YSBdLCBjb250ZXh0LCBzY3JpcHRzICk7XHJcblxyXG5cdGlmICggc2NyaXB0cyAmJiBzY3JpcHRzLmxlbmd0aCApIHtcclxuXHRcdGpRdWVyeSggc2NyaXB0cyApLnJlbW92ZSgpO1xyXG5cdH1cclxuXHJcblx0cmV0dXJuIGpRdWVyeS5tZXJnZSggW10sIHBhcnNlZC5jaGlsZE5vZGVzICk7XHJcbn07XHJcblxyXG5cclxuLy8gS2VlcCBhIGNvcHkgb2YgdGhlIG9sZCBsb2FkIG1ldGhvZFxyXG52YXIgX2xvYWQgPSBqUXVlcnkuZm4ubG9hZDtcclxuXHJcbi8qKlxyXG4gKiBMb2FkIGEgdXJsIGludG8gYSBwYWdlXHJcbiAqL1xyXG5qUXVlcnkuZm4ubG9hZCA9IGZ1bmN0aW9uKCB1cmwsIHBhcmFtcywgY2FsbGJhY2sgKSB7XHJcblx0aWYgKCB0eXBlb2YgdXJsICE9PSBcInN0cmluZ1wiICYmIF9sb2FkICkge1xyXG5cdFx0cmV0dXJuIF9sb2FkLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcclxuXHR9XHJcblxyXG5cdHZhciBzZWxlY3RvciwgdHlwZSwgcmVzcG9uc2UsXHJcblx0XHRzZWxmID0gdGhpcyxcclxuXHRcdG9mZiA9IHVybC5pbmRleE9mKFwiIFwiKTtcclxuXHJcblx0aWYgKCBvZmYgPj0gMCApIHtcclxuXHRcdHNlbGVjdG9yID0galF1ZXJ5LnRyaW0oIHVybC5zbGljZSggb2ZmICkgKTtcclxuXHRcdHVybCA9IHVybC5zbGljZSggMCwgb2ZmICk7XHJcblx0fVxyXG5cclxuXHQvLyBJZiBpdCdzIGEgZnVuY3Rpb25cclxuXHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBwYXJhbXMgKSApIHtcclxuXHJcblx0XHQvLyBXZSBhc3N1bWUgdGhhdCBpdCdzIHRoZSBjYWxsYmFja1xyXG5cdFx0Y2FsbGJhY2sgPSBwYXJhbXM7XHJcblx0XHRwYXJhbXMgPSB1bmRlZmluZWQ7XHJcblxyXG5cdC8vIE90aGVyd2lzZSwgYnVpbGQgYSBwYXJhbSBzdHJpbmdcclxuXHR9IGVsc2UgaWYgKCBwYXJhbXMgJiYgdHlwZW9mIHBhcmFtcyA9PT0gXCJvYmplY3RcIiApIHtcclxuXHRcdHR5cGUgPSBcIlBPU1RcIjtcclxuXHR9XHJcblxyXG5cdC8vIElmIHdlIGhhdmUgZWxlbWVudHMgdG8gbW9kaWZ5LCBtYWtlIHRoZSByZXF1ZXN0XHJcblx0aWYgKCBzZWxmLmxlbmd0aCA+IDAgKSB7XHJcblx0XHRqUXVlcnkuYWpheCh7XHJcblx0XHRcdHVybDogdXJsLFxyXG5cclxuXHRcdFx0Ly8gaWYgXCJ0eXBlXCIgdmFyaWFibGUgaXMgdW5kZWZpbmVkLCB0aGVuIFwiR0VUXCIgbWV0aG9kIHdpbGwgYmUgdXNlZFxyXG5cdFx0XHR0eXBlOiB0eXBlLFxyXG5cdFx0XHRkYXRhVHlwZTogXCJodG1sXCIsXHJcblx0XHRcdGRhdGE6IHBhcmFtc1xyXG5cdFx0fSkuZG9uZShmdW5jdGlvbiggcmVzcG9uc2VUZXh0ICkge1xyXG5cclxuXHRcdFx0Ly8gU2F2ZSByZXNwb25zZSBmb3IgdXNlIGluIGNvbXBsZXRlIGNhbGxiYWNrXHJcblx0XHRcdHJlc3BvbnNlID0gYXJndW1lbnRzO1xyXG5cclxuXHRcdFx0c2VsZi5odG1sKCBzZWxlY3RvciA/XHJcblxyXG5cdFx0XHRcdC8vIElmIGEgc2VsZWN0b3Igd2FzIHNwZWNpZmllZCwgbG9jYXRlIHRoZSByaWdodCBlbGVtZW50cyBpbiBhIGR1bW15IGRpdlxyXG5cdFx0XHRcdC8vIEV4Y2x1ZGUgc2NyaXB0cyB0byBhdm9pZCBJRSAnUGVybWlzc2lvbiBEZW5pZWQnIGVycm9yc1xyXG5cdFx0XHRcdGpRdWVyeShcIjxkaXY+XCIpLmFwcGVuZCggalF1ZXJ5LnBhcnNlSFRNTCggcmVzcG9uc2VUZXh0ICkgKS5maW5kKCBzZWxlY3RvciApIDpcclxuXHJcblx0XHRcdFx0Ly8gT3RoZXJ3aXNlIHVzZSB0aGUgZnVsbCByZXN1bHRcclxuXHRcdFx0XHRyZXNwb25zZVRleHQgKTtcclxuXHJcblx0XHR9KS5jb21wbGV0ZSggY2FsbGJhY2sgJiYgZnVuY3Rpb24oIGpxWEhSLCBzdGF0dXMgKSB7XHJcblx0XHRcdHNlbGYuZWFjaCggY2FsbGJhY2ssIHJlc3BvbnNlIHx8IFsganFYSFIucmVzcG9uc2VUZXh0LCBzdGF0dXMsIGpxWEhSIF0gKTtcclxuXHRcdH0pO1xyXG5cdH1cclxuXHJcblx0cmV0dXJuIHRoaXM7XHJcbn07XHJcblxyXG5cclxuXHJcblxyXG4vLyBBdHRhY2ggYSBidW5jaCBvZiBmdW5jdGlvbnMgZm9yIGhhbmRsaW5nIGNvbW1vbiBBSkFYIGV2ZW50c1xyXG5qUXVlcnkuZWFjaCggWyBcImFqYXhTdGFydFwiLCBcImFqYXhTdG9wXCIsIFwiYWpheENvbXBsZXRlXCIsIFwiYWpheEVycm9yXCIsIFwiYWpheFN1Y2Nlc3NcIiwgXCJhamF4U2VuZFwiIF0sIGZ1bmN0aW9uKCBpLCB0eXBlICkge1xyXG5cdGpRdWVyeS5mblsgdHlwZSBdID0gZnVuY3Rpb24oIGZuICkge1xyXG5cdFx0cmV0dXJuIHRoaXMub24oIHR5cGUsIGZuICk7XHJcblx0fTtcclxufSk7XHJcblxyXG5cclxuXHJcblxyXG5qUXVlcnkuZXhwci5maWx0ZXJzLmFuaW1hdGVkID0gZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0cmV0dXJuIGpRdWVyeS5ncmVwKGpRdWVyeS50aW1lcnMsIGZ1bmN0aW9uKCBmbiApIHtcclxuXHRcdHJldHVybiBlbGVtID09PSBmbi5lbGVtO1xyXG5cdH0pLmxlbmd0aDtcclxufTtcclxuXHJcblxyXG5cclxuXHJcbnZhciBkb2NFbGVtID0gd2luZG93LmRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcclxuXHJcbi8qKlxyXG4gKiBHZXRzIGEgd2luZG93IGZyb20gYW4gZWxlbWVudFxyXG4gKi9cclxuZnVuY3Rpb24gZ2V0V2luZG93KCBlbGVtICkge1xyXG5cdHJldHVybiBqUXVlcnkuaXNXaW5kb3coIGVsZW0gKSA/IGVsZW0gOiBlbGVtLm5vZGVUeXBlID09PSA5ICYmIGVsZW0uZGVmYXVsdFZpZXc7XHJcbn1cclxuXHJcbmpRdWVyeS5vZmZzZXQgPSB7XHJcblx0c2V0T2Zmc2V0OiBmdW5jdGlvbiggZWxlbSwgb3B0aW9ucywgaSApIHtcclxuXHRcdHZhciBjdXJQb3NpdGlvbiwgY3VyTGVmdCwgY3VyQ1NTVG9wLCBjdXJUb3AsIGN1ck9mZnNldCwgY3VyQ1NTTGVmdCwgY2FsY3VsYXRlUG9zaXRpb24sXHJcblx0XHRcdHBvc2l0aW9uID0galF1ZXJ5LmNzcyggZWxlbSwgXCJwb3NpdGlvblwiICksXHJcblx0XHRcdGN1ckVsZW0gPSBqUXVlcnkoIGVsZW0gKSxcclxuXHRcdFx0cHJvcHMgPSB7fTtcclxuXHJcblx0XHQvLyBTZXQgcG9zaXRpb24gZmlyc3QsIGluLWNhc2UgdG9wL2xlZnQgYXJlIHNldCBldmVuIG9uIHN0YXRpYyBlbGVtXHJcblx0XHRpZiAoIHBvc2l0aW9uID09PSBcInN0YXRpY1wiICkge1xyXG5cdFx0XHRlbGVtLnN0eWxlLnBvc2l0aW9uID0gXCJyZWxhdGl2ZVwiO1xyXG5cdFx0fVxyXG5cclxuXHRcdGN1ck9mZnNldCA9IGN1ckVsZW0ub2Zmc2V0KCk7XHJcblx0XHRjdXJDU1NUb3AgPSBqUXVlcnkuY3NzKCBlbGVtLCBcInRvcFwiICk7XHJcblx0XHRjdXJDU1NMZWZ0ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJsZWZ0XCIgKTtcclxuXHRcdGNhbGN1bGF0ZVBvc2l0aW9uID0gKCBwb3NpdGlvbiA9PT0gXCJhYnNvbHV0ZVwiIHx8IHBvc2l0aW9uID09PSBcImZpeGVkXCIgKSAmJlxyXG5cdFx0XHQoIGN1ckNTU1RvcCArIGN1ckNTU0xlZnQgKS5pbmRleE9mKFwiYXV0b1wiKSA+IC0xO1xyXG5cclxuXHRcdC8vIE5lZWQgdG8gYmUgYWJsZSB0byBjYWxjdWxhdGUgcG9zaXRpb24gaWYgZWl0aGVyXHJcblx0XHQvLyB0b3Agb3IgbGVmdCBpcyBhdXRvIGFuZCBwb3NpdGlvbiBpcyBlaXRoZXIgYWJzb2x1dGUgb3IgZml4ZWRcclxuXHRcdGlmICggY2FsY3VsYXRlUG9zaXRpb24gKSB7XHJcblx0XHRcdGN1clBvc2l0aW9uID0gY3VyRWxlbS5wb3NpdGlvbigpO1xyXG5cdFx0XHRjdXJUb3AgPSBjdXJQb3NpdGlvbi50b3A7XHJcblx0XHRcdGN1ckxlZnQgPSBjdXJQb3NpdGlvbi5sZWZ0O1xyXG5cclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdGN1clRvcCA9IHBhcnNlRmxvYXQoIGN1ckNTU1RvcCApIHx8IDA7XHJcblx0XHRcdGN1ckxlZnQgPSBwYXJzZUZsb2F0KCBjdXJDU1NMZWZ0ICkgfHwgMDtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBvcHRpb25zICkgKSB7XHJcblx0XHRcdG9wdGlvbnMgPSBvcHRpb25zLmNhbGwoIGVsZW0sIGksIGN1ck9mZnNldCApO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmICggb3B0aW9ucy50b3AgIT0gbnVsbCApIHtcclxuXHRcdFx0cHJvcHMudG9wID0gKCBvcHRpb25zLnRvcCAtIGN1ck9mZnNldC50b3AgKSArIGN1clRvcDtcclxuXHRcdH1cclxuXHRcdGlmICggb3B0aW9ucy5sZWZ0ICE9IG51bGwgKSB7XHJcblx0XHRcdHByb3BzLmxlZnQgPSAoIG9wdGlvbnMubGVmdCAtIGN1ck9mZnNldC5sZWZ0ICkgKyBjdXJMZWZ0O1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmICggXCJ1c2luZ1wiIGluIG9wdGlvbnMgKSB7XHJcblx0XHRcdG9wdGlvbnMudXNpbmcuY2FsbCggZWxlbSwgcHJvcHMgKTtcclxuXHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRjdXJFbGVtLmNzcyggcHJvcHMgKTtcclxuXHRcdH1cclxuXHR9XHJcbn07XHJcblxyXG5qUXVlcnkuZm4uZXh0ZW5kKHtcclxuXHRvZmZzZXQ6IGZ1bmN0aW9uKCBvcHRpb25zICkge1xyXG5cdFx0aWYgKCBhcmd1bWVudHMubGVuZ3RoICkge1xyXG5cdFx0XHRyZXR1cm4gb3B0aW9ucyA9PT0gdW5kZWZpbmVkID9cclxuXHRcdFx0XHR0aGlzIDpcclxuXHRcdFx0XHR0aGlzLmVhY2goZnVuY3Rpb24oIGkgKSB7XHJcblx0XHRcdFx0XHRqUXVlcnkub2Zmc2V0LnNldE9mZnNldCggdGhpcywgb3B0aW9ucywgaSApO1xyXG5cdFx0XHRcdH0pO1xyXG5cdFx0fVxyXG5cclxuXHRcdHZhciBkb2NFbGVtLCB3aW4sXHJcblx0XHRcdGVsZW0gPSB0aGlzWyAwIF0sXHJcblx0XHRcdGJveCA9IHsgdG9wOiAwLCBsZWZ0OiAwIH0sXHJcblx0XHRcdGRvYyA9IGVsZW0gJiYgZWxlbS5vd25lckRvY3VtZW50O1xyXG5cclxuXHRcdGlmICggIWRvYyApIHtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cclxuXHRcdGRvY0VsZW0gPSBkb2MuZG9jdW1lbnRFbGVtZW50O1xyXG5cclxuXHRcdC8vIE1ha2Ugc3VyZSBpdCdzIG5vdCBhIGRpc2Nvbm5lY3RlZCBET00gbm9kZVxyXG5cdFx0aWYgKCAhalF1ZXJ5LmNvbnRhaW5zKCBkb2NFbGVtLCBlbGVtICkgKSB7XHJcblx0XHRcdHJldHVybiBib3g7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gU3VwcG9ydDogQmxhY2tCZXJyeSA1LCBpT1MgMyAob3JpZ2luYWwgaVBob25lKVxyXG5cdFx0Ly8gSWYgd2UgZG9uJ3QgaGF2ZSBnQkNSLCBqdXN0IHVzZSAwLDAgcmF0aGVyIHRoYW4gZXJyb3JcclxuXHRcdGlmICggdHlwZW9mIGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0ICE9PSBzdHJ1bmRlZmluZWQgKSB7XHJcblx0XHRcdGJveCA9IGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XHJcblx0XHR9XHJcblx0XHR3aW4gPSBnZXRXaW5kb3coIGRvYyApO1xyXG5cdFx0cmV0dXJuIHtcclxuXHRcdFx0dG9wOiBib3gudG9wICsgd2luLnBhZ2VZT2Zmc2V0IC0gZG9jRWxlbS5jbGllbnRUb3AsXHJcblx0XHRcdGxlZnQ6IGJveC5sZWZ0ICsgd2luLnBhZ2VYT2Zmc2V0IC0gZG9jRWxlbS5jbGllbnRMZWZ0XHJcblx0XHR9O1xyXG5cdH0sXHJcblxyXG5cdHBvc2l0aW9uOiBmdW5jdGlvbigpIHtcclxuXHRcdGlmICggIXRoaXNbIDAgXSApIHtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cclxuXHRcdHZhciBvZmZzZXRQYXJlbnQsIG9mZnNldCxcclxuXHRcdFx0ZWxlbSA9IHRoaXNbIDAgXSxcclxuXHRcdFx0cGFyZW50T2Zmc2V0ID0geyB0b3A6IDAsIGxlZnQ6IDAgfTtcclxuXHJcblx0XHQvLyBGaXhlZCBlbGVtZW50cyBhcmUgb2Zmc2V0IGZyb20gd2luZG93IChwYXJlbnRPZmZzZXQgPSB7dG9wOjAsIGxlZnQ6IDB9LCBiZWNhdXNlIGl0IGlzIGl0cyBvbmx5IG9mZnNldCBwYXJlbnRcclxuXHRcdGlmICggalF1ZXJ5LmNzcyggZWxlbSwgXCJwb3NpdGlvblwiICkgPT09IFwiZml4ZWRcIiApIHtcclxuXHRcdFx0Ly8gQXNzdW1lIGdldEJvdW5kaW5nQ2xpZW50UmVjdCBpcyB0aGVyZSB3aGVuIGNvbXB1dGVkIHBvc2l0aW9uIGlzIGZpeGVkXHJcblx0XHRcdG9mZnNldCA9IGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XHJcblxyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0Ly8gR2V0ICpyZWFsKiBvZmZzZXRQYXJlbnRcclxuXHRcdFx0b2Zmc2V0UGFyZW50ID0gdGhpcy5vZmZzZXRQYXJlbnQoKTtcclxuXHJcblx0XHRcdC8vIEdldCBjb3JyZWN0IG9mZnNldHNcclxuXHRcdFx0b2Zmc2V0ID0gdGhpcy5vZmZzZXQoKTtcclxuXHRcdFx0aWYgKCAhalF1ZXJ5Lm5vZGVOYW1lKCBvZmZzZXRQYXJlbnRbIDAgXSwgXCJodG1sXCIgKSApIHtcclxuXHRcdFx0XHRwYXJlbnRPZmZzZXQgPSBvZmZzZXRQYXJlbnQub2Zmc2V0KCk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIEFkZCBvZmZzZXRQYXJlbnQgYm9yZGVyc1xyXG5cdFx0XHRwYXJlbnRPZmZzZXQudG9wICs9IGpRdWVyeS5jc3MoIG9mZnNldFBhcmVudFsgMCBdLCBcImJvcmRlclRvcFdpZHRoXCIsIHRydWUgKTtcclxuXHRcdFx0cGFyZW50T2Zmc2V0LmxlZnQgKz0galF1ZXJ5LmNzcyggb2Zmc2V0UGFyZW50WyAwIF0sIFwiYm9yZGVyTGVmdFdpZHRoXCIsIHRydWUgKTtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBTdWJ0cmFjdCBwYXJlbnQgb2Zmc2V0cyBhbmQgZWxlbWVudCBtYXJnaW5zXHJcblx0XHRyZXR1cm4ge1xyXG5cdFx0XHR0b3A6IG9mZnNldC50b3AgLSBwYXJlbnRPZmZzZXQudG9wIC0galF1ZXJ5LmNzcyggZWxlbSwgXCJtYXJnaW5Ub3BcIiwgdHJ1ZSApLFxyXG5cdFx0XHRsZWZ0OiBvZmZzZXQubGVmdCAtIHBhcmVudE9mZnNldC5sZWZ0IC0galF1ZXJ5LmNzcyggZWxlbSwgXCJtYXJnaW5MZWZ0XCIsIHRydWUgKVxyXG5cdFx0fTtcclxuXHR9LFxyXG5cclxuXHRvZmZzZXRQYXJlbnQ6IGZ1bmN0aW9uKCkge1xyXG5cdFx0cmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uKCkge1xyXG5cdFx0XHR2YXIgb2Zmc2V0UGFyZW50ID0gdGhpcy5vZmZzZXRQYXJlbnQgfHwgZG9jRWxlbTtcclxuXHJcblx0XHRcdHdoaWxlICggb2Zmc2V0UGFyZW50ICYmICggIWpRdWVyeS5ub2RlTmFtZSggb2Zmc2V0UGFyZW50LCBcImh0bWxcIiApICYmIGpRdWVyeS5jc3MoIG9mZnNldFBhcmVudCwgXCJwb3NpdGlvblwiICkgPT09IFwic3RhdGljXCIgKSApIHtcclxuXHRcdFx0XHRvZmZzZXRQYXJlbnQgPSBvZmZzZXRQYXJlbnQub2Zmc2V0UGFyZW50O1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRyZXR1cm4gb2Zmc2V0UGFyZW50IHx8IGRvY0VsZW07XHJcblx0XHR9KTtcclxuXHR9XHJcbn0pO1xyXG5cclxuLy8gQ3JlYXRlIHNjcm9sbExlZnQgYW5kIHNjcm9sbFRvcCBtZXRob2RzXHJcbmpRdWVyeS5lYWNoKCB7IHNjcm9sbExlZnQ6IFwicGFnZVhPZmZzZXRcIiwgc2Nyb2xsVG9wOiBcInBhZ2VZT2Zmc2V0XCIgfSwgZnVuY3Rpb24oIG1ldGhvZCwgcHJvcCApIHtcclxuXHR2YXIgdG9wID0gXCJwYWdlWU9mZnNldFwiID09PSBwcm9wO1xyXG5cclxuXHRqUXVlcnkuZm5bIG1ldGhvZCBdID0gZnVuY3Rpb24oIHZhbCApIHtcclxuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCBtZXRob2QsIHZhbCApIHtcclxuXHRcdFx0dmFyIHdpbiA9IGdldFdpbmRvdyggZWxlbSApO1xyXG5cclxuXHRcdFx0aWYgKCB2YWwgPT09IHVuZGVmaW5lZCApIHtcclxuXHRcdFx0XHRyZXR1cm4gd2luID8gd2luWyBwcm9wIF0gOiBlbGVtWyBtZXRob2QgXTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0aWYgKCB3aW4gKSB7XHJcblx0XHRcdFx0d2luLnNjcm9sbFRvKFxyXG5cdFx0XHRcdFx0IXRvcCA/IHZhbCA6IHdpbmRvdy5wYWdlWE9mZnNldCxcclxuXHRcdFx0XHRcdHRvcCA/IHZhbCA6IHdpbmRvdy5wYWdlWU9mZnNldFxyXG5cdFx0XHRcdCk7XHJcblxyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdGVsZW1bIG1ldGhvZCBdID0gdmFsO1xyXG5cdFx0XHR9XHJcblx0XHR9LCBtZXRob2QsIHZhbCwgYXJndW1lbnRzLmxlbmd0aCwgbnVsbCApO1xyXG5cdH07XHJcbn0pO1xyXG5cclxuLy8gU3VwcG9ydDogU2FmYXJpPDcrLCBDaHJvbWU8MzcrXHJcbi8vIEFkZCB0aGUgdG9wL2xlZnQgY3NzSG9va3MgdXNpbmcgalF1ZXJ5LmZuLnBvc2l0aW9uXHJcbi8vIFdlYmtpdCBidWc6IGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0yOTA4NFxyXG4vLyBCbGluayBidWc6IGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD0yMjkyODBcclxuLy8gZ2V0Q29tcHV0ZWRTdHlsZSByZXR1cm5zIHBlcmNlbnQgd2hlbiBzcGVjaWZpZWQgZm9yIHRvcC9sZWZ0L2JvdHRvbS9yaWdodDtcclxuLy8gcmF0aGVyIHRoYW4gbWFrZSB0aGUgY3NzIG1vZHVsZSBkZXBlbmQgb24gdGhlIG9mZnNldCBtb2R1bGUsIGp1c3QgY2hlY2sgZm9yIGl0IGhlcmVcclxualF1ZXJ5LmVhY2goIFsgXCJ0b3BcIiwgXCJsZWZ0XCIgXSwgZnVuY3Rpb24oIGksIHByb3AgKSB7XHJcblx0alF1ZXJ5LmNzc0hvb2tzWyBwcm9wIF0gPSBhZGRHZXRIb29rSWYoIHN1cHBvcnQucGl4ZWxQb3NpdGlvbixcclxuXHRcdGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCApIHtcclxuXHRcdFx0aWYgKCBjb21wdXRlZCApIHtcclxuXHRcdFx0XHRjb21wdXRlZCA9IGN1ckNTUyggZWxlbSwgcHJvcCApO1xyXG5cdFx0XHRcdC8vIElmIGN1ckNTUyByZXR1cm5zIHBlcmNlbnRhZ2UsIGZhbGxiYWNrIHRvIG9mZnNldFxyXG5cdFx0XHRcdHJldHVybiBybnVtbm9ucHgudGVzdCggY29tcHV0ZWQgKSA/XHJcblx0XHRcdFx0XHRqUXVlcnkoIGVsZW0gKS5wb3NpdGlvbigpWyBwcm9wIF0gKyBcInB4XCIgOlxyXG5cdFx0XHRcdFx0Y29tcHV0ZWQ7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHQpO1xyXG59KTtcclxuXHJcblxyXG4vLyBDcmVhdGUgaW5uZXJIZWlnaHQsIGlubmVyV2lkdGgsIGhlaWdodCwgd2lkdGgsIG91dGVySGVpZ2h0IGFuZCBvdXRlcldpZHRoIG1ldGhvZHNcclxualF1ZXJ5LmVhY2goIHsgSGVpZ2h0OiBcImhlaWdodFwiLCBXaWR0aDogXCJ3aWR0aFwiIH0sIGZ1bmN0aW9uKCBuYW1lLCB0eXBlICkge1xyXG5cdGpRdWVyeS5lYWNoKCB7IHBhZGRpbmc6IFwiaW5uZXJcIiArIG5hbWUsIGNvbnRlbnQ6IHR5cGUsIFwiXCI6IFwib3V0ZXJcIiArIG5hbWUgfSwgZnVuY3Rpb24oIGRlZmF1bHRFeHRyYSwgZnVuY05hbWUgKSB7XHJcblx0XHQvLyBNYXJnaW4gaXMgb25seSBmb3Igb3V0ZXJIZWlnaHQsIG91dGVyV2lkdGhcclxuXHRcdGpRdWVyeS5mblsgZnVuY05hbWUgXSA9IGZ1bmN0aW9uKCBtYXJnaW4sIHZhbHVlICkge1xyXG5cdFx0XHR2YXIgY2hhaW5hYmxlID0gYXJndW1lbnRzLmxlbmd0aCAmJiAoIGRlZmF1bHRFeHRyYSB8fCB0eXBlb2YgbWFyZ2luICE9PSBcImJvb2xlYW5cIiApLFxyXG5cdFx0XHRcdGV4dHJhID0gZGVmYXVsdEV4dHJhIHx8ICggbWFyZ2luID09PSB0cnVlIHx8IHZhbHVlID09PSB0cnVlID8gXCJtYXJnaW5cIiA6IFwiYm9yZGVyXCIgKTtcclxuXHJcblx0XHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCB0eXBlLCB2YWx1ZSApIHtcclxuXHRcdFx0XHR2YXIgZG9jO1xyXG5cclxuXHRcdFx0XHRpZiAoIGpRdWVyeS5pc1dpbmRvdyggZWxlbSApICkge1xyXG5cdFx0XHRcdFx0Ly8gQXMgb2YgNS84LzIwMTIgdGhpcyB3aWxsIHlpZWxkIGluY29ycmVjdCByZXN1bHRzIGZvciBNb2JpbGUgU2FmYXJpLCBidXQgdGhlcmVcclxuXHRcdFx0XHRcdC8vIGlzbid0IGEgd2hvbGUgbG90IHdlIGNhbiBkby4gU2VlIHB1bGwgcmVxdWVzdCBhdCB0aGlzIFVSTCBmb3IgZGlzY3Vzc2lvbjpcclxuXHRcdFx0XHRcdC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9qcXVlcnkvanF1ZXJ5L3B1bGwvNzY0XHJcblx0XHRcdFx0XHRyZXR1cm4gZWxlbS5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnRbIFwiY2xpZW50XCIgKyBuYW1lIF07XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHQvLyBHZXQgZG9jdW1lbnQgd2lkdGggb3IgaGVpZ2h0XHJcblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSA5ICkge1xyXG5cdFx0XHRcdFx0ZG9jID0gZWxlbS5kb2N1bWVudEVsZW1lbnQ7XHJcblxyXG5cdFx0XHRcdFx0Ly8gRWl0aGVyIHNjcm9sbFtXaWR0aC9IZWlnaHRdIG9yIG9mZnNldFtXaWR0aC9IZWlnaHRdIG9yIGNsaWVudFtXaWR0aC9IZWlnaHRdLFxyXG5cdFx0XHRcdFx0Ly8gd2hpY2hldmVyIGlzIGdyZWF0ZXN0XHJcblx0XHRcdFx0XHRyZXR1cm4gTWF0aC5tYXgoXHJcblx0XHRcdFx0XHRcdGVsZW0uYm9keVsgXCJzY3JvbGxcIiArIG5hbWUgXSwgZG9jWyBcInNjcm9sbFwiICsgbmFtZSBdLFxyXG5cdFx0XHRcdFx0XHRlbGVtLmJvZHlbIFwib2Zmc2V0XCIgKyBuYW1lIF0sIGRvY1sgXCJvZmZzZXRcIiArIG5hbWUgXSxcclxuXHRcdFx0XHRcdFx0ZG9jWyBcImNsaWVudFwiICsgbmFtZSBdXHJcblx0XHRcdFx0XHQpO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0cmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgP1xyXG5cdFx0XHRcdFx0Ly8gR2V0IHdpZHRoIG9yIGhlaWdodCBvbiB0aGUgZWxlbWVudCwgcmVxdWVzdGluZyBidXQgbm90IGZvcmNpbmcgcGFyc2VGbG9hdFxyXG5cdFx0XHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgdHlwZSwgZXh0cmEgKSA6XHJcblxyXG5cdFx0XHRcdFx0Ly8gU2V0IHdpZHRoIG9yIGhlaWdodCBvbiB0aGUgZWxlbWVudFxyXG5cdFx0XHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCB0eXBlLCB2YWx1ZSwgZXh0cmEgKTtcclxuXHRcdFx0fSwgdHlwZSwgY2hhaW5hYmxlID8gbWFyZ2luIDogdW5kZWZpbmVkLCBjaGFpbmFibGUsIG51bGwgKTtcclxuXHRcdH07XHJcblx0fSk7XHJcbn0pO1xyXG5cclxuXHJcbi8vIFRoZSBudW1iZXIgb2YgZWxlbWVudHMgY29udGFpbmVkIGluIHRoZSBtYXRjaGVkIGVsZW1lbnQgc2V0XHJcbmpRdWVyeS5mbi5zaXplID0gZnVuY3Rpb24oKSB7XHJcblx0cmV0dXJuIHRoaXMubGVuZ3RoO1xyXG59O1xyXG5cclxualF1ZXJ5LmZuLmFuZFNlbGYgPSBqUXVlcnkuZm4uYWRkQmFjaztcclxuXHJcblxyXG5cclxuXHJcbi8vIFJlZ2lzdGVyIGFzIGEgbmFtZWQgQU1EIG1vZHVsZSwgc2luY2UgalF1ZXJ5IGNhbiBiZSBjb25jYXRlbmF0ZWQgd2l0aCBvdGhlclxyXG4vLyBmaWxlcyB0aGF0IG1heSB1c2UgZGVmaW5lLCBidXQgbm90IHZpYSBhIHByb3BlciBjb25jYXRlbmF0aW9uIHNjcmlwdCB0aGF0XHJcbi8vIHVuZGVyc3RhbmRzIGFub255bW91cyBBTUQgbW9kdWxlcy4gQSBuYW1lZCBBTUQgaXMgc2FmZXN0IGFuZCBtb3N0IHJvYnVzdFxyXG4vLyB3YXkgdG8gcmVnaXN0ZXIuIExvd2VyY2FzZSBqcXVlcnkgaXMgdXNlZCBiZWNhdXNlIEFNRCBtb2R1bGUgbmFtZXMgYXJlXHJcbi8vIGRlcml2ZWQgZnJvbSBmaWxlIG5hbWVzLCBhbmQgalF1ZXJ5IGlzIG5vcm1hbGx5IGRlbGl2ZXJlZCBpbiBhIGxvd2VyY2FzZVxyXG4vLyBmaWxlIG5hbWUuIERvIHRoaXMgYWZ0ZXIgY3JlYXRpbmcgdGhlIGdsb2JhbCBzbyB0aGF0IGlmIGFuIEFNRCBtb2R1bGUgd2FudHNcclxuLy8gdG8gY2FsbCBub0NvbmZsaWN0IHRvIGhpZGUgdGhpcyB2ZXJzaW9uIG9mIGpRdWVyeSwgaXQgd2lsbCB3b3JrLlxyXG5cclxuLy8gTm90ZSB0aGF0IGZvciBtYXhpbXVtIHBvcnRhYmlsaXR5LCBsaWJyYXJpZXMgdGhhdCBhcmUgbm90IGpRdWVyeSBzaG91bGRcclxuLy8gZGVjbGFyZSB0aGVtc2VsdmVzIGFzIGFub255bW91cyBtb2R1bGVzLCBhbmQgYXZvaWQgc2V0dGluZyBhIGdsb2JhbCBpZiBhblxyXG4vLyBBTUQgbG9hZGVyIGlzIHByZXNlbnQuIGpRdWVyeSBpcyBhIHNwZWNpYWwgY2FzZS4gRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZVxyXG4vLyBodHRwczovL2dpdGh1Yi5jb20vanJidXJrZS9yZXF1aXJlanMvd2lraS9VcGRhdGluZy1leGlzdGluZy1saWJyYXJpZXMjd2lraS1hbm9uXHJcblxyXG5pZiAoIHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kICkge1xyXG5cdGRlZmluZSggXCJqcXVlcnlcIiwgW10sIGZ1bmN0aW9uKCkge1xyXG5cdFx0cmV0dXJuIGpRdWVyeTtcclxuXHR9KTtcclxufVxyXG5cclxuXHJcblxyXG5cclxudmFyXHJcblx0Ly8gTWFwIG92ZXIgalF1ZXJ5IGluIGNhc2Ugb2Ygb3ZlcndyaXRlXHJcblx0X2pRdWVyeSA9IHdpbmRvdy5qUXVlcnksXHJcblxyXG5cdC8vIE1hcCBvdmVyIHRoZSAkIGluIGNhc2Ugb2Ygb3ZlcndyaXRlXHJcblx0XyQgPSB3aW5kb3cuJDtcclxuXHJcbmpRdWVyeS5ub0NvbmZsaWN0ID0gZnVuY3Rpb24oIGRlZXAgKSB7XHJcblx0aWYgKCB3aW5kb3cuJCA9PT0galF1ZXJ5ICkge1xyXG5cdFx0d2luZG93LiQgPSBfJDtcclxuXHR9XHJcblxyXG5cdGlmICggZGVlcCAmJiB3aW5kb3cualF1ZXJ5ID09PSBqUXVlcnkgKSB7XHJcblx0XHR3aW5kb3cualF1ZXJ5ID0gX2pRdWVyeTtcclxuXHR9XHJcblxyXG5cdHJldHVybiBqUXVlcnk7XHJcbn07XHJcblxyXG4vLyBFeHBvc2UgalF1ZXJ5IGFuZCAkIGlkZW50aWZpZXJzLCBldmVuIGluIEFNRFxyXG4vLyAoIzcxMDIjY29tbWVudDoxMCwgaHR0cHM6Ly9naXRodWIuY29tL2pxdWVyeS9qcXVlcnkvcHVsbC81NTcpXHJcbi8vIGFuZCBDb21tb25KUyBmb3IgYnJvd3NlciBlbXVsYXRvcnMgKCMxMzU2NilcclxuaWYgKCB0eXBlb2Ygbm9HbG9iYWwgPT09IHN0cnVuZGVmaW5lZCApIHtcclxuXHR3aW5kb3cualF1ZXJ5ID0gd2luZG93LiQgPSBqUXVlcnk7XHJcbn1cclxuXHJcblxyXG5cclxuXHJcbnJldHVybiBqUXVlcnk7XHJcblxyXG59KSk7XHJcbi8qISBVSWtpdCAyLjI0LjIgfCBodHRwOi8vd3d3LmdldHVpa2l0LmNvbSB8IChjKSAyMDE0IFlPT3RoZW1lIHwgTUlUIExpY2Vuc2UgKi9cclxuKGZ1bmN0aW9uKGNvcmUpIHtcclxuXHJcbiAgICBpZiAodHlwZW9mIGRlZmluZSA9PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCkgeyAvLyBBTURcclxuXHJcbiAgICAgICAgZGVmaW5lKFwidWlraXRcIiwgZnVuY3Rpb24oKXtcclxuXHJcbiAgICAgICAgICAgIHZhciB1aWtpdCA9IHdpbmRvdy5VSWtpdCB8fCBjb3JlKHdpbmRvdywgd2luZG93LmpRdWVyeSwgd2luZG93LmRvY3VtZW50KTtcclxuXHJcbiAgICAgICAgICAgIHVpa2l0LmxvYWQgPSBmdW5jdGlvbihyZXMsIHJlcSwgb25sb2FkLCBjb25maWcpIHtcclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgcmVzb3VyY2VzID0gcmVzLnNwbGl0KCcsJyksIGxvYWQgPSBbXSwgaSwgYmFzZSA9IChjb25maWcuY29uZmlnICYmIGNvbmZpZy5jb25maWcudWlraXQgJiYgY29uZmlnLmNvbmZpZy51aWtpdC5iYXNlID8gY29uZmlnLmNvbmZpZy51aWtpdC5iYXNlIDogXCJcIikucmVwbGFjZSgvXFwvKyQvZywgXCJcIik7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKCFiYXNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCBcIlBsZWFzZSBkZWZpbmUgYmFzZSBwYXRoIHRvIFVJa2l0IGluIHRoZSByZXF1aXJlanMgY29uZmlnLlwiICk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IHJlc291cmNlcy5sZW5ndGg7IGkgKz0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciByZXNvdXJjZSA9IHJlc291cmNlc1tpXS5yZXBsYWNlKC9cXC4vZywgJy8nKTtcclxuICAgICAgICAgICAgICAgICAgICBsb2FkLnB1c2goYmFzZSsnL2NvbXBvbmVudHMvJytyZXNvdXJjZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgcmVxKGxvYWQsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG9ubG9hZCh1aWtpdCk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiB1aWtpdDtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoIXdpbmRvdy5qUXVlcnkpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoIFwiVUlraXQgcmVxdWlyZXMgalF1ZXJ5XCIgKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAod2luZG93ICYmIHdpbmRvdy5qUXVlcnkpIHtcclxuICAgICAgICBjb3JlKHdpbmRvdywgd2luZG93LmpRdWVyeSwgd2luZG93LmRvY3VtZW50KTtcclxuICAgIH1cclxuXHJcblxyXG59KShmdW5jdGlvbihnbG9iYWwsICQsIGRvYykge1xyXG5cclxuICAgIFwidXNlIHN0cmljdFwiO1xyXG5cclxuICAgIHZhciBVSSA9IHt9LCBfVUkgPSBnbG9iYWwuVUlraXQgPyBPYmplY3QuY3JlYXRlKGdsb2JhbC5VSWtpdCkgOiB1bmRlZmluZWQ7XHJcblxyXG4gICAgVUkudmVyc2lvbiA9ICcyLjI0LjInO1xyXG5cclxuICAgIFVJLm5vQ29uZmxpY3QgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAvLyByZXN0b3JlIFVJa2l0IHZlcnNpb25cclxuICAgICAgICBpZiAoX1VJKSB7XHJcbiAgICAgICAgICAgIGdsb2JhbC5VSWtpdCA9IF9VSTtcclxuICAgICAgICAgICAgJC5VSWtpdCAgICAgID0gX1VJO1xyXG4gICAgICAgICAgICAkLmZuLnVrICAgICAgPSBfVUkuZm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gVUk7XHJcbiAgICB9O1xyXG5cclxuICAgIFVJLnByZWZpeCA9IGZ1bmN0aW9uKHN0cikge1xyXG4gICAgICAgIHJldHVybiBzdHI7XHJcbiAgICB9O1xyXG5cclxuICAgIC8vIGNhY2hlIGpRdWVyeVxyXG4gICAgVUkuJCA9ICQ7XHJcblxyXG4gICAgVUkuJGRvYyAgPSBVSS4kKGRvY3VtZW50KTtcclxuICAgIFVJLiR3aW4gID0gVUkuJCh3aW5kb3cpO1xyXG4gICAgVUkuJGh0bWwgPSBVSS4kKCdodG1sJyk7XHJcblxyXG4gICAgVUkuc3VwcG9ydCA9IHt9O1xyXG4gICAgVUkuc3VwcG9ydC50cmFuc2l0aW9uID0gKGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICB2YXIgdHJhbnNpdGlvbkVuZCA9IChmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgICAgIHZhciBlbGVtZW50ID0gZG9jLmJvZHkgfHwgZG9jLmRvY3VtZW50RWxlbWVudCxcclxuICAgICAgICAgICAgICAgIHRyYW5zRW5kRXZlbnROYW1lcyA9IHtcclxuICAgICAgICAgICAgICAgICAgICBXZWJraXRUcmFuc2l0aW9uIDogJ3dlYmtpdFRyYW5zaXRpb25FbmQnLFxyXG4gICAgICAgICAgICAgICAgICAgIE1velRyYW5zaXRpb24gICAgOiAndHJhbnNpdGlvbmVuZCcsXHJcbiAgICAgICAgICAgICAgICAgICAgT1RyYW5zaXRpb24gICAgICA6ICdvVHJhbnNpdGlvbkVuZCBvdHJhbnNpdGlvbmVuZCcsXHJcbiAgICAgICAgICAgICAgICAgICAgdHJhbnNpdGlvbiAgICAgICA6ICd0cmFuc2l0aW9uZW5kJ1xyXG4gICAgICAgICAgICAgICAgfSwgbmFtZTtcclxuXHJcbiAgICAgICAgICAgIGZvciAobmFtZSBpbiB0cmFuc0VuZEV2ZW50TmFtZXMpIHtcclxuICAgICAgICAgICAgICAgIGlmIChlbGVtZW50LnN0eWxlW25hbWVdICE9PSB1bmRlZmluZWQpIHJldHVybiB0cmFuc0VuZEV2ZW50TmFtZXNbbmFtZV07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KCkpO1xyXG5cclxuICAgICAgICByZXR1cm4gdHJhbnNpdGlvbkVuZCAmJiB7IGVuZDogdHJhbnNpdGlvbkVuZCB9O1xyXG4gICAgfSkoKTtcclxuXHJcbiAgICBVSS5zdXBwb3J0LmFuaW1hdGlvbiA9IChmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgdmFyIGFuaW1hdGlvbkVuZCA9IChmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgICAgIHZhciBlbGVtZW50ID0gZG9jLmJvZHkgfHwgZG9jLmRvY3VtZW50RWxlbWVudCxcclxuICAgICAgICAgICAgICAgIGFuaW1FbmRFdmVudE5hbWVzID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIFdlYmtpdEFuaW1hdGlvbiA6ICd3ZWJraXRBbmltYXRpb25FbmQnLFxyXG4gICAgICAgICAgICAgICAgICAgIE1vekFuaW1hdGlvbiAgICA6ICdhbmltYXRpb25lbmQnLFxyXG4gICAgICAgICAgICAgICAgICAgIE9BbmltYXRpb24gICAgICA6ICdvQW5pbWF0aW9uRW5kIG9hbmltYXRpb25lbmQnLFxyXG4gICAgICAgICAgICAgICAgICAgIGFuaW1hdGlvbiAgICAgICA6ICdhbmltYXRpb25lbmQnXHJcbiAgICAgICAgICAgICAgICB9LCBuYW1lO1xyXG5cclxuICAgICAgICAgICAgZm9yIChuYW1lIGluIGFuaW1FbmRFdmVudE5hbWVzKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZWxlbWVudC5zdHlsZVtuYW1lXSAhPT0gdW5kZWZpbmVkKSByZXR1cm4gYW5pbUVuZEV2ZW50TmFtZXNbbmFtZV07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KCkpO1xyXG5cclxuICAgICAgICByZXR1cm4gYW5pbWF0aW9uRW5kICYmIHsgZW5kOiBhbmltYXRpb25FbmQgfTtcclxuICAgIH0pKCk7XHJcblxyXG4gICAgLy8gcmVxdWVzdEFuaW1hdGlvbkZyYW1lIHBvbHlmaWxsXHJcbiAgICAvL2h0dHBzOi8vZ2l0aHViLmNvbS9kYXJpdXMvcmVxdWVzdEFuaW1hdGlvbkZyYW1lXHJcbiAgICAoZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgIERhdGUubm93ID0gRGF0ZS5ub3cgfHwgZnVuY3Rpb24oKSB7IHJldHVybiBuZXcgRGF0ZSgpLmdldFRpbWUoKTsgfTtcclxuXHJcbiAgICAgICAgdmFyIHZlbmRvcnMgPSBbJ3dlYmtpdCcsICdtb3onXTtcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZlbmRvcnMubGVuZ3RoICYmICF3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lOyArK2kpIHtcclxuICAgICAgICAgICAgdmFyIHZwID0gdmVuZG9yc1tpXTtcclxuICAgICAgICAgICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSA9IHdpbmRvd1t2cCsnUmVxdWVzdEFuaW1hdGlvbkZyYW1lJ107XHJcbiAgICAgICAgICAgIHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZSA9ICh3aW5kb3dbdnArJ0NhbmNlbEFuaW1hdGlvbkZyYW1lJ11cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfHwgd2luZG93W3ZwKydDYW5jZWxSZXF1ZXN0QW5pbWF0aW9uRnJhbWUnXSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICgvaVAoYWR8aG9uZXxvZCkuKk9TIDYvLnRlc3Qod2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQpIC8vIGlPUzYgaXMgYnVnZ3lcclxuICAgICAgICAgICAgfHwgIXdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgfHwgIXdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZSkge1xyXG4gICAgICAgICAgICB2YXIgbGFzdFRpbWUgPSAwO1xyXG4gICAgICAgICAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lID0gZnVuY3Rpb24oY2FsbGJhY2spIHtcclxuICAgICAgICAgICAgICAgIHZhciBub3cgPSBEYXRlLm5vdygpO1xyXG4gICAgICAgICAgICAgICAgdmFyIG5leHRUaW1lID0gTWF0aC5tYXgobGFzdFRpbWUgKyAxNiwgbm93KTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgeyBjYWxsYmFjayhsYXN0VGltZSA9IG5leHRUaW1lKTsgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5leHRUaW1lIC0gbm93KTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgd2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lID0gY2xlYXJUaW1lb3V0O1xyXG4gICAgICAgIH1cclxuICAgIH0oKSk7XHJcblxyXG4gICAgVUkuc3VwcG9ydC50b3VjaCA9IChcclxuICAgICAgICAoJ29udG91Y2hzdGFydCcgaW4gZG9jdW1lbnQpIHx8XHJcbiAgICAgICAgKGdsb2JhbC5Eb2N1bWVudFRvdWNoICYmIGRvY3VtZW50IGluc3RhbmNlb2YgZ2xvYmFsLkRvY3VtZW50VG91Y2gpICB8fFxyXG4gICAgICAgIChnbG9iYWwubmF2aWdhdG9yLm1zUG9pbnRlckVuYWJsZWQgJiYgZ2xvYmFsLm5hdmlnYXRvci5tc01heFRvdWNoUG9pbnRzID4gMCkgfHwgLy9JRSAxMFxyXG4gICAgICAgIChnbG9iYWwubmF2aWdhdG9yLnBvaW50ZXJFbmFibGVkICYmIGdsb2JhbC5uYXZpZ2F0b3IubWF4VG91Y2hQb2ludHMgPiAwKSB8fCAvL0lFID49MTFcclxuICAgICAgICBmYWxzZVxyXG4gICAgKTtcclxuXHJcbiAgICBVSS5zdXBwb3J0Lm11dGF0aW9ub2JzZXJ2ZXIgPSAoZ2xvYmFsLk11dGF0aW9uT2JzZXJ2ZXIgfHwgZ2xvYmFsLldlYktpdE11dGF0aW9uT2JzZXJ2ZXIgfHwgbnVsbCk7XHJcblxyXG4gICAgVUkuVXRpbHMgPSB7fTtcclxuXHJcbiAgICBVSS5VdGlscy5pc0Z1bGxzY3JlZW4gPSBmdW5jdGlvbigpIHtcclxuICAgICAgICByZXR1cm4gZG9jdW1lbnQud2Via2l0RnVsbHNjcmVlbkVsZW1lbnQgfHwgZG9jdW1lbnQubW96RnVsbFNjcmVlbkVsZW1lbnQgfHwgZG9jdW1lbnQubXNGdWxsc2NyZWVuRWxlbWVudCB8fCBkb2N1bWVudC5mdWxsc2NyZWVuRWxlbWVudCB8fCBmYWxzZTtcclxuICAgIH07XHJcblxyXG4gICAgVUkuVXRpbHMuc3RyMmpzb24gPSBmdW5jdGlvbihzdHIsIG5vdGV2aWwpIHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBpZiAobm90ZXZpbCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIEpTT04ucGFyc2Uoc3RyXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gd3JhcCBrZXlzIHdpdGhvdXQgcXVvdGUgd2l0aCB2YWxpZCBkb3VibGUgcXVvdGVcclxuICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvKFtcXCRcXHddKylcXHMqOi9nLCBmdW5jdGlvbihfLCAkMSl7cmV0dXJuICdcIicrJDErJ1wiOic7fSlcclxuICAgICAgICAgICAgICAgICAgICAvLyByZXBsYWNpbmcgc2luZ2xlIHF1b3RlIHdyYXBwZWQgb25lcyB0byBkb3VibGUgcXVvdGVcclxuICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvJyhbXiddKyknL2csIGZ1bmN0aW9uKF8sICQxKXtyZXR1cm4gJ1wiJyskMSsnXCInO30pXHJcbiAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIChuZXcgRnVuY3Rpb24oXCJcIiwgXCJ2YXIganNvbiA9IFwiICsgc3RyICsgXCI7IHJldHVybiBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KGpzb24pKTtcIikpKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGNhdGNoKGUpIHsgcmV0dXJuIGZhbHNlOyB9XHJcbiAgICB9O1xyXG5cclxuICAgIFVJLlV0aWxzLmRlYm91bmNlID0gZnVuY3Rpb24oZnVuYywgd2FpdCwgaW1tZWRpYXRlKSB7XHJcbiAgICAgICAgdmFyIHRpbWVvdXQ7XHJcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICB2YXIgY29udGV4dCA9IHRoaXMsIGFyZ3MgPSBhcmd1bWVudHM7XHJcbiAgICAgICAgICAgIHZhciBsYXRlciA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgdGltZW91dCA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICBpZiAoIWltbWVkaWF0ZSkgZnVuYy5hcHBseShjb250ZXh0LCBhcmdzKTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgdmFyIGNhbGxOb3cgPSBpbW1lZGlhdGUgJiYgIXRpbWVvdXQ7XHJcbiAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcclxuICAgICAgICAgICAgdGltZW91dCA9IHNldFRpbWVvdXQobGF0ZXIsIHdhaXQpO1xyXG4gICAgICAgICAgICBpZiAoY2FsbE5vdykgZnVuYy5hcHBseShjb250ZXh0LCBhcmdzKTtcclxuICAgICAgICB9O1xyXG4gICAgfTtcclxuXHJcbiAgICBVSS5VdGlscy5yZW1vdmVDc3NSdWxlcyA9IGZ1bmN0aW9uKHNlbGVjdG9yUmVnRXgpIHtcclxuICAgICAgICB2YXIgaWR4LCBpZHhzLCBzdHlsZXNoZWV0LCBfaSwgX2osIF9rLCBfbGVuLCBfbGVuMSwgX2xlbjIsIF9yZWY7XHJcblxyXG4gICAgICAgIGlmKCFzZWxlY3RvclJlZ0V4KSByZXR1cm47XHJcblxyXG4gICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICBfcmVmID0gZG9jdW1lbnQuc3R5bGVTaGVldHM7XHJcbiAgICAgICAgICAgICAgZm9yIChfaSA9IDAsIF9sZW4gPSBfcmVmLmxlbmd0aDsgX2kgPCBfbGVuOyBfaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBzdHlsZXNoZWV0ID0gX3JlZltfaV07XHJcbiAgICAgICAgICAgICAgICBpZHhzID0gW107XHJcbiAgICAgICAgICAgICAgICBzdHlsZXNoZWV0LmNzc1J1bGVzID0gc3R5bGVzaGVldC5jc3NSdWxlcztcclxuICAgICAgICAgICAgICAgIGZvciAoaWR4ID0gX2ogPSAwLCBfbGVuMSA9IHN0eWxlc2hlZXQuY3NzUnVsZXMubGVuZ3RoOyBfaiA8IF9sZW4xOyBpZHggPSArK19qKSB7XHJcbiAgICAgICAgICAgICAgICAgIGlmIChzdHlsZXNoZWV0LmNzc1J1bGVzW2lkeF0udHlwZSA9PT0gQ1NTUnVsZS5TVFlMRV9SVUxFICYmIHNlbGVjdG9yUmVnRXgudGVzdChzdHlsZXNoZWV0LmNzc1J1bGVzW2lkeF0uc2VsZWN0b3JUZXh0KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlkeHMudW5zaGlmdChpZHgpO1xyXG4gICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBmb3IgKF9rID0gMCwgX2xlbjIgPSBpZHhzLmxlbmd0aDsgX2sgPCBfbGVuMjsgX2srKykge1xyXG4gICAgICAgICAgICAgICAgICBzdHlsZXNoZWV0LmRlbGV0ZVJ1bGUoaWR4c1tfa10pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBjYXRjaCAoX2Vycm9yKSB7fVxyXG4gICAgICAgIH0sIDApO1xyXG4gICAgfTtcclxuXHJcbiAgICBVSS5VdGlscy5pc0luVmlldyA9IGZ1bmN0aW9uKGVsZW1lbnQsIG9wdGlvbnMpIHtcclxuXHJcbiAgICAgICAgdmFyICRlbGVtZW50ID0gJChlbGVtZW50KTtcclxuXHJcbiAgICAgICAgaWYgKCEkZWxlbWVudC5pcygnOnZpc2libGUnKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgd2luZG93X2xlZnQgPSBVSS4kd2luLnNjcm9sbExlZnQoKSwgd2luZG93X3RvcCA9IFVJLiR3aW4uc2Nyb2xsVG9wKCksIG9mZnNldCA9ICRlbGVtZW50Lm9mZnNldCgpLCBsZWZ0ID0gb2Zmc2V0LmxlZnQsIHRvcCA9IG9mZnNldC50b3A7XHJcblxyXG4gICAgICAgIG9wdGlvbnMgPSAkLmV4dGVuZCh7dG9wb2Zmc2V0OjAsIGxlZnRvZmZzZXQ6MH0sIG9wdGlvbnMpO1xyXG5cclxuICAgICAgICBpZiAodG9wICsgJGVsZW1lbnQuaGVpZ2h0KCkgPj0gd2luZG93X3RvcCAmJiB0b3AgLSBvcHRpb25zLnRvcG9mZnNldCA8PSB3aW5kb3dfdG9wICsgVUkuJHdpbi5oZWlnaHQoKSAmJlxyXG4gICAgICAgICAgICBsZWZ0ICsgJGVsZW1lbnQud2lkdGgoKSA+PSB3aW5kb3dfbGVmdCAmJiBsZWZ0IC0gb3B0aW9ucy5sZWZ0b2Zmc2V0IDw9IHdpbmRvd19sZWZ0ICsgVUkuJHdpbi53aWR0aCgpKSB7XHJcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgVUkuVXRpbHMuY2hlY2tEaXNwbGF5ID0gZnVuY3Rpb24oY29udGV4dCwgaW5pdGFuaW1hdGlvbikge1xyXG5cclxuICAgICAgICB2YXIgZWxlbWVudHMgPSBVSS4kKCdbZGF0YS11ay1tYXJnaW5dLCBbZGF0YS11ay1ncmlkLW1hdGNoXSwgW2RhdGEtdWstZ3JpZC1tYXJnaW5dLCBbZGF0YS11ay1jaGVjay1kaXNwbGF5XScsIGNvbnRleHQgfHwgZG9jdW1lbnQpLCBhbmltYXRlZDtcclxuXHJcbiAgICAgICAgaWYgKGNvbnRleHQgJiYgIWVsZW1lbnRzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICBlbGVtZW50cyA9ICQoY29udGV4dCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBlbGVtZW50cy50cmlnZ2VyKCdkaXNwbGF5LnVrLmNoZWNrJyk7XHJcblxyXG4gICAgICAgIC8vIGZpeCBmaXJlZm94IC8gSUUgYW5pbWF0aW9uc1xyXG4gICAgICAgIGlmIChpbml0YW5pbWF0aW9uKSB7XHJcblxyXG4gICAgICAgICAgICBpZiAodHlwZW9mKGluaXRhbmltYXRpb24pIT0nc3RyaW5nJykge1xyXG4gICAgICAgICAgICAgICAgaW5pdGFuaW1hdGlvbiA9ICdbY2xhc3MqPVwidWstYW5pbWF0aW9uLVwiXSc7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGVsZW1lbnRzLmZpbmQoaW5pdGFuaW1hdGlvbikuZWFjaChmdW5jdGlvbigpe1xyXG5cclxuICAgICAgICAgICAgICAgIHZhciBlbGUgID0gVUkuJCh0aGlzKSxcclxuICAgICAgICAgICAgICAgICAgICBjbHMgID0gZWxlLmF0dHIoJ2NsYXNzJyksXHJcbiAgICAgICAgICAgICAgICAgICAgYW5pbSA9IGNscy5tYXRjaCgvdWtcXC1hbmltYXRpb25cXC0oLispLyk7XHJcblxyXG4gICAgICAgICAgICAgICAgZWxlLnJlbW92ZUNsYXNzKGFuaW1bMF0pLndpZHRoKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgZWxlLmFkZENsYXNzKGFuaW1bMF0pO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBlbGVtZW50cztcclxuICAgIH07XHJcblxyXG4gICAgVUkuVXRpbHMub3B0aW9ucyA9IGZ1bmN0aW9uKHN0cmluZykge1xyXG5cclxuICAgICAgICBpZiAoJC5pc1BsYWluT2JqZWN0KHN0cmluZykpIHJldHVybiBzdHJpbmc7XHJcblxyXG4gICAgICAgIHZhciBzdGFydCA9IChzdHJpbmcgPyBzdHJpbmcuaW5kZXhPZihcIntcIikgOiAtMSksIG9wdGlvbnMgPSB7fTtcclxuXHJcbiAgICAgICAgaWYgKHN0YXJ0ICE9IC0xKSB7XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICBvcHRpb25zID0gVUkuVXRpbHMuc3RyMmpzb24oc3RyaW5nLnN1YnN0cihzdGFydCkpO1xyXG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7fVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIG9wdGlvbnM7XHJcbiAgICB9O1xyXG5cclxuICAgIFVJLlV0aWxzLmFuaW1hdGUgPSBmdW5jdGlvbihlbGVtZW50LCBjbHMpIHtcclxuXHJcbiAgICAgICAgdmFyIGQgPSAkLkRlZmVycmVkKCk7XHJcblxyXG4gICAgICAgIGVsZW1lbnQgPSBVSS4kKGVsZW1lbnQpO1xyXG4gICAgICAgIGNscyAgICAgPSBjbHM7XHJcblxyXG4gICAgICAgIGVsZW1lbnQuY3NzKCdkaXNwbGF5JywgJ25vbmUnKS5hZGRDbGFzcyhjbHMpLm9uZShVSS5zdXBwb3J0LmFuaW1hdGlvbi5lbmQsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBlbGVtZW50LnJlbW92ZUNsYXNzKGNscyk7XHJcbiAgICAgICAgICAgIGQucmVzb2x2ZSgpO1xyXG4gICAgICAgIH0pLndpZHRoKCk7XHJcblxyXG4gICAgICAgIGVsZW1lbnQuY3NzKCdkaXNwbGF5JywgJycpO1xyXG5cclxuICAgICAgICByZXR1cm4gZC5wcm9taXNlKCk7XHJcbiAgICB9O1xyXG5cclxuICAgIFVJLlV0aWxzLnVpZCA9IGZ1bmN0aW9uKHByZWZpeCkge1xyXG4gICAgICAgIHJldHVybiAocHJlZml4IHx8ICdpZCcpICsgKG5ldyBEYXRlKCkuZ2V0VGltZSgpKStcIlJBTkRcIisoTWF0aC5jZWlsKE1hdGgucmFuZG9tKCkgKiAxMDAwMDApKTtcclxuICAgIH07XHJcblxyXG4gICAgVUkuVXRpbHMudGVtcGxhdGUgPSBmdW5jdGlvbihzdHIsIGRhdGEpIHtcclxuXHJcbiAgICAgICAgdmFyIHRva2VucyA9IHN0ci5yZXBsYWNlKC9cXG4vZywgJ1xcXFxuJykucmVwbGFjZSgvXFx7XFx7XFx7XFxzKiguKz8pXFxzKlxcfVxcfVxcfS9nLCBcInt7ISQxfX1cIikuc3BsaXQoLyhcXHtcXHtcXHMqKC4rPylcXHMqXFx9XFx9KS9nKSxcclxuICAgICAgICAgICAgaT0wLCB0b2MsIGNtZCwgcHJvcCwgdmFsLCBmbiwgb3V0cHV0ID0gW10sIG9wZW5ibG9ja3MgPSAwO1xyXG5cclxuICAgICAgICB3aGlsZShpIDwgdG9rZW5zLmxlbmd0aCkge1xyXG5cclxuICAgICAgICAgICAgdG9jID0gdG9rZW5zW2ldO1xyXG5cclxuICAgICAgICAgICAgaWYodG9jLm1hdGNoKC9cXHtcXHtcXHMqKC4rPylcXHMqXFx9XFx9LykpIHtcclxuICAgICAgICAgICAgICAgIGkgPSBpICsgMTtcclxuICAgICAgICAgICAgICAgIHRvYyAgPSB0b2tlbnNbaV07XHJcbiAgICAgICAgICAgICAgICBjbWQgID0gdG9jWzBdO1xyXG4gICAgICAgICAgICAgICAgcHJvcCA9IHRvYy5zdWJzdHJpbmcodG9jLm1hdGNoKC9eKFxcXnxcXCN8XFwhfFxcfnxcXDopLykgPyAxOjApO1xyXG5cclxuICAgICAgICAgICAgICAgIHN3aXRjaChjbWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlICd+JzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgb3V0cHV0LnB1c2goXCJmb3IodmFyICRpPTA7JGk8XCIrcHJvcCtcIi5sZW5ndGg7JGkrKykgeyB2YXIgJGl0ZW0gPSBcIitwcm9wK1wiWyRpXTtcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wZW5ibG9ja3MrKztcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnOic6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG91dHB1dC5wdXNoKFwiZm9yKHZhciAka2V5IGluIFwiK3Byb3ArXCIpIHsgdmFyICR2YWwgPSBcIitwcm9wK1wiWyRrZXldO1wiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgb3BlbmJsb2NrcysrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlICcjJzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgb3V0cHV0LnB1c2goXCJpZihcIitwcm9wK1wiKSB7XCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBvcGVuYmxvY2tzKys7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ14nOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBvdXRwdXQucHVzaChcImlmKCFcIitwcm9wK1wiKSB7XCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBvcGVuYmxvY2tzKys7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJy8nOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBvdXRwdXQucHVzaChcIn1cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wZW5ibG9ja3MtLTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnISc6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG91dHB1dC5wdXNoKFwiX19yZXQucHVzaChcIitwcm9wK1wiKTtcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG91dHB1dC5wdXNoKFwiX19yZXQucHVzaChlc2NhcGUoXCIrcHJvcCtcIikpO1wiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBvdXRwdXQucHVzaChcIl9fcmV0LnB1c2goJ1wiK3RvYy5yZXBsYWNlKC9cXCcvZywgXCJcXFxcJ1wiKStcIicpO1wiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpID0gaSArIDE7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmbiAgPSBuZXcgRnVuY3Rpb24oJyRkYXRhJywgW1xyXG4gICAgICAgICAgICAndmFyIF9fcmV0ID0gW107JyxcclxuICAgICAgICAgICAgJ3RyeSB7JyxcclxuICAgICAgICAgICAgJ3dpdGgoJGRhdGEpeycsICghb3BlbmJsb2NrcyA/IG91dHB1dC5qb2luKCcnKSA6ICdfX3JldCA9IFtcIk5vdCBhbGwgYmxvY2tzIGFyZSBjbG9zZWQgY29ycmVjdGx5LlwiXScpLCAnfTsnLFxyXG4gICAgICAgICAgICAnfWNhdGNoKGUpe19fcmV0ID0gW2UubWVzc2FnZV07fScsXHJcbiAgICAgICAgICAgICdyZXR1cm4gX19yZXQuam9pbihcIlwiKS5yZXBsYWNlKC9cXFxcblxcXFxuL2csIFwiXFxcXG5cIik7JyxcclxuICAgICAgICAgICAgXCJmdW5jdGlvbiBlc2NhcGUoaHRtbCkgeyByZXR1cm4gU3RyaW5nKGh0bWwpLnJlcGxhY2UoLyYvZywgJyZhbXA7JykucmVwbGFjZSgvXFxcIi9nLCAnJnF1b3Q7JykucmVwbGFjZSgvPC9nLCAnJmx0OycpLnJlcGxhY2UoLz4vZywgJyZndDsnKTt9XCJcclxuICAgICAgICBdLmpvaW4oXCJcXG5cIikpO1xyXG5cclxuICAgICAgICByZXR1cm4gZGF0YSA/IGZuKGRhdGEpIDogZm47XHJcbiAgICB9O1xyXG5cclxuICAgIFVJLlV0aWxzLmV2ZW50cyAgICAgICA9IHt9O1xyXG4gICAgVUkuVXRpbHMuZXZlbnRzLmNsaWNrID0gVUkuc3VwcG9ydC50b3VjaCA/ICd0YXAnIDogJ2NsaWNrJztcclxuXHJcbiAgICBnbG9iYWwuVUlraXQgPSBVSTtcclxuXHJcbiAgICAvLyBkZXByZWNhdGVkXHJcblxyXG4gICAgVUkuZm4gPSBmdW5jdGlvbihjb21tYW5kLCBvcHRpb25zKSB7XHJcblxyXG4gICAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzLCBjbWQgPSBjb21tYW5kLm1hdGNoKC9eKFthLXpcXC1dKykoPzpcXC4oW2Etel0rKSk/L2kpLCBjb21wb25lbnQgPSBjbWRbMV0sIG1ldGhvZCA9IGNtZFsyXTtcclxuXHJcbiAgICAgICAgaWYgKCFVSVtjb21wb25lbnRdKSB7XHJcbiAgICAgICAgICAgICQuZXJyb3IoXCJVSWtpdCBjb21wb25lbnQgW1wiICsgY29tcG9uZW50ICsgXCJdIGRvZXMgbm90IGV4aXN0LlwiKTtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICB2YXIgJHRoaXMgPSAkKHRoaXMpLCBkYXRhID0gJHRoaXMuZGF0YShjb21wb25lbnQpO1xyXG4gICAgICAgICAgICBpZiAoIWRhdGEpICR0aGlzLmRhdGEoY29tcG9uZW50LCAoZGF0YSA9IFVJW2NvbXBvbmVudF0odGhpcywgbWV0aG9kID8gdW5kZWZpbmVkIDogb3B0aW9ucykpKTtcclxuICAgICAgICAgICAgaWYgKG1ldGhvZCkgZGF0YVttZXRob2RdLmFwcGx5KGRhdGEsIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3MsIDEpKTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcblxyXG4gICAgJC5VSWtpdCAgICAgICAgICA9IFVJO1xyXG4gICAgJC5mbi51ayAgICAgICAgICA9IFVJLmZuO1xyXG5cclxuICAgIFVJLmxhbmdkaXJlY3Rpb24gPSBVSS4kaHRtbC5hdHRyKFwiZGlyXCIpID09IFwicnRsXCIgPyBcInJpZ2h0XCIgOiBcImxlZnRcIjtcclxuXHJcbiAgICBVSS5jb21wb25lbnRzICAgID0ge307XHJcblxyXG4gICAgVUkuY29tcG9uZW50ID0gZnVuY3Rpb24obmFtZSwgZGVmKSB7XHJcblxyXG4gICAgICAgIHZhciBmbiA9IGZ1bmN0aW9uKGVsZW1lbnQsIG9wdGlvbnMpIHtcclxuXHJcbiAgICAgICAgICAgIHZhciAkdGhpcyA9IHRoaXM7XHJcblxyXG4gICAgICAgICAgICB0aGlzLlVJa2l0ICAgPSBVSTtcclxuICAgICAgICAgICAgdGhpcy5lbGVtZW50ID0gZWxlbWVudCA/IFVJLiQoZWxlbWVudCkgOiBudWxsO1xyXG4gICAgICAgICAgICB0aGlzLm9wdGlvbnMgPSAkLmV4dGVuZCh0cnVlLCB7fSwgdGhpcy5kZWZhdWx0cywgb3B0aW9ucyk7XHJcbiAgICAgICAgICAgIHRoaXMucGx1Z2lucyA9IHt9O1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMuZWxlbWVudCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5lbGVtZW50LmRhdGEobmFtZSwgdGhpcyk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMuaW5pdCgpO1xyXG5cclxuICAgICAgICAgICAgKHRoaXMub3B0aW9ucy5wbHVnaW5zLmxlbmd0aCA/IHRoaXMub3B0aW9ucy5wbHVnaW5zIDogT2JqZWN0LmtleXMoZm4ucGx1Z2lucykpLmZvckVhY2goZnVuY3Rpb24ocGx1Z2luKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGZuLnBsdWdpbnNbcGx1Z2luXS5pbml0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm4ucGx1Z2luc1twbHVnaW5dLmluaXQoJHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgICAgICR0aGlzLnBsdWdpbnNbcGx1Z2luXSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMudHJpZ2dlcignaW5pdC51ay5jb21wb25lbnQnLCBbbmFtZSwgdGhpc10pO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgZm4ucGx1Z2lucyA9IHt9O1xyXG5cclxuICAgICAgICAkLmV4dGVuZCh0cnVlLCBmbi5wcm90b3R5cGUsIHtcclxuXHJcbiAgICAgICAgICAgIGRlZmF1bHRzIDoge3BsdWdpbnM6IFtdfSxcclxuXHJcbiAgICAgICAgICAgIGJvb3Q6IGZ1bmN0aW9uKCl7fSxcclxuICAgICAgICAgICAgaW5pdDogZnVuY3Rpb24oKXt9LFxyXG5cclxuICAgICAgICAgICAgb246IGZ1bmN0aW9uKGExLGEyLGEzKXtcclxuICAgICAgICAgICAgICAgIHJldHVybiBVSS4kKHRoaXMuZWxlbWVudCB8fCB0aGlzKS5vbihhMSxhMixhMyk7XHJcbiAgICAgICAgICAgIH0sXHJcblxyXG4gICAgICAgICAgICBvbmU6IGZ1bmN0aW9uKGExLGEyLGEzKXtcclxuICAgICAgICAgICAgICAgIHJldHVybiBVSS4kKHRoaXMuZWxlbWVudCB8fCB0aGlzKS5vbmUoYTEsYTIsYTMpO1xyXG4gICAgICAgICAgICB9LFxyXG5cclxuICAgICAgICAgICAgb2ZmOiBmdW5jdGlvbihldnQpe1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFVJLiQodGhpcy5lbGVtZW50IHx8IHRoaXMpLm9mZihldnQpO1xyXG4gICAgICAgICAgICB9LFxyXG5cclxuICAgICAgICAgICAgdHJpZ2dlcjogZnVuY3Rpb24oZXZ0LCBwYXJhbXMpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBVSS4kKHRoaXMuZWxlbWVudCB8fCB0aGlzKS50cmlnZ2VyKGV2dCwgcGFyYW1zKTtcclxuICAgICAgICAgICAgfSxcclxuXHJcbiAgICAgICAgICAgIGZpbmQ6IGZ1bmN0aW9uKHNlbGVjdG9yKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gVUkuJCh0aGlzLmVsZW1lbnQgPyB0aGlzLmVsZW1lbnQ6IFtdKS5maW5kKHNlbGVjdG9yKTtcclxuICAgICAgICAgICAgfSxcclxuXHJcbiAgICAgICAgICAgIHByb3h5OiBmdW5jdGlvbihvYmosIG1ldGhvZHMpIHtcclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgJHRoaXMgPSB0aGlzO1xyXG5cclxuICAgICAgICAgICAgICAgIG1ldGhvZHMuc3BsaXQoJyAnKS5mb3JFYWNoKGZ1bmN0aW9uKG1ldGhvZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghJHRoaXNbbWV0aG9kXSkgJHRoaXNbbWV0aG9kXSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gb2JqW21ldGhvZF0uYXBwbHkob2JqLCBhcmd1bWVudHMpOyB9O1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0sXHJcblxyXG4gICAgICAgICAgICBtaXhpbjogZnVuY3Rpb24ob2JqLCBtZXRob2RzKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyICR0aGlzID0gdGhpcztcclxuXHJcbiAgICAgICAgICAgICAgICBtZXRob2RzLnNwbGl0KCcgJykuZm9yRWFjaChmdW5jdGlvbihtZXRob2QpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoISR0aGlzW21ldGhvZF0pICR0aGlzW21ldGhvZF0gPSBvYmpbbWV0aG9kXS5iaW5kKCR0aGlzKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9LFxyXG5cclxuICAgICAgICAgICAgb3B0aW9uOiBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9uc1thcmd1bWVudHNbMF1dIHx8IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PSAyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vcHRpb25zW2FyZ3VtZW50c1swXV0gPSBhcmd1bWVudHNbMV07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfSwgZGVmKTtcclxuXHJcbiAgICAgICAgdGhpcy5jb21wb25lbnRzW25hbWVdID0gZm47XHJcblxyXG4gICAgICAgIHRoaXNbbmFtZV0gPSBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgICAgIHZhciBlbGVtZW50LCBvcHRpb25zO1xyXG5cclxuICAgICAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGgpIHtcclxuXHJcbiAgICAgICAgICAgICAgICBzd2l0Y2goYXJndW1lbnRzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgYXJndW1lbnRzWzBdID09PSBcInN0cmluZ1wiIHx8IGFyZ3VtZW50c1swXS5ub2RlVHlwZSB8fCBhcmd1bWVudHNbMF0gaW5zdGFuY2VvZiBqUXVlcnkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQgPSAkKGFyZ3VtZW50c1swXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zID0gYXJndW1lbnRzWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50ID0gJChhcmd1bWVudHNbMF0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zID0gYXJndW1lbnRzWzFdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKGVsZW1lbnQgJiYgZWxlbWVudC5kYXRhKG5hbWUpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZWxlbWVudC5kYXRhKG5hbWUpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gKG5ldyBVSS5jb21wb25lbnRzW25hbWVdKGVsZW1lbnQsIG9wdGlvbnMpKTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBpZiAoVUkuZG9tcmVhZHkpIHtcclxuICAgICAgICAgICAgVUkuY29tcG9uZW50LmJvb3QobmFtZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gZm47XHJcbiAgICB9O1xyXG5cclxuICAgIFVJLnBsdWdpbiA9IGZ1bmN0aW9uKGNvbXBvbmVudCwgbmFtZSwgZGVmKSB7XHJcbiAgICAgICAgdGhpcy5jb21wb25lbnRzW2NvbXBvbmVudF0ucGx1Z2luc1tuYW1lXSA9IGRlZjtcclxuICAgIH07XHJcblxyXG4gICAgVUkuY29tcG9uZW50LmJvb3QgPSBmdW5jdGlvbihuYW1lKSB7XHJcblxyXG4gICAgICAgIGlmIChVSS5jb21wb25lbnRzW25hbWVdLnByb3RvdHlwZSAmJiBVSS5jb21wb25lbnRzW25hbWVdLnByb3RvdHlwZS5ib290ICYmICFVSS5jb21wb25lbnRzW25hbWVdLmJvb3RlZCkge1xyXG4gICAgICAgICAgICBVSS5jb21wb25lbnRzW25hbWVdLnByb3RvdHlwZS5ib290LmFwcGx5KFVJLCBbXSk7XHJcbiAgICAgICAgICAgIFVJLmNvbXBvbmVudHNbbmFtZV0uYm9vdGVkID0gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIFVJLmNvbXBvbmVudC5ib290Q29tcG9uZW50cyA9IGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICBmb3IgKHZhciBjb21wb25lbnQgaW4gVUkuY29tcG9uZW50cykge1xyXG4gICAgICAgICAgICBVSS5jb21wb25lbnQuYm9vdChjb21wb25lbnQpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG5cclxuICAgIC8vIERPTSBtdXRhdGlvbiBzYXZlIHJlYWR5IGhlbHBlciBmdW5jdGlvblxyXG5cclxuICAgIFVJLmRvbU9ic2VydmVycyA9IFtdO1xyXG4gICAgVUkuZG9tcmVhZHkgICAgID0gZmFsc2U7XHJcblxyXG4gICAgVUkucmVhZHkgPSBmdW5jdGlvbihmbikge1xyXG5cclxuICAgICAgICBVSS5kb21PYnNlcnZlcnMucHVzaChmbik7XHJcblxyXG4gICAgICAgIGlmIChVSS5kb21yZWFkeSkge1xyXG4gICAgICAgICAgICBmbihkb2N1bWVudCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICBVSS5vbiA9IGZ1bmN0aW9uKGExLGEyLGEzKXtcclxuXHJcbiAgICAgICAgaWYgKGExICYmIGExLmluZGV4T2YoJ3JlYWR5LnVrLmRvbScpID4gLTEgJiYgVUkuZG9tcmVhZHkpIHtcclxuICAgICAgICAgICAgYTIuYXBwbHkoVUkuJGRvYyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gVUkuJGRvYy5vbihhMSxhMixhMyk7XHJcbiAgICB9O1xyXG5cclxuICAgIFVJLm9uZSA9IGZ1bmN0aW9uKGExLGEyLGEzKXtcclxuXHJcbiAgICAgICAgaWYgKGExICYmIGExLmluZGV4T2YoJ3JlYWR5LnVrLmRvbScpID4gLTEgJiYgVUkuZG9tcmVhZHkpIHtcclxuICAgICAgICAgICAgYTIuYXBwbHkoVUkuJGRvYyk7XHJcbiAgICAgICAgICAgIHJldHVybiBVSS4kZG9jO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIFVJLiRkb2Mub25lKGExLGEyLGEzKTtcclxuICAgIH07XHJcblxyXG4gICAgVUkudHJpZ2dlciA9IGZ1bmN0aW9uKGV2dCwgcGFyYW1zKSB7XHJcbiAgICAgICAgcmV0dXJuIFVJLiRkb2MudHJpZ2dlcihldnQsIHBhcmFtcyk7XHJcbiAgICB9O1xyXG5cclxuICAgIFVJLmRvbU9ic2VydmUgPSBmdW5jdGlvbihzZWxlY3RvciwgZm4pIHtcclxuXHJcbiAgICAgICAgaWYoIVVJLnN1cHBvcnQubXV0YXRpb25vYnNlcnZlcikgcmV0dXJuO1xyXG5cclxuICAgICAgICBmbiA9IGZuIHx8IGZ1bmN0aW9uKCkge307XHJcblxyXG4gICAgICAgIFVJLiQoc2VsZWN0b3IpLmVhY2goZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgICAgICB2YXIgZWxlbWVudCAgPSB0aGlzLFxyXG4gICAgICAgICAgICAgICAgJGVsZW1lbnQgPSBVSS4kKGVsZW1lbnQpO1xyXG5cclxuICAgICAgICAgICAgaWYgKCRlbGVtZW50LmRhdGEoJ29ic2VydmVyJykpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdHJ5IHtcclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgb2JzZXJ2ZXIgPSBuZXcgVUkuc3VwcG9ydC5tdXRhdGlvbm9ic2VydmVyKFVJLlV0aWxzLmRlYm91bmNlKGZ1bmN0aW9uKG11dGF0aW9ucykge1xyXG4gICAgICAgICAgICAgICAgICAgIGZuLmFwcGx5KGVsZW1lbnQsIFtdKTtcclxuICAgICAgICAgICAgICAgICAgICAkZWxlbWVudC50cmlnZ2VyKCdjaGFuZ2VkLnVrLmRvbScpO1xyXG4gICAgICAgICAgICAgICAgfSwgNTApKTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBwYXNzIGluIHRoZSB0YXJnZXQgbm9kZSwgYXMgd2VsbCBhcyB0aGUgb2JzZXJ2ZXIgb3B0aW9uc1xyXG4gICAgICAgICAgICAgICAgb2JzZXJ2ZXIub2JzZXJ2ZShlbGVtZW50LCB7IGNoaWxkTGlzdDogdHJ1ZSwgc3VidHJlZTogdHJ1ZSB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAkZWxlbWVudC5kYXRhKCdvYnNlcnZlcicsIG9ic2VydmVyKTtcclxuXHJcbiAgICAgICAgICAgIH0gY2F0Y2goZSkge31cclxuICAgICAgICB9KTtcclxuICAgIH07XHJcblxyXG4gICAgVUkuaW5pdCA9IGZ1bmN0aW9uKHJvb3QpIHtcclxuXHJcbiAgICAgICAgcm9vdCA9IHJvb3QgfHwgZG9jdW1lbnQ7XHJcblxyXG4gICAgICAgIFVJLmRvbU9ic2VydmVycy5mb3JFYWNoKGZ1bmN0aW9uKGZuKXtcclxuICAgICAgICAgICAgZm4ocm9vdCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG5cclxuICAgIFVJLm9uKCdkb21yZWFkeS51ay5kb20nLCBmdW5jdGlvbigpe1xyXG5cclxuICAgICAgICBVSS5pbml0KCk7XHJcblxyXG4gICAgICAgIGlmIChVSS5kb21yZWFkeSkgVUkuVXRpbHMuY2hlY2tEaXNwbGF5KCk7XHJcbiAgICB9KTtcclxuXHJcbiAgICAkKGZ1bmN0aW9uKCl7XHJcblxyXG4gICAgICAgIFVJLiRib2R5ID0gVUkuJCgnYm9keScpO1xyXG5cclxuICAgICAgICBVSS5yZWFkeShmdW5jdGlvbihjb250ZXh0KXtcclxuICAgICAgICAgICAgVUkuZG9tT2JzZXJ2ZSgnW2RhdGEtdWstb2JzZXJ2ZV0nKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgVUkub24oJ2NoYW5nZWQudWsuZG9tJywgZnVuY3Rpb24oZSkge1xyXG4gICAgICAgICAgICBVSS5pbml0KGUudGFyZ2V0KTtcclxuICAgICAgICAgICAgVUkuVXRpbHMuY2hlY2tEaXNwbGF5KGUudGFyZ2V0KTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgVUkudHJpZ2dlcignYmVmb3JlcmVhZHkudWsuZG9tJyk7XHJcblxyXG4gICAgICAgIFVJLmNvbXBvbmVudC5ib290Q29tcG9uZW50cygpO1xyXG5cclxuICAgICAgICAvLyBjdXN0b20gc2Nyb2xsIG9ic2VydmVyXHJcbiAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKChmdW5jdGlvbigpe1xyXG5cclxuICAgICAgICAgICAgdmFyIG1lbW9yeSA9IHt4OiB3aW5kb3cucGFnZVhPZmZzZXQsIHk6d2luZG93LnBhZ2VZT2Zmc2V0fSwgZGlyO1xyXG5cclxuICAgICAgICAgICAgdmFyIGZuID0gZnVuY3Rpb24oKXtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAobWVtb3J5LnggIT0gd2luZG93LnBhZ2VYT2Zmc2V0IHx8IG1lbW9yeS55ICE9IHdpbmRvdy5wYWdlWU9mZnNldCkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBkaXIgPSB7eDogMCAsIHk6IDB9O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAod2luZG93LnBhZ2VYT2Zmc2V0ICE9IG1lbW9yeS54KSBkaXIueCA9IHdpbmRvdy5wYWdlWE9mZnNldCA+IG1lbW9yeS54ID8gMTotMTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAod2luZG93LnBhZ2VZT2Zmc2V0ICE9IG1lbW9yeS55KSBkaXIueSA9IHdpbmRvdy5wYWdlWU9mZnNldCA+IG1lbW9yeS55ID8gMTotMTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgbWVtb3J5ID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBcImRpclwiOiBkaXIsIFwieFwiOiB3aW5kb3cucGFnZVhPZmZzZXQsIFwieVwiOiB3aW5kb3cucGFnZVlPZmZzZXRcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBVSS4kZG9jLnRyaWdnZXIoJ3Njcm9sbGluZy51ay5kb2N1bWVudCcsIFttZW1vcnldKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZm4pO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgaWYgKFVJLnN1cHBvcnQudG91Y2gpIHtcclxuICAgICAgICAgICAgICAgIFVJLiRodG1sLm9uKCd0b3VjaG1vdmUgdG91Y2hlbmQgTVNQb2ludGVyTW92ZSBNU1BvaW50ZXJVcCBwb2ludGVybW92ZSBwb2ludGVydXAnLCBmbik7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChtZW1vcnkueCB8fCBtZW1vcnkueSkgZm4oKTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiBmbjtcclxuXHJcbiAgICAgICAgfSkoKSk7XHJcblxyXG4gICAgICAgIC8vIHJ1biBjb21wb25lbnQgaW5pdCBmdW5jdGlvbnMgb24gZG9tXHJcbiAgICAgICAgVUkudHJpZ2dlcignZG9tcmVhZHkudWsuZG9tJyk7XHJcblxyXG4gICAgICAgIGlmIChVSS5zdXBwb3J0LnRvdWNoKSB7XHJcblxyXG4gICAgICAgICAgICAvLyByZW1vdmUgY3NzIGhvdmVyIHJ1bGVzIGZvciB0b3VjaCBkZXZpY2VzXHJcbiAgICAgICAgICAgIC8vIFVJLlV0aWxzLnJlbW92ZUNzc1J1bGVzKC9cXC51ay0oPyFuYXZiYXIpLio6aG92ZXIvKTtcclxuXHJcbiAgICAgICAgICAgIC8vIHZpZXdwb3J0IHVuaXQgZml4IGZvciB1ay1oZWlnaHQtdmlld3BvcnQgLSBzaG91bGQgYmUgZml4ZWQgaW4gaU9TIDhcclxuICAgICAgICAgICAgaWYgKG5hdmlnYXRvci51c2VyQWdlbnQubWF0Y2goLyhpUGFkfGlQaG9uZXxpUG9kKS9nKSkge1xyXG5cclxuICAgICAgICAgICAgICAgIFVJLiR3aW4ub24oJ2xvYWQgb3JpZW50YXRpb25jaGFuZ2UgcmVzaXplJywgVUkuVXRpbHMuZGVib3VuY2UoKGZ1bmN0aW9uKCl7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBmbiA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkKCcudWstaGVpZ2h0LXZpZXdwb3J0JykuY3NzKCdoZWlnaHQnLCB3aW5kb3cuaW5uZXJIZWlnaHQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZm47XHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZuKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgfSkoKSwgMTAwKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIFVJLnRyaWdnZXIoJ2FmdGVycmVhZHkudWsuZG9tJyk7XHJcblxyXG4gICAgICAgIC8vIG1hcmsgdGhhdCBkb21yZWFkeSBpcyBsZWZ0IGJlaGluZFxyXG4gICAgICAgIFVJLmRvbXJlYWR5ID0gdHJ1ZTtcclxuICAgIH0pO1xyXG5cclxuICAgIC8vIGFkZCB0b3VjaCBpZGVudGlmaWVyIGNsYXNzXHJcbiAgICBVSS4kaHRtbC5hZGRDbGFzcyhVSS5zdXBwb3J0LnRvdWNoID8gXCJ1ay10b3VjaFwiIDogXCJ1ay1ub3RvdWNoXCIpO1xyXG5cclxuICAgIC8vIGFkZCB1ay1ob3ZlciBjbGFzcyBvbiB0YXAgdG8gc3VwcG9ydCBvdmVybGF5cyBvbiB0b3VjaCBkZXZpY2VzXHJcbiAgICBpZiAoVUkuc3VwcG9ydC50b3VjaCkge1xyXG5cclxuICAgICAgICB2YXIgaG92ZXJzZXQgPSBmYWxzZSxcclxuICAgICAgICAgICAgZXhjbHVkZSxcclxuICAgICAgICAgICAgaG92ZXJjbHMgPSAndWstaG92ZXInLFxyXG4gICAgICAgICAgICBzZWxlY3RvciA9ICcudWstb3ZlcmxheSwgLnVrLW92ZXJsYXktaG92ZXIsIC51ay1vdmVybGF5LXRvZ2dsZSwgLnVrLWFuaW1hdGlvbi1ob3ZlciwgLnVrLWhhcy1ob3Zlcic7XHJcblxyXG4gICAgICAgIFVJLiRodG1sLm9uKCdtb3VzZWVudGVyIHRvdWNoc3RhcnQgTVNQb2ludGVyRG93biBwb2ludGVyZG93bicsIHNlbGVjdG9yLCBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgICAgIGlmIChob3ZlcnNldCkgJCgnLicraG92ZXJjbHMpLnJlbW92ZUNsYXNzKGhvdmVyY2xzKTtcclxuXHJcbiAgICAgICAgICAgIGhvdmVyc2V0ID0gJCh0aGlzKS5hZGRDbGFzcyhob3ZlcmNscyk7XHJcblxyXG4gICAgICAgIH0pLm9uKCdtb3VzZWxlYXZlIHRvdWNoZW5kIE1TUG9pbnRlclVwIHBvaW50ZXJ1cCcsIGZ1bmN0aW9uKGUpIHtcclxuXHJcbiAgICAgICAgICAgIGV4Y2x1ZGUgPSAkKGUudGFyZ2V0KS5wYXJlbnRzKHNlbGVjdG9yKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChob3ZlcnNldCkge1xyXG4gICAgICAgICAgICAgICAgaG92ZXJzZXQubm90KGV4Y2x1ZGUpLnJlbW92ZUNsYXNzKGhvdmVyY2xzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBVSTtcclxufSk7XHJcblxyXG4vLyAgQmFzZWQgb24gWmVwdG9zIHRvdWNoLmpzXHJcbi8vICBodHRwczovL3Jhdy5naXRodWIuY29tL21hZHJvYmJ5L3plcHRvL21hc3Rlci9zcmMvdG91Y2guanNcclxuLy8gIFplcHRvLmpzIG1heSBiZSBmcmVlbHkgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxyXG5cclxuOyhmdW5jdGlvbigkKXtcclxuXHJcbiAgaWYgKCQuZm4uc3dpcGVMZWZ0KSB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuXHJcbiAgdmFyIHRvdWNoID0ge30sIHRvdWNoVGltZW91dCwgdGFwVGltZW91dCwgc3dpcGVUaW1lb3V0LCBsb25nVGFwVGltZW91dCwgbG9uZ1RhcERlbGF5ID0gNzUwLCBnZXN0dXJlO1xyXG5cclxuICBmdW5jdGlvbiBzd2lwZURpcmVjdGlvbih4MSwgeDIsIHkxLCB5Mikge1xyXG4gICAgcmV0dXJuIE1hdGguYWJzKHgxIC0geDIpID49IE1hdGguYWJzKHkxIC0geTIpID8gKHgxIC0geDIgPiAwID8gJ0xlZnQnIDogJ1JpZ2h0JykgOiAoeTEgLSB5MiA+IDAgPyAnVXAnIDogJ0Rvd24nKTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGxvbmdUYXAoKSB7XHJcbiAgICBsb25nVGFwVGltZW91dCA9IG51bGw7XHJcbiAgICBpZiAodG91Y2gubGFzdCkge1xyXG4gICAgICBpZiAoIHRvdWNoLmVsICE9PSB1bmRlZmluZWQgKSB0b3VjaC5lbC50cmlnZ2VyKCdsb25nVGFwJyk7XHJcbiAgICAgIHRvdWNoID0ge307XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBjYW5jZWxMb25nVGFwKCkge1xyXG4gICAgaWYgKGxvbmdUYXBUaW1lb3V0KSBjbGVhclRpbWVvdXQobG9uZ1RhcFRpbWVvdXQpO1xyXG4gICAgbG9uZ1RhcFRpbWVvdXQgPSBudWxsO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gY2FuY2VsQWxsKCkge1xyXG4gICAgaWYgKHRvdWNoVGltZW91dCkgICBjbGVhclRpbWVvdXQodG91Y2hUaW1lb3V0KTtcclxuICAgIGlmICh0YXBUaW1lb3V0KSAgICAgY2xlYXJUaW1lb3V0KHRhcFRpbWVvdXQpO1xyXG4gICAgaWYgKHN3aXBlVGltZW91dCkgICBjbGVhclRpbWVvdXQoc3dpcGVUaW1lb3V0KTtcclxuICAgIGlmIChsb25nVGFwVGltZW91dCkgY2xlYXJUaW1lb3V0KGxvbmdUYXBUaW1lb3V0KTtcclxuICAgIHRvdWNoVGltZW91dCA9IHRhcFRpbWVvdXQgPSBzd2lwZVRpbWVvdXQgPSBsb25nVGFwVGltZW91dCA9IG51bGw7XHJcbiAgICB0b3VjaCA9IHt9O1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gaXNQcmltYXJ5VG91Y2goZXZlbnQpe1xyXG4gICAgcmV0dXJuIGV2ZW50LnBvaW50ZXJUeXBlID09IGV2ZW50Lk1TUE9JTlRFUl9UWVBFX1RPVUNIICYmIGV2ZW50LmlzUHJpbWFyeTtcclxuICB9XHJcblxyXG4gICQoZnVuY3Rpb24oKXtcclxuICAgIHZhciBub3csIGRlbHRhLCBkZWx0YVggPSAwLCBkZWx0YVkgPSAwLCBmaXJzdFRvdWNoO1xyXG5cclxuICAgIGlmICgnTVNHZXN0dXJlJyBpbiB3aW5kb3cpIHtcclxuICAgICAgZ2VzdHVyZSA9IG5ldyBNU0dlc3R1cmUoKTtcclxuICAgICAgZ2VzdHVyZS50YXJnZXQgPSBkb2N1bWVudC5ib2R5O1xyXG4gICAgfVxyXG5cclxuICAgICQoZG9jdW1lbnQpXHJcbiAgICAgIC5vbignTVNHZXN0dXJlRW5kIGdlc3R1cmVlbmQnLCBmdW5jdGlvbihlKXtcclxuXHJcbiAgICAgICAgdmFyIHN3aXBlRGlyZWN0aW9uRnJvbVZlbG9jaXR5ID0gZS5vcmlnaW5hbEV2ZW50LnZlbG9jaXR5WCA+IDEgPyAnUmlnaHQnIDogZS5vcmlnaW5hbEV2ZW50LnZlbG9jaXR5WCA8IC0xID8gJ0xlZnQnIDogZS5vcmlnaW5hbEV2ZW50LnZlbG9jaXR5WSA+IDEgPyAnRG93bicgOiBlLm9yaWdpbmFsRXZlbnQudmVsb2NpdHlZIDwgLTEgPyAnVXAnIDogbnVsbDtcclxuXHJcbiAgICAgICAgaWYgKHN3aXBlRGlyZWN0aW9uRnJvbVZlbG9jaXR5ICYmIHRvdWNoLmVsICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgIHRvdWNoLmVsLnRyaWdnZXIoJ3N3aXBlJyk7XHJcbiAgICAgICAgICB0b3VjaC5lbC50cmlnZ2VyKCdzd2lwZScrIHN3aXBlRGlyZWN0aW9uRnJvbVZlbG9jaXR5KTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pXHJcbiAgICAgIC8vIE1TUG9pbnRlckRvd246IGZvciBJRTEwXHJcbiAgICAgIC8vIHBvaW50ZXJkb3duOiBmb3IgSUUxMVxyXG4gICAgICAub24oJ3RvdWNoc3RhcnQgTVNQb2ludGVyRG93biBwb2ludGVyZG93bicsIGZ1bmN0aW9uKGUpe1xyXG5cclxuICAgICAgICBpZihlLnR5cGUgPT0gJ01TUG9pbnRlckRvd24nICYmICFpc1ByaW1hcnlUb3VjaChlLm9yaWdpbmFsRXZlbnQpKSByZXR1cm47XHJcblxyXG4gICAgICAgIGZpcnN0VG91Y2ggPSAoZS50eXBlID09ICdNU1BvaW50ZXJEb3duJyB8fCBlLnR5cGUgPT0gJ3BvaW50ZXJkb3duJykgPyBlIDogZS5vcmlnaW5hbEV2ZW50LnRvdWNoZXNbMF07XHJcblxyXG4gICAgICAgIG5vdyAgICAgID0gRGF0ZS5ub3coKTtcclxuICAgICAgICBkZWx0YSAgICA9IG5vdyAtICh0b3VjaC5sYXN0IHx8IG5vdyk7XHJcbiAgICAgICAgdG91Y2guZWwgPSAkKCd0YWdOYW1lJyBpbiBmaXJzdFRvdWNoLnRhcmdldCA/IGZpcnN0VG91Y2gudGFyZ2V0IDogZmlyc3RUb3VjaC50YXJnZXQucGFyZW50Tm9kZSk7XHJcblxyXG4gICAgICAgIGlmKHRvdWNoVGltZW91dCkgY2xlYXJUaW1lb3V0KHRvdWNoVGltZW91dCk7XHJcblxyXG4gICAgICAgIHRvdWNoLngxID0gZmlyc3RUb3VjaC5wYWdlWDtcclxuICAgICAgICB0b3VjaC55MSA9IGZpcnN0VG91Y2gucGFnZVk7XHJcblxyXG4gICAgICAgIGlmIChkZWx0YSA+IDAgJiYgZGVsdGEgPD0gMjUwKSB0b3VjaC5pc0RvdWJsZVRhcCA9IHRydWU7XHJcblxyXG4gICAgICAgIHRvdWNoLmxhc3QgPSBub3c7XHJcbiAgICAgICAgbG9uZ1RhcFRpbWVvdXQgPSBzZXRUaW1lb3V0KGxvbmdUYXAsIGxvbmdUYXBEZWxheSk7XHJcblxyXG4gICAgICAgIC8vIGFkZHMgdGhlIGN1cnJlbnQgdG91Y2ggY29udGFjdCBmb3IgSUUgZ2VzdHVyZSByZWNvZ25pdGlvblxyXG4gICAgICAgIGlmIChnZXN0dXJlICYmICggZS50eXBlID09ICdNU1BvaW50ZXJEb3duJyB8fCBlLnR5cGUgPT0gJ3BvaW50ZXJkb3duJyB8fCBlLnR5cGUgPT0gJ3RvdWNoc3RhcnQnICkgKSB7XHJcbiAgICAgICAgICBnZXN0dXJlLmFkZFBvaW50ZXIoZS5vcmlnaW5hbEV2ZW50LnBvaW50ZXJJZCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgfSlcclxuICAgICAgLy8gTVNQb2ludGVyTW92ZTogZm9yIElFMTBcclxuICAgICAgLy8gcG9pbnRlcm1vdmU6IGZvciBJRTExXHJcbiAgICAgIC5vbigndG91Y2htb3ZlIE1TUG9pbnRlck1vdmUgcG9pbnRlcm1vdmUnLCBmdW5jdGlvbihlKXtcclxuXHJcbiAgICAgICAgaWYgKGUudHlwZSA9PSAnTVNQb2ludGVyTW92ZScgJiYgIWlzUHJpbWFyeVRvdWNoKGUub3JpZ2luYWxFdmVudCkpIHJldHVybjtcclxuXHJcbiAgICAgICAgZmlyc3RUb3VjaCA9IChlLnR5cGUgPT0gJ01TUG9pbnRlck1vdmUnIHx8IGUudHlwZSA9PSAncG9pbnRlcm1vdmUnKSA/IGUgOiBlLm9yaWdpbmFsRXZlbnQudG91Y2hlc1swXTtcclxuXHJcbiAgICAgICAgY2FuY2VsTG9uZ1RhcCgpO1xyXG4gICAgICAgIHRvdWNoLngyID0gZmlyc3RUb3VjaC5wYWdlWDtcclxuICAgICAgICB0b3VjaC55MiA9IGZpcnN0VG91Y2gucGFnZVk7XHJcblxyXG4gICAgICAgIGRlbHRhWCArPSBNYXRoLmFicyh0b3VjaC54MSAtIHRvdWNoLngyKTtcclxuICAgICAgICBkZWx0YVkgKz0gTWF0aC5hYnModG91Y2gueTEgLSB0b3VjaC55Mik7XHJcbiAgICAgIH0pXHJcbiAgICAgIC8vIE1TUG9pbnRlclVwOiBmb3IgSUUxMFxyXG4gICAgICAvLyBwb2ludGVydXA6IGZvciBJRTExXHJcbiAgICAgIC5vbigndG91Y2hlbmQgTVNQb2ludGVyVXAgcG9pbnRlcnVwJywgZnVuY3Rpb24oZSl7XHJcblxyXG4gICAgICAgIGlmIChlLnR5cGUgPT0gJ01TUG9pbnRlclVwJyAmJiAhaXNQcmltYXJ5VG91Y2goZS5vcmlnaW5hbEV2ZW50KSkgcmV0dXJuO1xyXG5cclxuICAgICAgICBjYW5jZWxMb25nVGFwKCk7XHJcblxyXG4gICAgICAgIC8vIHN3aXBlXHJcbiAgICAgICAgaWYgKCh0b3VjaC54MiAmJiBNYXRoLmFicyh0b3VjaC54MSAtIHRvdWNoLngyKSA+IDMwKSB8fCAodG91Y2gueTIgJiYgTWF0aC5hYnModG91Y2gueTEgLSB0b3VjaC55MikgPiAzMCkpe1xyXG5cclxuICAgICAgICAgIHN3aXBlVGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIGlmICggdG91Y2guZWwgIT09IHVuZGVmaW5lZCApIHtcclxuICAgICAgICAgICAgICB0b3VjaC5lbC50cmlnZ2VyKCdzd2lwZScpO1xyXG4gICAgICAgICAgICAgIHRvdWNoLmVsLnRyaWdnZXIoJ3N3aXBlJyArIChzd2lwZURpcmVjdGlvbih0b3VjaC54MSwgdG91Y2gueDIsIHRvdWNoLnkxLCB0b3VjaC55MikpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0b3VjaCA9IHt9O1xyXG4gICAgICAgICAgfSwgMCk7XHJcblxyXG4gICAgICAgIC8vIG5vcm1hbCB0YXBcclxuICAgICAgICB9IGVsc2UgaWYgKCdsYXN0JyBpbiB0b3VjaCkge1xyXG5cclxuICAgICAgICAgIC8vIGRvbid0IGZpcmUgdGFwIHdoZW4gZGVsdGEgcG9zaXRpb24gY2hhbmdlZCBieSBtb3JlIHRoYW4gMzAgcGl4ZWxzLFxyXG4gICAgICAgICAgLy8gZm9yIGluc3RhbmNlIHdoZW4gbW92aW5nIHRvIGEgcG9pbnQgYW5kIGJhY2sgdG8gb3JpZ2luXHJcbiAgICAgICAgICBpZiAoaXNOYU4oZGVsdGFYKSB8fCAoZGVsdGFYIDwgMzAgJiYgZGVsdGFZIDwgMzApKSB7XHJcbiAgICAgICAgICAgIC8vIGRlbGF5IGJ5IG9uZSB0aWNrIHNvIHdlIGNhbiBjYW5jZWwgdGhlICd0YXAnIGV2ZW50IGlmICdzY3JvbGwnIGZpcmVzXHJcbiAgICAgICAgICAgIC8vICgndGFwJyBmaXJlcyBiZWZvcmUgJ3Njcm9sbCcpXHJcbiAgICAgICAgICAgIHRhcFRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICAgICAgICAvLyB0cmlnZ2VyIHVuaXZlcnNhbCAndGFwJyB3aXRoIHRoZSBvcHRpb24gdG8gY2FuY2VsVG91Y2goKVxyXG4gICAgICAgICAgICAgIC8vIChjYW5jZWxUb3VjaCBjYW5jZWxzIHByb2Nlc3Npbmcgb2Ygc2luZ2xlIHZzIGRvdWJsZSB0YXBzIGZvciBmYXN0ZXIgJ3RhcCcgcmVzcG9uc2UpXHJcbiAgICAgICAgICAgICAgdmFyIGV2ZW50ID0gJC5FdmVudCgndGFwJyk7XHJcbiAgICAgICAgICAgICAgZXZlbnQuY2FuY2VsVG91Y2ggPSBjYW5jZWxBbGw7XHJcbiAgICAgICAgICAgICAgaWYgKCB0b3VjaC5lbCAhPT0gdW5kZWZpbmVkICkgdG91Y2guZWwudHJpZ2dlcihldmVudCk7XHJcblxyXG4gICAgICAgICAgICAgIC8vIHRyaWdnZXIgZG91YmxlIHRhcCBpbW1lZGlhdGVseVxyXG4gICAgICAgICAgICAgIGlmICh0b3VjaC5pc0RvdWJsZVRhcCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCB0b3VjaC5lbCAhPT0gdW5kZWZpbmVkICkgdG91Y2guZWwudHJpZ2dlcignZG91YmxlVGFwJyk7XHJcbiAgICAgICAgICAgICAgICB0b3VjaCA9IHt9O1xyXG4gICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgLy8gdHJpZ2dlciBzaW5nbGUgdGFwIGFmdGVyIDI1MG1zIG9mIGluYWN0aXZpdHlcclxuICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRvdWNoVGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgICAgICAgdG91Y2hUaW1lb3V0ID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgaWYgKCB0b3VjaC5lbCAhPT0gdW5kZWZpbmVkICkgdG91Y2guZWwudHJpZ2dlcignc2luZ2xlVGFwJyk7XHJcbiAgICAgICAgICAgICAgICAgIHRvdWNoID0ge307XHJcbiAgICAgICAgICAgICAgICB9LCAyNTApO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSwgMCk7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0b3VjaCA9IHt9O1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgZGVsdGFYID0gZGVsdGFZID0gMDtcclxuICAgICAgICB9XHJcbiAgICAgIH0pXHJcbiAgICAgIC8vIHdoZW4gdGhlIGJyb3dzZXIgd2luZG93IGxvc2VzIGZvY3VzLFxyXG4gICAgICAvLyBmb3IgZXhhbXBsZSB3aGVuIGEgbW9kYWwgZGlhbG9nIGlzIHNob3duLFxyXG4gICAgICAvLyBjYW5jZWwgYWxsIG9uZ29pbmcgZXZlbnRzXHJcbiAgICAgIC5vbigndG91Y2hjYW5jZWwgTVNQb2ludGVyQ2FuY2VsJywgY2FuY2VsQWxsKTtcclxuXHJcbiAgICAvLyBzY3JvbGxpbmcgdGhlIHdpbmRvdyBpbmRpY2F0ZXMgaW50ZW50aW9uIG9mIHRoZSB1c2VyXHJcbiAgICAvLyB0byBzY3JvbGwsIG5vdCB0YXAgb3Igc3dpcGUsIHNvIGNhbmNlbCBhbGwgb25nb2luZyBldmVudHNcclxuICAgICQod2luZG93KS5vbignc2Nyb2xsJywgY2FuY2VsQWxsKTtcclxuICB9KTtcclxuXHJcbiAgWydzd2lwZScsICdzd2lwZUxlZnQnLCAnc3dpcGVSaWdodCcsICdzd2lwZVVwJywgJ3N3aXBlRG93bicsICdkb3VibGVUYXAnLCAndGFwJywgJ3NpbmdsZVRhcCcsICdsb25nVGFwJ10uZm9yRWFjaChmdW5jdGlvbihldmVudE5hbWUpe1xyXG4gICAgJC5mbltldmVudE5hbWVdID0gZnVuY3Rpb24oY2FsbGJhY2speyByZXR1cm4gJCh0aGlzKS5vbihldmVudE5hbWUsIGNhbGxiYWNrKTsgfTtcclxuICB9KTtcclxufSkoalF1ZXJ5KTtcclxuXHJcbihmdW5jdGlvbihVSSkge1xyXG5cclxuICAgIFwidXNlIHN0cmljdFwiO1xyXG5cclxuICAgIHZhciBzdGFja3MgPSBbXTtcclxuXHJcbiAgICBVSS5jb21wb25lbnQoJ3N0YWNrTWFyZ2luJywge1xyXG5cclxuICAgICAgICBkZWZhdWx0czoge1xyXG4gICAgICAgICAgICAnY2xzJzogJ3VrLW1hcmdpbi1zbWFsbC10b3AnXHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgYm9vdDogZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgICAgICAvLyBpbml0IGNvZGVcclxuICAgICAgICAgICAgVUkucmVhZHkoZnVuY3Rpb24oY29udGV4dCkge1xyXG5cclxuICAgICAgICAgICAgICAgIFVJLiQoXCJbZGF0YS11ay1tYXJnaW5dXCIsIGNvbnRleHQpLmVhY2goZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBlbGUgPSBVSS4kKHRoaXMpLCBvYmo7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghZWxlLmRhdGEoXCJzdGFja01hcmdpblwiKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBvYmogPSBVSS5zdGFja01hcmdpbihlbGUsIFVJLlV0aWxzLm9wdGlvbnMoZWxlLmF0dHIoXCJkYXRhLXVrLW1hcmdpblwiKSkpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBpbml0OiBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgICAgIHZhciAkdGhpcyA9IHRoaXM7XHJcblxyXG4gICAgICAgICAgICB0aGlzLmNvbHVtbnMgPSBbXTtcclxuXHJcbiAgICAgICAgICAgIFVJLiR3aW4ub24oJ3Jlc2l6ZSBvcmllbnRhdGlvbmNoYW5nZScsIChmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgZm4gPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICAkdGhpcy5wcm9jZXNzKCk7XHJcbiAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgIFVJLiQoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm4oKTtcclxuICAgICAgICAgICAgICAgICAgICBVSS4kd2luLm9uKFwibG9hZFwiLCBmbik7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gVUkuVXRpbHMuZGVib3VuY2UoZm4sIDIwKTtcclxuICAgICAgICAgICAgfSkoKSk7XHJcblxyXG4gICAgICAgICAgICBVSS4kaHRtbC5vbihcImNoYW5nZWQudWsuZG9tXCIsIGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICAgICAgICAgICR0aGlzLnByb2Nlc3MoKTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLm9uKFwiZGlzcGxheS51ay5jaGVja1wiLCBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5lbGVtZW50LmlzKFwiOnZpc2libGVcIikpIHRoaXMucHJvY2VzcygpO1xyXG4gICAgICAgICAgICB9LmJpbmQodGhpcykpO1xyXG5cclxuICAgICAgICAgICAgc3RhY2tzLnB1c2godGhpcyk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgcHJvY2VzczogZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgICAgICB0aGlzLmNvbHVtbnMgPSB0aGlzLmVsZW1lbnQuY2hpbGRyZW4oKTtcclxuXHJcbiAgICAgICAgICAgIFVJLlV0aWxzLnN0YWNrTWFyZ2luKHRoaXMuY29sdW1ucywgdGhpcy5vcHRpb25zKTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIHJldmVydDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY29sdW1ucy5yZW1vdmVDbGFzcyh0aGlzLm9wdGlvbnMuY2xzKTtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG5cclxuICAgIC8vIHJlc3BvbnNpdmUgZWxlbWVudCBlLmcuIGlmcmFtZXNcclxuXHJcbiAgICAoZnVuY3Rpb24oKXtcclxuXHJcbiAgICAgICAgdmFyIGVsZW1lbnRzID0gW10sIGNoZWNrID0gZnVuY3Rpb24oZWxlKSB7XHJcblxyXG4gICAgICAgICAgICBpZiAoIWVsZS5pcygnOnZpc2libGUnKSkgcmV0dXJuO1xyXG5cclxuICAgICAgICAgICAgdmFyIHdpZHRoICA9IGVsZS5wYXJlbnQoKS53aWR0aCgpLFxyXG4gICAgICAgICAgICAgICAgaXdpZHRoID0gZWxlLmRhdGEoJ3dpZHRoJyksXHJcbiAgICAgICAgICAgICAgICByYXRpbyAgPSAod2lkdGggLyBpd2lkdGgpLFxyXG4gICAgICAgICAgICAgICAgaGVpZ2h0ID0gTWF0aC5mbG9vcihyYXRpbyAqIGVsZS5kYXRhKCdoZWlnaHQnKSk7XHJcblxyXG4gICAgICAgICAgICBlbGUuY3NzKHsnaGVpZ2h0JzogKHdpZHRoIDwgaXdpZHRoKSA/IGhlaWdodCA6IGVsZS5kYXRhKCdoZWlnaHQnKX0pO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIFVJLmNvbXBvbmVudCgncmVzcG9uc2l2ZUVsZW1lbnQnLCB7XHJcblxyXG4gICAgICAgICAgICBkZWZhdWx0czoge30sXHJcblxyXG4gICAgICAgICAgICBib290OiBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBpbml0IGNvZGVcclxuICAgICAgICAgICAgICAgIFVJLnJlYWR5KGZ1bmN0aW9uKGNvbnRleHQpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgVUkuJChcImlmcmFtZS51ay1yZXNwb25zaXZlLXdpZHRoLCBbZGF0YS11ay1yZXNwb25zaXZlXVwiLCBjb250ZXh0KS5lYWNoKGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGVsZSA9IFVJLiQodGhpcyksIG9iajtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghZWxlLmRhdGEoXCJyZXNwb25zaXZlSWZyYW1lXCIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYmogPSBVSS5yZXNwb25zaXZlRWxlbWVudChlbGUsIHt9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0sXHJcblxyXG4gICAgICAgICAgICBpbml0OiBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgZWxlID0gdGhpcy5lbGVtZW50O1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChlbGUuYXR0cignd2lkdGgnKSAmJiBlbGUuYXR0cignaGVpZ2h0JykpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgZWxlLmRhdGEoe1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgJ3dpZHRoJyA6IGVsZS5hdHRyKCd3aWR0aCcpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAnaGVpZ2h0JzogZWxlLmF0dHIoJ2hlaWdodCcpXHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH0pLm9uKCdkaXNwbGF5LnVrLmNoZWNrJywgZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2hlY2soZWxlKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgY2hlY2soZWxlKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudHMucHVzaChlbGUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIFVJLiR3aW4ub24oJ3Jlc2l6ZSBsb2FkJywgVUkuVXRpbHMuZGVib3VuY2UoZnVuY3Rpb24oKXtcclxuXHJcbiAgICAgICAgICAgIGVsZW1lbnRzLmZvckVhY2goZnVuY3Rpb24oZWxlKXtcclxuICAgICAgICAgICAgICAgIGNoZWNrKGVsZSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICB9LCAxNSkpO1xyXG5cclxuICAgIH0pKCk7XHJcblxyXG5cclxuXHJcbiAgICAvLyBoZWxwZXJcclxuXHJcbiAgICBVSS5VdGlscy5zdGFja01hcmdpbiA9IGZ1bmN0aW9uKGVsZW1lbnRzLCBvcHRpb25zKSB7XHJcblxyXG4gICAgICAgIG9wdGlvbnMgPSBVSS4kLmV4dGVuZCh7XHJcbiAgICAgICAgICAgICdjbHMnOiAndWstbWFyZ2luLXNtYWxsLXRvcCdcclxuICAgICAgICB9LCBvcHRpb25zKTtcclxuXHJcbiAgICAgICAgb3B0aW9ucy5jbHMgPSBvcHRpb25zLmNscztcclxuXHJcbiAgICAgICAgZWxlbWVudHMgPSBVSS4kKGVsZW1lbnRzKS5yZW1vdmVDbGFzcyhvcHRpb25zLmNscyk7XHJcblxyXG4gICAgICAgIHZhciBza2lwICAgICAgICAgPSBmYWxzZSxcclxuICAgICAgICAgICAgZmlyc3R2aXNpYmxlID0gZWxlbWVudHMuZmlsdGVyKFwiOnZpc2libGU6Zmlyc3RcIiksXHJcbiAgICAgICAgICAgIG9mZnNldCAgICAgICA9IGZpcnN0dmlzaWJsZS5sZW5ndGggPyAoZmlyc3R2aXNpYmxlLnBvc2l0aW9uKCkudG9wICsgZmlyc3R2aXNpYmxlLm91dGVySGVpZ2h0KCkpIC0gMSA6IGZhbHNlOyAvLyAoLTEpOiB3ZWlyZCBmaXJlZm94IGJ1ZyB3aGVuIHBhcmVudCBjb250YWluZXIgaXMgZGlzcGxheTpmbGV4XHJcblxyXG4gICAgICAgIGlmIChvZmZzZXQgPT09IGZhbHNlIHx8IGVsZW1lbnRzLmxlbmd0aCA9PSAxKSByZXR1cm47XHJcblxyXG4gICAgICAgIGVsZW1lbnRzLmVhY2goZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgICAgICB2YXIgY29sdW1uID0gVUkuJCh0aGlzKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChjb2x1bW4uaXMoXCI6dmlzaWJsZVwiKSkge1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChza2lwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29sdW1uLmFkZENsYXNzKG9wdGlvbnMuY2xzKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjb2x1bW4ucG9zaXRpb24oKS50b3AgPj0gb2Zmc2V0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNraXAgPSBjb2x1bW4uYWRkQ2xhc3Mob3B0aW9ucy5jbHMpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuXHJcbiAgICBVSS5VdGlscy5tYXRjaEhlaWdodHMgPSBmdW5jdGlvbihlbGVtZW50cywgb3B0aW9ucykge1xyXG5cclxuICAgICAgICBlbGVtZW50cyA9IFVJLiQoZWxlbWVudHMpLmNzcygnbWluLWhlaWdodCcsICcnKTtcclxuICAgICAgICBvcHRpb25zICA9IFVJLiQuZXh0ZW5kKHsgcm93IDogdHJ1ZSB9LCBvcHRpb25zKTtcclxuXHJcbiAgICAgICAgdmFyIG1hdGNoSGVpZ2h0cyA9IGZ1bmN0aW9uKGdyb3VwKXtcclxuXHJcbiAgICAgICAgICAgIGlmIChncm91cC5sZW5ndGggPCAyKSByZXR1cm47XHJcblxyXG4gICAgICAgICAgICB2YXIgbWF4ID0gMDtcclxuXHJcbiAgICAgICAgICAgIGdyb3VwLmVhY2goZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICBtYXggPSBNYXRoLm1heChtYXgsIFVJLiQodGhpcykub3V0ZXJIZWlnaHQoKSk7XHJcbiAgICAgICAgICAgIH0pLmVhY2goZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIGVsZW1lbnQgPSBVSS4kKHRoaXMpLFxyXG4gICAgICAgICAgICAgICAgICAgIGhlaWdodCAgPSBtYXggLSAoZWxlbWVudC5jc3MoJ2JveC1zaXppbmcnKSA9PSAnYm9yZGVyLWJveCcgPyAwIDogKGVsZW1lbnQub3V0ZXJIZWlnaHQoKSAtIGVsZW1lbnQuaGVpZ2h0KCkpKTtcclxuXHJcbiAgICAgICAgICAgICAgICBlbGVtZW50LmNzcygnbWluLWhlaWdodCcsIGhlaWdodCArICdweCcpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBpZiAob3B0aW9ucy5yb3cpIHtcclxuXHJcbiAgICAgICAgICAgIGVsZW1lbnRzLmZpcnN0KCkud2lkdGgoKTsgLy8gZm9yY2UgcmVkcmF3XHJcblxyXG4gICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIGxhc3RvZmZzZXQgPSBmYWxzZSwgZ3JvdXAgPSBbXTtcclxuXHJcbiAgICAgICAgICAgICAgICBlbGVtZW50cy5lYWNoKGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB2YXIgZWxlID0gVUkuJCh0aGlzKSwgb2Zmc2V0ID0gZWxlLm9mZnNldCgpLnRvcDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9mZnNldCAhPSBsYXN0b2Zmc2V0ICYmIGdyb3VwLmxlbmd0aCkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2hIZWlnaHRzKFVJLiQoZ3JvdXApKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZ3JvdXAgID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldCA9IGVsZS5vZmZzZXQoKS50b3A7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBncm91cC5wdXNoKGVsZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgbGFzdG9mZnNldCA9IG9mZnNldDtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChncm91cC5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICBtYXRjaEhlaWdodHMoVUkuJChncm91cCkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgfSwgMCk7XHJcblxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIG1hdGNoSGVpZ2h0cyhlbGVtZW50cyk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICAoZnVuY3Rpb24oY2FjaGVTdmdzKXtcclxuXHJcbiAgICAgICAgVUkuVXRpbHMuaW5saW5lU3ZnID0gZnVuY3Rpb24oc2VsZWN0b3IsIHJvb3QpIHtcclxuXHJcbiAgICAgICAgICAgIHZhciBpbWFnZXMgPSBVSS4kKHNlbGVjdG9yIHx8ICdpbWdbc3JjJD1cIi5zdmdcIl0nLCByb290IHx8IGRvY3VtZW50KS5lYWNoKGZ1bmN0aW9uKCl7XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIGltZyA9IFVJLiQodGhpcyksXHJcbiAgICAgICAgICAgICAgICAgICAgc3JjID0gaW1nLmF0dHIoJ3NyYycpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICghY2FjaGVTdmdzW3NyY10pIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGQgPSBVSS4kLkRlZmVycmVkKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIFVJLiQuZ2V0KHNyYywge25jOiBNYXRoLnJhbmRvbSgpfSwgZnVuY3Rpb24oZGF0YSl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGQucmVzb2x2ZShVSS4kKGRhdGEpLmZpbmQoJ3N2ZycpKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgY2FjaGVTdmdzW3NyY10gPSBkLnByb21pc2UoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBjYWNoZVN2Z3Nbc3JjXS50aGVuKGZ1bmN0aW9uKHN2Zykge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB2YXIgJHN2ZyA9IFVJLiQoc3ZnKS5jbG9uZSgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoaW1nLmF0dHIoJ2lkJykpICRzdmcuYXR0cignaWQnLCBpbWcuYXR0cignaWQnKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGltZy5hdHRyKCdjbGFzcycpKSAkc3ZnLmF0dHIoJ2NsYXNzJywgaW1nLmF0dHIoJ2NsYXNzJykpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpbWcuYXR0cignc3R5bGUnKSkgJHN2Zy5hdHRyKCdzdHlsZScsIGltZy5hdHRyKCdzdHlsZScpKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGltZy5hdHRyKCd3aWR0aCcpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzdmcuYXR0cignd2lkdGgnLCBpbWcuYXR0cignd2lkdGgnKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaW1nLmF0dHIoJ2hlaWdodCcpKSAgJHN2Zy5yZW1vdmVBdHRyKCdoZWlnaHQnKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpbWcuYXR0cignaGVpZ2h0Jykpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc3ZnLmF0dHIoJ2hlaWdodCcsIGltZy5hdHRyKCdoZWlnaHQnKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaW1nLmF0dHIoJ3dpZHRoJykpICRzdmcucmVtb3ZlQXR0cignd2lkdGgnKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGltZy5yZXBsYWNlV2l0aCgkc3ZnKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvLyBpbml0IGNvZGVcclxuICAgICAgICBVSS5yZWFkeShmdW5jdGlvbihjb250ZXh0KSB7XHJcbiAgICAgICAgICAgIFVJLlV0aWxzLmlubGluZVN2ZygnW2RhdGEtdWstc3ZnXScsIGNvbnRleHQpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgIH0pKHt9KTtcclxuXHJcbn0pKFVJa2l0KTtcclxuXHJcbihmdW5jdGlvbihVSSkge1xyXG5cclxuICAgIFwidXNlIHN0cmljdFwiO1xyXG5cclxuICAgIFVJLmNvbXBvbmVudCgnc21vb3RoU2Nyb2xsJywge1xyXG5cclxuICAgICAgICBib290OiBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgICAgIC8vIGluaXQgY29kZVxyXG4gICAgICAgICAgICBVSS4kaHRtbC5vbihcImNsaWNrLnNtb290aC1zY3JvbGwudWlraXRcIiwgXCJbZGF0YS11ay1zbW9vdGgtc2Nyb2xsXVwiLCBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgZWxlID0gVUkuJCh0aGlzKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoIWVsZS5kYXRhKFwic21vb3RoU2Nyb2xsXCIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIG9iaiA9IFVJLnNtb290aFNjcm9sbChlbGUsIFVJLlV0aWxzLm9wdGlvbnMoZWxlLmF0dHIoXCJkYXRhLXVrLXNtb290aC1zY3JvbGxcIikpKTtcclxuICAgICAgICAgICAgICAgICAgICBlbGUudHJpZ2dlcihcImNsaWNrXCIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgaW5pdDogZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgICAgICB2YXIgJHRoaXMgPSB0aGlzO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5vbihcImNsaWNrXCIsIGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgIHNjcm9sbFRvRWxlbWVudChVSS4kKHRoaXMuaGFzaCkubGVuZ3RoID8gVUkuJCh0aGlzLmhhc2gpIDogVUkuJChcImJvZHlcIiksICR0aGlzLm9wdGlvbnMpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICBmdW5jdGlvbiBzY3JvbGxUb0VsZW1lbnQoZWxlLCBvcHRpb25zKSB7XHJcblxyXG4gICAgICAgIG9wdGlvbnMgPSBVSS4kLmV4dGVuZCh7XHJcbiAgICAgICAgICAgIGR1cmF0aW9uOiAxMDAwLFxyXG4gICAgICAgICAgICB0cmFuc2l0aW9uOiAnZWFzZU91dEV4cG8nLFxyXG4gICAgICAgICAgICBvZmZzZXQ6IDAsXHJcbiAgICAgICAgICAgIGNvbXBsZXRlOiBmdW5jdGlvbigpe31cclxuICAgICAgICB9LCBvcHRpb25zKTtcclxuXHJcbiAgICAgICAgLy8gZ2V0IC8gc2V0IHBhcmFtZXRlcnNcclxuICAgICAgICB2YXIgdGFyZ2V0ICAgID0gZWxlLm9mZnNldCgpLnRvcCAtIG9wdGlvbnMub2Zmc2V0LFxyXG4gICAgICAgICAgICBkb2NoZWlnaHQgPSBVSS4kZG9jLmhlaWdodCgpLFxyXG4gICAgICAgICAgICB3aW5oZWlnaHQgPSB3aW5kb3cuaW5uZXJIZWlnaHQ7XHJcblxyXG4gICAgICAgIGlmICgodGFyZ2V0ICsgd2luaGVpZ2h0KSA+IGRvY2hlaWdodCkge1xyXG4gICAgICAgICAgICB0YXJnZXQgPSBkb2NoZWlnaHQgLSB3aW5oZWlnaHQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBhbmltYXRlIHRvIHRhcmdldCwgZmlyZSBjYWxsYmFjayB3aGVuIGRvbmVcclxuICAgICAgICBVSS4kKFwiaHRtbCxib2R5XCIpLnN0b3AoKS5hbmltYXRlKHtzY3JvbGxUb3A6IHRhcmdldH0sIG9wdGlvbnMuZHVyYXRpb24sIG9wdGlvbnMudHJhbnNpdGlvbikucHJvbWlzZSgpLmRvbmUob3B0aW9ucy5jb21wbGV0ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgVUkuVXRpbHMuc2Nyb2xsVG9FbGVtZW50ID0gc2Nyb2xsVG9FbGVtZW50O1xyXG5cclxuICAgIGlmICghVUkuJC5lYXNpbmcuZWFzZU91dEV4cG8pIHtcclxuICAgICAgICBVSS4kLmVhc2luZy5lYXNlT3V0RXhwbyA9IGZ1bmN0aW9uKHgsIHQsIGIsIGMsIGQpIHsgcmV0dXJuICh0ID09IGQpID8gYiArIGMgOiBjICogKC1NYXRoLnBvdygyLCAtMTAgKiB0IC8gZCkgKyAxKSArIGI7IH07XHJcbiAgICB9XHJcblxyXG59KShVSWtpdCk7XHJcblxyXG4oZnVuY3Rpb24oVUkpIHtcclxuXHJcbiAgICBcInVzZSBzdHJpY3RcIjtcclxuXHJcbiAgICB2YXIgJHdpbiAgICAgICAgICAgPSBVSS4kd2luLFxyXG4gICAgICAgICRkb2MgICAgICAgICAgID0gVUkuJGRvYyxcclxuICAgICAgICBzY3JvbGxzcGllcyAgICA9IFtdLFxyXG4gICAgICAgIGNoZWNrU2Nyb2xsU3B5ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIGZvcih2YXIgaT0wOyBpIDwgc2Nyb2xsc3BpZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUuYXBwbHkod2luZG93LCBbc2Nyb2xsc3BpZXNbaV0uY2hlY2tdKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgVUkuY29tcG9uZW50KCdzY3JvbGxzcHknLCB7XHJcblxyXG4gICAgICAgIGRlZmF1bHRzOiB7XHJcbiAgICAgICAgICAgIFwidGFyZ2V0XCIgICAgIDogZmFsc2UsXHJcbiAgICAgICAgICAgIFwiY2xzXCIgICAgICAgIDogXCJ1ay1zY3JvbGxzcHktaW52aWV3XCIsXHJcbiAgICAgICAgICAgIFwiaW5pdGNsc1wiICAgIDogXCJ1ay1zY3JvbGxzcHktaW5pdC1pbnZpZXdcIixcclxuICAgICAgICAgICAgXCJ0b3BvZmZzZXRcIiAgOiAwLFxyXG4gICAgICAgICAgICBcImxlZnRvZmZzZXRcIiA6IDAsXHJcbiAgICAgICAgICAgIFwicmVwZWF0XCIgICAgIDogZmFsc2UsXHJcbiAgICAgICAgICAgIFwiZGVsYXlcIiAgICAgIDogMFxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGJvb3Q6IGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICAgICAgLy8gbGlzdGVuIHRvIHNjcm9sbCBhbmQgcmVzaXplXHJcbiAgICAgICAgICAgICRkb2Mub24oXCJzY3JvbGxpbmcudWsuZG9jdW1lbnRcIiwgY2hlY2tTY3JvbGxTcHkpO1xyXG4gICAgICAgICAgICAkd2luLm9uKFwibG9hZCByZXNpemUgb3JpZW50YXRpb25jaGFuZ2VcIiwgVUkuVXRpbHMuZGVib3VuY2UoY2hlY2tTY3JvbGxTcHksIDUwKSk7XHJcblxyXG4gICAgICAgICAgICAvLyBpbml0IGNvZGVcclxuICAgICAgICAgICAgVUkucmVhZHkoZnVuY3Rpb24oY29udGV4dCkge1xyXG5cclxuICAgICAgICAgICAgICAgIFVJLiQoXCJbZGF0YS11ay1zY3JvbGxzcHldXCIsIGNvbnRleHQpLmVhY2goZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBlbGVtZW50ID0gVUkuJCh0aGlzKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFlbGVtZW50LmRhdGEoXCJzY3JvbGxzcHlcIikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG9iaiA9IFVJLnNjcm9sbHNweShlbGVtZW50LCBVSS5VdGlscy5vcHRpb25zKGVsZW1lbnQuYXR0cihcImRhdGEtdWstc2Nyb2xsc3B5XCIpKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGluaXQ6IGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICAgICAgdmFyICR0aGlzID0gdGhpcywgaW52aWV3c3RhdGUsIGluaXRpbnZpZXcsIHRvZ2dsZWNscyA9IHRoaXMub3B0aW9ucy5jbHMuc3BsaXQoLywvKSwgZm4gPSBmdW5jdGlvbigpe1xyXG5cclxuICAgICAgICAgICAgICAgIHZhciBlbGVtZW50cyAgICAgPSAkdGhpcy5vcHRpb25zLnRhcmdldCA/ICR0aGlzLmVsZW1lbnQuZmluZCgkdGhpcy5vcHRpb25zLnRhcmdldCkgOiAkdGhpcy5lbGVtZW50LFxyXG4gICAgICAgICAgICAgICAgICAgIGRlbGF5SWR4ICAgICA9IGVsZW1lbnRzLmxlbmd0aCA9PT0gMSA/IDEgOiAwLFxyXG4gICAgICAgICAgICAgICAgICAgIHRvZ2dsZWNsc0lkeCA9IDA7XHJcblxyXG4gICAgICAgICAgICAgICAgZWxlbWVudHMuZWFjaChmdW5jdGlvbihpZHgpe1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB2YXIgZWxlbWVudCAgICAgPSBVSS4kKHRoaXMpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbnZpZXdzdGF0ZSA9IGVsZW1lbnQuZGF0YSgnaW52aWV3c3RhdGUnKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW52aWV3ICAgICAgPSBVSS5VdGlscy5pc0luVmlldyhlbGVtZW50LCAkdGhpcy5vcHRpb25zKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9nZ2xlICAgICAgPSBlbGVtZW50LmRhdGEoJ3VrU2Nyb2xsc3B5Q2xzJykgfHwgdG9nZ2xlY2xzW3RvZ2dsZWNsc0lkeF0udHJpbSgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoaW52aWV3ICYmICFpbnZpZXdzdGF0ZSAmJiAhZWxlbWVudC5kYXRhKCdzY3JvbGxzcHktaWRsZScpKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWluaXRpbnZpZXcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuYWRkQ2xhc3MoJHRoaXMub3B0aW9ucy5pbml0Y2xzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICR0aGlzLm9mZnNldCA9IGVsZW1lbnQub2Zmc2V0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbml0aW52aWV3ID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50LnRyaWdnZXIoXCJpbml0LnVrLnNjcm9sbHNweVwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5kYXRhKCdzY3JvbGxzcHktaWRsZScsIHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50LmFkZENsYXNzKFwidWstc2Nyb2xsc3B5LWludmlld1wiKS50b2dnbGVDbGFzcyh0b2dnbGUpLndpZHRoKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50LnRyaWdnZXIoXCJpbnZpZXcudWsuc2Nyb2xsc3B5XCIpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuZGF0YSgnc2Nyb2xsc3B5LWlkbGUnLCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50LmRhdGEoJ2ludmlld3N0YXRlJywgdHJ1ZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LCAkdGhpcy5vcHRpb25zLmRlbGF5ICogZGVsYXlJZHgpKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlbGF5SWR4Kys7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoIWludmlldyAmJiBpbnZpZXdzdGF0ZSAmJiAkdGhpcy5vcHRpb25zLnJlcGVhdCkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVsZW1lbnQuZGF0YSgnc2Nyb2xsc3B5LWlkbGUnKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KGVsZW1lbnQuZGF0YSgnc2Nyb2xsc3B5LWlkbGUnKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQucmVtb3ZlQ2xhc3MoXCJ1ay1zY3JvbGxzcHktaW52aWV3XCIpLnRvZ2dsZUNsYXNzKHRvZ2dsZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuZGF0YSgnaW52aWV3c3RhdGUnLCBmYWxzZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50LnRyaWdnZXIoXCJvdXR2aWV3LnVrLnNjcm9sbHNweVwiKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHRvZ2dsZWNsc0lkeCA9IHRvZ2dsZWNsc1t0b2dnbGVjbHNJZHggKyAxXSA/ICh0b2dnbGVjbHNJZHggKyAxKSA6IDA7XHJcblxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICBmbigpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5jaGVjayA9IGZuO1xyXG5cclxuICAgICAgICAgICAgc2Nyb2xsc3BpZXMucHVzaCh0aGlzKTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuXHJcblxyXG4gICAgdmFyIHNjcm9sbHNweW5hdnMgPSBbXSxcclxuICAgICAgICBjaGVja1Njcm9sbFNweU5hdnMgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgZm9yKHZhciBpPTA7IGkgPCBzY3JvbGxzcHluYXZzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lLmFwcGx5KHdpbmRvdywgW3Njcm9sbHNweW5hdnNbaV0uY2hlY2tdKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgVUkuY29tcG9uZW50KCdzY3JvbGxzcHluYXYnLCB7XHJcblxyXG4gICAgICAgIGRlZmF1bHRzOiB7XHJcbiAgICAgICAgICAgIFwiY2xzXCIgICAgICAgICAgOiAndWstYWN0aXZlJyxcclxuICAgICAgICAgICAgXCJjbG9zZXN0XCIgICAgICA6IGZhbHNlLFxyXG4gICAgICAgICAgICBcInRvcG9mZnNldFwiICAgIDogMCxcclxuICAgICAgICAgICAgXCJsZWZ0b2Zmc2V0XCIgICA6IDAsXHJcbiAgICAgICAgICAgIFwic21vb3Roc2Nyb2xsXCIgOiBmYWxzZVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGJvb3Q6IGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICAgICAgLy8gbGlzdGVuIHRvIHNjcm9sbCBhbmQgcmVzaXplXHJcbiAgICAgICAgICAgICRkb2Mub24oXCJzY3JvbGxpbmcudWsuZG9jdW1lbnRcIiwgY2hlY2tTY3JvbGxTcHlOYXZzKTtcclxuICAgICAgICAgICAgJHdpbi5vbihcInJlc2l6ZSBvcmllbnRhdGlvbmNoYW5nZVwiLCBVSS5VdGlscy5kZWJvdW5jZShjaGVja1Njcm9sbFNweU5hdnMsIDUwKSk7XHJcblxyXG4gICAgICAgICAgICAvLyBpbml0IGNvZGVcclxuICAgICAgICAgICAgVUkucmVhZHkoZnVuY3Rpb24oY29udGV4dCkge1xyXG5cclxuICAgICAgICAgICAgICAgIFVJLiQoXCJbZGF0YS11ay1zY3JvbGxzcHktbmF2XVwiLCBjb250ZXh0KS5lYWNoKGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB2YXIgZWxlbWVudCA9IFVJLiQodGhpcyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghZWxlbWVudC5kYXRhKFwic2Nyb2xsc3B5bmF2XCIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBvYmogPSBVSS5zY3JvbGxzcHluYXYoZWxlbWVudCwgVUkuVXRpbHMub3B0aW9ucyhlbGVtZW50LmF0dHIoXCJkYXRhLXVrLXNjcm9sbHNweS1uYXZcIikpKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgaW5pdDogZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgICAgICB2YXIgaWRzICAgICA9IFtdLFxyXG4gICAgICAgICAgICAgICAgbGlua3MgICA9IHRoaXMuZmluZChcImFbaHJlZl49JyMnXVwiKS5lYWNoKGZ1bmN0aW9uKCl7IGlmKHRoaXMuZ2V0QXR0cmlidXRlKFwiaHJlZlwiKS50cmltKCkhPT0nIycpIGlkcy5wdXNoKHRoaXMuZ2V0QXR0cmlidXRlKFwiaHJlZlwiKSk7IH0pLFxyXG4gICAgICAgICAgICAgICAgdGFyZ2V0cyA9IFVJLiQoaWRzLmpvaW4oXCIsXCIpKSxcclxuXHJcbiAgICAgICAgICAgICAgICBjbHNBY3RpdmUgID0gdGhpcy5vcHRpb25zLmNscyxcclxuICAgICAgICAgICAgICAgIGNsc0Nsb3Nlc3QgPSB0aGlzLm9wdGlvbnMuY2xvc2VzdCB8fCB0aGlzLm9wdGlvbnMuY2xvc2VzdDtcclxuXHJcbiAgICAgICAgICAgIHZhciAkdGhpcyA9IHRoaXMsIGludmlld3MsIGZuID0gZnVuY3Rpb24oKXtcclxuXHJcbiAgICAgICAgICAgICAgICBpbnZpZXdzID0gW107XHJcblxyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaT0wIDsgaSA8IHRhcmdldHMubGVuZ3RoIDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKFVJLlV0aWxzLmlzSW5WaWV3KHRhcmdldHMuZXEoaSksICR0aGlzLm9wdGlvbnMpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGludmlld3MucHVzaCh0YXJnZXRzLmVxKGkpKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGludmlld3MubGVuZ3RoKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBuYXZpdGVtcyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2Nyb2xsVG9wID0gJHdpbi5zY3JvbGxUb3AoKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0ID0gKGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IodmFyIGk9MDsgaTwgaW52aWV3cy5sZW5ndGg7aSsrKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihpbnZpZXdzW2ldLm9mZnNldCgpLnRvcCA+PSBzY3JvbGxUb3Ape1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaW52aWV3c1tpXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghdGFyZ2V0KSByZXR1cm47XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICgkdGhpcy5vcHRpb25zLmNsb3Nlc3QpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGlua3MuYmx1cigpLmNsb3Nlc3QoY2xzQ2xvc2VzdCkucmVtb3ZlQ2xhc3MoY2xzQWN0aXZlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmF2aXRlbXMgPSBsaW5rcy5maWx0ZXIoXCJhW2hyZWY9JyNcIit0YXJnZXQuYXR0cihcImlkXCIpK1wiJ11cIikuY2xvc2VzdChjbHNDbG9zZXN0KS5hZGRDbGFzcyhjbHNBY3RpdmUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hdml0ZW1zID0gbGlua3MucmVtb3ZlQ2xhc3MoY2xzQWN0aXZlKS5maWx0ZXIoXCJhW2hyZWY9JyNcIit0YXJnZXQuYXR0cihcImlkXCIpK1wiJ11cIikuYWRkQ2xhc3MoY2xzQWN0aXZlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICR0aGlzLmVsZW1lbnQudHJpZ2dlcihcImludmlldy51ay5zY3JvbGxzcHluYXZcIiwgW3RhcmdldCwgbmF2aXRlbXNdKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMuc21vb3Roc2Nyb2xsICYmIFVJLnNtb290aFNjcm9sbCkge1xyXG4gICAgICAgICAgICAgICAgbGlua3MuZWFjaChmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICAgICAgICAgIFVJLnNtb290aFNjcm9sbCh0aGlzLCAkdGhpcy5vcHRpb25zLnNtb290aHNjcm9sbCk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZm4oKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudC5kYXRhKFwic2Nyb2xsc3B5bmF2XCIsIHRoaXMpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5jaGVjayA9IGZuO1xyXG4gICAgICAgICAgICBzY3JvbGxzcHluYXZzLnB1c2godGhpcyk7XHJcblxyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG5cclxufSkoVUlraXQpO1xyXG5cclxuKGZ1bmN0aW9uKFVJKXtcclxuXHJcbiAgICBcInVzZSBzdHJpY3RcIjtcclxuXHJcbiAgICB2YXIgdG9nZ2xlcyA9IFtdO1xyXG5cclxuICAgIFVJLmNvbXBvbmVudCgndG9nZ2xlJywge1xyXG5cclxuICAgICAgICBkZWZhdWx0czoge1xyXG4gICAgICAgICAgICB0YXJnZXQgICAgOiBmYWxzZSxcclxuICAgICAgICAgICAgY2xzICAgICAgIDogJ3VrLWhpZGRlbicsXHJcbiAgICAgICAgICAgIGFuaW1hdGlvbiA6IGZhbHNlLFxyXG4gICAgICAgICAgICBkdXJhdGlvbiAgOiAyMDBcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBib290OiBmdW5jdGlvbigpe1xyXG5cclxuICAgICAgICAgICAgLy8gaW5pdCBjb2RlXHJcbiAgICAgICAgICAgIFVJLnJlYWR5KGZ1bmN0aW9uKGNvbnRleHQpIHtcclxuXHJcbiAgICAgICAgICAgICAgICBVSS4kKFwiW2RhdGEtdWstdG9nZ2xlXVwiLCBjb250ZXh0KS5lYWNoKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBlbGUgPSBVSS4kKHRoaXMpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoIWVsZS5kYXRhKFwidG9nZ2xlXCIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBvYmogPSBVSS50b2dnbGUoZWxlLCBVSS5VdGlscy5vcHRpb25zKGVsZS5hdHRyKFwiZGF0YS11ay10b2dnbGVcIikpKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHRvZ2dsZXMuZm9yRWFjaChmdW5jdGlvbih0b2dnbGUpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b2dnbGUuZ2V0VG9nZ2xlcygpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgIH0sIDApO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBpbml0OiBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgICAgIHZhciAkdGhpcyA9IHRoaXM7XHJcblxyXG4gICAgICAgICAgICB0aGlzLmFyaWEgPSAodGhpcy5vcHRpb25zLmNscy5pbmRleE9mKCd1ay1oaWRkZW4nKSAhPT0gLTEpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5nZXRUb2dnbGVzKCk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLm9uKFwiY2xpY2tcIiwgZnVuY3Rpb24oZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCR0aGlzLmVsZW1lbnQuaXMoJ2FbaHJlZj1cIiNcIl0nKSkgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgJHRoaXMudG9nZ2xlKCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgdG9nZ2xlcy5wdXNoKHRoaXMpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIHRvZ2dsZTogZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgICAgICBpZighdGhpcy50b3RvZ2dsZS5sZW5ndGgpIHJldHVybjtcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMuYW5pbWF0aW9uICYmIFVJLnN1cHBvcnQuYW5pbWF0aW9uKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyICR0aGlzID0gdGhpcywgYW5pbWF0aW9ucyA9IHRoaXMub3B0aW9ucy5hbmltYXRpb24uc3BsaXQoJywnKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoYW5pbWF0aW9ucy5sZW5ndGggPT0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGFuaW1hdGlvbnNbMV0gPSBhbmltYXRpb25zWzBdO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGFuaW1hdGlvbnNbMF0gPSBhbmltYXRpb25zWzBdLnRyaW0oKTtcclxuICAgICAgICAgICAgICAgIGFuaW1hdGlvbnNbMV0gPSBhbmltYXRpb25zWzFdLnRyaW0oKTtcclxuXHJcbiAgICAgICAgICAgICAgICB0aGlzLnRvdG9nZ2xlLmNzcygnYW5pbWF0aW9uLWR1cmF0aW9uJywgdGhpcy5vcHRpb25zLmR1cmF0aW9uKydtcycpO1xyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMudG90b2dnbGUuZWFjaChmdW5jdGlvbigpe1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB2YXIgZWxlID0gVUkuJCh0aGlzKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVsZS5oYXNDbGFzcygkdGhpcy5vcHRpb25zLmNscykpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsZS50b2dnbGVDbGFzcygkdGhpcy5vcHRpb25zLmNscyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBVSS5VdGlscy5hbmltYXRlKGVsZSwgYW5pbWF0aW9uc1swXSkudGhlbihmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlLmNzcygnYW5pbWF0aW9uLWR1cmF0aW9uJywgJycpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgVUkuVXRpbHMuY2hlY2tEaXNwbGF5KGVsZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgVUkuVXRpbHMuYW5pbWF0ZSh0aGlzLCBhbmltYXRpb25zWzFdKycgdWstYW5pbWF0aW9uLXJldmVyc2UnKS50aGVuKGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGUudG9nZ2xlQ2xhc3MoJHRoaXMub3B0aW9ucy5jbHMpLmNzcygnYW5pbWF0aW9uLWR1cmF0aW9uJywgJycpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgVUkuVXRpbHMuY2hlY2tEaXNwbGF5KGVsZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy50b3RvZ2dsZS50b2dnbGVDbGFzcyh0aGlzLm9wdGlvbnMuY2xzKTtcclxuICAgICAgICAgICAgICAgIFVJLlV0aWxzLmNoZWNrRGlzcGxheSh0aGlzLnRvdG9nZ2xlKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy51cGRhdGVBcmlhKCk7XHJcblxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGdldFRvZ2dsZXM6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICB0aGlzLnRvdG9nZ2xlID0gdGhpcy5vcHRpb25zLnRhcmdldCA/IFVJLiQodGhpcy5vcHRpb25zLnRhcmdldCk6W107XHJcbiAgICAgICAgICAgIHRoaXMudXBkYXRlQXJpYSgpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIHVwZGF0ZUFyaWE6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5hcmlhICYmIHRoaXMudG90b2dnbGUubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnRvdG9nZ2xlLmVhY2goZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgICAgICAgICBVSS4kKHRoaXMpLmF0dHIoJ2FyaWEtaGlkZGVuJywgVUkuJCh0aGlzKS5oYXNDbGFzcygndWstaGlkZGVuJykpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuXHJcbn0pKFVJa2l0KTtcclxuXHJcbihmdW5jdGlvbihVSSkge1xyXG5cclxuICAgIFwidXNlIHN0cmljdFwiO1xyXG5cclxuICAgIFVJLmNvbXBvbmVudCgnYWxlcnQnLCB7XHJcblxyXG4gICAgICAgIGRlZmF1bHRzOiB7XHJcbiAgICAgICAgICAgIFwiZmFkZVwiOiB0cnVlLFxyXG4gICAgICAgICAgICBcImR1cmF0aW9uXCI6IDIwMCxcclxuICAgICAgICAgICAgXCJ0cmlnZ2VyXCI6IFwiLnVrLWFsZXJ0LWNsb3NlXCJcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBib290OiBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgICAgIC8vIGluaXQgY29kZVxyXG4gICAgICAgICAgICBVSS4kaHRtbC5vbihcImNsaWNrLmFsZXJ0LnVpa2l0XCIsIFwiW2RhdGEtdWstYWxlcnRdXCIsIGZ1bmN0aW9uKGUpIHtcclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgZWxlID0gVUkuJCh0aGlzKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoIWVsZS5kYXRhKFwiYWxlcnRcIikpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGFsZXJ0ID0gVUkuYWxlcnQoZWxlLCBVSS5VdGlscy5vcHRpb25zKGVsZS5hdHRyKFwiZGF0YS11ay1hbGVydFwiKSkpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoVUkuJChlLnRhcmdldCkuaXMoYWxlcnQub3B0aW9ucy50cmlnZ2VyKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsZXJ0LmNsb3NlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBpbml0OiBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgICAgIHZhciAkdGhpcyA9IHRoaXM7XHJcblxyXG4gICAgICAgICAgICB0aGlzLm9uKFwiY2xpY2tcIiwgdGhpcy5vcHRpb25zLnRyaWdnZXIsIGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgICR0aGlzLmNsb3NlKCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGNsb3NlOiBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgICAgIHZhciBlbGVtZW50ICAgICAgID0gdGhpcy50cmlnZ2VyKFwiY2xvc2UudWsuYWxlcnRcIiksXHJcbiAgICAgICAgICAgICAgICByZW1vdmVFbGVtZW50ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudHJpZ2dlcihcImNsb3NlZC51ay5hbGVydFwiKS5yZW1vdmUoKTtcclxuICAgICAgICAgICAgICAgIH0uYmluZCh0aGlzKTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMuZmFkZSkge1xyXG4gICAgICAgICAgICAgICAgZWxlbWVudC5jc3MoXCJvdmVyZmxvd1wiLCBcImhpZGRlblwiKS5jc3MoXCJtYXgtaGVpZ2h0XCIsIGVsZW1lbnQuaGVpZ2h0KCkpLmFuaW1hdGUoe1xyXG4gICAgICAgICAgICAgICAgICAgIFwiaGVpZ2h0XCIgICAgICAgICA6IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJvcGFjaXR5XCIgICAgICAgIDogMCxcclxuICAgICAgICAgICAgICAgICAgICBcInBhZGRpbmctdG9wXCIgICAgOiAwLFxyXG4gICAgICAgICAgICAgICAgICAgIFwicGFkZGluZy1ib3R0b21cIiA6IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJtYXJnaW4tdG9wXCIgICAgIDogMCxcclxuICAgICAgICAgICAgICAgICAgICBcIm1hcmdpbi1ib3R0b21cIiAgOiAwXHJcbiAgICAgICAgICAgICAgICB9LCB0aGlzLm9wdGlvbnMuZHVyYXRpb24sIHJlbW92ZUVsZW1lbnQpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmVtb3ZlRWxlbWVudCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgIH0pO1xyXG5cclxufSkoVUlraXQpO1xyXG5cclxuKGZ1bmN0aW9uKFVJKSB7XHJcblxyXG4gICAgXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG4gICAgVUkuY29tcG9uZW50KCdidXR0b25SYWRpbycsIHtcclxuXHJcbiAgICAgICAgZGVmYXVsdHM6IHtcclxuICAgICAgICAgICAgXCJhY3RpdmVDbGFzc1wiOiAndWstYWN0aXZlJyxcclxuICAgICAgICAgICAgXCJ0YXJnZXRcIjogXCIudWstYnV0dG9uXCJcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBib290OiBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgICAgIC8vIGluaXQgY29kZVxyXG4gICAgICAgICAgICBVSS4kaHRtbC5vbihcImNsaWNrLmJ1dHRvbnJhZGlvLnVpa2l0XCIsIFwiW2RhdGEtdWstYnV0dG9uLXJhZGlvXVwiLCBmdW5jdGlvbihlKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIGVsZSA9IFVJLiQodGhpcyk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKCFlbGUuZGF0YShcImJ1dHRvblJhZGlvXCIpKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBvYmogICAgPSBVSS5idXR0b25SYWRpbyhlbGUsIFVJLlV0aWxzLm9wdGlvbnMoZWxlLmF0dHIoXCJkYXRhLXVrLWJ1dHRvbi1yYWRpb1wiKSkpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXQgPSBVSS4kKGUudGFyZ2V0KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhcmdldC5pcyhvYmoub3B0aW9ucy50YXJnZXQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldC50cmlnZ2VyKFwiY2xpY2tcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBpbml0OiBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgICAgIHZhciAkdGhpcyA9IHRoaXM7XHJcblxyXG4gICAgICAgICAgICAvLyBJbml0IEFSSUFcclxuICAgICAgICAgICAgdGhpcy5maW5kKCR0aGlzLm9wdGlvbnMudGFyZ2V0KS5hdHRyKCdhcmlhLWNoZWNrZWQnLCAnZmFsc2UnKS5maWx0ZXIoJy4nICsgJHRoaXMub3B0aW9ucy5hY3RpdmVDbGFzcykuYXR0cignYXJpYS1jaGVja2VkJywgJ3RydWUnKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMub24oXCJjbGlja1wiLCB0aGlzLm9wdGlvbnMudGFyZ2V0LCBmdW5jdGlvbihlKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIGVsZSA9IFVJLiQodGhpcyk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGVsZS5pcygnYVtocmVmPVwiI1wiXScpKSBlLnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG4gICAgICAgICAgICAgICAgJHRoaXMuZmluZCgkdGhpcy5vcHRpb25zLnRhcmdldCkubm90KGVsZSkucmVtb3ZlQ2xhc3MoJHRoaXMub3B0aW9ucy5hY3RpdmVDbGFzcykuYmx1cigpO1xyXG4gICAgICAgICAgICAgICAgZWxlLmFkZENsYXNzKCR0aGlzLm9wdGlvbnMuYWN0aXZlQ2xhc3MpO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIFVwZGF0ZSBBUklBXHJcbiAgICAgICAgICAgICAgICAkdGhpcy5maW5kKCR0aGlzLm9wdGlvbnMudGFyZ2V0KS5ub3QoZWxlKS5hdHRyKCdhcmlhLWNoZWNrZWQnLCAnZmFsc2UnKTtcclxuICAgICAgICAgICAgICAgIGVsZS5hdHRyKCdhcmlhLWNoZWNrZWQnLCAndHJ1ZScpO1xyXG5cclxuICAgICAgICAgICAgICAgICR0aGlzLnRyaWdnZXIoXCJjaGFuZ2UudWsuYnV0dG9uXCIsIFtlbGVdKTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGdldFNlbGVjdGVkOiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZmluZCgnLicgKyB0aGlzLm9wdGlvbnMuYWN0aXZlQ2xhc3MpO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIFVJLmNvbXBvbmVudCgnYnV0dG9uQ2hlY2tib3gnLCB7XHJcblxyXG4gICAgICAgIGRlZmF1bHRzOiB7XHJcbiAgICAgICAgICAgIFwiYWN0aXZlQ2xhc3NcIjogJ3VrLWFjdGl2ZScsXHJcbiAgICAgICAgICAgIFwidGFyZ2V0XCI6IFwiLnVrLWJ1dHRvblwiXHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgYm9vdDogZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgICAgICBVSS4kaHRtbC5vbihcImNsaWNrLmJ1dHRvbmNoZWNrYm94LnVpa2l0XCIsIFwiW2RhdGEtdWstYnV0dG9uLWNoZWNrYm94XVwiLCBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgZWxlID0gVUkuJCh0aGlzKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoIWVsZS5kYXRhKFwiYnV0dG9uQ2hlY2tib3hcIikpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIG9iaiAgICA9IFVJLmJ1dHRvbkNoZWNrYm94KGVsZSwgVUkuVXRpbHMub3B0aW9ucyhlbGUuYXR0cihcImRhdGEtdWstYnV0dG9uLWNoZWNrYm94XCIpKSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldCA9IFVJLiQoZS50YXJnZXQpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAodGFyZ2V0LmlzKG9iai5vcHRpb25zLnRhcmdldCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0LnRyaWdnZXIoXCJjbGlja1wiKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGluaXQ6IGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICAgICAgdmFyICR0aGlzID0gdGhpcztcclxuXHJcbiAgICAgICAgICAgIC8vIEluaXQgQVJJQVxyXG4gICAgICAgICAgICB0aGlzLmZpbmQoJHRoaXMub3B0aW9ucy50YXJnZXQpLmF0dHIoJ2FyaWEtY2hlY2tlZCcsICdmYWxzZScpLmZpbHRlcignLicgKyAkdGhpcy5vcHRpb25zLmFjdGl2ZUNsYXNzKS5hdHRyKCdhcmlhLWNoZWNrZWQnLCAndHJ1ZScpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5vbihcImNsaWNrXCIsIHRoaXMub3B0aW9ucy50YXJnZXQsIGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICAgICAgICAgIHZhciBlbGUgPSBVSS4kKHRoaXMpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChlbGUuaXMoJ2FbaHJlZj1cIiNcIl0nKSkgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuICAgICAgICAgICAgICAgIGVsZS50b2dnbGVDbGFzcygkdGhpcy5vcHRpb25zLmFjdGl2ZUNsYXNzKS5ibHVyKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gVXBkYXRlIEFSSUFcclxuICAgICAgICAgICAgICAgIGVsZS5hdHRyKCdhcmlhLWNoZWNrZWQnLCBlbGUuaGFzQ2xhc3MoJHRoaXMub3B0aW9ucy5hY3RpdmVDbGFzcykpO1xyXG5cclxuICAgICAgICAgICAgICAgICR0aGlzLnRyaWdnZXIoXCJjaGFuZ2UudWsuYnV0dG9uXCIsIFtlbGVdKTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGdldFNlbGVjdGVkOiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZmluZCgnLicgKyB0aGlzLm9wdGlvbnMuYWN0aXZlQ2xhc3MpO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuXHJcbiAgICBVSS5jb21wb25lbnQoJ2J1dHRvbicsIHtcclxuXHJcbiAgICAgICAgZGVmYXVsdHM6IHt9LFxyXG5cclxuICAgICAgICBib290OiBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgICAgIFVJLiRodG1sLm9uKFwiY2xpY2suYnV0dG9uLnVpa2l0XCIsIFwiW2RhdGEtdWstYnV0dG9uXVwiLCBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgZWxlID0gVUkuJCh0aGlzKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoIWVsZS5kYXRhKFwiYnV0dG9uXCIpKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBvYmogPSBVSS5idXR0b24oZWxlLCBVSS5VdGlscy5vcHRpb25zKGVsZS5hdHRyKFwiZGF0YS11ay1idXR0b25cIikpKTtcclxuICAgICAgICAgICAgICAgICAgICBlbGUudHJpZ2dlcihcImNsaWNrXCIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBpbml0OiBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgICAgIHZhciAkdGhpcyA9IHRoaXM7XHJcblxyXG4gICAgICAgICAgICAvLyBJbml0IEFSSUFcclxuICAgICAgICAgICAgdGhpcy5lbGVtZW50LmF0dHIoJ2FyaWEtcHJlc3NlZCcsIHRoaXMuZWxlbWVudC5oYXNDbGFzcyhcInVrLWFjdGl2ZVwiKSk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLm9uKFwiY2xpY2tcIiwgZnVuY3Rpb24oZSkge1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICgkdGhpcy5lbGVtZW50LmlzKCdhW2hyZWY9XCIjXCJdJykpIGUucHJldmVudERlZmF1bHQoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAkdGhpcy50b2dnbGUoKTtcclxuICAgICAgICAgICAgICAgICR0aGlzLnRyaWdnZXIoXCJjaGFuZ2UudWsuYnV0dG9uXCIsIFskdGhpcy5lbGVtZW50LmJsdXIoKS5oYXNDbGFzcyhcInVrLWFjdGl2ZVwiKV0pO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgdG9nZ2xlOiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgdGhpcy5lbGVtZW50LnRvZ2dsZUNsYXNzKFwidWstYWN0aXZlXCIpO1xyXG5cclxuICAgICAgICAgICAgLy8gVXBkYXRlIEFSSUFcclxuICAgICAgICAgICAgdGhpcy5lbGVtZW50LmF0dHIoJ2FyaWEtcHJlc3NlZCcsIHRoaXMuZWxlbWVudC5oYXNDbGFzcyhcInVrLWFjdGl2ZVwiKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG59KShVSWtpdCk7XHJcblxyXG5cclxuKGZ1bmN0aW9uKFVJKSB7XHJcblxyXG4gICAgXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG4gICAgdmFyIGFjdGl2ZSA9IGZhbHNlLCBob3ZlcklkbGUsIGZsaXBzID0ge1xyXG4gICAgICAgICd4Jzoge1xyXG4gICAgICAgICAgICBcImJvdHRvbS1sZWZ0XCIgICA6ICdib3R0b20tcmlnaHQnLFxyXG4gICAgICAgICAgICBcImJvdHRvbS1yaWdodFwiICA6ICdib3R0b20tbGVmdCcsXHJcbiAgICAgICAgICAgIFwiYm90dG9tLWNlbnRlclwiIDogJ2JvdHRvbS1yaWdodCcsXHJcbiAgICAgICAgICAgIFwidG9wLWxlZnRcIiAgICAgIDogJ3RvcC1yaWdodCcsXHJcbiAgICAgICAgICAgIFwidG9wLXJpZ2h0XCIgICAgIDogJ3RvcC1sZWZ0JyxcclxuICAgICAgICAgICAgXCJ0b3AtY2VudGVyXCIgICAgOiAndG9wLXJpZ2h0JyxcclxuICAgICAgICAgICAgXCJsZWZ0LXRvcFwiICAgICAgOiAncmlnaHQnLFxyXG4gICAgICAgICAgICBcImxlZnQtYm90dG9tXCIgICA6ICdyaWdodC1ib3R0b20nLFxyXG4gICAgICAgICAgICBcImxlZnQtY2VudGVyXCIgICA6ICdyaWdodC1jZW50ZXInLFxyXG4gICAgICAgICAgICBcInJpZ2h0LXRvcFwiICAgICA6ICdsZWZ0JyxcclxuICAgICAgICAgICAgXCJyaWdodC1ib3R0b21cIiAgOiAnbGVmdC1ib3R0b20nLFxyXG4gICAgICAgICAgICBcInJpZ2h0LWNlbnRlclwiICA6ICdsZWZ0LWNlbnRlcidcclxuICAgICAgICB9LFxyXG4gICAgICAgICd5Jzoge1xyXG4gICAgICAgICAgICBcImJvdHRvbS1sZWZ0XCIgICA6ICd0b3AtbGVmdCcsXHJcbiAgICAgICAgICAgIFwiYm90dG9tLXJpZ2h0XCIgIDogJ3RvcC1yaWdodCcsXHJcbiAgICAgICAgICAgIFwiYm90dG9tLWNlbnRlclwiIDogJ3RvcC1jZW50ZXInLFxyXG4gICAgICAgICAgICBcInRvcC1sZWZ0XCIgICAgICA6ICdib3R0b20tbGVmdCcsXHJcbiAgICAgICAgICAgIFwidG9wLXJpZ2h0XCIgICAgIDogJ2JvdHRvbS1yaWdodCcsXHJcbiAgICAgICAgICAgIFwidG9wLWNlbnRlclwiICAgIDogJ2JvdHRvbS1jZW50ZXInLFxyXG4gICAgICAgICAgICBcImxlZnQtdG9wXCIgICAgICA6ICd0b3AtbGVmdCcsXHJcbiAgICAgICAgICAgIFwibGVmdC1ib3R0b21cIiAgIDogJ2xlZnQtYm90dG9tJyxcclxuICAgICAgICAgICAgXCJsZWZ0LWNlbnRlclwiICAgOiAndG9wLWxlZnQnLFxyXG4gICAgICAgICAgICBcInJpZ2h0LXRvcFwiICAgICA6ICd0b3AtbGVmdCcsXHJcbiAgICAgICAgICAgIFwicmlnaHQtYm90dG9tXCIgIDogJ2JvdHRvbS1sZWZ0JyxcclxuICAgICAgICAgICAgXCJyaWdodC1jZW50ZXJcIiAgOiAndG9wLWxlZnQnXHJcbiAgICAgICAgfSxcclxuICAgICAgICAneHknOiB7XHJcblxyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgVUkuY29tcG9uZW50KCdkcm9wZG93bicsIHtcclxuXHJcbiAgICAgICAgZGVmYXVsdHM6IHtcclxuICAgICAgICAgICAnbW9kZScgICAgICAgICAgICA6ICdob3ZlcicsXHJcbiAgICAgICAgICAgJ3BvcycgICAgICAgICAgICAgOiAnYm90dG9tLWxlZnQnLFxyXG4gICAgICAgICAgICdvZmZzZXQnICAgICAgICAgIDogMCxcclxuICAgICAgICAgICAncmVtYWludGltZScgICAgICA6IDgwMCxcclxuICAgICAgICAgICAnanVzdGlmeScgICAgICAgICA6IGZhbHNlLFxyXG4gICAgICAgICAgICdib3VuZGFyeScgICAgICAgIDogVUkuJHdpbixcclxuICAgICAgICAgICAnZGVsYXknICAgICAgICAgICA6IDAsXHJcbiAgICAgICAgICAgJ2Ryb3Bkb3duU2VsZWN0b3InOiAnLnVrLWRyb3Bkb3duLC51ay1kcm9wZG93bi1ibGFuaycsXHJcbiAgICAgICAgICAgJ2hvdmVyRGVsYXlJZGxlJyAgOiAyNTAsXHJcbiAgICAgICAgICAgJ3ByZXZlbnRmbGlwJyAgICAgOiBmYWxzZVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIHJlbWFpbklkbGU6IGZhbHNlLFxyXG5cclxuICAgICAgICBib290OiBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgICAgIHZhciB0cmlnZ2VyZXZlbnQgPSBVSS5zdXBwb3J0LnRvdWNoID8gXCJjbGlja1wiIDogXCJtb3VzZWVudGVyXCI7XHJcblxyXG4gICAgICAgICAgICAvLyBpbml0IGNvZGVcclxuICAgICAgICAgICAgVUkuJGh0bWwub24odHJpZ2dlcmV2ZW50K1wiLmRyb3Bkb3duLnVpa2l0XCIsIFwiW2RhdGEtdWstZHJvcGRvd25dXCIsIGZ1bmN0aW9uKGUpIHtcclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgZWxlID0gVUkuJCh0aGlzKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoIWVsZS5kYXRhKFwiZHJvcGRvd25cIikpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRyb3Bkb3duID0gVUkuZHJvcGRvd24oZWxlLCBVSS5VdGlscy5vcHRpb25zKGVsZS5hdHRyKFwiZGF0YS11ay1kcm9wZG93blwiKSkpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAodHJpZ2dlcmV2ZW50PT1cImNsaWNrXCIgfHwgKHRyaWdnZXJldmVudD09XCJtb3VzZWVudGVyXCIgJiYgZHJvcGRvd24ub3B0aW9ucy5tb2RlPT1cImhvdmVyXCIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRyb3Bkb3duLmVsZW1lbnQudHJpZ2dlcih0cmlnZ2VyZXZlbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRyb3Bkb3duLmVsZW1lbnQuZmluZChkcm9wZG93bi5vcHRpb25zLmRyb3Bkb3duU2VsZWN0b3IpLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBpbml0OiBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgICAgIHZhciAkdGhpcyA9IHRoaXM7XHJcblxyXG4gICAgICAgICAgICB0aGlzLmRyb3Bkb3duICAgICA9IHRoaXMuZmluZCh0aGlzLm9wdGlvbnMuZHJvcGRvd25TZWxlY3Rvcik7XHJcbiAgICAgICAgICAgIHRoaXMub2Zmc2V0UGFyZW50ID0gdGhpcy5kcm9wZG93bi5wYXJlbnRzKCkuZmlsdGVyKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFVJLiQuaW5BcnJheShVSS4kKHRoaXMpLmNzcygncG9zaXRpb24nKSwgWydyZWxhdGl2ZScsICdmaXhlZCcsICdhYnNvbHV0ZSddKSAhPT0gLTE7XHJcbiAgICAgICAgICAgIH0pLnNsaWNlKDAsMSk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLmNlbnRlcmVkICA9IHRoaXMuZHJvcGRvd24uaGFzQ2xhc3MoJ3VrLWRyb3Bkb3duLWNlbnRlcicpO1xyXG4gICAgICAgICAgICB0aGlzLmp1c3RpZmllZCA9IHRoaXMub3B0aW9ucy5qdXN0aWZ5ID8gVUkuJCh0aGlzLm9wdGlvbnMuanVzdGlmeSkgOiBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuYm91bmRhcnkgID0gVUkuJCh0aGlzLm9wdGlvbnMuYm91bmRhcnkpO1xyXG5cclxuICAgICAgICAgICAgaWYgKCF0aGlzLmJvdW5kYXJ5Lmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5ib3VuZGFyeSA9IFVJLiR3aW47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIGxlZ2FjeSBERVBSRUNBVEVEIVxyXG4gICAgICAgICAgICBpZiAodGhpcy5kcm9wZG93bi5oYXNDbGFzcygndWstZHJvcGRvd24tdXAnKSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5vcHRpb25zLnBvcyA9ICd0b3AtbGVmdCc7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHRoaXMuZHJvcGRvd24uaGFzQ2xhc3MoJ3VrLWRyb3Bkb3duLWZsaXAnKSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5vcHRpb25zLnBvcyA9IHRoaXMub3B0aW9ucy5wb3MucmVwbGFjZSgnbGVmdCcsJ3JpZ2h0Jyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHRoaXMuZHJvcGRvd24uaGFzQ2xhc3MoJ3VrLWRyb3Bkb3duLWNlbnRlcicpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm9wdGlvbnMucG9zID0gdGhpcy5vcHRpb25zLnBvcy5yZXBsYWNlKC8obGVmdHxyaWdodCkvLCdjZW50ZXInKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLy0tIGVuZCBsZWdhY3lcclxuXHJcbiAgICAgICAgICAgIC8vIEluaXQgQVJJQVxyXG4gICAgICAgICAgICB0aGlzLmVsZW1lbnQuYXR0cignYXJpYS1oYXNwb3B1cCcsICd0cnVlJyk7XHJcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudC5hdHRyKCdhcmlhLWV4cGFuZGVkJywgdGhpcy5lbGVtZW50Lmhhc0NsYXNzKFwidWstb3BlblwiKSk7XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLm1vZGUgPT0gXCJjbGlja1wiIHx8IFVJLnN1cHBvcnQudG91Y2gpIHtcclxuXHJcbiAgICAgICAgICAgICAgICB0aGlzLm9uKFwiY2xpY2sudWlraXQuZHJvcGRvd25cIiwgZnVuY3Rpb24oZSkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB2YXIgJHRhcmdldCA9IFVJLiQoZS50YXJnZXQpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoISR0YXJnZXQucGFyZW50cygkdGhpcy5vcHRpb25zLmRyb3Bkb3duU2VsZWN0b3IpLmxlbmd0aCkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCR0YXJnZXQuaXMoXCJhW2hyZWY9JyMnXVwiKSB8fCAkdGFyZ2V0LnBhcmVudCgpLmlzKFwiYVtocmVmPScjJ11cIikgfHwgKCR0aGlzLmRyb3Bkb3duLmxlbmd0aCAmJiAhJHRoaXMuZHJvcGRvd24uaXMoXCI6dmlzaWJsZVwiKSkgKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgJHRhcmdldC5ibHVyKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoISR0aGlzLmVsZW1lbnQuaGFzQ2xhc3MoJ3VrLW9wZW4nKSkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgJHRoaXMuc2hvdygpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEkdGhpcy5kcm9wZG93bi5maW5kKGUudGFyZ2V0KS5sZW5ndGggfHwgJHRhcmdldC5pcyhcIi51ay1kcm9wZG93bi1jbG9zZVwiKSB8fCAkdGFyZ2V0LnBhcmVudHMoXCIudWstZHJvcGRvd24tY2xvc2VcIikubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdGhpcy5oaWRlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5vbihcIm1vdXNlZW50ZXJcIiwgZnVuY3Rpb24oZSkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAkdGhpcy50cmlnZ2VyKCdwb2ludGVyZW50ZXIudWsuZHJvcGRvd24nLCBbJHRoaXNdKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCR0aGlzLnJlbWFpbklkbGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KCR0aGlzLnJlbWFpbklkbGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGhvdmVySWRsZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQoaG92ZXJJZGxlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChhY3RpdmUgJiYgYWN0aXZlID09ICR0aGlzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIHBzZXVkbyBtYW51QWltXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFjdGl2ZSAmJiBhY3RpdmUgIT0gJHRoaXMpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGhvdmVySWRsZSA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBob3ZlcklkbGUgPSBzZXRUaW1lb3V0KCR0aGlzLnNob3cuYmluZCgkdGhpcyksICR0aGlzLm9wdGlvbnMuZGVsYXkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LCAkdGhpcy5vcHRpb25zLmhvdmVyRGVsYXlJZGxlKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGhvdmVySWRsZSA9IHNldFRpbWVvdXQoJHRoaXMuc2hvdy5iaW5kKCR0aGlzKSwgJHRoaXMub3B0aW9ucy5kZWxheSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIH0pLm9uKFwibW91c2VsZWF2ZVwiLCBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGhvdmVySWRsZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQoaG92ZXJJZGxlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICR0aGlzLnJlbWFpbklkbGUgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYWN0aXZlICYmIGFjdGl2ZSA9PSAkdGhpcykgJHRoaXMuaGlkZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sICR0aGlzLm9wdGlvbnMucmVtYWludGltZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICR0aGlzLnRyaWdnZXIoJ3BvaW50ZXJsZWF2ZS51ay5kcm9wZG93bicsIFskdGhpc10pO1xyXG5cclxuICAgICAgICAgICAgICAgIH0pLm9uKFwiY2xpY2tcIiwgZnVuY3Rpb24oZSl7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHZhciAkdGFyZ2V0ID0gVUkuJChlLnRhcmdldCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICgkdGhpcy5yZW1haW5JZGxlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dCgkdGhpcy5yZW1haW5JZGxlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChhY3RpdmUgJiYgYWN0aXZlID09ICR0aGlzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghJHRoaXMuZHJvcGRvd24uZmluZChlLnRhcmdldCkubGVuZ3RoIHx8ICR0YXJnZXQuaXMoXCIudWstZHJvcGRvd24tY2xvc2VcIikgfHwgJHRhcmdldC5wYXJlbnRzKFwiLnVrLWRyb3Bkb3duLWNsb3NlXCIpLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHRoaXMuaGlkZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICgkdGFyZ2V0LmlzKFwiYVtocmVmPScjJ11cIikgfHwgJHRhcmdldC5wYXJlbnQoKS5pcyhcImFbaHJlZj0nIyddXCIpKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgJHRoaXMuc2hvdygpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBzaG93OiBmdW5jdGlvbigpe1xyXG5cclxuICAgICAgICAgICAgVUkuJGh0bWwub2ZmKFwiY2xpY2sub3V0ZXIuZHJvcGRvd25cIik7XHJcblxyXG4gICAgICAgICAgICBpZiAoYWN0aXZlICYmIGFjdGl2ZSAhPSB0aGlzKSB7XHJcbiAgICAgICAgICAgICAgICBhY3RpdmUuaGlkZSh0cnVlKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKGhvdmVySWRsZSkge1xyXG4gICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KGhvdmVySWRsZSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMudHJpZ2dlcignYmVmb3Jlc2hvdy51ay5kcm9wZG93bicsIFt0aGlzXSk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLmNoZWNrRGltZW5zaW9ucygpO1xyXG4gICAgICAgICAgICB0aGlzLmVsZW1lbnQuYWRkQ2xhc3MoJ3VrLW9wZW4nKTtcclxuXHJcbiAgICAgICAgICAgIC8vIFVwZGF0ZSBBUklBXHJcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudC5hdHRyKCdhcmlhLWV4cGFuZGVkJywgJ3RydWUnKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMudHJpZ2dlcignc2hvdy51ay5kcm9wZG93bicsIFt0aGlzXSk7XHJcblxyXG4gICAgICAgICAgICBVSS5VdGlscy5jaGVja0Rpc3BsYXkodGhpcy5kcm9wZG93biwgdHJ1ZSk7XHJcbiAgICAgICAgICAgIGFjdGl2ZSA9IHRoaXM7XHJcblxyXG4gICAgICAgICAgICB0aGlzLnJlZ2lzdGVyT3V0ZXJDbGljaygpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGhpZGU6IGZ1bmN0aW9uKGZvcmNlKSB7XHJcblxyXG4gICAgICAgICAgICB0aGlzLnRyaWdnZXIoJ2JlZm9yZWhpZGUudWsuZHJvcGRvd24nLCBbdGhpcywgZm9yY2VdKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudC5yZW1vdmVDbGFzcygndWstb3BlbicpO1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMucmVtYWluSWRsZSkge1xyXG4gICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMucmVtYWluSWRsZSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMucmVtYWluSWRsZSA9IGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgLy8gVXBkYXRlIEFSSUFcclxuICAgICAgICAgICAgdGhpcy5lbGVtZW50LmF0dHIoJ2FyaWEtZXhwYW5kZWQnLCAnZmFsc2UnKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMudHJpZ2dlcignaGlkZS51ay5kcm9wZG93bicsIFt0aGlzLCBmb3JjZV0pO1xyXG5cclxuICAgICAgICAgICAgaWYgKGFjdGl2ZSA9PSB0aGlzKSBhY3RpdmUgPSBmYWxzZTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICByZWdpc3Rlck91dGVyQ2xpY2s6IGZ1bmN0aW9uKCl7XHJcblxyXG4gICAgICAgICAgICB2YXIgJHRoaXMgPSB0aGlzO1xyXG5cclxuICAgICAgICAgICAgVUkuJGh0bWwub2ZmKFwiY2xpY2sub3V0ZXIuZHJvcGRvd25cIik7XHJcblxyXG4gICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICAgICAgICAgIFVJLiRodG1sLm9uKFwiY2xpY2sub3V0ZXIuZHJvcGRvd25cIiwgZnVuY3Rpb24oZSkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoaG92ZXJJZGxlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dChob3ZlcklkbGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyICR0YXJnZXQgPSBVSS4kKGUudGFyZ2V0KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFjdGl2ZSA9PSAkdGhpcyAmJiAhJHRoaXMuZWxlbWVudC5maW5kKGUudGFyZ2V0KS5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHRoaXMuaGlkZSh0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgVUkuJGh0bWwub2ZmKFwiY2xpY2sub3V0ZXIuZHJvcGRvd25cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0sIDEwKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBjaGVja0RpbWVuc2lvbnM6IGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICAgICAgaWYgKCF0aGlzLmRyb3Bkb3duLmxlbmd0aCkgcmV0dXJuO1xyXG5cclxuICAgICAgICAgICAgLy8gcmVzZXRcclxuICAgICAgICAgICAgdGhpcy5kcm9wZG93bi5yZW1vdmVDbGFzcygndWstZHJvcGRvd24tdG9wIHVrLWRyb3Bkb3duLWJvdHRvbSB1ay1kcm9wZG93bi1sZWZ0IHVrLWRyb3Bkb3duLXJpZ2h0IHVrLWRyb3Bkb3duLXN0YWNrJykuY3NzKHtcclxuICAgICAgICAgICAgICAgICd0b3AtbGVmdCc6JycsXHJcbiAgICAgICAgICAgICAgICAnbGVmdCc6JycsXHJcbiAgICAgICAgICAgICAgICAnbWFyZ2luLWxlZnQnIDonJyxcclxuICAgICAgICAgICAgICAgICdtYXJnaW4tcmlnaHQnOicnXHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMuanVzdGlmaWVkICYmIHRoaXMuanVzdGlmaWVkLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kcm9wZG93bi5jc3MoXCJtaW4td2lkdGhcIiwgXCJcIik7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHZhciAkdGhpcyAgICAgICAgICA9IHRoaXMsXHJcbiAgICAgICAgICAgICAgICBwb3MgICAgICAgICAgICA9IFVJLiQuZXh0ZW5kKHt9LCB0aGlzLm9mZnNldFBhcmVudC5vZmZzZXQoKSwge3dpZHRoOiB0aGlzLm9mZnNldFBhcmVudFswXS5vZmZzZXRXaWR0aCwgaGVpZ2h0OiB0aGlzLm9mZnNldFBhcmVudFswXS5vZmZzZXRIZWlnaHR9KSxcclxuICAgICAgICAgICAgICAgIHBvc29mZnNldCAgICAgID0gdGhpcy5vcHRpb25zLm9mZnNldCxcclxuICAgICAgICAgICAgICAgIGRyb3Bkb3duICAgICAgID0gdGhpcy5kcm9wZG93bixcclxuICAgICAgICAgICAgICAgIG9mZnNldCAgICAgICAgID0gZHJvcGRvd24uc2hvdygpLm9mZnNldCgpIHx8IHtsZWZ0OiAwLCB0b3A6IDB9LFxyXG4gICAgICAgICAgICAgICAgd2lkdGggICAgICAgICAgPSBkcm9wZG93bi5vdXRlcldpZHRoKCksXHJcbiAgICAgICAgICAgICAgICBoZWlnaHQgICAgICAgICA9IGRyb3Bkb3duLm91dGVySGVpZ2h0KCksXHJcbiAgICAgICAgICAgICAgICBib3VuZGFyeXdpZHRoICA9IHRoaXMuYm91bmRhcnkud2lkdGgoKSxcclxuICAgICAgICAgICAgICAgIGJvdW5kYXJ5b2Zmc2V0ID0gdGhpcy5ib3VuZGFyeVswXSAhPT0gd2luZG93ICYmIHRoaXMuYm91bmRhcnkub2Zmc2V0KCkgPyB0aGlzLmJvdW5kYXJ5Lm9mZnNldCgpOiB7dG9wOjAsIGxlZnQ6MH0sXHJcbiAgICAgICAgICAgICAgICBkcG9zICAgICAgICAgICA9IHRoaXMub3B0aW9ucy5wb3M7XHJcblxyXG4gICAgICAgICAgICB2YXIgdmFyaWFudHMgPSAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwiYm90dG9tLWxlZnRcIiAgIDoge3RvcDogMCArIHBvcy5oZWlnaHQgKyBwb3NvZmZzZXQsIGxlZnQ6IDB9LFxyXG4gICAgICAgICAgICAgICAgICAgIFwiYm90dG9tLXJpZ2h0XCIgIDoge3RvcDogMCArIHBvcy5oZWlnaHQgKyBwb3NvZmZzZXQsIGxlZnQ6IDAgKyBwb3Mud2lkdGggLSB3aWR0aH0sXHJcbiAgICAgICAgICAgICAgICAgICAgXCJib3R0b20tY2VudGVyXCIgOiB7dG9wOiAwICsgcG9zLmhlaWdodCArIHBvc29mZnNldCwgbGVmdDogMCArIHBvcy53aWR0aCAvIDIgLSB3aWR0aCAvIDJ9LFxyXG4gICAgICAgICAgICAgICAgICAgIFwidG9wLWxlZnRcIiAgICAgIDoge3RvcDogMCAtIGhlaWdodCAtIHBvc29mZnNldCwgbGVmdDogMH0sXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ0b3AtcmlnaHRcIiAgICAgOiB7dG9wOiAwIC0gaGVpZ2h0IC0gcG9zb2Zmc2V0LCBsZWZ0OiAwICsgcG9zLndpZHRoIC0gd2lkdGh9LFxyXG4gICAgICAgICAgICAgICAgICAgIFwidG9wLWNlbnRlclwiICAgIDoge3RvcDogMCAtIGhlaWdodCAtIHBvc29mZnNldCwgbGVmdDogMCArIHBvcy53aWR0aCAvIDIgLSB3aWR0aCAvIDJ9LFxyXG4gICAgICAgICAgICAgICAgICAgIFwibGVmdC10b3BcIiAgICAgIDoge3RvcDogMCwgbGVmdDogMCAtIHdpZHRoIC0gcG9zb2Zmc2V0fSxcclxuICAgICAgICAgICAgICAgICAgICBcImxlZnQtYm90dG9tXCIgICA6IHt0b3A6IDAgKyBwb3MuaGVpZ2h0IC0gaGVpZ2h0LCBsZWZ0OiAwIC0gd2lkdGggLSBwb3NvZmZzZXR9LFxyXG4gICAgICAgICAgICAgICAgICAgIFwibGVmdC1jZW50ZXJcIiAgIDoge3RvcDogMCArIHBvcy5oZWlnaHQgLyAyIC0gaGVpZ2h0IC8gMiwgbGVmdDogMCAtIHdpZHRoIC0gcG9zb2Zmc2V0fSxcclxuICAgICAgICAgICAgICAgICAgICBcInJpZ2h0LXRvcFwiICAgICA6IHt0b3A6IDAsIGxlZnQ6IDAgKyBwb3Mud2lkdGggKyBwb3NvZmZzZXR9LFxyXG4gICAgICAgICAgICAgICAgICAgIFwicmlnaHQtYm90dG9tXCIgIDoge3RvcDogMCArIHBvcy5oZWlnaHQgLSBoZWlnaHQsIGxlZnQ6IDAgKyBwb3Mud2lkdGggKyBwb3NvZmZzZXR9LFxyXG4gICAgICAgICAgICAgICAgICAgIFwicmlnaHQtY2VudGVyXCIgIDoge3RvcDogMCArIHBvcy5oZWlnaHQgLyAyIC0gaGVpZ2h0IC8gMiwgbGVmdDogMCArIHBvcy53aWR0aCArIHBvc29mZnNldH1cclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBjc3MgPSB7fSxcclxuICAgICAgICAgICAgICAgIHBwO1xyXG5cclxuICAgICAgICAgICAgcHAgPSBkcG9zLnNwbGl0KCctJyk7XHJcbiAgICAgICAgICAgIGNzcyA9IHZhcmlhbnRzW2Rwb3NdID8gdmFyaWFudHNbZHBvc10gOiB2YXJpYW50c1snYm90dG9tLWxlZnQnXTtcclxuXHJcbiAgICAgICAgICAgIC8vIGp1c3RpZnkgZHJvcGRvd25cclxuICAgICAgICAgICAgaWYgKHRoaXMuanVzdGlmaWVkICYmIHRoaXMuanVzdGlmaWVkLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAganVzdGlmeShkcm9wZG93bi5jc3Moe2xlZnQ6MH0pLCB0aGlzLmp1c3RpZmllZCwgYm91bmRhcnl3aWR0aCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5wcmV2ZW50ZmxpcCAhPT0gdHJ1ZSkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB2YXIgZmRwb3M7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCh0aGlzLmNoZWNrQm91bmRhcnkocG9zLmxlZnQgKyBjc3MubGVmdCwgcG9zLnRvcCArIGNzcy50b3AsIHdpZHRoLCBoZWlnaHQsIGJvdW5kYXJ5d2lkdGgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJ4XCI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZih0aGlzLm9wdGlvbnMucHJldmVudGZsaXAgIT09J3gnKSBmZHBvcyA9IGZsaXBzWyd4J11bZHBvc10gfHwgJ3JpZ2h0LXRvcCc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcInlcIjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKHRoaXMub3B0aW9ucy5wcmV2ZW50ZmxpcCAhPT0neScpIGZkcG9zID0gZmxpcHNbJ3knXVtkcG9zXSB8fCAndG9wLWxlZnQnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJ4eVwiOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoIXRoaXMub3B0aW9ucy5wcmV2ZW50ZmxpcCkgZmRwb3MgPSBmbGlwc1sneHknXVtkcG9zXSB8fCAncmlnaHQtYm90dG9tJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZkcG9zKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwcCAgPSBmZHBvcy5zcGxpdCgnLScpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjc3MgPSB2YXJpYW50c1tmZHBvc10gPyB2YXJpYW50c1tmZHBvc10gOiB2YXJpYW50c1snYm90dG9tLWxlZnQnXTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNoZWNrIGZsaXBwZWRcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuY2hlY2tCb3VuZGFyeShwb3MubGVmdCArIGNzcy5sZWZ0LCBwb3MudG9wICsgY3NzLnRvcCwgd2lkdGgsIGhlaWdodCwgYm91bmRhcnl3aWR0aCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBwICA9IGRwb3Muc3BsaXQoJy0nKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNzcyA9IHZhcmlhbnRzW2Rwb3NdID8gdmFyaWFudHNbZHBvc10gOiB2YXJpYW50c1snYm90dG9tLWxlZnQnXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHdpZHRoID4gYm91bmRhcnl3aWR0aCkge1xyXG4gICAgICAgICAgICAgICAgZHJvcGRvd24uYWRkQ2xhc3MoXCJ1ay1kcm9wZG93bi1zdGFja1wiKTtcclxuICAgICAgICAgICAgICAgIHRoaXMudHJpZ2dlcignc3RhY2sudWsuZHJvcGRvd24nLCBbdGhpc10pO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBkcm9wZG93bi5jc3MoY3NzKS5jc3MoXCJkaXNwbGF5XCIsIFwiXCIpLmFkZENsYXNzKCd1ay1kcm9wZG93bi0nK3BwWzBdKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBjaGVja0JvdW5kYXJ5OiBmdW5jdGlvbihsZWZ0LCB0b3AsIHdpZHRoLCBoZWlnaHQsIGJvdW5kYXJ5d2lkdGgpIHtcclxuXHJcbiAgICAgICAgICAgIHZhciBheGlzID0gXCJcIjtcclxuXHJcbiAgICAgICAgICAgIGlmIChsZWZ0IDwgMCB8fCAoKGxlZnQgLSBVSS4kd2luLnNjcm9sbExlZnQoKSkrd2lkdGgpID4gYm91bmRhcnl3aWR0aCkge1xyXG4gICAgICAgICAgICAgICBheGlzICs9IFwieFwiO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoKHRvcCAtIFVJLiR3aW4uc2Nyb2xsVG9wKCkpIDwgMCB8fCAoKHRvcCAtIFVJLiR3aW4uc2Nyb2xsVG9wKCkpK2hlaWdodCkgPiB3aW5kb3cuaW5uZXJIZWlnaHQpIHtcclxuICAgICAgICAgICAgICAgYXhpcyArPSBcInlcIjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIGF4aXM7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG5cclxuICAgIFVJLmNvbXBvbmVudCgnZHJvcGRvd25PdmVybGF5Jywge1xyXG5cclxuICAgICAgICBkZWZhdWx0czoge1xyXG4gICAgICAgICAgICdqdXN0aWZ5JyA6IGZhbHNlLFxyXG4gICAgICAgICAgICdjbHMnICAgICA6ICcnLFxyXG4gICAgICAgICAgICdkdXJhdGlvbic6IDIwMFxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGJvb3Q6IGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICAgICAgLy8gaW5pdCBjb2RlXHJcbiAgICAgICAgICAgIFVJLnJlYWR5KGZ1bmN0aW9uKGNvbnRleHQpIHtcclxuXHJcbiAgICAgICAgICAgICAgICBVSS4kKFwiW2RhdGEtdWstZHJvcGRvd24tb3ZlcmxheV1cIiwgY29udGV4dCkuZWFjaChmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZWxlID0gVUkuJCh0aGlzKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFlbGUuZGF0YShcImRyb3Bkb3duT3ZlcmxheVwiKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBVSS5kcm9wZG93bk92ZXJsYXkoZWxlLCBVSS5VdGlscy5vcHRpb25zKGVsZS5hdHRyKFwiZGF0YS11ay1kcm9wZG93bi1vdmVybGF5XCIpKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGluaXQ6IGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICAgICAgdmFyICR0aGlzID0gdGhpcztcclxuXHJcbiAgICAgICAgICAgIHRoaXMuanVzdGlmaWVkID0gdGhpcy5vcHRpb25zLmp1c3RpZnkgPyBVSS4kKHRoaXMub3B0aW9ucy5qdXN0aWZ5KSA6IGZhbHNlO1xyXG4gICAgICAgICAgICB0aGlzLm92ZXJsYXkgICA9IHRoaXMuZWxlbWVudC5maW5kKCd1ay1kcm9wZG93bi1vdmVybGF5Jyk7XHJcblxyXG4gICAgICAgICAgICBpZiAoIXRoaXMub3ZlcmxheS5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMub3ZlcmxheSA9IFVJLiQoJzxkaXYgY2xhc3M9XCJ1ay1kcm9wZG93bi1vdmVybGF5XCI+PC9kaXY+JykuYXBwZW5kVG8odGhpcy5lbGVtZW50KTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5vdmVybGF5LmFkZENsYXNzKHRoaXMub3B0aW9ucy5jbHMpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5vbih7XHJcblxyXG4gICAgICAgICAgICAgICAgJ2JlZm9yZXNob3cudWsuZHJvcGRvd24nOiBmdW5jdGlvbihlLCBkcm9wZG93bikge1xyXG4gICAgICAgICAgICAgICAgICAgICR0aGlzLmRyb3Bkb3duID0gZHJvcGRvd247XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICgkdGhpcy5qdXN0aWZpZWQgJiYgJHRoaXMuanVzdGlmaWVkLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBqdXN0aWZ5KCR0aGlzLm92ZXJsYXkuY3NzKHsnZGlzcGxheSc6J2Jsb2NrJywgJ21hcmdpbi1sZWZ0JzonJywnbWFyZ2luLXJpZ2h0JzonJ30pLCAkdGhpcy5qdXN0aWZpZWQsICR0aGlzLmp1c3RpZmllZC5vdXRlcldpZHRoKCkpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0sXHJcblxyXG4gICAgICAgICAgICAgICAgJ3Nob3cudWsuZHJvcGRvd24nOiBmdW5jdGlvbihlLCBkcm9wZG93bikge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB2YXIgaCA9ICR0aGlzLmRyb3Bkb3duLmRyb3Bkb3duLm91dGVySGVpZ2h0KHRydWUpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAkdGhpcy5kcm9wZG93bi5lbGVtZW50LnJlbW92ZUNsYXNzKCd1ay1vcGVuJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICR0aGlzLm92ZXJsYXkuc3RvcCgpLmNzcygnZGlzcGxheScsICdibG9jaycpLmFuaW1hdGUoe2hlaWdodDogaH0sICR0aGlzLm9wdGlvbnMuZHVyYXRpb24sIGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAkdGhpcy5kcm9wZG93bi5kcm9wZG93bi5jc3MoJ3Zpc2liaWxpdHknLCAnJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgJHRoaXMuZHJvcGRvd24uZWxlbWVudC5hZGRDbGFzcygndWstb3BlbicpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICBVSS5VdGlscy5jaGVja0Rpc3BsYXkoJHRoaXMuZHJvcGRvd24uZHJvcGRvd24sIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAkdGhpcy5wb2ludGVybGVhdmUgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH0sXHJcblxyXG4gICAgICAgICAgICAgICAgJ2hpZGUudWsuZHJvcGRvd24nOiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICAkdGhpcy5vdmVybGF5LnN0b3AoKS5hbmltYXRlKHtoZWlnaHQ6IDB9LCAkdGhpcy5vcHRpb25zLmR1cmF0aW9uKTtcclxuICAgICAgICAgICAgICAgIH0sXHJcblxyXG4gICAgICAgICAgICAgICAgJ3BvaW50ZXJlbnRlci51ay5kcm9wZG93bic6IGZ1bmN0aW9uKGUsIGRyb3Bkb3duKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KCR0aGlzLnJlbWFpbklkbGUpO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuXHJcbiAgICAgICAgICAgICAgICAncG9pbnRlcmxlYXZlLnVrLmRyb3Bkb3duJzogZnVuY3Rpb24oZSwgZHJvcGRvd24pIHtcclxuICAgICAgICAgICAgICAgICAgICAkdGhpcy5wb2ludGVybGVhdmUgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuXHJcblxyXG4gICAgICAgICAgICB0aGlzLm92ZXJsYXkub24oe1xyXG5cclxuICAgICAgICAgICAgICAgICdtb3VzZWVudGVyJzogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCR0aGlzLnJlbWFpbklkbGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KCR0aGlzLmRyb3Bkb3duLnJlbWFpbklkbGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQoJHRoaXMucmVtYWluSWRsZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSxcclxuXHJcbiAgICAgICAgICAgICAgICAnbW91c2VsZWF2ZSc6IGZ1bmN0aW9uKCl7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICgkdGhpcy5wb2ludGVybGVhdmUgJiYgYWN0aXZlKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAkdGhpcy5yZW1haW5JZGxlID0gc2V0VGltZW91dChmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoYWN0aXZlKSBhY3RpdmUuaGlkZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LCBhY3RpdmUub3B0aW9ucy5yZW1haW50aW1lKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfVxyXG5cclxuICAgIH0pO1xyXG5cclxuXHJcbiAgICBmdW5jdGlvbiBqdXN0aWZ5KGVsZSwganVzdGlmeVRvLCBib3VuZGFyeXdpZHRoLCBvZmZzZXQpIHtcclxuXHJcbiAgICAgICAgZWxlICAgICAgICAgICA9IFVJLiQoZWxlKTtcclxuICAgICAgICBqdXN0aWZ5VG8gICAgID0gVUkuJChqdXN0aWZ5VG8pO1xyXG4gICAgICAgIGJvdW5kYXJ5d2lkdGggPSBib3VuZGFyeXdpZHRoIHx8IHdpbmRvdy5pbm5lcldpZHRoO1xyXG4gICAgICAgIG9mZnNldCAgICAgICAgPSBvZmZzZXQgfHwgZWxlLm9mZnNldCgpO1xyXG5cclxuICAgICAgICBpZiAoanVzdGlmeVRvLmxlbmd0aCkge1xyXG5cclxuICAgICAgICAgICAgdmFyIGp3aWR0aCA9IGp1c3RpZnlUby5vdXRlcldpZHRoKCk7XHJcblxyXG4gICAgICAgICAgICBlbGUuY3NzKFwibWluLXdpZHRoXCIsIGp3aWR0aCk7XHJcblxyXG4gICAgICAgICAgICBpZiAoVUkubGFuZ2RpcmVjdGlvbiA9PSAncmlnaHQnKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIHJpZ2h0MSAgID0gYm91bmRhcnl3aWR0aCAtIChqdXN0aWZ5VG8ub2Zmc2V0KCkubGVmdCArIGp3aWR0aCksXHJcbiAgICAgICAgICAgICAgICAgICAgcmlnaHQyICAgPSBib3VuZGFyeXdpZHRoIC0gKGVsZS5vZmZzZXQoKS5sZWZ0ICsgZWxlLm91dGVyV2lkdGgoKSk7XHJcblxyXG4gICAgICAgICAgICAgICAgZWxlLmNzcyhcIm1hcmdpbi1yaWdodFwiLCByaWdodDEgLSByaWdodDIpO1xyXG5cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGVsZS5jc3MoXCJtYXJnaW4tbGVmdFwiLCBqdXN0aWZ5VG8ub2Zmc2V0KCkubGVmdCAtIG9mZnNldC5sZWZ0KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbn0pKFVJa2l0KTtcclxuXHJcbihmdW5jdGlvbihVSSkge1xyXG5cclxuICAgIFwidXNlIHN0cmljdFwiO1xyXG5cclxuICAgIHZhciBncmlkcyA9IFtdO1xyXG5cclxuICAgIFVJLmNvbXBvbmVudCgnZ3JpZE1hdGNoSGVpZ2h0Jywge1xyXG5cclxuICAgICAgICBkZWZhdWx0czoge1xyXG4gICAgICAgICAgICBcInRhcmdldFwiICAgICAgICA6IGZhbHNlLFxyXG4gICAgICAgICAgICBcInJvd1wiICAgICAgICAgICA6IHRydWUsXHJcbiAgICAgICAgICAgIFwiaWdub3Jlc3RhY2tlZFwiIDogZmFsc2VcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBib290OiBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgICAgIC8vIGluaXQgY29kZVxyXG4gICAgICAgICAgICBVSS5yZWFkeShmdW5jdGlvbihjb250ZXh0KSB7XHJcblxyXG4gICAgICAgICAgICAgICAgVUkuJChcIltkYXRhLXVrLWdyaWQtbWF0Y2hdXCIsIGNvbnRleHQpLmVhY2goZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGdyaWQgPSBVSS4kKHRoaXMpLCBvYmo7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghZ3JpZC5kYXRhKFwiZ3JpZE1hdGNoSGVpZ2h0XCIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9iaiA9IFVJLmdyaWRNYXRjaEhlaWdodChncmlkLCBVSS5VdGlscy5vcHRpb25zKGdyaWQuYXR0cihcImRhdGEtdWstZ3JpZC1tYXRjaFwiKSkpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBpbml0OiBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgICAgIHZhciAkdGhpcyA9IHRoaXM7XHJcblxyXG4gICAgICAgICAgICB0aGlzLmNvbHVtbnMgID0gdGhpcy5lbGVtZW50LmNoaWxkcmVuKCk7XHJcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudHMgPSB0aGlzLm9wdGlvbnMudGFyZ2V0ID8gdGhpcy5maW5kKHRoaXMub3B0aW9ucy50YXJnZXQpIDogdGhpcy5jb2x1bW5zO1xyXG5cclxuICAgICAgICAgICAgaWYgKCF0aGlzLmNvbHVtbnMubGVuZ3RoKSByZXR1cm47XHJcblxyXG4gICAgICAgICAgICBVSS4kd2luLm9uKCdsb2FkIHJlc2l6ZSBvcmllbnRhdGlvbmNoYW5nZScsIChmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgZm4gPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICAkdGhpcy5tYXRjaCgpO1xyXG4gICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICBVSS4kKGZ1bmN0aW9uKCkgeyBmbigpOyB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gVUkuVXRpbHMuZGVib3VuY2UoZm4sIDUwKTtcclxuICAgICAgICAgICAgfSkoKSk7XHJcblxyXG4gICAgICAgICAgICBVSS4kaHRtbC5vbihcImNoYW5nZWQudWsuZG9tXCIsIGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICAgICAgICAgICR0aGlzLmNvbHVtbnMgID0gJHRoaXMuZWxlbWVudC5jaGlsZHJlbigpO1xyXG4gICAgICAgICAgICAgICAgJHRoaXMuZWxlbWVudHMgPSAkdGhpcy5vcHRpb25zLnRhcmdldCA/ICR0aGlzLmZpbmQoJHRoaXMub3B0aW9ucy50YXJnZXQpIDogJHRoaXMuY29sdW1ucztcclxuICAgICAgICAgICAgICAgICR0aGlzLm1hdGNoKCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5vbihcImRpc3BsYXkudWsuY2hlY2tcIiwgZnVuY3Rpb24oZSkge1xyXG4gICAgICAgICAgICAgICAgaWYodGhpcy5lbGVtZW50LmlzKFwiOnZpc2libGVcIikpIHRoaXMubWF0Y2goKTtcclxuICAgICAgICAgICAgfS5iaW5kKHRoaXMpKTtcclxuXHJcbiAgICAgICAgICAgIGdyaWRzLnB1c2godGhpcyk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgbWF0Y2g6IGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICAgICAgdmFyIGZpcnN0dmlzaWJsZSA9IHRoaXMuY29sdW1ucy5maWx0ZXIoXCI6dmlzaWJsZTpmaXJzdFwiKTtcclxuXHJcbiAgICAgICAgICAgIGlmICghZmlyc3R2aXNpYmxlLmxlbmd0aCkgcmV0dXJuO1xyXG5cclxuICAgICAgICAgICAgdmFyIHN0YWNrZWQgPSBNYXRoLmNlaWwoMTAwICogcGFyc2VGbG9hdChmaXJzdHZpc2libGUuY3NzKCd3aWR0aCcpKSAvIHBhcnNlRmxvYXQoZmlyc3R2aXNpYmxlLnBhcmVudCgpLmNzcygnd2lkdGgnKSkpID49IDEwMDtcclxuXHJcbiAgICAgICAgICAgIGlmIChzdGFja2VkICYmICF0aGlzLm9wdGlvbnMuaWdub3Jlc3RhY2tlZCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5yZXZlcnQoKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIFVJLlV0aWxzLm1hdGNoSGVpZ2h0cyh0aGlzLmVsZW1lbnRzLCB0aGlzLm9wdGlvbnMpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICByZXZlcnQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICB0aGlzLmVsZW1lbnRzLmNzcygnbWluLWhlaWdodCcsICcnKTtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgVUkuY29tcG9uZW50KCdncmlkTWFyZ2luJywge1xyXG5cclxuICAgICAgICBkZWZhdWx0czoge1xyXG4gICAgICAgICAgICBcImNsc1wiOiBcInVrLWdyaWQtbWFyZ2luXCJcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBib290OiBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgICAgIC8vIGluaXQgY29kZVxyXG4gICAgICAgICAgICBVSS5yZWFkeShmdW5jdGlvbihjb250ZXh0KSB7XHJcblxyXG4gICAgICAgICAgICAgICAgVUkuJChcIltkYXRhLXVrLWdyaWQtbWFyZ2luXVwiLCBjb250ZXh0KS5lYWNoKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBncmlkID0gVUkuJCh0aGlzKSwgb2JqO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoIWdyaWQuZGF0YShcImdyaWRNYXJnaW5cIikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgb2JqID0gVUkuZ3JpZE1hcmdpbihncmlkLCBVSS5VdGlscy5vcHRpb25zKGdyaWQuYXR0cihcImRhdGEtdWstZ3JpZC1tYXJnaW5cIikpKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgaW5pdDogZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgICAgICB2YXIgc3RhY2tNYXJnaW4gPSBVSS5zdGFja01hcmdpbih0aGlzLmVsZW1lbnQsIHRoaXMub3B0aW9ucyk7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG59KShVSWtpdCk7XHJcblxyXG4oZnVuY3Rpb24oVUkpIHtcclxuXHJcbiAgICBcInVzZSBzdHJpY3RcIjtcclxuXHJcbiAgICB2YXIgYWN0aXZlID0gZmFsc2UsIGFjdGl2ZUNvdW50ID0gMCwgJGh0bWwgPSBVSS4kaHRtbCwgYm9keTtcclxuXHJcbiAgICBVSS5jb21wb25lbnQoJ21vZGFsJywge1xyXG5cclxuICAgICAgICBkZWZhdWx0czoge1xyXG4gICAgICAgICAgICBrZXlib2FyZDogdHJ1ZSxcclxuICAgICAgICAgICAgYmdjbG9zZTogdHJ1ZSxcclxuICAgICAgICAgICAgbWluU2Nyb2xsSGVpZ2h0OiAxNTAsXHJcbiAgICAgICAgICAgIGNlbnRlcjogZmFsc2UsXHJcbiAgICAgICAgICAgIG1vZGFsOiB0cnVlXHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgc2Nyb2xsYWJsZTogZmFsc2UsXHJcbiAgICAgICAgdHJhbnNpdGlvbjogZmFsc2UsXHJcbiAgICAgICAgaGFzVHJhbnNpdGlvbmVkOiB0cnVlLFxyXG5cclxuICAgICAgICBpbml0OiBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgICAgIGlmICghYm9keSkgYm9keSA9IFVJLiQoJ2JvZHknKTtcclxuXHJcbiAgICAgICAgICAgIGlmICghdGhpcy5lbGVtZW50Lmxlbmd0aCkgcmV0dXJuO1xyXG5cclxuICAgICAgICAgICAgdmFyICR0aGlzID0gdGhpcztcclxuXHJcbiAgICAgICAgICAgIHRoaXMucGFkZGluZ2RpciA9IFwicGFkZGluZy1cIiArIChVSS5sYW5nZGlyZWN0aW9uID09ICdsZWZ0JyA/IFwicmlnaHRcIjpcImxlZnRcIik7XHJcbiAgICAgICAgICAgIHRoaXMuZGlhbG9nICAgICA9IHRoaXMuZmluZChcIi51ay1tb2RhbC1kaWFsb2dcIik7XHJcblxyXG4gICAgICAgICAgICB0aGlzLmFjdGl2ZSAgICAgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgIC8vIFVwZGF0ZSBBUklBXHJcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudC5hdHRyKCdhcmlhLWhpZGRlbicsIHRoaXMuZWxlbWVudC5oYXNDbGFzcyhcInVrLW9wZW5cIikpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5vbihcImNsaWNrXCIsIFwiLnVrLW1vZGFsLWNsb3NlXCIsIGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgICR0aGlzLmhpZGUoKTtcclxuICAgICAgICAgICAgfSkub24oXCJjbGlja1wiLCBmdW5jdGlvbihlKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIHRhcmdldCA9IFVJLiQoZS50YXJnZXQpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICh0YXJnZXRbMF0gPT0gJHRoaXMuZWxlbWVudFswXSAmJiAkdGhpcy5vcHRpb25zLmJnY2xvc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAkdGhpcy5oaWRlKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIHRvZ2dsZTogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzW3RoaXMuaXNBY3RpdmUoKSA/IFwiaGlkZVwiIDogXCJzaG93XCJdKCk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgc2hvdzogZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgICAgICBpZiAoIXRoaXMuZWxlbWVudC5sZW5ndGgpIHJldHVybjtcclxuXHJcbiAgICAgICAgICAgIHZhciAkdGhpcyA9IHRoaXM7XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5pc0FjdGl2ZSgpKSByZXR1cm47XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLm1vZGFsICYmIGFjdGl2ZSkge1xyXG4gICAgICAgICAgICAgICAgYWN0aXZlLmhpZGUodHJ1ZSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudC5yZW1vdmVDbGFzcyhcInVrLW9wZW5cIikuc2hvdygpO1xyXG4gICAgICAgICAgICB0aGlzLnJlc2l6ZSgpO1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5tb2RhbCkge1xyXG4gICAgICAgICAgICAgICAgYWN0aXZlID0gdGhpcztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5hY3RpdmUgPSB0cnVlO1xyXG5cclxuICAgICAgICAgICAgYWN0aXZlQ291bnQrKztcclxuXHJcbiAgICAgICAgICAgIGlmIChVSS5zdXBwb3J0LnRyYW5zaXRpb24pIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuaGFzVHJhbnNpdGlvbmVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmVsZW1lbnQub25lKFVJLnN1cHBvcnQudHJhbnNpdGlvbi5lbmQsIGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgICAgICAgICAgJHRoaXMuaGFzVHJhbnNpdGlvbmVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH0pLmFkZENsYXNzKFwidWstb3BlblwiKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZWxlbWVudC5hZGRDbGFzcyhcInVrLW9wZW5cIik7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICRodG1sLmFkZENsYXNzKFwidWstbW9kYWwtcGFnZVwiKS5oZWlnaHQoKTsgLy8gZm9yY2UgYnJvd3NlciBlbmdpbmUgcmVkcmF3XHJcblxyXG4gICAgICAgICAgICAvLyBVcGRhdGUgQVJJQVxyXG4gICAgICAgICAgICB0aGlzLmVsZW1lbnQuYXR0cignYXJpYS1oaWRkZW4nLCAnZmFsc2UnKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudC50cmlnZ2VyKFwic2hvdy51ay5tb2RhbFwiKTtcclxuXHJcbiAgICAgICAgICAgIFVJLlV0aWxzLmNoZWNrRGlzcGxheSh0aGlzLmRpYWxvZywgdHJ1ZSk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBoaWRlOiBmdW5jdGlvbihmb3JjZSkge1xyXG5cclxuICAgICAgICAgICAgaWYgKCFmb3JjZSAmJiBVSS5zdXBwb3J0LnRyYW5zaXRpb24gJiYgdGhpcy5oYXNUcmFuc2l0aW9uZWQpIHtcclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgJHRoaXMgPSB0aGlzO1xyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMub25lKFVJLnN1cHBvcnQudHJhbnNpdGlvbi5lbmQsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICR0aGlzLl9oaWRlKCk7XHJcbiAgICAgICAgICAgICAgICB9KS5yZW1vdmVDbGFzcyhcInVrLW9wZW5cIik7XHJcblxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMuX2hpZGUoKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgcmVzaXplOiBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgICAgIHZhciBib2R5d2lkdGggID0gYm9keS53aWR0aCgpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5zY3JvbGxiYXJ3aWR0aCA9IHdpbmRvdy5pbm5lcldpZHRoIC0gYm9keXdpZHRoO1xyXG5cclxuICAgICAgICAgICAgYm9keS5jc3ModGhpcy5wYWRkaW5nZGlyLCB0aGlzLnNjcm9sbGJhcndpZHRoKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudC5jc3MoJ292ZXJmbG93LXknLCB0aGlzLnNjcm9sbGJhcndpZHRoID8gJ3Njcm9sbCcgOiAnYXV0bycpO1xyXG5cclxuICAgICAgICAgICAgaWYgKCF0aGlzLnVwZGF0ZVNjcm9sbGFibGUoKSAmJiB0aGlzLm9wdGlvbnMuY2VudGVyKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIGRoICA9IHRoaXMuZGlhbG9nLm91dGVySGVpZ2h0KCksXHJcbiAgICAgICAgICAgICAgICBwYWQgPSBwYXJzZUludCh0aGlzLmRpYWxvZy5jc3MoJ21hcmdpbi10b3AnKSwgMTApICsgcGFyc2VJbnQodGhpcy5kaWFsb2cuY3NzKCdtYXJnaW4tYm90dG9tJyksIDEwKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoKGRoICsgcGFkKSA8IHdpbmRvdy5pbm5lckhlaWdodCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGlhbG9nLmNzcyh7J3RvcCc6ICh3aW5kb3cuaW5uZXJIZWlnaHQvMiAtIGRoLzIpIC0gcGFkIH0pO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRpYWxvZy5jc3Moeyd0b3AnOiAnJ30pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgdXBkYXRlU2Nyb2xsYWJsZTogZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgICAgICAvLyBoYXMgc2Nyb2xsYWJsZT9cclxuICAgICAgICAgICAgdmFyIHNjcm9sbGFibGUgPSB0aGlzLmRpYWxvZy5maW5kKCcudWstb3ZlcmZsb3ctY29udGFpbmVyOnZpc2libGU6Zmlyc3QnKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChzY3JvbGxhYmxlLmxlbmd0aCkge1xyXG5cclxuICAgICAgICAgICAgICAgIHNjcm9sbGFibGUuY3NzKCdoZWlnaHQnLCAwKTtcclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgb2Zmc2V0ID0gTWF0aC5hYnMocGFyc2VJbnQodGhpcy5kaWFsb2cuY3NzKCdtYXJnaW4tdG9wJyksIDEwKSksXHJcbiAgICAgICAgICAgICAgICBkaCAgICAgPSB0aGlzLmRpYWxvZy5vdXRlckhlaWdodCgpLFxyXG4gICAgICAgICAgICAgICAgd2ggICAgID0gd2luZG93LmlubmVySGVpZ2h0LFxyXG4gICAgICAgICAgICAgICAgaCAgICAgID0gd2ggLSAyKihvZmZzZXQgPCAyMCA/IDIwOm9mZnNldCkgLSBkaDtcclxuXHJcbiAgICAgICAgICAgICAgICBzY3JvbGxhYmxlLmNzcyh7XHJcbiAgICAgICAgICAgICAgICAgICAgJ21heC1oZWlnaHQnOiAoaCA8IHRoaXMub3B0aW9ucy5taW5TY3JvbGxIZWlnaHQgPyAnJzpoKSxcclxuICAgICAgICAgICAgICAgICAgICAnaGVpZ2h0JzonJ1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfaGlkZTogZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgICAgICB0aGlzLmFjdGl2ZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICBpZiAoYWN0aXZlQ291bnQgPiAwKSBhY3RpdmVDb3VudC0tO1xyXG4gICAgICAgICAgICBlbHNlIGFjdGl2ZUNvdW50ID0gMDtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudC5oaWRlKCkucmVtb3ZlQ2xhc3MoJ3VrLW9wZW4nKTtcclxuXHJcbiAgICAgICAgICAgIC8vIFVwZGF0ZSBBUklBXHJcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudC5hdHRyKCdhcmlhLWhpZGRlbicsICd0cnVlJyk7XHJcblxyXG4gICAgICAgICAgICBpZiAoIWFjdGl2ZUNvdW50KSB7XHJcbiAgICAgICAgICAgICAgICAkaHRtbC5yZW1vdmVDbGFzcygndWstbW9kYWwtcGFnZScpO1xyXG4gICAgICAgICAgICAgICAgYm9keS5jc3ModGhpcy5wYWRkaW5nZGlyLCBcIlwiKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYoYWN0aXZlPT09dGhpcykgYWN0aXZlID0gZmFsc2U7XHJcblxyXG4gICAgICAgICAgICB0aGlzLnRyaWdnZXIoJ2hpZGUudWsubW9kYWwnKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBpc0FjdGl2ZTogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmFjdGl2ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgfSk7XHJcblxyXG4gICAgVUkuY29tcG9uZW50KCdtb2RhbFRyaWdnZXInLCB7XHJcblxyXG4gICAgICAgIGJvb3Q6IGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICAgICAgLy8gaW5pdCBjb2RlXHJcbiAgICAgICAgICAgIFVJLiRodG1sLm9uKFwiY2xpY2subW9kYWwudWlraXRcIiwgXCJbZGF0YS11ay1tb2RhbF1cIiwgZnVuY3Rpb24oZSkge1xyXG5cclxuICAgICAgICAgICAgICAgIHZhciBlbGUgPSBVSS4kKHRoaXMpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChlbGUuaXMoXCJhXCIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmICghZWxlLmRhdGEoXCJtb2RhbFRyaWdnZXJcIikpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgbW9kYWwgPSBVSS5tb2RhbFRyaWdnZXIoZWxlLCBVSS5VdGlscy5vcHRpb25zKGVsZS5hdHRyKFwiZGF0YS11ay1tb2RhbFwiKSkpO1xyXG4gICAgICAgICAgICAgICAgICAgIG1vZGFsLnNob3coKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgLy8gY2xvc2UgbW9kYWwgb24gZXNjIGJ1dHRvblxyXG4gICAgICAgICAgICBVSS4kaHRtbC5vbigna2V5ZG93bi5tb2RhbC51aWtpdCcsIGZ1bmN0aW9uIChlKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGFjdGl2ZSAmJiBlLmtleUNvZGUgPT09IDI3ICYmIGFjdGl2ZS5vcHRpb25zLmtleWJvYXJkKSB7IC8vIEVTQ1xyXG4gICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgICAgICBhY3RpdmUuaGlkZSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIFVJLiR3aW4ub24oXCJyZXNpemUgb3JpZW50YXRpb25jaGFuZ2VcIiwgVUkuVXRpbHMuZGVib3VuY2UoZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgICAgIGlmIChhY3RpdmUpIGFjdGl2ZS5yZXNpemUoKTtcclxuICAgICAgICAgICAgfSwgMTUwKSk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgaW5pdDogZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgICAgICB2YXIgJHRoaXMgPSB0aGlzO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5vcHRpb25zID0gVUkuJC5leHRlbmQoe1xyXG4gICAgICAgICAgICAgICAgXCJ0YXJnZXRcIjogJHRoaXMuZWxlbWVudC5pcyhcImFcIikgPyAkdGhpcy5lbGVtZW50LmF0dHIoXCJocmVmXCIpIDogZmFsc2VcclxuICAgICAgICAgICAgfSwgdGhpcy5vcHRpb25zKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMubW9kYWwgPSBVSS5tb2RhbCh0aGlzLm9wdGlvbnMudGFyZ2V0LCB0aGlzLm9wdGlvbnMpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5vbihcImNsaWNrXCIsIGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgICR0aGlzLnNob3coKTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAvL21ldGhvZHNcclxuICAgICAgICAgICAgdGhpcy5wcm94eSh0aGlzLm1vZGFsLCBcInNob3cgaGlkZSBpc0FjdGl2ZVwiKTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICBVSS5tb2RhbC5kaWFsb2cgPSBmdW5jdGlvbihjb250ZW50LCBvcHRpb25zKSB7XHJcblxyXG4gICAgICAgIHZhciBtb2RhbCA9IFVJLm1vZGFsKFVJLiQoVUkubW9kYWwuZGlhbG9nLnRlbXBsYXRlKS5hcHBlbmRUbyhcImJvZHlcIiksIG9wdGlvbnMpO1xyXG5cclxuICAgICAgICBtb2RhbC5vbihcImhpZGUudWsubW9kYWxcIiwgZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgaWYgKG1vZGFsLnBlcnNpc3QpIHtcclxuICAgICAgICAgICAgICAgIG1vZGFsLnBlcnNpc3QuYXBwZW5kVG8obW9kYWwucGVyc2lzdC5kYXRhKFwibW9kYWxQZXJzaXN0UGFyZW50XCIpKTtcclxuICAgICAgICAgICAgICAgIG1vZGFsLnBlcnNpc3QgPSBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBtb2RhbC5lbGVtZW50LnJlbW92ZSgpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBzZXRDb250ZW50KGNvbnRlbnQsIG1vZGFsKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIG1vZGFsO1xyXG4gICAgfTtcclxuXHJcbiAgICBVSS5tb2RhbC5kaWFsb2cudGVtcGxhdGUgPSAnPGRpdiBjbGFzcz1cInVrLW1vZGFsXCI+PGRpdiBjbGFzcz1cInVrLW1vZGFsLWRpYWxvZ1wiIHN0eWxlPVwibWluLWhlaWdodDowO1wiPjwvZGl2PjwvZGl2Pic7XHJcblxyXG4gICAgVUkubW9kYWwuYWxlcnQgPSBmdW5jdGlvbihjb250ZW50LCBvcHRpb25zKSB7XHJcblxyXG4gICAgICAgIG9wdGlvbnMgPSBVSS4kLmV4dGVuZCh0cnVlLCB7YmdjbG9zZTpmYWxzZSwga2V5Ym9hcmQ6ZmFsc2UsIG1vZGFsOmZhbHNlLCBsYWJlbHM6VUkubW9kYWwubGFiZWxzfSwgb3B0aW9ucyk7XHJcblxyXG4gICAgICAgIHZhciBtb2RhbCA9IFVJLm1vZGFsLmRpYWxvZygoW1xyXG4gICAgICAgICAgICAnPGRpdiBjbGFzcz1cInVrLW1hcmdpbiB1ay1tb2RhbC1jb250ZW50XCI+JytTdHJpbmcoY29udGVudCkrJzwvZGl2PicsXHJcbiAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwidWstbW9kYWwtZm9vdGVyIHVrLXRleHQtcmlnaHRcIj48YnV0dG9uIGNsYXNzPVwidWstYnV0dG9uIHVrLWJ1dHRvbi1wcmltYXJ5IHVrLW1vZGFsLWNsb3NlXCI+JytvcHRpb25zLmxhYmVscy5PaysnPC9idXR0b24+PC9kaXY+J1xyXG4gICAgICAgIF0pLmpvaW4oXCJcIiksIG9wdGlvbnMpO1xyXG5cclxuICAgICAgICBtb2RhbC5vbignc2hvdy51ay5tb2RhbCcsIGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgICAgIG1vZGFsLmVsZW1lbnQuZmluZCgnYnV0dG9uOmZpcnN0JykuZm9jdXMoKTtcclxuICAgICAgICAgICAgfSwgNTApO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICByZXR1cm4gbW9kYWwuc2hvdygpO1xyXG4gICAgfTtcclxuXHJcbiAgICBVSS5tb2RhbC5jb25maXJtID0gZnVuY3Rpb24oY29udGVudCwgb25jb25maXJtLCBvcHRpb25zKSB7XHJcblxyXG4gICAgICAgIG9uY29uZmlybSA9IFVJLiQuaXNGdW5jdGlvbihvbmNvbmZpcm0pID8gb25jb25maXJtIDogZnVuY3Rpb24oKXt9O1xyXG4gICAgICAgIG9wdGlvbnMgICA9IFVJLiQuZXh0ZW5kKHRydWUsIHtiZ2Nsb3NlOmZhbHNlLCBrZXlib2FyZDpmYWxzZSwgbW9kYWw6ZmFsc2UsIGxhYmVsczpVSS5tb2RhbC5sYWJlbHN9LCBvcHRpb25zKTtcclxuXHJcbiAgICAgICAgdmFyIG1vZGFsID0gVUkubW9kYWwuZGlhbG9nKChbXHJcbiAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwidWstbWFyZ2luIHVrLW1vZGFsLWNvbnRlbnRcIj4nK1N0cmluZyhjb250ZW50KSsnPC9kaXY+JyxcclxuICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJ1ay1tb2RhbC1mb290ZXIgdWstdGV4dC1yaWdodFwiPjxidXR0b24gY2xhc3M9XCJ1ay1idXR0b24gdWstbW9kYWwtY2xvc2VcIj4nK29wdGlvbnMubGFiZWxzLkNhbmNlbCsnPC9idXR0b24+IDxidXR0b24gY2xhc3M9XCJ1ay1idXR0b24gdWstYnV0dG9uLXByaW1hcnkganMtbW9kYWwtY29uZmlybVwiPicrb3B0aW9ucy5sYWJlbHMuT2srJzwvYnV0dG9uPjwvZGl2PidcclxuICAgICAgICBdKS5qb2luKFwiXCIpLCBvcHRpb25zKTtcclxuXHJcbiAgICAgICAgbW9kYWwuZWxlbWVudC5maW5kKFwiLmpzLW1vZGFsLWNvbmZpcm1cIikub24oXCJjbGlja1wiLCBmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICBvbmNvbmZpcm0oKTtcclxuICAgICAgICAgICAgbW9kYWwuaGlkZSgpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBtb2RhbC5vbignc2hvdy51ay5tb2RhbCcsIGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgICAgIG1vZGFsLmVsZW1lbnQuZmluZCgnLmpzLW1vZGFsLWNvbmZpcm0nKS5mb2N1cygpO1xyXG4gICAgICAgICAgICB9LCA1MCk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHJldHVybiBtb2RhbC5zaG93KCk7XHJcbiAgICB9O1xyXG5cclxuICAgIFVJLm1vZGFsLnByb21wdCA9IGZ1bmN0aW9uKHRleHQsIHZhbHVlLCBvbnN1Ym1pdCwgb3B0aW9ucykge1xyXG5cclxuICAgICAgICBvbnN1Ym1pdCA9IFVJLiQuaXNGdW5jdGlvbihvbnN1Ym1pdCkgPyBvbnN1Ym1pdCA6IGZ1bmN0aW9uKHZhbHVlKXt9O1xyXG4gICAgICAgIG9wdGlvbnMgID0gVUkuJC5leHRlbmQodHJ1ZSwge2JnY2xvc2U6ZmFsc2UsIGtleWJvYXJkOmZhbHNlLCBtb2RhbDpmYWxzZSwgbGFiZWxzOlVJLm1vZGFsLmxhYmVsc30sIG9wdGlvbnMpO1xyXG5cclxuICAgICAgICB2YXIgbW9kYWwgPSBVSS5tb2RhbC5kaWFsb2coKFtcclxuICAgICAgICAgICAgdGV4dCA/ICc8ZGl2IGNsYXNzPVwidWstbW9kYWwtY29udGVudCB1ay1mb3JtXCI+JytTdHJpbmcodGV4dCkrJzwvZGl2Pic6JycsXHJcbiAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwidWstbWFyZ2luLXNtYWxsLXRvcCB1ay1tb2RhbC1jb250ZW50IHVrLWZvcm1cIj48cD48aW5wdXQgdHlwZT1cInRleHRcIiBjbGFzcz1cInVrLXdpZHRoLTEtMVwiPjwvcD48L2Rpdj4nLFxyXG4gICAgICAgICAgICAnPGRpdiBjbGFzcz1cInVrLW1vZGFsLWZvb3RlciB1ay10ZXh0LXJpZ2h0XCI+PGJ1dHRvbiBjbGFzcz1cInVrLWJ1dHRvbiB1ay1tb2RhbC1jbG9zZVwiPicrb3B0aW9ucy5sYWJlbHMuQ2FuY2VsKyc8L2J1dHRvbj4gPGJ1dHRvbiBjbGFzcz1cInVrLWJ1dHRvbiB1ay1idXR0b24tcHJpbWFyeSBqcy1tb2RhbC1va1wiPicrb3B0aW9ucy5sYWJlbHMuT2srJzwvYnV0dG9uPjwvZGl2PidcclxuICAgICAgICBdKS5qb2luKFwiXCIpLCBvcHRpb25zKSxcclxuXHJcbiAgICAgICAgaW5wdXQgPSBtb2RhbC5lbGVtZW50LmZpbmQoXCJpbnB1dFt0eXBlPSd0ZXh0J11cIikudmFsKHZhbHVlIHx8ICcnKS5vbigna2V5dXAnLCBmdW5jdGlvbihlKXtcclxuICAgICAgICAgICAgaWYgKGUua2V5Q29kZSA9PSAxMykge1xyXG4gICAgICAgICAgICAgICAgbW9kYWwuZWxlbWVudC5maW5kKFwiLmpzLW1vZGFsLW9rXCIpLnRyaWdnZXIoJ2NsaWNrJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgbW9kYWwuZWxlbWVudC5maW5kKFwiLmpzLW1vZGFsLW9rXCIpLm9uKFwiY2xpY2tcIiwgZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgaWYgKG9uc3VibWl0KGlucHV0LnZhbCgpKSE9PWZhbHNlKXtcclxuICAgICAgICAgICAgICAgIG1vZGFsLmhpZGUoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBtb2RhbC5vbignc2hvdy51ay5tb2RhbCcsIGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgICAgIGlucHV0LmZvY3VzKCk7XHJcbiAgICAgICAgICAgIH0sIDUwKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIG1vZGFsLnNob3coKTtcclxuICAgIH07XHJcblxyXG4gICAgVUkubW9kYWwuYmxvY2tVSSA9IGZ1bmN0aW9uKGNvbnRlbnQsIG9wdGlvbnMpIHtcclxuXHJcbiAgICAgICAgdmFyIG1vZGFsID0gVUkubW9kYWwuZGlhbG9nKChbXHJcbiAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwidWstbWFyZ2luIHVrLW1vZGFsLWNvbnRlbnRcIj4nK1N0cmluZyhjb250ZW50IHx8ICc8ZGl2IGNsYXNzPVwidWstdGV4dC1jZW50ZXJcIj4uLi48L2Rpdj4nKSsnPC9kaXY+J1xyXG4gICAgICAgIF0pLmpvaW4oXCJcIiksIFVJLiQuZXh0ZW5kKHtiZ2Nsb3NlOmZhbHNlLCBrZXlib2FyZDpmYWxzZSwgbW9kYWw6ZmFsc2V9LCBvcHRpb25zKSk7XHJcblxyXG4gICAgICAgIG1vZGFsLmNvbnRlbnQgPSBtb2RhbC5lbGVtZW50LmZpbmQoJy51ay1tb2RhbC1jb250ZW50OmZpcnN0Jyk7XHJcblxyXG4gICAgICAgIHJldHVybiBtb2RhbC5zaG93KCk7XHJcbiAgICB9O1xyXG5cclxuXHJcbiAgICBVSS5tb2RhbC5sYWJlbHMgPSB7XHJcbiAgICAgICAgJ09rJzogJ09rJyxcclxuICAgICAgICAnQ2FuY2VsJzogJ0NhbmNlbCdcclxuICAgIH07XHJcblxyXG5cclxuICAgIC8vIGhlbHBlciBmdW5jdGlvbnNcclxuICAgIGZ1bmN0aW9uIHNldENvbnRlbnQoY29udGVudCwgbW9kYWwpe1xyXG5cclxuICAgICAgICBpZighbW9kYWwpIHJldHVybjtcclxuXHJcbiAgICAgICAgaWYgKHR5cGVvZiBjb250ZW50ID09PSAnb2JqZWN0Jykge1xyXG5cclxuICAgICAgICAgICAgLy8gY29udmVydCBET00gb2JqZWN0IHRvIGEgalF1ZXJ5IG9iamVjdFxyXG4gICAgICAgICAgICBjb250ZW50ID0gY29udGVudCBpbnN0YW5jZW9mIGpRdWVyeSA/IGNvbnRlbnQgOiBVSS4kKGNvbnRlbnQpO1xyXG5cclxuICAgICAgICAgICAgaWYoY29udGVudC5wYXJlbnQoKS5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIG1vZGFsLnBlcnNpc3QgPSBjb250ZW50O1xyXG4gICAgICAgICAgICAgICAgbW9kYWwucGVyc2lzdC5kYXRhKFwibW9kYWxQZXJzaXN0UGFyZW50XCIsIGNvbnRlbnQucGFyZW50KCkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfWVsc2UgaWYgKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJyB8fCB0eXBlb2YgY29udGVudCA9PT0gJ251bWJlcicpIHtcclxuICAgICAgICAgICAgICAgIC8vIGp1c3QgaW5zZXJ0IHRoZSBkYXRhIGFzIGlubmVySFRNTFxyXG4gICAgICAgICAgICAgICAgY29udGVudCA9IFVJLiQoJzxkaXY+PC9kaXY+JykuaHRtbChjb250ZW50KTtcclxuICAgICAgICB9ZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvLyB1bnN1cHBvcnRlZCBkYXRhIHR5cGUhXHJcbiAgICAgICAgICAgICAgICBjb250ZW50ID0gVUkuJCgnPGRpdj48L2Rpdj4nKS5odG1sKCdVSWtpdC5tb2RhbCBFcnJvcjogVW5zdXBwb3J0ZWQgZGF0YSB0eXBlOiAnICsgdHlwZW9mIGNvbnRlbnQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29udGVudC5hcHBlbmRUbyhtb2RhbC5lbGVtZW50LmZpbmQoJy51ay1tb2RhbC1kaWFsb2cnKSk7XHJcblxyXG4gICAgICAgIHJldHVybiBtb2RhbDtcclxuICAgIH1cclxuXHJcbn0pKFVJa2l0KTtcclxuXHJcbihmdW5jdGlvbihVSSkge1xyXG5cclxuICAgIFwidXNlIHN0cmljdFwiO1xyXG5cclxuICAgIFVJLmNvbXBvbmVudCgnbmF2Jywge1xyXG5cclxuICAgICAgICBkZWZhdWx0czoge1xyXG4gICAgICAgICAgICBcInRvZ2dsZVwiOiBcIj5saS51ay1wYXJlbnQgPiBhW2hyZWY9JyMnXVwiLFxyXG4gICAgICAgICAgICBcImxpc3RzXCI6IFwiPmxpLnVrLXBhcmVudCA+IHVsXCIsXHJcbiAgICAgICAgICAgIFwibXVsdGlwbGVcIjogZmFsc2VcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBib290OiBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgICAgIC8vIGluaXQgY29kZVxyXG4gICAgICAgICAgICBVSS5yZWFkeShmdW5jdGlvbihjb250ZXh0KSB7XHJcblxyXG4gICAgICAgICAgICAgICAgVUkuJChcIltkYXRhLXVrLW5hdl1cIiwgY29udGV4dCkuZWFjaChmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgbmF2ID0gVUkuJCh0aGlzKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFuYXYuZGF0YShcIm5hdlwiKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgb2JqID0gVUkubmF2KG5hdiwgVUkuVXRpbHMub3B0aW9ucyhuYXYuYXR0cihcImRhdGEtdWstbmF2XCIpKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGluaXQ6IGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICAgICAgdmFyICR0aGlzID0gdGhpcztcclxuXHJcbiAgICAgICAgICAgIHRoaXMub24oXCJjbGljay51aWtpdC5uYXZcIiwgdGhpcy5vcHRpb25zLnRvZ2dsZSwgZnVuY3Rpb24oZSkge1xyXG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgdmFyIGVsZSA9IFVJLiQodGhpcyk7XHJcbiAgICAgICAgICAgICAgICAkdGhpcy5vcGVuKGVsZS5wYXJlbnQoKVswXSA9PSAkdGhpcy5lbGVtZW50WzBdID8gZWxlIDogZWxlLnBhcmVudChcImxpXCIpKTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLmZpbmQodGhpcy5vcHRpb25zLmxpc3RzKS5lYWNoKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgdmFyICRlbGUgICA9IFVJLiQodGhpcyksXHJcbiAgICAgICAgICAgICAgICAgICAgcGFyZW50ID0gJGVsZS5wYXJlbnQoKSxcclxuICAgICAgICAgICAgICAgICAgICBhY3RpdmUgPSBwYXJlbnQuaGFzQ2xhc3MoXCJ1ay1hY3RpdmVcIik7XHJcblxyXG4gICAgICAgICAgICAgICAgJGVsZS53cmFwKCc8ZGl2IHN0eWxlPVwib3ZlcmZsb3c6aGlkZGVuO2hlaWdodDowO3Bvc2l0aW9uOnJlbGF0aXZlO1wiPjwvZGl2PicpO1xyXG4gICAgICAgICAgICAgICAgcGFyZW50LmRhdGEoXCJsaXN0LWNvbnRhaW5lclwiLCAkZWxlLnBhcmVudCgpW2FjdGl2ZSA/ICdyZW1vdmVDbGFzcyc6J2FkZENsYXNzJ10oJ3VrLWhpZGRlbicpKTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBJbml0IEFSSUFcclxuICAgICAgICAgICAgICAgIHBhcmVudC5hdHRyKCdhcmlhLWV4cGFuZGVkJywgcGFyZW50Lmhhc0NsYXNzKFwidWstb3BlblwiKSk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGFjdGl2ZSkgJHRoaXMub3BlbihwYXJlbnQsIHRydWUpO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgb3BlbjogZnVuY3Rpb24obGksIG5vYW5pbWF0aW9uKSB7XHJcblxyXG4gICAgICAgICAgICB2YXIgJHRoaXMgPSB0aGlzLCBlbGVtZW50ID0gdGhpcy5lbGVtZW50LCAkbGkgPSBVSS4kKGxpKSwgJGNvbnRhaW5lciA9ICRsaS5kYXRhKCdsaXN0LWNvbnRhaW5lcicpO1xyXG5cclxuICAgICAgICAgICAgaWYgKCF0aGlzLm9wdGlvbnMubXVsdGlwbGUpIHtcclxuXHJcbiAgICAgICAgICAgICAgICBlbGVtZW50LmNoaWxkcmVuKCcudWstb3BlbicpLm5vdChsaSkuZWFjaChmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGVsZSA9IFVJLiQodGhpcyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChlbGUuZGF0YSgnbGlzdC1jb250YWluZXInKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbGUuZGF0YSgnbGlzdC1jb250YWluZXInKS5zdG9wKCkuYW5pbWF0ZSh7aGVpZ2h0OiAwfSwgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBVSS4kKHRoaXMpLnBhcmVudCgpLnJlbW92ZUNsYXNzKCd1ay1vcGVuJykuZW5kKCkuYWRkQ2xhc3MoJ3VrLWhpZGRlbicpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgJGxpLnRvZ2dsZUNsYXNzKCd1ay1vcGVuJyk7XHJcblxyXG4gICAgICAgICAgICAvLyBVcGRhdGUgQVJJQVxyXG4gICAgICAgICAgICAkbGkuYXR0cignYXJpYS1leHBhbmRlZCcsICRsaS5oYXNDbGFzcygndWstb3BlbicpKTtcclxuXHJcbiAgICAgICAgICAgIGlmICgkY29udGFpbmVyKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKCRsaS5oYXNDbGFzcygndWstb3BlbicpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJGNvbnRhaW5lci5yZW1vdmVDbGFzcygndWstaGlkZGVuJyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKG5vYW5pbWF0aW9uKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICRjb250YWluZXIuc3RvcCgpLmhlaWdodCgkbGkuaGFzQ2xhc3MoJ3VrLW9wZW4nKSA/ICdhdXRvJyA6IDApO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoISRsaS5oYXNDbGFzcygndWstb3BlbicpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRjb250YWluZXIuYWRkQ2xhc3MoJ3VrLWhpZGRlbicpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50cmlnZ2VyKCdkaXNwbGF5LnVrLmNoZWNrJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgJGNvbnRhaW5lci5zdG9wKCkuYW5pbWF0ZSh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogKCRsaS5oYXNDbGFzcygndWstb3BlbicpID8gZ2V0SGVpZ2h0KCRjb250YWluZXIuZmluZCgndWw6Zmlyc3QnKSkgOiAwKVxyXG4gICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEkbGkuaGFzQ2xhc3MoJ3VrLW9wZW4nKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJGNvbnRhaW5lci5hZGRDbGFzcygndWstaGlkZGVuJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkY29udGFpbmVyLmNzcygnaGVpZ2h0JywgJycpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAkdGhpcy50cmlnZ2VyKCdkaXNwbGF5LnVrLmNoZWNrJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuXHJcblxyXG4gICAgLy8gaGVscGVyXHJcblxyXG4gICAgZnVuY3Rpb24gZ2V0SGVpZ2h0KGVsZSkge1xyXG4gICAgICAgIHZhciAkZWxlID0gVUkuJChlbGUpLCBoZWlnaHQgPSBcImF1dG9cIjtcclxuXHJcbiAgICAgICAgaWYgKCRlbGUuaXMoXCI6dmlzaWJsZVwiKSkge1xyXG4gICAgICAgICAgICBoZWlnaHQgPSAkZWxlLm91dGVySGVpZ2h0KCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdmFyIHRtcCA9IHtcclxuICAgICAgICAgICAgICAgIHBvc2l0aW9uOiAkZWxlLmNzcyhcInBvc2l0aW9uXCIpLFxyXG4gICAgICAgICAgICAgICAgdmlzaWJpbGl0eTogJGVsZS5jc3MoXCJ2aXNpYmlsaXR5XCIpLFxyXG4gICAgICAgICAgICAgICAgZGlzcGxheTogJGVsZS5jc3MoXCJkaXNwbGF5XCIpXHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICBoZWlnaHQgPSAkZWxlLmNzcyh7cG9zaXRpb246ICdhYnNvbHV0ZScsIHZpc2liaWxpdHk6ICdoaWRkZW4nLCBkaXNwbGF5OiAnYmxvY2snfSkub3V0ZXJIZWlnaHQoKTtcclxuXHJcbiAgICAgICAgICAgICRlbGUuY3NzKHRtcCk7IC8vIHJlc2V0IGVsZW1lbnRcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBoZWlnaHQ7XHJcbiAgICB9XHJcblxyXG59KShVSWtpdCk7XHJcblxyXG4oZnVuY3Rpb24oVUkpIHtcclxuXHJcbiAgICBcInVzZSBzdHJpY3RcIjtcclxuXHJcbiAgICB2YXIgc2Nyb2xscG9zID0ge3g6IHdpbmRvdy5zY3JvbGxYLCB5OiB3aW5kb3cuc2Nyb2xsWX0sXHJcbiAgICAgICAgJHdpbiAgICAgID0gVUkuJHdpbixcclxuICAgICAgICAkZG9jICAgICAgPSBVSS4kZG9jLFxyXG4gICAgICAgICRodG1sICAgICA9IFVJLiRodG1sLFxyXG4gICAgICAgIE9mZmNhbnZhcyA9IHtcclxuXHJcbiAgICAgICAgc2hvdzogZnVuY3Rpb24oZWxlbWVudCkge1xyXG5cclxuICAgICAgICAgICAgZWxlbWVudCA9IFVJLiQoZWxlbWVudCk7XHJcblxyXG4gICAgICAgICAgICBpZiAoIWVsZW1lbnQubGVuZ3RoKSByZXR1cm47XHJcblxyXG4gICAgICAgICAgICB2YXIgJGJvZHkgICAgID0gVUkuJCgnYm9keScpLFxyXG4gICAgICAgICAgICAgICAgYmFyICAgICAgID0gZWxlbWVudC5maW5kKFwiLnVrLW9mZmNhbnZhcy1iYXI6Zmlyc3RcIiksXHJcbiAgICAgICAgICAgICAgICBydGwgICAgICAgPSAoVUkubGFuZ2RpcmVjdGlvbiA9PSBcInJpZ2h0XCIpLFxyXG4gICAgICAgICAgICAgICAgZmxpcCAgICAgID0gYmFyLmhhc0NsYXNzKFwidWstb2ZmY2FudmFzLWJhci1mbGlwXCIpID8gLTE6MSxcclxuICAgICAgICAgICAgICAgIGRpciAgICAgICA9IGZsaXAgKiAocnRsID8gLTEgOiAxKSxcclxuXHJcbiAgICAgICAgICAgICAgICBzY3JvbGxiYXJ3aWR0aCA9ICB3aW5kb3cuaW5uZXJXaWR0aCAtICRib2R5LndpZHRoKCk7XHJcblxyXG4gICAgICAgICAgICBzY3JvbGxwb3MgPSB7eDogd2luZG93LnBhZ2VYT2Zmc2V0LCB5OiB3aW5kb3cucGFnZVlPZmZzZXR9O1xyXG5cclxuICAgICAgICAgICAgZWxlbWVudC5hZGRDbGFzcyhcInVrLWFjdGl2ZVwiKTtcclxuXHJcbiAgICAgICAgICAgICRib2R5LmNzcyh7XCJ3aWR0aFwiOiB3aW5kb3cuaW5uZXJXaWR0aCAtIHNjcm9sbGJhcndpZHRoLCBcImhlaWdodFwiOiB3aW5kb3cuaW5uZXJIZWlnaHR9KS5hZGRDbGFzcyhcInVrLW9mZmNhbnZhcy1wYWdlXCIpO1xyXG4gICAgICAgICAgICAkYm9keS5jc3MoKHJ0bCA/IFwibWFyZ2luLXJpZ2h0XCIgOiBcIm1hcmdpbi1sZWZ0XCIpLCAocnRsID8gLTEgOiAxKSAqIChiYXIub3V0ZXJXaWR0aCgpICogZGlyKSkud2lkdGgoKTsgLy8gLndpZHRoKCkgLSBmb3JjZSByZWRyYXdcclxuXHJcbiAgICAgICAgICAgICRodG1sLmNzcygnbWFyZ2luLXRvcCcsIHNjcm9sbHBvcy55ICogLTEpO1xyXG5cclxuICAgICAgICAgICAgYmFyLmFkZENsYXNzKFwidWstb2ZmY2FudmFzLWJhci1zaG93XCIpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5faW5pdEVsZW1lbnQoZWxlbWVudCk7XHJcblxyXG4gICAgICAgICAgICBiYXIudHJpZ2dlcignc2hvdy51ay5vZmZjYW52YXMnLCBbZWxlbWVudCwgYmFyXSk7XHJcblxyXG4gICAgICAgICAgICAvLyBVcGRhdGUgQVJJQVxyXG4gICAgICAgICAgICBlbGVtZW50LmF0dHIoJ2FyaWEtaGlkZGVuJywgJ2ZhbHNlJyk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgaGlkZTogZnVuY3Rpb24oZm9yY2UpIHtcclxuXHJcbiAgICAgICAgICAgIHZhciAkYm9keSA9IFVJLiQoJ2JvZHknKSxcclxuICAgICAgICAgICAgICAgIHBhbmVsID0gVUkuJChcIi51ay1vZmZjYW52YXMudWstYWN0aXZlXCIpLFxyXG4gICAgICAgICAgICAgICAgcnRsICAgPSAoVUkubGFuZ2RpcmVjdGlvbiA9PSBcInJpZ2h0XCIpLFxyXG4gICAgICAgICAgICAgICAgYmFyICAgPSBwYW5lbC5maW5kKFwiLnVrLW9mZmNhbnZhcy1iYXI6Zmlyc3RcIiksXHJcbiAgICAgICAgICAgICAgICBmaW5hbGl6ZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICRib2R5LnJlbW92ZUNsYXNzKFwidWstb2ZmY2FudmFzLXBhZ2VcIikuY3NzKHtcIndpZHRoXCI6IFwiXCIsIFwiaGVpZ2h0XCI6IFwiXCIsIFwibWFyZ2luLWxlZnRcIjogXCJcIiwgXCJtYXJnaW4tcmlnaHRcIjogXCJcIn0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHBhbmVsLnJlbW92ZUNsYXNzKFwidWstYWN0aXZlXCIpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBiYXIucmVtb3ZlQ2xhc3MoXCJ1ay1vZmZjYW52YXMtYmFyLXNob3dcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgJGh0bWwuY3NzKCdtYXJnaW4tdG9wJywgJycpO1xyXG4gICAgICAgICAgICAgICAgICAgIHdpbmRvdy5zY3JvbGxUbyhzY3JvbGxwb3MueCwgc2Nyb2xscG9zLnkpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJhci50cmlnZ2VyKCdoaWRlLnVrLm9mZmNhbnZhcycsIFtwYW5lbCwgYmFyXSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIFVwZGF0ZSBBUklBXHJcbiAgICAgICAgICAgICAgICAgICAgcGFuZWwuYXR0cignYXJpYS1oaWRkZW4nLCAndHJ1ZScpO1xyXG4gICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIGlmICghcGFuZWwubGVuZ3RoKSByZXR1cm47XHJcblxyXG4gICAgICAgICAgICBpZiAoVUkuc3VwcG9ydC50cmFuc2l0aW9uICYmICFmb3JjZSkge1xyXG5cclxuICAgICAgICAgICAgICAgICRib2R5Lm9uZShVSS5zdXBwb3J0LnRyYW5zaXRpb24uZW5kLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICBmaW5hbGl6ZSgpO1xyXG4gICAgICAgICAgICAgICAgfSkuY3NzKChydGwgPyBcIm1hcmdpbi1yaWdodFwiIDogXCJtYXJnaW4tbGVmdFwiKSwgXCJcIik7XHJcblxyXG4gICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICAgICAgICAgIGJhci5yZW1vdmVDbGFzcyhcInVrLW9mZmNhbnZhcy1iYXItc2hvd1wiKTtcclxuICAgICAgICAgICAgICAgIH0sIDApO1xyXG5cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGZpbmFsaXplKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfaW5pdEVsZW1lbnQ6IGZ1bmN0aW9uKGVsZW1lbnQpIHtcclxuXHJcbiAgICAgICAgICAgIGlmIChlbGVtZW50LmRhdGEoXCJPZmZjYW52YXNJbml0XCIpKSByZXR1cm47XHJcblxyXG4gICAgICAgICAgICBlbGVtZW50Lm9uKFwiY2xpY2sudWsub2ZmY2FudmFzIHN3aXBlUmlnaHQudWsub2ZmY2FudmFzIHN3aXBlTGVmdC51ay5vZmZjYW52YXNcIiwgZnVuY3Rpb24oZSkge1xyXG5cclxuICAgICAgICAgICAgICAgIHZhciB0YXJnZXQgPSBVSS4kKGUudGFyZ2V0KTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoIWUudHlwZS5tYXRjaCgvc3dpcGUvKSkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXRhcmdldC5oYXNDbGFzcyhcInVrLW9mZmNhbnZhcy1jbG9zZVwiKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGFyZ2V0Lmhhc0NsYXNzKFwidWstb2ZmY2FudmFzLWJhclwiKSkgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGFyZ2V0LnBhcmVudHMoXCIudWstb2ZmY2FudmFzLWJhcjpmaXJzdFwiKS5sZW5ndGgpIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcclxuICAgICAgICAgICAgICAgIE9mZmNhbnZhcy5oaWRlKCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgZWxlbWVudC5vbihcImNsaWNrXCIsIFwiYVtocmVmXj0nIyddXCIsIGZ1bmN0aW9uKGUpe1xyXG5cclxuICAgICAgICAgICAgICAgIHZhciBsaW5rID0gVUkuJCh0aGlzKSxcclxuICAgICAgICAgICAgICAgICAgICBocmVmID0gbGluay5hdHRyKFwiaHJlZlwiKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoaHJlZiA9PSBcIiNcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBVSS4kZG9jLm9uZSgnaGlkZS51ay5vZmZjYW52YXMnLCBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRhcmdldDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0ID0gVUkuJChocmVmKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0ID0gXCJcIjtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghdGFyZ2V0Lmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXQgPSBVSS4kKCdbbmFtZT1cIicraHJlZi5yZXBsYWNlKCcjJywnJykrJ1wiXScpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhcmdldC5sZW5ndGggJiYgbGluay5hdHRyKCdkYXRhLXVrLXNtb290aC1zY3JvbGwnKSAmJiBVSS5VdGlscy5zY3JvbGxUb0VsZW1lbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgVUkuVXRpbHMuc2Nyb2xsVG9FbGVtZW50KHRhcmdldCwgVUkuVXRpbHMub3B0aW9ucyhsaW5rLmF0dHIoJ2RhdGEtdWstc21vb3RoLXNjcm9sbCcpIHx8ICd7fScpKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IGhyZWY7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgT2ZmY2FudmFzLmhpZGUoKTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICBlbGVtZW50LmRhdGEoXCJPZmZjYW52YXNJbml0XCIsIHRydWUpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgVUkuY29tcG9uZW50KCdvZmZjYW52YXNUcmlnZ2VyJywge1xyXG5cclxuICAgICAgICBib290OiBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgICAgIC8vIGluaXQgY29kZVxyXG4gICAgICAgICAgICAkaHRtbC5vbihcImNsaWNrLm9mZmNhbnZhcy51aWtpdFwiLCBcIltkYXRhLXVrLW9mZmNhbnZhc11cIiwgZnVuY3Rpb24oZSkge1xyXG5cclxuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgZWxlID0gVUkuJCh0aGlzKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoIWVsZS5kYXRhKFwib2ZmY2FudmFzVHJpZ2dlclwiKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBvYmogPSBVSS5vZmZjYW52YXNUcmlnZ2VyKGVsZSwgVUkuVXRpbHMub3B0aW9ucyhlbGUuYXR0cihcImRhdGEtdWstb2ZmY2FudmFzXCIpKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgZWxlLnRyaWdnZXIoXCJjbGlja1wiKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAkaHRtbC5vbigna2V5ZG93bi51ay5vZmZjYW52YXMnLCBmdW5jdGlvbihlKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGUua2V5Q29kZSA9PT0gMjcpIHsgLy8gRVNDXHJcbiAgICAgICAgICAgICAgICAgICAgT2ZmY2FudmFzLmhpZGUoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgaW5pdDogZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgICAgICB2YXIgJHRoaXMgPSB0aGlzO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5vcHRpb25zID0gVUkuJC5leHRlbmQoe1xyXG4gICAgICAgICAgICAgICAgXCJ0YXJnZXRcIjogJHRoaXMuZWxlbWVudC5pcyhcImFcIikgPyAkdGhpcy5lbGVtZW50LmF0dHIoXCJocmVmXCIpIDogZmFsc2VcclxuICAgICAgICAgICAgfSwgdGhpcy5vcHRpb25zKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMub24oXCJjbGlja1wiLCBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICBPZmZjYW52YXMuc2hvdygkdGhpcy5vcHRpb25zLnRhcmdldCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIFVJLm9mZmNhbnZhcyA9IE9mZmNhbnZhcztcclxuXHJcbn0pKFVJa2l0KTtcclxuXHJcbihmdW5jdGlvbihVSSkge1xyXG5cclxuICAgIFwidXNlIHN0cmljdFwiO1xyXG5cclxuICAgIHZhciBBbmltYXRpb25zO1xyXG5cclxuICAgIFVJLmNvbXBvbmVudCgnc3dpdGNoZXInLCB7XHJcblxyXG4gICAgICAgIGRlZmF1bHRzOiB7XHJcbiAgICAgICAgICAgIGNvbm5lY3QgICA6IGZhbHNlLFxyXG4gICAgICAgICAgICB0b2dnbGUgICAgOiBcIj4qXCIsXHJcbiAgICAgICAgICAgIGFjdGl2ZSAgICA6IDAsXHJcbiAgICAgICAgICAgIGFuaW1hdGlvbiA6IGZhbHNlLFxyXG4gICAgICAgICAgICBkdXJhdGlvbiAgOiAyMDAsXHJcbiAgICAgICAgICAgIHN3aXBpbmcgICA6IHRydWVcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBhbmltYXRpbmc6IGZhbHNlLFxyXG5cclxuICAgICAgICBib290OiBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgICAgIC8vIGluaXQgY29kZVxyXG4gICAgICAgICAgICBVSS5yZWFkeShmdW5jdGlvbihjb250ZXh0KSB7XHJcblxyXG4gICAgICAgICAgICAgICAgVUkuJChcIltkYXRhLXVrLXN3aXRjaGVyXVwiLCBjb250ZXh0KS5lYWNoKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBzd2l0Y2hlciA9IFVJLiQodGhpcyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghc3dpdGNoZXIuZGF0YShcInN3aXRjaGVyXCIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBvYmogPSBVSS5zd2l0Y2hlcihzd2l0Y2hlciwgVUkuVXRpbHMub3B0aW9ucyhzd2l0Y2hlci5hdHRyKFwiZGF0YS11ay1zd2l0Y2hlclwiKSkpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBpbml0OiBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgICAgIHZhciAkdGhpcyA9IHRoaXM7XHJcblxyXG4gICAgICAgICAgICB0aGlzLm9uKFwiY2xpY2sudWlraXQuc3dpdGNoZXJcIiwgdGhpcy5vcHRpb25zLnRvZ2dsZSwgZnVuY3Rpb24oZSkge1xyXG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgJHRoaXMuc2hvdyh0aGlzKTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLmNvbm5lY3QpIHtcclxuXHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbm5lY3QgPSBVSS4kKHRoaXMub3B0aW9ucy5jb25uZWN0KTtcclxuXHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbm5lY3QuZmluZChcIi51ay1hY3RpdmVcIikucmVtb3ZlQ2xhc3MoXCIudWstYWN0aXZlXCIpO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIGRlbGVnYXRlIHN3aXRjaCBjb21tYW5kcyB3aXRoaW4gY29udGFpbmVyIGNvbnRlbnRcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmNvbm5lY3QubGVuZ3RoKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIEluaXQgQVJJQSBmb3IgY29ubmVjdFxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY29ubmVjdC5jaGlsZHJlbigpLmF0dHIoJ2FyaWEtaGlkZGVuJywgJ3RydWUnKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb25uZWN0Lm9uKFwiY2xpY2tcIiwgJ1tkYXRhLXVrLXN3aXRjaGVyLWl0ZW1dJywgZnVuY3Rpb24oZSkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGl0ZW0gPSBVSS4kKHRoaXMpLmF0dHIoJ2RhdGEtdWstc3dpdGNoZXItaXRlbScpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCR0aGlzLmluZGV4ID09IGl0ZW0pIHJldHVybjtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaChpdGVtKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICduZXh0JzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ3ByZXZpb3VzJzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdGhpcy5zaG93KCR0aGlzLmluZGV4ICsgKGl0ZW09PSduZXh0JyA/IDE6LTEpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHRoaXMuc2hvdyhwYXJzZUludChpdGVtLCAxMCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMuc3dpcGluZykge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb25uZWN0Lm9uKCdzd2lwZVJpZ2h0IHN3aXBlTGVmdCcsIGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCF3aW5kb3cuZ2V0U2VsZWN0aW9uKCkudG9TdHJpbmcoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICR0aGlzLnNob3coJHRoaXMuaW5kZXggKyAoZS50eXBlID09ICdzd2lwZUxlZnQnID8gMSA6IC0xKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgdG9nZ2xlcyA9IHRoaXMuZmluZCh0aGlzLm9wdGlvbnMudG9nZ2xlKSxcclxuICAgICAgICAgICAgICAgICAgICBhY3RpdmUgID0gdG9nZ2xlcy5maWx0ZXIoXCIudWstYWN0aXZlXCIpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChhY3RpdmUubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zaG93KGFjdGl2ZSwgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5hY3RpdmU9PT1mYWxzZSkgcmV0dXJuO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBhY3RpdmUgPSB0b2dnbGVzLmVxKHRoaXMub3B0aW9ucy5hY3RpdmUpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2hvdyhhY3RpdmUubGVuZ3RoID8gYWN0aXZlIDogdG9nZ2xlcy5lcSgwKSwgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIC8vIEluaXQgQVJJQSBmb3IgdG9nZ2xlc1xyXG4gICAgICAgICAgICAgICAgdG9nZ2xlcy5ub3QoYWN0aXZlKS5hdHRyKCdhcmlhLWV4cGFuZGVkJywgJ2ZhbHNlJyk7XHJcbiAgICAgICAgICAgICAgICBhY3RpdmUuYXR0cignYXJpYS1leHBhbmRlZCcsICd0cnVlJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5vbignY2hhbmdlZC51ay5kb20nLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICAkdGhpcy5jb25uZWN0ID0gVUkuJCgkdGhpcy5vcHRpb25zLmNvbm5lY3QpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgc2hvdzogZnVuY3Rpb24odGFiLCBhbmltYXRlKSB7XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5hbmltYXRpbmcpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKGlzTmFOKHRhYikpIHtcclxuICAgICAgICAgICAgICAgIHRhYiA9IFVJLiQodGFiKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgdG9nZ2xlcyA9IHRoaXMuZmluZCh0aGlzLm9wdGlvbnMudG9nZ2xlKTtcclxuXHJcbiAgICAgICAgICAgICAgICB0YWIgPSB0YWIgPCAwID8gdG9nZ2xlcy5sZW5ndGgtMSA6IHRhYjtcclxuICAgICAgICAgICAgICAgIHRhYiA9IHRvZ2dsZXMuZXEodG9nZ2xlc1t0YWJdID8gdGFiIDogMCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHZhciAkdGhpcyAgICAgPSB0aGlzLFxyXG4gICAgICAgICAgICAgICAgdG9nZ2xlcyAgID0gdGhpcy5maW5kKHRoaXMub3B0aW9ucy50b2dnbGUpLFxyXG4gICAgICAgICAgICAgICAgYWN0aXZlICAgID0gVUkuJCh0YWIpLFxyXG4gICAgICAgICAgICAgICAgYW5pbWF0aW9uID0gQW5pbWF0aW9uc1t0aGlzLm9wdGlvbnMuYW5pbWF0aW9uXSB8fCBmdW5jdGlvbihjdXJyZW50LCBuZXh0KSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghJHRoaXMub3B0aW9ucy5hbmltYXRpb24pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEFuaW1hdGlvbnMubm9uZS5hcHBseSgkdGhpcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICB2YXIgYW5pbSA9ICR0aGlzLm9wdGlvbnMuYW5pbWF0aW9uLnNwbGl0KCcsJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChhbmltLmxlbmd0aCA9PSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFuaW1bMV0gPSBhbmltWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgYW5pbVswXSA9IGFuaW1bMF0udHJpbSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGFuaW1bMV0gPSBhbmltWzFdLnRyaW0oKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNvcmVBbmltYXRpb24uYXBwbHkoJHRoaXMsIFthbmltLCBjdXJyZW50LCBuZXh0XSk7XHJcbiAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgaWYgKGFuaW1hdGU9PT1mYWxzZSB8fCAhVUkuc3VwcG9ydC5hbmltYXRpb24pIHtcclxuICAgICAgICAgICAgICAgIGFuaW1hdGlvbiA9IEFuaW1hdGlvbnMubm9uZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKGFjdGl2ZS5oYXNDbGFzcyhcInVrLWRpc2FibGVkXCIpKSByZXR1cm47XHJcblxyXG4gICAgICAgICAgICAvLyBVcGRhdGUgQVJJQSBmb3IgVG9nZ2xlc1xyXG4gICAgICAgICAgICB0b2dnbGVzLmF0dHIoJ2FyaWEtZXhwYW5kZWQnLCAnZmFsc2UnKTtcclxuICAgICAgICAgICAgYWN0aXZlLmF0dHIoJ2FyaWEtZXhwYW5kZWQnLCAndHJ1ZScpO1xyXG5cclxuICAgICAgICAgICAgdG9nZ2xlcy5maWx0ZXIoXCIudWstYWN0aXZlXCIpLnJlbW92ZUNsYXNzKFwidWstYWN0aXZlXCIpO1xyXG4gICAgICAgICAgICBhY3RpdmUuYWRkQ2xhc3MoXCJ1ay1hY3RpdmVcIik7XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLmNvbm5lY3QgJiYgdGhpcy5jb25uZWN0Lmxlbmd0aCkge1xyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMuaW5kZXggPSB0aGlzLmZpbmQodGhpcy5vcHRpb25zLnRvZ2dsZSkuaW5kZXgoYWN0aXZlKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5pbmRleCA9PSAtMSApIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmluZGV4ID0gMDtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbm5lY3QuZWFjaChmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNvbnRhaW5lciA9IFVJLiQodGhpcyksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuICA9IFVJLiQoY29udGFpbmVyLmNoaWxkcmVuKCkpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50ICAgPSBVSS4kKGNoaWxkcmVuLmZpbHRlcignLnVrLWFjdGl2ZScpKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmV4dCAgICAgID0gVUkuJChjaGlsZHJlbi5lcSgkdGhpcy5pbmRleCkpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgJHRoaXMuYW5pbWF0aW5nID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFuaW1hdGlvbi5hcHBseSgkdGhpcywgW2N1cnJlbnQsIG5leHRdKS50aGVuKGZ1bmN0aW9uKCl7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudC5yZW1vdmVDbGFzcyhcInVrLWFjdGl2ZVwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5leHQuYWRkQ2xhc3MoXCJ1ay1hY3RpdmVcIik7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVXBkYXRlIEFSSUEgZm9yIGNvbm5lY3RcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnQuYXR0cignYXJpYS1oaWRkZW4nLCAndHJ1ZScpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV4dC5hdHRyKCdhcmlhLWhpZGRlbicsICdmYWxzZScpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFVJLlV0aWxzLmNoZWNrRGlzcGxheShuZXh0LCB0cnVlKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdGhpcy5hbmltYXRpbmcgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMudHJpZ2dlcihcInNob3cudWsuc3dpdGNoZXJcIiwgW2FjdGl2ZV0pO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIEFuaW1hdGlvbnMgPSB7XHJcblxyXG4gICAgICAgICdub25lJzogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHZhciBkID0gVUkuJC5EZWZlcnJlZCgpO1xyXG4gICAgICAgICAgICBkLnJlc29sdmUoKTtcclxuICAgICAgICAgICAgcmV0dXJuIGQucHJvbWlzZSgpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgICdmYWRlJzogZnVuY3Rpb24oY3VycmVudCwgbmV4dCkge1xyXG4gICAgICAgICAgICByZXR1cm4gY29yZUFuaW1hdGlvbi5hcHBseSh0aGlzLCBbJ3VrLWFuaW1hdGlvbi1mYWRlJywgY3VycmVudCwgbmV4dF0pO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgICdzbGlkZS1ib3R0b20nOiBmdW5jdGlvbihjdXJyZW50LCBuZXh0KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBjb3JlQW5pbWF0aW9uLmFwcGx5KHRoaXMsIFsndWstYW5pbWF0aW9uLXNsaWRlLWJvdHRvbScsIGN1cnJlbnQsIG5leHRdKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAnc2xpZGUtdG9wJzogZnVuY3Rpb24oY3VycmVudCwgbmV4dCkge1xyXG4gICAgICAgICAgICByZXR1cm4gY29yZUFuaW1hdGlvbi5hcHBseSh0aGlzLCBbJ3VrLWFuaW1hdGlvbi1zbGlkZS10b3AnLCBjdXJyZW50LCBuZXh0XSk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgJ3NsaWRlLXZlcnRpY2FsJzogZnVuY3Rpb24oY3VycmVudCwgbmV4dCwgZGlyKSB7XHJcblxyXG4gICAgICAgICAgICB2YXIgYW5pbSA9IFsndWstYW5pbWF0aW9uLXNsaWRlLXRvcCcsICd1ay1hbmltYXRpb24tc2xpZGUtYm90dG9tJ107XHJcblxyXG4gICAgICAgICAgICBpZiAoY3VycmVudCAmJiBjdXJyZW50LmluZGV4KCkgPiBuZXh0LmluZGV4KCkpIHtcclxuICAgICAgICAgICAgICAgIGFuaW0ucmV2ZXJzZSgpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gY29yZUFuaW1hdGlvbi5hcHBseSh0aGlzLCBbYW5pbSwgY3VycmVudCwgbmV4dF0pO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgICdzbGlkZS1sZWZ0JzogZnVuY3Rpb24oY3VycmVudCwgbmV4dCkge1xyXG4gICAgICAgICAgICByZXR1cm4gY29yZUFuaW1hdGlvbi5hcHBseSh0aGlzLCBbJ3VrLWFuaW1hdGlvbi1zbGlkZS1sZWZ0JywgY3VycmVudCwgbmV4dF0pO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgICdzbGlkZS1yaWdodCc6IGZ1bmN0aW9uKGN1cnJlbnQsIG5leHQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGNvcmVBbmltYXRpb24uYXBwbHkodGhpcywgWyd1ay1hbmltYXRpb24tc2xpZGUtcmlnaHQnLCBjdXJyZW50LCBuZXh0XSk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgJ3NsaWRlLWhvcml6b250YWwnOiBmdW5jdGlvbihjdXJyZW50LCBuZXh0LCBkaXIpIHtcclxuXHJcbiAgICAgICAgICAgIHZhciBhbmltID0gWyd1ay1hbmltYXRpb24tc2xpZGUtcmlnaHQnLCAndWstYW5pbWF0aW9uLXNsaWRlLWxlZnQnXTtcclxuXHJcbiAgICAgICAgICAgIGlmIChjdXJyZW50ICYmIGN1cnJlbnQuaW5kZXgoKSA+IG5leHQuaW5kZXgoKSkge1xyXG4gICAgICAgICAgICAgICAgYW5pbS5yZXZlcnNlKCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiBjb3JlQW5pbWF0aW9uLmFwcGx5KHRoaXMsIFthbmltLCBjdXJyZW50LCBuZXh0XSk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgJ3NjYWxlJzogZnVuY3Rpb24oY3VycmVudCwgbmV4dCkge1xyXG4gICAgICAgICAgICByZXR1cm4gY29yZUFuaW1hdGlvbi5hcHBseSh0aGlzLCBbJ3VrLWFuaW1hdGlvbi1zY2FsZS11cCcsIGN1cnJlbnQsIG5leHRdKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIFVJLnN3aXRjaGVyLmFuaW1hdGlvbnMgPSBBbmltYXRpb25zO1xyXG5cclxuXHJcbiAgICAvLyBoZWxwZXJzXHJcblxyXG4gICAgZnVuY3Rpb24gY29yZUFuaW1hdGlvbihjbHMsIGN1cnJlbnQsIG5leHQpIHtcclxuXHJcbiAgICAgICAgdmFyIGQgPSBVSS4kLkRlZmVycmVkKCksIGNsc0luID0gY2xzLCBjbHNPdXQgPSBjbHMsIHJlbGVhc2U7XHJcblxyXG4gICAgICAgIGlmIChuZXh0WzBdPT09Y3VycmVudFswXSkge1xyXG4gICAgICAgICAgICBkLnJlc29sdmUoKTtcclxuICAgICAgICAgICAgcmV0dXJuIGQucHJvbWlzZSgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHR5cGVvZihjbHMpID09ICdvYmplY3QnKSB7XHJcbiAgICAgICAgICAgIGNsc0luICA9IGNsc1swXTtcclxuICAgICAgICAgICAgY2xzT3V0ID0gY2xzWzFdIHx8IGNsc1swXTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIFVJLiRib2R5LmNzcygnb3ZlcmZsb3cteCcsICdoaWRkZW4nKTsgLy8gZml4IHNjcm9sbCBqdW1waW5nIGluIGlPU1xyXG5cclxuICAgICAgICByZWxlYXNlID0gZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgICAgICBpZiAoY3VycmVudCkgY3VycmVudC5oaWRlKCkucmVtb3ZlQ2xhc3MoJ3VrLWFjdGl2ZSAnK2Nsc091dCsnIHVrLWFuaW1hdGlvbi1yZXZlcnNlJyk7XHJcblxyXG4gICAgICAgICAgICBuZXh0LmFkZENsYXNzKGNsc0luKS5vbmUoVUkuc3VwcG9ydC5hbmltYXRpb24uZW5kLCBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgICAgICAgICBuZXh0LnJlbW92ZUNsYXNzKCcnK2Nsc0luKycnKS5jc3Moe29wYWNpdHk6JycsIGRpc3BsYXk6Jyd9KTtcclxuXHJcbiAgICAgICAgICAgICAgICBkLnJlc29sdmUoKTtcclxuXHJcbiAgICAgICAgICAgICAgICBVSS4kYm9keS5jc3MoJ292ZXJmbG93LXgnLCAnJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGN1cnJlbnQpIGN1cnJlbnQuY3NzKHtvcGFjaXR5OicnLCBkaXNwbGF5OicnfSk7XHJcblxyXG4gICAgICAgICAgICB9LmJpbmQodGhpcykpLnNob3coKTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBuZXh0LmNzcygnYW5pbWF0aW9uLWR1cmF0aW9uJywgdGhpcy5vcHRpb25zLmR1cmF0aW9uKydtcycpO1xyXG5cclxuICAgICAgICBpZiAoY3VycmVudCAmJiBjdXJyZW50Lmxlbmd0aCkge1xyXG5cclxuICAgICAgICAgICAgY3VycmVudC5jc3MoJ2FuaW1hdGlvbi1kdXJhdGlvbicsIHRoaXMub3B0aW9ucy5kdXJhdGlvbisnbXMnKTtcclxuXHJcbiAgICAgICAgICAgIGN1cnJlbnQuY3NzKCdkaXNwbGF5JywgJ25vbmUnKS5hZGRDbGFzcyhjbHNPdXQrJyB1ay1hbmltYXRpb24tcmV2ZXJzZScpLm9uZShVSS5zdXBwb3J0LmFuaW1hdGlvbi5lbmQsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgcmVsZWFzZSgpO1xyXG4gICAgICAgICAgICB9LmJpbmQodGhpcykpLmNzcygnZGlzcGxheScsICcnKTtcclxuXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgbmV4dC5hZGRDbGFzcygndWstYWN0aXZlJyk7XHJcbiAgICAgICAgICAgIHJlbGVhc2UoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBkLnByb21pc2UoKTtcclxuICAgIH1cclxuXHJcbn0pKFVJa2l0KTtcclxuXHJcbihmdW5jdGlvbihVSSkge1xyXG5cclxuICAgIFwidXNlIHN0cmljdFwiO1xyXG5cclxuICAgIFVJLmNvbXBvbmVudCgndGFiJywge1xyXG5cclxuICAgICAgICBkZWZhdWx0czoge1xyXG4gICAgICAgICAgICAndGFyZ2V0JyAgICA6ICc+bGk6bm90KC51ay10YWItcmVzcG9uc2l2ZSwgLnVrLWRpc2FibGVkKScsXHJcbiAgICAgICAgICAgICdjb25uZWN0JyAgIDogZmFsc2UsXHJcbiAgICAgICAgICAgICdhY3RpdmUnICAgIDogMCxcclxuICAgICAgICAgICAgJ2FuaW1hdGlvbicgOiBmYWxzZSxcclxuICAgICAgICAgICAgJ2R1cmF0aW9uJyAgOiAyMDAsXHJcbiAgICAgICAgICAgICdzd2lwaW5nJyAgIDogdHJ1ZVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGJvb3Q6IGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICAgICAgLy8gaW5pdCBjb2RlXHJcbiAgICAgICAgICAgIFVJLnJlYWR5KGZ1bmN0aW9uKGNvbnRleHQpIHtcclxuXHJcbiAgICAgICAgICAgICAgICBVSS4kKFwiW2RhdGEtdWstdGFiXVwiLCBjb250ZXh0KS5lYWNoKGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB2YXIgdGFiID0gVUkuJCh0aGlzKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0YWIuZGF0YShcInRhYlwiKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgb2JqID0gVUkudGFiKHRhYiwgVUkuVXRpbHMub3B0aW9ucyh0YWIuYXR0cihcImRhdGEtdWstdGFiXCIpKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGluaXQ6IGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICAgICAgdmFyICR0aGlzID0gdGhpcztcclxuXHJcbiAgICAgICAgICAgIHRoaXMuY3VycmVudCA9IGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5vbihcImNsaWNrLnVpa2l0LnRhYlwiLCB0aGlzLm9wdGlvbnMudGFyZ2V0LCBmdW5jdGlvbihlKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICgkdGhpcy5zd2l0Y2hlciAmJiAkdGhpcy5zd2l0Y2hlci5hbmltYXRpbmcpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIGN1cnJlbnQgPSAkdGhpcy5maW5kKCR0aGlzLm9wdGlvbnMudGFyZ2V0KS5ub3QodGhpcyk7XHJcblxyXG4gICAgICAgICAgICAgICAgY3VycmVudC5yZW1vdmVDbGFzcyhcInVrLWFjdGl2ZVwiKS5ibHVyKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgJHRoaXMudHJpZ2dlcihcImNoYW5nZS51ay50YWJcIiwgW1VJLiQodGhpcykuYWRkQ2xhc3MoXCJ1ay1hY3RpdmVcIiksICR0aGlzLmN1cnJlbnRdKTtcclxuXHJcbiAgICAgICAgICAgICAgICAkdGhpcy5jdXJyZW50ID0gVUkuJCh0aGlzKTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBVcGRhdGUgQVJJQVxyXG4gICAgICAgICAgICAgICAgaWYgKCEkdGhpcy5vcHRpb25zLmNvbm5lY3QpIHtcclxuICAgICAgICAgICAgICAgICAgICBjdXJyZW50LmF0dHIoJ2FyaWEtZXhwYW5kZWQnLCAnZmFsc2UnKTtcclxuICAgICAgICAgICAgICAgICAgICBVSS4kKHRoaXMpLmF0dHIoJ2FyaWEtZXhwYW5kZWQnLCAndHJ1ZScpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMuY29ubmVjdCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jb25uZWN0ID0gVUkuJCh0aGlzLm9wdGlvbnMuY29ubmVjdCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIGluaXQgcmVzcG9uc2l2ZSB0YWJcclxuICAgICAgICAgICAgdGhpcy5yZXNwb25zaXZldGFiID0gVUkuJCgnPGxpIGNsYXNzPVwidWstdGFiLXJlc3BvbnNpdmUgdWstYWN0aXZlXCI+PGE+PC9hPjwvbGk+JykuYXBwZW5kKCc8ZGl2IGNsYXNzPVwidWstZHJvcGRvd24gdWstZHJvcGRvd24tc21hbGxcIj48dWwgY2xhc3M9XCJ1ay1uYXYgdWstbmF2LWRyb3Bkb3duXCI+PC91bD48ZGl2PicpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5yZXNwb25zaXZldGFiLmRyb3Bkb3duID0gdGhpcy5yZXNwb25zaXZldGFiLmZpbmQoJy51ay1kcm9wZG93bicpO1xyXG4gICAgICAgICAgICB0aGlzLnJlc3BvbnNpdmV0YWIubHN0ICAgICAgPSB0aGlzLnJlc3BvbnNpdmV0YWIuZHJvcGRvd24uZmluZCgndWwnKTtcclxuICAgICAgICAgICAgdGhpcy5yZXNwb25zaXZldGFiLmNhcHRpb24gID0gdGhpcy5yZXNwb25zaXZldGFiLmZpbmQoJ2E6Zmlyc3QnKTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLmVsZW1lbnQuaGFzQ2xhc3MoXCJ1ay10YWItYm90dG9tXCIpKSB0aGlzLnJlc3BvbnNpdmV0YWIuZHJvcGRvd24uYWRkQ2xhc3MoXCJ1ay1kcm9wZG93bi11cFwiKTtcclxuXHJcbiAgICAgICAgICAgIC8vIGhhbmRsZSBjbGlja1xyXG4gICAgICAgICAgICB0aGlzLnJlc3BvbnNpdmV0YWIubHN0Lm9uKCdjbGljay51aWtpdC50YWInLCAnYScsIGZ1bmN0aW9uKGUpIHtcclxuXHJcbiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG5cclxuICAgICAgICAgICAgICAgIHZhciBsaW5rID0gVUkuJCh0aGlzKTtcclxuXHJcbiAgICAgICAgICAgICAgICAkdGhpcy5lbGVtZW50LmNoaWxkcmVuKCdsaTpub3QoLnVrLXRhYi1yZXNwb25zaXZlKScpLmVxKGxpbmsuZGF0YSgnaW5kZXgnKSkudHJpZ2dlcignY2xpY2snKTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLm9uKCdzaG93LnVrLnN3aXRjaGVyIGNoYW5nZS51ay50YWInLCBmdW5jdGlvbihlLCB0YWIpIHtcclxuICAgICAgICAgICAgICAgICR0aGlzLnJlc3BvbnNpdmV0YWIuY2FwdGlvbi5odG1sKHRhYi50ZXh0KCkpO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudC5hcHBlbmQodGhpcy5yZXNwb25zaXZldGFiKTtcclxuXHJcbiAgICAgICAgICAgIC8vIGluaXQgVUlraXQgY29tcG9uZW50c1xyXG4gICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLmNvbm5lY3QpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc3dpdGNoZXIgPSBVSS5zd2l0Y2hlcih0aGlzLmVsZW1lbnQsIHtcclxuICAgICAgICAgICAgICAgICAgICAndG9nZ2xlJyAgICA6ICc+bGk6bm90KC51ay10YWItcmVzcG9uc2l2ZSknLFxyXG4gICAgICAgICAgICAgICAgICAgICdjb25uZWN0JyAgIDogdGhpcy5vcHRpb25zLmNvbm5lY3QsXHJcbiAgICAgICAgICAgICAgICAgICAgJ2FjdGl2ZScgICAgOiB0aGlzLm9wdGlvbnMuYWN0aXZlLFxyXG4gICAgICAgICAgICAgICAgICAgICdhbmltYXRpb24nIDogdGhpcy5vcHRpb25zLmFuaW1hdGlvbixcclxuICAgICAgICAgICAgICAgICAgICAnZHVyYXRpb24nICA6IHRoaXMub3B0aW9ucy5kdXJhdGlvbixcclxuICAgICAgICAgICAgICAgICAgICAnc3dpcGluZycgICA6IHRoaXMub3B0aW9ucy5zd2lwaW5nXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgVUkuZHJvcGRvd24odGhpcy5yZXNwb25zaXZldGFiLCB7XCJtb2RlXCI6IFwiY2xpY2tcIn0pO1xyXG5cclxuICAgICAgICAgICAgLy8gaW5pdFxyXG4gICAgICAgICAgICAkdGhpcy50cmlnZ2VyKFwiY2hhbmdlLnVrLnRhYlwiLCBbdGhpcy5lbGVtZW50LmZpbmQodGhpcy5vcHRpb25zLnRhcmdldCkubm90KCcudWstdGFiLXJlc3BvbnNpdmUnKS5maWx0ZXIoJy51ay1hY3RpdmUnKV0pO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5jaGVjaygpO1xyXG5cclxuICAgICAgICAgICAgVUkuJHdpbi5vbigncmVzaXplIG9yaWVudGF0aW9uY2hhbmdlJywgVUkuVXRpbHMuZGVib3VuY2UoZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgICAgIGlmICgkdGhpcy5lbGVtZW50LmlzKFwiOnZpc2libGVcIikpICAkdGhpcy5jaGVjaygpO1xyXG4gICAgICAgICAgICB9LCAxMDApKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMub24oJ2Rpc3BsYXkudWsuY2hlY2snLCBmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICAgICAgaWYgKCR0aGlzLmVsZW1lbnQuaXMoXCI6dmlzaWJsZVwiKSkgICR0aGlzLmNoZWNrKCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGNoZWNrOiBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgICAgIHZhciBjaGlsZHJlbiA9IHRoaXMuZWxlbWVudC5jaGlsZHJlbignbGk6bm90KC51ay10YWItcmVzcG9uc2l2ZSknKS5yZW1vdmVDbGFzcygndWstaGlkZGVuJyk7XHJcblxyXG4gICAgICAgICAgICBpZiAoIWNoaWxkcmVuLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5yZXNwb25zaXZldGFiLmFkZENsYXNzKCd1ay1oaWRkZW4nKTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdmFyIHRvcCAgICAgICAgICA9IChjaGlsZHJlbi5lcSgwKS5vZmZzZXQoKS50b3AgKyBNYXRoLmNlaWwoY2hpbGRyZW4uZXEoMCkuaGVpZ2h0KCkvMikpLFxyXG4gICAgICAgICAgICAgICAgZG9yZXNwb25zaXZlID0gZmFsc2UsXHJcbiAgICAgICAgICAgICAgICBpdGVtLCBsaW5rLCBjbG9uZTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMucmVzcG9uc2l2ZXRhYi5sc3QuZW1wdHkoKTtcclxuXHJcbiAgICAgICAgICAgIGNoaWxkcmVuLmVhY2goZnVuY3Rpb24oKXtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoVUkuJCh0aGlzKS5vZmZzZXQoKS50b3AgPiB0b3ApIHtcclxuICAgICAgICAgICAgICAgICAgICBkb3Jlc3BvbnNpdmUgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIGlmIChkb3Jlc3BvbnNpdmUpIHtcclxuXHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGl0ZW0gID0gVUkuJChjaGlsZHJlbi5lcShpKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgbGluayAgPSBpdGVtLmZpbmQoJ2EnKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGl0ZW0uY3NzKCdmbG9hdCcpICE9ICdub25lJyAmJiAhaXRlbS5hdHRyKCd1ay1kcm9wZG93bicpKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWl0ZW0uaGFzQ2xhc3MoJ3VrLWRpc2FibGVkJykpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbG9uZSA9IGl0ZW1bMF0ub3V0ZXJIVE1MLnJlcGxhY2UoJzxhICcsICc8YSBkYXRhLWluZGV4PVwiJytpKydcIiAnKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlc3BvbnNpdmV0YWIubHN0LmFwcGVuZChjbG9uZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0uYWRkQ2xhc3MoJ3VrLWhpZGRlbicpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5yZXNwb25zaXZldGFiW3RoaXMucmVzcG9uc2l2ZXRhYi5sc3QuY2hpbGRyZW4oJ2xpJykubGVuZ3RoID8gJ3JlbW92ZUNsYXNzJzonYWRkQ2xhc3MnXSgndWstaGlkZGVuJyk7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG59KShVSWtpdCk7XHJcblxyXG4oZnVuY3Rpb24oVUkpe1xyXG5cclxuICAgIFwidXNlIHN0cmljdFwiO1xyXG5cclxuICAgIFVJLmNvbXBvbmVudCgnY292ZXInLCB7XHJcblxyXG4gICAgICAgIGRlZmF1bHRzOiB7XHJcbiAgICAgICAgICAgIGF1dG9tdXRlIDogdHJ1ZVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGJvb3Q6IGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICAgICAgLy8gYXV0byBpbml0XHJcbiAgICAgICAgICAgIFVJLnJlYWR5KGZ1bmN0aW9uKGNvbnRleHQpIHtcclxuXHJcbiAgICAgICAgICAgICAgICBVSS4kKFwiW2RhdGEtdWstY292ZXJdXCIsIGNvbnRleHQpLmVhY2goZnVuY3Rpb24oKXtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGVsZSA9IFVJLiQodGhpcyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmKCFlbGUuZGF0YShcImNvdmVyXCIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwbHVnaW4gPSBVSS5jb3ZlcihlbGUsIFVJLlV0aWxzLm9wdGlvbnMoZWxlLmF0dHIoXCJkYXRhLXVrLWNvdmVyXCIpKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGluaXQ6IGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICAgICAgdGhpcy5wYXJlbnQgPSB0aGlzLmVsZW1lbnQucGFyZW50KCk7XHJcblxyXG4gICAgICAgICAgICBVSS4kd2luLm9uKCdsb2FkIHJlc2l6ZSBvcmllbnRhdGlvbmNoYW5nZScsIFVJLlV0aWxzLmRlYm91bmNlKGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNoZWNrKCk7XHJcbiAgICAgICAgICAgIH0uYmluZCh0aGlzKSwgMTAwKSk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLm9uKFwiZGlzcGxheS51ay5jaGVja1wiLCBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgICAgICAgICBpZih0aGlzLmVsZW1lbnQuaXMoXCI6dmlzaWJsZVwiKSkgdGhpcy5jaGVjaygpO1xyXG4gICAgICAgICAgICB9LmJpbmQodGhpcykpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5jaGVjaygpO1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMuZWxlbWVudC5pcygnaWZyYW1lJykgJiYgdGhpcy5vcHRpb25zLmF1dG9tdXRlKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIHNyYyA9IHRoaXMuZWxlbWVudC5hdHRyKCdzcmMnKTtcclxuXHJcbiAgICAgICAgICAgICAgICB0aGlzLmVsZW1lbnQuYXR0cignc3JjJywgJycpLm9uKCdsb2FkJywgZnVuY3Rpb24oKXtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb250ZW50V2luZG93LnBvc3RNZXNzYWdlKCd7IFwiZXZlbnRcIjogXCJjb21tYW5kXCIsIFwiZnVuY1wiOiBcIm11dGVcIiwgXCJtZXRob2RcIjpcInNldFZvbHVtZVwiLCBcInZhbHVlXCI6MH0nLCAnKicpO1xyXG5cclxuICAgICAgICAgICAgICAgIH0pLmF0dHIoJ3NyYycsIFtzcmMsIChzcmMuaW5kZXhPZignPycpID4gLTEgPyAnJic6Jz8nKSwgJ2VuYWJsZWpzYXBpPTEmYXBpPTEnXS5qb2luKCcnKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBjaGVjazogZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgICAgICB0aGlzLmVsZW1lbnQuY3NzKHtcclxuICAgICAgICAgICAgICAgICd3aWR0aCcgIDogJycsXHJcbiAgICAgICAgICAgICAgICAnaGVpZ2h0JyA6ICcnXHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5kaW1lbnNpb24gPSB7dzogdGhpcy5lbGVtZW50LndpZHRoKCksIGg6IHRoaXMuZWxlbWVudC5oZWlnaHQoKX07XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5lbGVtZW50LmF0dHIoJ3dpZHRoJykgJiYgIWlzTmFOKHRoaXMuZWxlbWVudC5hdHRyKCd3aWR0aCcpKSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kaW1lbnNpb24udyA9IHRoaXMuZWxlbWVudC5hdHRyKCd3aWR0aCcpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5lbGVtZW50LmF0dHIoJ2hlaWdodCcpICYmICFpc05hTih0aGlzLmVsZW1lbnQuYXR0cignaGVpZ2h0JykpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRpbWVuc2lvbi5oID0gdGhpcy5lbGVtZW50LmF0dHIoJ2hlaWdodCcpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLnJhdGlvICAgICA9IHRoaXMuZGltZW5zaW9uLncgLyB0aGlzLmRpbWVuc2lvbi5oO1xyXG5cclxuICAgICAgICAgICAgdmFyIHcgPSB0aGlzLnBhcmVudC53aWR0aCgpLCBoID0gdGhpcy5wYXJlbnQuaGVpZ2h0KCksIHdpZHRoLCBoZWlnaHQ7XHJcblxyXG4gICAgICAgICAgICAvLyBpZiBlbGVtZW50IGhlaWdodCA8IHBhcmVudCBoZWlnaHQgKGdhcCB1bmRlcm5lYXRoKVxyXG4gICAgICAgICAgICBpZiAoKHcgLyB0aGlzLnJhdGlvKSA8IGgpIHtcclxuXHJcbiAgICAgICAgICAgICAgICB3aWR0aCAgPSBNYXRoLmNlaWwoaCAqIHRoaXMucmF0aW8pO1xyXG4gICAgICAgICAgICAgICAgaGVpZ2h0ID0gaDtcclxuXHJcbiAgICAgICAgICAgIC8vIGVsZW1lbnQgd2lkdGggPCBwYXJlbnQgd2lkdGggKGdhcCB0byByaWdodClcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuXHJcbiAgICAgICAgICAgICAgICB3aWR0aCAgPSB3O1xyXG4gICAgICAgICAgICAgICAgaGVpZ2h0ID0gTWF0aC5jZWlsKHcgLyB0aGlzLnJhdGlvKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5lbGVtZW50LmNzcyh7XHJcbiAgICAgICAgICAgICAgICAnd2lkdGgnICA6IHdpZHRoLFxyXG4gICAgICAgICAgICAgICAgJ2hlaWdodCcgOiBoZWlnaHRcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG59KShVSWtpdCk7XHJcbi8qISBVSWtpdCAyLjI0LjIgfCBodHRwOi8vd3d3LmdldHVpa2l0LmNvbSB8IChjKSAyMDE0IFlPT3RoZW1lIHwgTUlUIExpY2Vuc2UgKi9cclxuKGZ1bmN0aW9uKGFkZG9uKSB7XHJcblxyXG4gICAgdmFyIGNvbXBvbmVudDtcclxuXHJcbiAgICBpZiAod2luZG93LlVJa2l0KSB7XHJcbiAgICAgICAgY29tcG9uZW50ID0gYWRkb24oVUlraXQpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICh0eXBlb2YgZGVmaW5lID09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kKSB7XHJcbiAgICAgICAgZGVmaW5lKFwidWlraXQtc2xpZGVyXCIsIFtcInVpa2l0XCJdLCBmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICByZXR1cm4gY29tcG9uZW50IHx8IGFkZG9uKFVJa2l0KTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbn0pKGZ1bmN0aW9uKFVJKXtcclxuXHJcbiAgICBcInVzZSBzdHJpY3RcIjtcclxuXHJcbiAgICB2YXIgZHJhZ2dpbmcsIGRlbGF5SWRsZSwgYW5jaG9yLCBkcmFnZ2VkLCBzdG9yZSA9IHt9O1xyXG5cclxuICAgIFVJLmNvbXBvbmVudCgnc2xpZGVyJywge1xyXG5cclxuICAgICAgICBkZWZhdWx0czoge1xyXG4gICAgICAgICAgICBjZW50ZXIgICAgICAgICAgIDogZmFsc2UsXHJcbiAgICAgICAgICAgIHRocmVzaG9sZCAgICAgICAgOiAxMCxcclxuICAgICAgICAgICAgaW5maW5pdGUgICAgICAgICA6IHRydWUsXHJcbiAgICAgICAgICAgIGF1dG9wbGF5ICAgICAgICAgOiBmYWxzZSxcclxuICAgICAgICAgICAgYXV0b3BsYXlJbnRlcnZhbCA6IDcwMDAsXHJcbiAgICAgICAgICAgIHBhdXNlT25Ib3ZlciAgICAgOiB0cnVlLFxyXG4gICAgICAgICAgICBhY3RpdmVjbHMgICAgICAgIDogJ3VrLWFjdGl2ZSdcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBib290OiAgZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgICAgICAvLyBpbml0IGNvZGVcclxuICAgICAgICAgICAgVUkucmVhZHkoZnVuY3Rpb24oY29udGV4dCkge1xyXG5cclxuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgVUkuJCgnW2RhdGEtdWstc2xpZGVyXScsIGNvbnRleHQpLmVhY2goZnVuY3Rpb24oKXtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlbGUgPSBVSS4kKHRoaXMpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFlbGUuZGF0YSgnc2xpZGVyJykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFVJLnNsaWRlcihlbGUsIFVJLlV0aWxzLm9wdGlvbnMoZWxlLmF0dHIoJ2RhdGEtdWstc2xpZGVyJykpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgIH0sIDApO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBpbml0OiBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgICAgIHZhciAkdGhpcyA9IHRoaXM7XHJcblxyXG4gICAgICAgICAgICB0aGlzLmNvbnRhaW5lciA9IHRoaXMuZWxlbWVudC5maW5kKCcudWstc2xpZGVyJyk7XHJcbiAgICAgICAgICAgIHRoaXMuZm9jdXMgICAgID0gMDtcclxuXHJcbiAgICAgICAgICAgIFVJLiR3aW4ub24oJ3Jlc2l6ZSBsb2FkJywgVUkuVXRpbHMuZGVib3VuY2UoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAkdGhpcy5yZXNpemUodHJ1ZSk7XHJcbiAgICAgICAgICAgIH0sIDEwMCkpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5vbignY2xpY2sudWlraXQuc2xpZGVyJywgJ1tkYXRhLXVrLXNsaWRlci1pdGVtXScsIGZ1bmN0aW9uKGUpIHtcclxuXHJcbiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIGl0ZW0gPSBVSS4kKHRoaXMpLmF0dHIoJ2RhdGEtdWstc2xpZGVyLWl0ZW0nKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoJHRoaXMuZm9jdXMgPT0gaXRlbSkgcmV0dXJuO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIHN0b3AgYXV0b3BsYXlcclxuICAgICAgICAgICAgICAgICR0aGlzLnN0b3AoKTtcclxuXHJcbiAgICAgICAgICAgICAgICBzd2l0Y2goaXRlbSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ25leHQnOlxyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ3ByZXZpb3VzJzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHRoaXNbaXRlbT09J25leHQnID8gJ25leHQnOidwcmV2aW91cyddKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICR0aGlzLnVwZGF0ZUZvY3VzKHBhcnNlSW50KGl0ZW0sIDEwKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5jb250YWluZXIub24oe1xyXG5cclxuICAgICAgICAgICAgICAgICd0b3VjaHN0YXJ0IG1vdXNlZG93bic6IGZ1bmN0aW9uKGV2dCkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoZXZ0Lm9yaWdpbmFsRXZlbnQgJiYgZXZ0Lm9yaWdpbmFsRXZlbnQudG91Y2hlcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBldnQgPSBldnQub3JpZ2luYWxFdmVudC50b3VjaGVzWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gaWdub3JlIHJpZ2h0IGNsaWNrIGJ1dHRvblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChldnQuYnV0dG9uICYmIGV2dC5idXR0b249PTIgfHwgISR0aGlzLmFjdGl2ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyBzdG9wIGF1dG9wbGF5XHJcbiAgICAgICAgICAgICAgICAgICAgJHRoaXMuc3RvcCgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBhbmNob3IgID0gVUkuJChldnQudGFyZ2V0KS5pcygnYScpID8gVUkuJChldnQudGFyZ2V0KSA6IFVJLiQoZXZ0LnRhcmdldCkucGFyZW50cygnYTpmaXJzdCcpO1xyXG4gICAgICAgICAgICAgICAgICAgIGRyYWdnZWQgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFuY2hvci5sZW5ndGgpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFuY2hvci5vbmUoJ2NsaWNrJywgZnVuY3Rpb24oZSl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZHJhZ2dlZCkgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGRlbGF5SWRsZSA9IGZ1bmN0aW9uKGUpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRyYWdnZWQgID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZHJhZ2dpbmcgPSAkdGhpcztcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3RvcmUgICAgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3VjaHggOiBwYXJzZUludChlLnBhZ2VYLCAxMCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXIgICAgOiAxLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9jdXMgIDogJHRoaXMuZm9jdXMsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBiYXNlICAgOiAkdGhpcy5vcHRpb25zLmNlbnRlciA/ICdjZW50ZXInOidhcmVhJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGUub3JpZ2luYWxFdmVudCAmJiBlLm9yaWdpbmFsRXZlbnQudG91Y2hlcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZSA9IGUub3JpZ2luYWxFdmVudC50b3VjaGVzWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkcmFnZ2luZy5lbGVtZW50LmRhdGEoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3BvaW50ZXItc3RhcnQnOiB7eDogcGFyc2VJbnQoZS5wYWdlWCwgMTApLCB5OiBwYXJzZUludChlLnBhZ2VZLCAxMCl9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3BvaW50ZXItcG9zLXN0YXJ0JzogJHRoaXMucG9zXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgJHRoaXMuY29udGFpbmVyLmFkZENsYXNzKCd1ay1kcmFnJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWxheUlkbGUgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBkZWxheUlkbGUueCAgICAgICAgID0gcGFyc2VJbnQoZXZ0LnBhZ2VYLCAxMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgZGVsYXlJZGxlLnRocmVzaG9sZCA9ICR0aGlzLm9wdGlvbnMudGhyZXNob2xkO1xyXG5cclxuICAgICAgICAgICAgICAgIH0sXHJcblxyXG4gICAgICAgICAgICAgICAgbW91c2VlbnRlcjogZnVuY3Rpb24oKSB7IGlmICgkdGhpcy5vcHRpb25zLnBhdXNlT25Ib3ZlcikgJHRoaXMuaG92ZXJpbmcgPSB0cnVlOyAgfSxcclxuICAgICAgICAgICAgICAgIG1vdXNlbGVhdmU6IGZ1bmN0aW9uKCkgeyAkdGhpcy5ob3ZlcmluZyA9IGZhbHNlOyB9XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5yZXNpemUodHJ1ZSk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLm9uKCdkaXNwbGF5LnVrLmNoZWNrJywgZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgICAgIGlmICgkdGhpcy5lbGVtZW50LmlzKFwiOnZpc2libGVcIikpIHtcclxuICAgICAgICAgICAgICAgICAgICAkdGhpcy5yZXNpemUodHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgLy8gcHJldmVudCBkcmFnZ2luZyBsaW5rcyArIGltYWdlc1xyXG4gICAgICAgICAgICB0aGlzLmVsZW1lbnQuZmluZCgnYSxpbWcnKS5hdHRyKCdkcmFnZ2FibGUnLCAnZmFsc2UnKTtcclxuXHJcbiAgICAgICAgICAgIC8vIFNldCBhdXRvcGxheVxyXG4gICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLmF1dG9wbGF5KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXJ0KCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgcmVzaXplOiBmdW5jdGlvbihmb2N1cykge1xyXG5cclxuICAgICAgICAgICAgdmFyICR0aGlzID0gdGhpcywgcG9zID0gMCwgbWF4aGVpZ2h0ID0gMCwgaXRlbSwgd2lkdGgsIGN3aWR0aCwgc2l6ZTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuaXRlbXMgPSB0aGlzLmNvbnRhaW5lci5jaGlsZHJlbigpLmZpbHRlcignOnZpc2libGUnKTtcclxuICAgICAgICAgICAgdGhpcy52cCAgICA9IHRoaXMuZWxlbWVudFswXS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aDtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuY29udGFpbmVyLmNzcyh7J21pbi13aWR0aCc6ICcnLCAnbWluLWhlaWdodCc6ICcnfSk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLml0ZW1zLmVhY2goZnVuY3Rpb24oaWR4KXtcclxuXHJcbiAgICAgICAgICAgICAgICBpdGVtICAgICAgPSBVSS4kKHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgc2l6ZSAgICAgID0gaXRlbS5jc3MoeydsZWZ0JzogJycsICd3aWR0aCc6Jyd9KVswXS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuICAgICAgICAgICAgICAgIHdpZHRoICAgICA9IHNpemUud2lkdGg7XHJcbiAgICAgICAgICAgICAgICBjd2lkdGggICAgPSBpdGVtLndpZHRoKCk7XHJcbiAgICAgICAgICAgICAgICBtYXhoZWlnaHQgPSBNYXRoLm1heChtYXhoZWlnaHQsIHNpemUuaGVpZ2h0KTtcclxuXHJcbiAgICAgICAgICAgICAgICBpdGVtLmNzcyh7J2xlZnQnOiBwb3MsICd3aWR0aCc6d2lkdGh9KS5kYXRhKHsnaWR4JzppZHgsICdsZWZ0JzogcG9zLCAnd2lkdGgnOiB3aWR0aCwgJ2N3aWR0aCc6Y3dpZHRoLCAnYXJlYSc6IChwb3Mrd2lkdGgpLCAnY2VudGVyJzoocG9zIC0gKCR0aGlzLnZwLzIgLSBjd2lkdGgvMikpfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgcG9zICs9IHdpZHRoO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuY29udGFpbmVyLmNzcyh7J21pbi13aWR0aCc6IHBvcywgJ21pbi1oZWlnaHQnOiBtYXhoZWlnaHR9KTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMuaW5maW5pdGUgJiYgcG9zIDw9ICgyKnRoaXMudnApICYmICF0aGlzLml0ZW1zUmVzaXplZCkge1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIGZpbGwgd2l0aCBjbG9uZWQgaXRlbXNcclxuICAgICAgICAgICAgICAgIHRoaXMuY29udGFpbmVyLmNoaWxkcmVuKCkuZWFjaChmdW5jdGlvbihpZHgpe1xyXG4gICAgICAgICAgICAgICAgICAgJHRoaXMuY29udGFpbmVyLmFwcGVuZCgkdGhpcy5pdGVtcy5lcShpZHgpLmNsb25lKHRydWUpLmF0dHIoJ2lkJywgJycpKTtcclxuICAgICAgICAgICAgICAgIH0pLmVhY2goZnVuY3Rpb24oaWR4KXtcclxuICAgICAgICAgICAgICAgICAgICR0aGlzLmNvbnRhaW5lci5hcHBlbmQoJHRoaXMuaXRlbXMuZXEoaWR4KS5jbG9uZSh0cnVlKS5hdHRyKCdpZCcsICcnKSk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICB0aGlzLml0ZW1zUmVzaXplZCA9IHRydWU7XHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVzaXplKCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMuY3cgICAgID0gcG9zO1xyXG4gICAgICAgICAgICB0aGlzLnBvcyAgICA9IDA7XHJcbiAgICAgICAgICAgIHRoaXMuYWN0aXZlID0gcG9zID49IHRoaXMudnA7XHJcblxyXG4gICAgICAgICAgICB0aGlzLmNvbnRhaW5lci5jc3Moe1xyXG4gICAgICAgICAgICAgICAgJy1tcy10cmFuc2Zvcm0nOiAnJyxcclxuICAgICAgICAgICAgICAgICctd2Via2l0LXRyYW5zZm9ybSc6ICcnLFxyXG4gICAgICAgICAgICAgICAgJ3RyYW5zZm9ybSc6ICcnXHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgaWYgKGZvY3VzKSB0aGlzLnVwZGF0ZUZvY3VzKHRoaXMuZm9jdXMpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIHVwZGF0ZVBvczogZnVuY3Rpb24ocG9zKSB7XHJcbiAgICAgICAgICAgIHRoaXMucG9zID0gcG9zO1xyXG4gICAgICAgICAgICB0aGlzLmNvbnRhaW5lci5jc3Moe1xyXG4gICAgICAgICAgICAgICAgJy1tcy10cmFuc2Zvcm0nOiAndHJhbnNsYXRlWCgnK3BvcysncHgpJyxcclxuICAgICAgICAgICAgICAgICctd2Via2l0LXRyYW5zZm9ybSc6ICd0cmFuc2xhdGVYKCcrcG9zKydweCknLFxyXG4gICAgICAgICAgICAgICAgJ3RyYW5zZm9ybSc6ICd0cmFuc2xhdGVYKCcrcG9zKydweCknXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIHVwZGF0ZUZvY3VzOiBmdW5jdGlvbihpZHgsIGRpcikge1xyXG5cclxuICAgICAgICAgICAgaWYgKCF0aGlzLmFjdGl2ZSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBkaXIgPSBkaXIgfHwgKGlkeCA+IHRoaXMuZm9jdXMgPyAxOi0xKTtcclxuXHJcbiAgICAgICAgICAgIHZhciBpdGVtID0gdGhpcy5pdGVtcy5lcShpZHgpLCBhcmVhLCBpO1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5pbmZpbml0ZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5pbmZpbml0ZShpZHgsIGRpcik7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMuY2VudGVyKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGVQb3MoaXRlbS5kYXRhKCdjZW50ZXInKSotMSk7XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5pdGVtcy5maWx0ZXIoJy4nK3RoaXMub3B0aW9ucy5hY3RpdmVjbHMpLnJlbW92ZUNsYXNzKHRoaXMub3B0aW9ucy5hY3RpdmVjbHMpO1xyXG4gICAgICAgICAgICAgICAgaXRlbS5hZGRDbGFzcyh0aGlzLm9wdGlvbnMuYWN0aXZlY2xzKTtcclxuXHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5pbmZpbml0ZSkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZVBvcyhpdGVtLmRhdGEoJ2xlZnQnKSotMSk7XHJcblxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgYXJlYSA9IDA7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGZvciAoaT1pZHg7aTx0aGlzLml0ZW1zLmxlbmd0aDtpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXJlYSArPSB0aGlzLml0ZW1zLmVxKGkpLmRhdGEoJ3dpZHRoJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFyZWEgPiB0aGlzLnZwKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZVBvcyhpdGVtLmRhdGEoJ2xlZnQnKSotMSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGlyID09IDEpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmVhID0gMDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGk9dGhpcy5pdGVtcy5sZW5ndGgtMTtpPj0wO2ktLSkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmVhICs9IHRoaXMuaXRlbXMuZXEoaSkuZGF0YSgnd2lkdGgnKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFyZWEgPT0gdGhpcy52cCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZHggPSBpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhcmVhID4gdGhpcy52cCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZHggPSAoaSA8IHRoaXMuaXRlbXMubGVuZ3RoLTEpID8gaSsxIDogaTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhcmVhID4gdGhpcy52cCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlUG9zKCh0aGlzLmNvbnRhaW5lci53aWR0aCgpIC0gdGhpcy52cCkgKiAtMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlUG9zKHRoaXMuaXRlbXMuZXEoaWR4KS5kYXRhKCdsZWZ0JykqLTEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLmZvY3VzID0gaWR4O1xyXG5cclxuICAgICAgICAgICAgdGhpcy50cmlnZ2VyKCdmb2N1c2l0ZW0udWsuc2xpZGVyJywgW2lkeCx0aGlzLml0ZW1zLmVxKGlkeCksdGhpc10pO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIG5leHQ6IGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICAgICAgdmFyIGZvY3VzID0gdGhpcy5pdGVtc1t0aGlzLmZvY3VzICsgMV0gPyAodGhpcy5mb2N1cyArIDEpIDogKHRoaXMub3B0aW9ucy5pbmZpbml0ZSA/IDA6dGhpcy5mb2N1cyk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLnVwZGF0ZUZvY3VzKGZvY3VzLCAxKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBwcmV2aW91czogZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgICAgICB2YXIgZm9jdXMgPSB0aGlzLml0ZW1zW3RoaXMuZm9jdXMgLSAxXSA/ICh0aGlzLmZvY3VzIC0gMSkgOiAodGhpcy5vcHRpb25zLmluZmluaXRlID8gKHRoaXMuaXRlbXNbdGhpcy5mb2N1cyAtIDFdID8gdGhpcy5pdGVtcy0xOnRoaXMuaXRlbXMubGVuZ3RoLTEpOnRoaXMuZm9jdXMpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy51cGRhdGVGb2N1cyhmb2N1cywgLTEpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIHN0YXJ0OiBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuc3RvcCgpO1xyXG5cclxuICAgICAgICAgICAgdmFyICR0aGlzID0gdGhpcztcclxuXHJcbiAgICAgICAgICAgIHRoaXMuaW50ZXJ2YWwgPSBzZXRJbnRlcnZhbChmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIGlmICghJHRoaXMuaG92ZXJpbmcpICR0aGlzLm5leHQoKTtcclxuICAgICAgICAgICAgfSwgdGhpcy5vcHRpb25zLmF1dG9wbGF5SW50ZXJ2YWwpO1xyXG5cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBzdG9wOiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuaW50ZXJ2YWwpIGNsZWFySW50ZXJ2YWwodGhpcy5pbnRlcnZhbCk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgaW5maW5pdGU6IGZ1bmN0aW9uKGJhc2VpZHgsIGRpcmVjdGlvbikge1xyXG5cclxuICAgICAgICAgICAgdmFyICR0aGlzID0gdGhpcywgaXRlbSA9IHRoaXMuaXRlbXMuZXEoYmFzZWlkeCksIGksIHogPSBiYXNlaWR4LCBtb3ZlID0gW10sIGFyZWEgPSAwO1xyXG5cclxuICAgICAgICAgICAgaWYgKGRpcmVjdGlvbiA9PSAxKSB7XHJcblxyXG5cclxuICAgICAgICAgICAgICAgIGZvciAoaT0wO2k8dGhpcy5pdGVtcy5sZW5ndGg7aSsrKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh6ICE9IGJhc2VpZHgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXJlYSArPSB0aGlzLml0ZW1zLmVxKHopLmRhdGEoJ3dpZHRoJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vdmUucHVzaCh0aGlzLml0ZW1zLmVxKHopKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChhcmVhID4gdGhpcy52cCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHogPSB6KzEgPT0gdGhpcy5pdGVtcy5sZW5ndGggPyAwOnorMTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAobW92ZS5sZW5ndGgpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgbW92ZS5mb3JFYWNoKGZ1bmN0aW9uKGl0bSl7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbGVmdCA9IGl0ZW0uZGF0YSgnYXJlYScpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaXRtLmNzcyh7J2xlZnQnOiBsZWZ0fSkuZGF0YSh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnbGVmdCcgIDogbGVmdCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdhcmVhJyAgOiAobGVmdCtpdG0uZGF0YSgnd2lkdGgnKSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnY2VudGVyJzogKGxlZnQgLSAoJHRoaXMudnAvMiAtIGl0bS5kYXRhKCdjd2lkdGgnKS8yKSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpdGVtID0gaXRtO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcblxyXG4gICAgICAgICAgICAgICAgZm9yIChpPXRoaXMuaXRlbXMubGVuZ3RoLTE7aSA+LTEgO2ktLSkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBhcmVhICs9IHRoaXMuaXRlbXMuZXEoeikuZGF0YSgnd2lkdGgnKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHogIT0gYmFzZWlkeCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtb3ZlLnB1c2godGhpcy5pdGVtcy5lcSh6KSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoYXJlYSA+IHRoaXMudnApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICB6ID0gei0xID09IC0xID8gdGhpcy5pdGVtcy5sZW5ndGgtMTp6LTE7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKG1vdmUubGVuZ3RoKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIG1vdmUuZm9yRWFjaChmdW5jdGlvbihpdG0pe1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGxlZnQgPSBpdGVtLmRhdGEoJ2xlZnQnKSAtIGl0bS5kYXRhKCd3aWR0aCcpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaXRtLmNzcyh7J2xlZnQnOiBsZWZ0fSkuZGF0YSh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnbGVmdCcgIDogbGVmdCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdhcmVhJyAgOiAobGVmdCtpdG0uZGF0YSgnd2lkdGgnKSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnY2VudGVyJzogKGxlZnQgLSAoJHRoaXMudnAvMiAtIGl0bS5kYXRhKCdjd2lkdGgnKS8yKSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpdGVtID0gaXRtO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgLy8gaGFuZGxlIGRyYWdnaW5nXHJcbiAgICBVSS4kZG9jLm9uKCdtb3VzZW1vdmUudWlraXQuc2xpZGVyIHRvdWNobW92ZS51aWtpdC5zbGlkZXInLCBmdW5jdGlvbihlKSB7XHJcblxyXG4gICAgICAgIGlmIChlLm9yaWdpbmFsRXZlbnQgJiYgZS5vcmlnaW5hbEV2ZW50LnRvdWNoZXMpIHtcclxuICAgICAgICAgICAgZSA9IGUub3JpZ2luYWxFdmVudC50b3VjaGVzWzBdO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGRlbGF5SWRsZSAmJiBNYXRoLmFicyhlLnBhZ2VYIC0gZGVsYXlJZGxlLngpID4gZGVsYXlJZGxlLnRocmVzaG9sZCkge1xyXG5cclxuICAgICAgICAgICAgaWYgKCF3aW5kb3cuZ2V0U2VsZWN0aW9uKCkudG9TdHJpbmcoKSkge1xyXG4gICAgICAgICAgICAgICAgZGVsYXlJZGxlKGUpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgZHJhZ2dpbmcgPSBkZWxheUlkbGUgPSBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKCFkcmFnZ2luZykge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgeCwgeERpZmYsIHBvcywgZGlyLCBmb2N1cywgaXRlbSwgbmV4dCwgZGlmZiwgaSwgeiwgaXRtO1xyXG5cclxuICAgICAgICBpZiAoZS5jbGllbnRYIHx8IGUuY2xpZW50WSkge1xyXG4gICAgICAgICAgICB4ID0gZS5jbGllbnRYO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoZS5wYWdlWCB8fCBlLnBhZ2VZKSB7XHJcbiAgICAgICAgICAgIHggPSBlLnBhZ2VYIC0gZG9jdW1lbnQuYm9keS5zY3JvbGxMZWZ0IC0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbExlZnQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmb2N1cyA9IHN0b3JlLmZvY3VzO1xyXG4gICAgICAgIHhEaWZmID0geCAtIGRyYWdnaW5nLmVsZW1lbnQuZGF0YSgncG9pbnRlci1zdGFydCcpLng7XHJcbiAgICAgICAgcG9zICAgPSBkcmFnZ2luZy5lbGVtZW50LmRhdGEoJ3BvaW50ZXItcG9zLXN0YXJ0JykgKyB4RGlmZjtcclxuICAgICAgICBkaXIgICA9IHggPiBkcmFnZ2luZy5lbGVtZW50LmRhdGEoJ3BvaW50ZXItc3RhcnQnKS54ID8gLTE6MTtcclxuICAgICAgICBpdGVtICA9IGRyYWdnaW5nLml0ZW1zLmVxKHN0b3JlLmZvY3VzKTtcclxuXHJcbiAgICAgICAgaWYgKGRpciA9PSAxKSB7XHJcblxyXG4gICAgICAgICAgICBkaWZmID0gaXRlbS5kYXRhKCdsZWZ0JykgKyBNYXRoLmFicyh4RGlmZik7XHJcblxyXG4gICAgICAgICAgICBmb3IgKGk9MCx6PXN0b3JlLmZvY3VzO2k8ZHJhZ2dpbmcuaXRlbXMubGVuZ3RoO2krKykge1xyXG5cclxuICAgICAgICAgICAgICAgIGl0bSA9IGRyYWdnaW5nLml0ZW1zLmVxKHopO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICh6ICE9IHN0b3JlLmZvY3VzICYmIGl0bS5kYXRhKCdsZWZ0JykgPCBkaWZmICYmIGl0bS5kYXRhKCdhcmVhJykgPiBkaWZmKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9jdXMgPSB6O1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHogPSB6KzEgPT0gZHJhZ2dpbmcuaXRlbXMubGVuZ3RoID8gMDp6KzE7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfSBlbHNlIHtcclxuXHJcbiAgICAgICAgICAgIGRpZmYgPSBpdGVtLmRhdGEoJ2xlZnQnKSAtIE1hdGguYWJzKHhEaWZmKTtcclxuXHJcbiAgICAgICAgICAgIGZvciAoaT0wLHo9c3RvcmUuZm9jdXM7aTxkcmFnZ2luZy5pdGVtcy5sZW5ndGg7aSsrKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgaXRtID0gZHJhZ2dpbmcuaXRlbXMuZXEoeik7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHogIT0gc3RvcmUuZm9jdXMgJiYgaXRtLmRhdGEoJ2FyZWEnKSA8PSBpdGVtLmRhdGEoJ2xlZnQnKSAmJiBpdG0uZGF0YSgnY2VudGVyJykgPCBkaWZmKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9jdXMgPSB6O1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHogPSB6LTEgPT0gLTEgPyBkcmFnZ2luZy5pdGVtcy5sZW5ndGgtMTp6LTE7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChkcmFnZ2luZy5vcHRpb25zLmluZmluaXRlICYmIGZvY3VzIT1zdG9yZS5fZm9jdXMpIHtcclxuICAgICAgICAgICAgZHJhZ2dpbmcuaW5maW5pdGUoZm9jdXMsIGRpcik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBkcmFnZ2luZy51cGRhdGVQb3MocG9zKTtcclxuXHJcbiAgICAgICAgc3RvcmUuZGlyICAgICA9IGRpcjtcclxuICAgICAgICBzdG9yZS5fZm9jdXMgID0gZm9jdXM7XHJcbiAgICAgICAgc3RvcmUudG91Y2h4ICA9IHBhcnNlSW50KGUucGFnZVgsIDEwKTtcclxuICAgICAgICBzdG9yZS5kaWZmICAgID0gZGlmZjtcclxuICAgIH0pO1xyXG5cclxuICAgIFVJLiRkb2Mub24oJ21vdXNldXAudWlraXQuc2xpZGVyIHRvdWNoZW5kLnVpa2l0LnNsaWRlcicsIGZ1bmN0aW9uKGUpIHtcclxuXHJcbiAgICAgICAgaWYgKGRyYWdnaW5nKSB7XHJcblxyXG4gICAgICAgICAgICBkcmFnZ2luZy5jb250YWluZXIucmVtb3ZlQ2xhc3MoJ3VrLWRyYWcnKTtcclxuXHJcbiAgICAgICAgICAgIC8vIFRPRE8gaXMgdGhpcyBuZWVkZWQ/XHJcbiAgICAgICAgICAgIGRyYWdnaW5nLml0ZW1zLmVxKHN0b3JlLmZvY3VzKTtcclxuXHJcbiAgICAgICAgICAgIHZhciBpdG0sIGZvY3VzID0gZmFsc2UsIGksIHo7XHJcblxyXG4gICAgICAgICAgICBpZiAoc3RvcmUuZGlyID09IDEpIHtcclxuXHJcbiAgICAgICAgICAgICAgICBmb3IgKGk9MCx6PXN0b3JlLmZvY3VzO2k8ZHJhZ2dpbmcuaXRlbXMubGVuZ3RoO2krKykge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpdG0gPSBkcmFnZ2luZy5pdGVtcy5lcSh6KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHogIT0gc3RvcmUuZm9jdXMgJiYgaXRtLmRhdGEoJ2xlZnQnKSA+IHN0b3JlLmRpZmYpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9jdXMgPSB6O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHogPSB6KzEgPT0gZHJhZ2dpbmcuaXRlbXMubGVuZ3RoID8gMDp6KzE7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG5cclxuICAgICAgICAgICAgICAgIGZvciAoaT0wLHo9c3RvcmUuZm9jdXM7aTxkcmFnZ2luZy5pdGVtcy5sZW5ndGg7aSsrKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGl0bSA9IGRyYWdnaW5nLml0ZW1zLmVxKHopO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoeiAhPSBzdG9yZS5mb2N1cyAmJiBpdG0uZGF0YSgnbGVmdCcpIDwgc3RvcmUuZGlmZikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb2N1cyA9IHo7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgeiA9IHotMSA9PSAtMSA/IGRyYWdnaW5nLml0ZW1zLmxlbmd0aC0xOnotMTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZHJhZ2dpbmcudXBkYXRlRm9jdXMoZm9jdXMhPT1mYWxzZSA/IGZvY3VzOnN0b3JlLl9mb2N1cyk7XHJcblxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZHJhZ2dpbmcgPSBkZWxheUlkbGUgPSBmYWxzZTtcclxuICAgIH0pO1xyXG5cclxuICAgIHJldHVybiBVSS5zbGlkZXI7XHJcbn0pO1xyXG4vKiEgVUlraXQgMi4yNC4yIHwgaHR0cDovL3d3dy5nZXR1aWtpdC5jb20gfCAoYykgMjAxNCBZT090aGVtZSB8IE1JVCBMaWNlbnNlICovXHJcbihmdW5jdGlvbihhZGRvbikge1xyXG5cclxuICAgIHZhciBjb21wb25lbnQ7XHJcblxyXG4gICAgaWYgKHdpbmRvdy5VSWtpdCkge1xyXG4gICAgICAgIGNvbXBvbmVudCA9IGFkZG9uKFVJa2l0KTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAodHlwZW9mIGRlZmluZSA9PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCkgeyAvLyBBTURcclxuICAgICAgICBkZWZpbmUoXCJ1aWtpdC1saWdodGJveFwiLCBbXCJ1aWtpdFwiXSwgZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgcmV0dXJuIGNvbXBvbmVudCB8fCBhZGRvbihVSWtpdCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG59KShmdW5jdGlvbihVSSl7XHJcblxyXG4gICAgXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG4gICAgdmFyIG1vZGFsLCBjYWNoZSA9IHt9O1xyXG5cclxuICAgIFVJLmNvbXBvbmVudCgnbGlnaHRib3gnLCB7XHJcblxyXG4gICAgICAgIGRlZmF1bHRzOiB7XHJcbiAgICAgICAgICAgIFwiZ3JvdXBcIiAgICAgIDogZmFsc2UsXHJcbiAgICAgICAgICAgIFwiZHVyYXRpb25cIiAgIDogNDAwLFxyXG4gICAgICAgICAgICBcImtleWJvYXJkXCIgICA6IHRydWVcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBpbmRleCA6IDAsXHJcbiAgICAgICAgaXRlbXMgOiBmYWxzZSxcclxuXHJcbiAgICAgICAgYm9vdDogZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgICAgICBVSS4kaHRtbC5vbignY2xpY2snLCAnW2RhdGEtdWstbGlnaHRib3hdJywgZnVuY3Rpb24oZSl7XHJcblxyXG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuICAgICAgICAgICAgICAgIHZhciBsaW5rID0gVUkuJCh0aGlzKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoIWxpbmsuZGF0YShcImxpZ2h0Ym94XCIpKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIFVJLmxpZ2h0Ym94KGxpbmssIFVJLlV0aWxzLm9wdGlvbnMobGluay5hdHRyKFwiZGF0YS11ay1saWdodGJveFwiKSkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGxpbmsuZGF0YShcImxpZ2h0Ym94XCIpLnNob3cobGluayk7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgLy8ga2V5Ym9hcmQgbmF2aWdhdGlvblxyXG4gICAgICAgICAgICBVSS4kZG9jLm9uKCdrZXl1cCcsIGZ1bmN0aW9uKGUpIHtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAobW9kYWwgJiYgbW9kYWwuaXMoJzp2aXNpYmxlJykgJiYgbW9kYWwubGlnaHRib3gub3B0aW9ucy5rZXlib2FyZCkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaChlLmtleUNvZGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAzNzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGFsLmxpZ2h0Ym94LnByZXZpb3VzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAzOTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGFsLmxpZ2h0Ym94Lm5leHQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgaW5pdDogZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgICAgICB2YXIgc2libGluZ3MgPSBbXTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuaW5kZXggICAgPSAwO1xyXG4gICAgICAgICAgICB0aGlzLnNpYmxpbmdzID0gW107XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5lbGVtZW50ICYmIHRoaXMuZWxlbWVudC5sZW5ndGgpIHtcclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgZG9tU2libGluZ3MgID0gdGhpcy5vcHRpb25zLmdyb3VwID8gVUkuJChbXHJcbiAgICAgICAgICAgICAgICAgICAgJ1tkYXRhLXVrLWxpZ2h0Ym94Kj1cIicrdGhpcy5vcHRpb25zLmdyb3VwKydcIl0nLFxyXG4gICAgICAgICAgICAgICAgICAgIFwiW2RhdGEtdWstbGlnaHRib3gqPSdcIit0aGlzLm9wdGlvbnMuZ3JvdXArXCInXVwiXHJcbiAgICAgICAgICAgICAgICBdLmpvaW4oJywnKSkgOiB0aGlzLmVsZW1lbnQ7XHJcblxyXG4gICAgICAgICAgICAgICAgZG9tU2libGluZ3MuZWFjaChmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGVsZSA9IFVJLiQodGhpcyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHNpYmxpbmdzLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAnc291cmNlJzogZWxlLmF0dHIoJ2hyZWYnKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ3RpdGxlJyA6IGVsZS5hdHRyKCd0aXRsZScpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAndHlwZScgIDogZWxlLmF0dHIoXCJkYXRhLWxpZ2h0Ym94LXR5cGVcIikgfHwgJ2F1dG8nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAnbGluaycgIDogZWxlXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICB0aGlzLmluZGV4ICAgID0gZG9tU2libGluZ3MuaW5kZXgodGhpcy5lbGVtZW50KTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2libGluZ3MgPSBzaWJsaW5ncztcclxuXHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5vcHRpb25zLmdyb3VwICYmIHRoaXMub3B0aW9ucy5ncm91cC5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2libGluZ3MgPSB0aGlzLm9wdGlvbnMuZ3JvdXA7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMudHJpZ2dlcignbGlnaHRib3gtaW5pdCcsIFt0aGlzXSk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgc2hvdzogZnVuY3Rpb24oaW5kZXgpIHtcclxuXHJcbiAgICAgICAgICAgIHRoaXMubW9kYWwgPSBnZXRNb2RhbCh0aGlzKTtcclxuXHJcbiAgICAgICAgICAgIC8vIHN0b3AgcHJldmlvdXMgYW5pbWF0aW9uXHJcbiAgICAgICAgICAgIHRoaXMubW9kYWwuZGlhbG9nLnN0b3AoKTtcclxuICAgICAgICAgICAgdGhpcy5tb2RhbC5jb250ZW50LnN0b3AoKTtcclxuXHJcbiAgICAgICAgICAgIHZhciAkdGhpcyA9IHRoaXMsIHByb21pc2UgPSBVSS4kLkRlZmVycmVkKCksIGRhdGEsIGl0ZW07XHJcblxyXG4gICAgICAgICAgICBpbmRleCA9IGluZGV4IHx8IDA7XHJcblxyXG4gICAgICAgICAgICAvLyBpbmRleCBpcyBhIGpRdWVyeSBvYmplY3Qgb3IgRE9NIGVsZW1lbnRcclxuICAgICAgICAgICAgaWYgKHR5cGVvZihpbmRleCkgPT0gJ29iamVjdCcpIHtcclxuXHJcbiAgICAgICAgICAgICAgICB0aGlzLnNpYmxpbmdzLmZvckVhY2goZnVuY3Rpb24ocywgaWR4KXtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGluZGV4WzBdID09PSBzLmxpbmtbMF0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXggPSBpZHg7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIGZpeCBpbmRleCBpZiBuZWVkZWRcclxuICAgICAgICAgICAgaWYgKCBpbmRleCA8IDAgKSB7XHJcbiAgICAgICAgICAgICAgICBpbmRleCA9IHRoaXMuc2libGluZ3MubGVuZ3RoIC0gaW5kZXg7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoIXRoaXMuc2libGluZ3NbaW5kZXhdKSB7XHJcbiAgICAgICAgICAgICAgICBpbmRleCA9IDA7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGl0ZW0gICA9IHRoaXMuc2libGluZ3NbaW5kZXhdO1xyXG5cclxuICAgICAgICAgICAgZGF0YSA9IHtcclxuICAgICAgICAgICAgICAgIFwibGlnaHRib3hcIiA6ICR0aGlzLFxyXG4gICAgICAgICAgICAgICAgXCJzb3VyY2VcIiAgIDogaXRlbS5zb3VyY2UsXHJcbiAgICAgICAgICAgICAgICBcInR5cGVcIiAgICAgOiBpdGVtLnR5cGUsXHJcbiAgICAgICAgICAgICAgICBcImluZGV4XCIgICAgOiBpbmRleCxcclxuICAgICAgICAgICAgICAgIFwicHJvbWlzZVwiICA6IHByb21pc2UsXHJcbiAgICAgICAgICAgICAgICBcInRpdGxlXCIgICAgOiBpdGVtLnRpdGxlLFxyXG4gICAgICAgICAgICAgICAgXCJpdGVtXCIgICAgIDogaXRlbSxcclxuICAgICAgICAgICAgICAgIFwibWV0YVwiICAgICA6IHtcclxuICAgICAgICAgICAgICAgICAgICBcImNvbnRlbnRcIiA6ICcnLFxyXG4gICAgICAgICAgICAgICAgICAgIFwid2lkdGhcIiAgIDogbnVsbCxcclxuICAgICAgICAgICAgICAgICAgICBcImhlaWdodFwiICA6IG51bGxcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuaW5kZXggPSBpbmRleDtcclxuXHJcbiAgICAgICAgICAgIHRoaXMubW9kYWwuY29udGVudC5lbXB0eSgpO1xyXG5cclxuICAgICAgICAgICAgaWYgKCF0aGlzLm1vZGFsLmlzKCc6dmlzaWJsZScpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm1vZGFsLmNvbnRlbnQuY3NzKHt3aWR0aDonJywgaGVpZ2h0OicnfSkuZW1wdHkoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMubW9kYWwubW9kYWwuc2hvdygpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLm1vZGFsLmxvYWRlci5yZW1vdmVDbGFzcygndWstaGlkZGVuJyk7XHJcblxyXG4gICAgICAgICAgICBwcm9taXNlLnByb21pc2UoKS5kb25lKGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICAgICAgICAgICR0aGlzLmRhdGEgPSBkYXRhO1xyXG4gICAgICAgICAgICAgICAgJHRoaXMuZml0U2l6ZShkYXRhKTtcclxuXHJcbiAgICAgICAgICAgIH0pLmZhaWwoZnVuY3Rpb24oKXtcclxuXHJcbiAgICAgICAgICAgICAgICBkYXRhLm1ldGEuY29udGVudCA9ICc8ZGl2IGNsYXNzPVwidWstcG9zaXRpb24tY292ZXIgdWstZmxleCB1ay1mbGV4LW1pZGRsZSB1ay1mbGV4LWNlbnRlclwiPjxzdHJvbmc+TG9hZGluZyByZXNvdXJjZSBmYWlsZWQhPC9zdHJvbmc+PC9kaXY+JztcclxuICAgICAgICAgICAgICAgIGRhdGEubWV0YS53aWR0aCAgID0gNDAwO1xyXG4gICAgICAgICAgICAgICAgZGF0YS5tZXRhLmhlaWdodCAgPSAzMDA7XHJcblxyXG4gICAgICAgICAgICAgICAgJHRoaXMuZGF0YSA9IGRhdGE7XHJcbiAgICAgICAgICAgICAgICAkdGhpcy5maXRTaXplKGRhdGEpO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICR0aGlzLnRyaWdnZXIoJ3Nob3dpdGVtLnVrLmxpZ2h0Ym94JywgW2RhdGFdKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBmaXRTaXplOiBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgICAgIHZhciAkdGhpcyAgICA9IHRoaXMsXHJcbiAgICAgICAgICAgICAgICBkYXRhICAgICA9IHRoaXMuZGF0YSxcclxuICAgICAgICAgICAgICAgIHBhZCAgICAgID0gdGhpcy5tb2RhbC5kaWFsb2cub3V0ZXJXaWR0aCgpIC0gdGhpcy5tb2RhbC5kaWFsb2cud2lkdGgoKSxcclxuICAgICAgICAgICAgICAgIGRwYWRUb3AgID0gcGFyc2VJbnQodGhpcy5tb2RhbC5kaWFsb2cuY3NzKCdtYXJnaW4tdG9wJyksIDEwKSxcclxuICAgICAgICAgICAgICAgIGRwYWRCb3QgID0gcGFyc2VJbnQodGhpcy5tb2RhbC5kaWFsb2cuY3NzKCdtYXJnaW4tYm90dG9tJyksIDEwKSxcclxuICAgICAgICAgICAgICAgIGRwYWQgICAgID0gZHBhZFRvcCArIGRwYWRCb3QsXHJcbiAgICAgICAgICAgICAgICBjb250ZW50ICA9IGRhdGEubWV0YS5jb250ZW50LFxyXG4gICAgICAgICAgICAgICAgZHVyYXRpb24gPSAkdGhpcy5vcHRpb25zLmR1cmF0aW9uO1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMuc2libGluZ3MubGVuZ3RoID4gMSkge1xyXG5cclxuICAgICAgICAgICAgICAgIGNvbnRlbnQgPSBbXHJcbiAgICAgICAgICAgICAgICAgICAgY29udGVudCxcclxuICAgICAgICAgICAgICAgICAgICAnPGEgaHJlZj1cIiNcIiBjbGFzcz1cInVrLXNsaWRlbmF2IHVrLXNsaWRlbmF2LWNvbnRyYXN0IHVrLXNsaWRlbmF2LXByZXZpb3VzIHVrLWhpZGRlbi10b3VjaFwiIGRhdGEtbGlnaHRib3gtcHJldmlvdXM+PC9hPicsXHJcbiAgICAgICAgICAgICAgICAgICAgJzxhIGhyZWY9XCIjXCIgY2xhc3M9XCJ1ay1zbGlkZW5hdiB1ay1zbGlkZW5hdi1jb250cmFzdCB1ay1zbGlkZW5hdi1uZXh0IHVrLWhpZGRlbi10b3VjaFwiIGRhdGEtbGlnaHRib3gtbmV4dD48L2E+J1xyXG4gICAgICAgICAgICAgICAgXS5qb2luKCcnKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gY2FsY3VsYXRlIHdpZHRoXHJcbiAgICAgICAgICAgIHZhciB0bXAgPSBVSS4kKCc8ZGl2PiZuYnNwOzwvZGl2PicpLmNzcyh7XHJcbiAgICAgICAgICAgICAgICAnb3BhY2l0eScgICA6IDAsXHJcbiAgICAgICAgICAgICAgICAncG9zaXRpb24nICA6ICdhYnNvbHV0ZScsXHJcbiAgICAgICAgICAgICAgICAndG9wJyAgICAgICA6IDAsXHJcbiAgICAgICAgICAgICAgICAnbGVmdCcgICAgICA6IDAsXHJcbiAgICAgICAgICAgICAgICAnd2lkdGgnICAgICA6ICcxMDAlJyxcclxuICAgICAgICAgICAgICAgICdtYXgtd2lkdGgnIDogJHRoaXMubW9kYWwuZGlhbG9nLmNzcygnbWF4LXdpZHRoJyksXHJcbiAgICAgICAgICAgICAgICAncGFkZGluZycgICA6ICR0aGlzLm1vZGFsLmRpYWxvZy5jc3MoJ3BhZGRpbmcnKSxcclxuICAgICAgICAgICAgICAgICdtYXJnaW4nICAgIDogJHRoaXMubW9kYWwuZGlhbG9nLmNzcygnbWFyZ2luJylcclxuICAgICAgICAgICAgfSksIG1heHdpZHRoLCBtYXhoZWlnaHQsIHcgPSBkYXRhLm1ldGEud2lkdGgsIGggPSBkYXRhLm1ldGEuaGVpZ2h0O1xyXG5cclxuICAgICAgICAgICAgdG1wLmFwcGVuZFRvKCdib2R5Jykud2lkdGgoKTtcclxuXHJcbiAgICAgICAgICAgIG1heHdpZHRoICA9IHRtcC53aWR0aCgpO1xyXG4gICAgICAgICAgICBtYXhoZWlnaHQgPSB3aW5kb3cuaW5uZXJIZWlnaHQgLSBkcGFkO1xyXG5cclxuICAgICAgICAgICAgdG1wLnJlbW92ZSgpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5tb2RhbC5kaWFsb2cuZmluZCgnLnVrLW1vZGFsLWNhcHRpb24nKS5yZW1vdmUoKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChkYXRhLnRpdGxlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm1vZGFsLmRpYWxvZy5hcHBlbmQoJzxkaXYgY2xhc3M9XCJ1ay1tb2RhbC1jYXB0aW9uXCI+JytkYXRhLnRpdGxlKyc8L2Rpdj4nKTtcclxuICAgICAgICAgICAgICAgIG1heGhlaWdodCAtPSB0aGlzLm1vZGFsLmRpYWxvZy5maW5kKCcudWstbW9kYWwtY2FwdGlvbicpLm91dGVySGVpZ2h0KCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChtYXh3aWR0aCA8IGRhdGEubWV0YS53aWR0aCkge1xyXG5cclxuICAgICAgICAgICAgICAgIGggPSBNYXRoLmZsb29yKCBoICogKG1heHdpZHRoIC8gdykgKTtcclxuICAgICAgICAgICAgICAgIHcgPSBtYXh3aWR0aDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKG1heGhlaWdodCA8IGgpIHtcclxuXHJcbiAgICAgICAgICAgICAgICBoID0gTWF0aC5mbG9vcihtYXhoZWlnaHQpO1xyXG4gICAgICAgICAgICAgICAgdyA9IE1hdGguY2VpbChkYXRhLm1ldGEud2lkdGggKiAobWF4aGVpZ2h0L2RhdGEubWV0YS5oZWlnaHQpKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5tb2RhbC5jb250ZW50LmNzcygnb3BhY2l0eScsIDApLndpZHRoKHcpLmh0bWwoY29udGVudCk7XHJcblxyXG4gICAgICAgICAgICBpZiAoZGF0YS50eXBlID09ICdpZnJhbWUnKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm1vZGFsLmNvbnRlbnQuZmluZCgnaWZyYW1lOmZpcnN0JykuaGVpZ2h0KGgpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB2YXIgZGggICA9IGggKyBwYWQsXHJcbiAgICAgICAgICAgICAgICB0ICAgID0gTWF0aC5mbG9vcih3aW5kb3cuaW5uZXJIZWlnaHQvMiAtIGRoLzIpIC0gZHBhZDtcclxuXHJcbiAgICAgICAgICAgIGlmICh0IDwgMCkgeyB0ID0gMDsgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5tb2RhbC5jbG9zZXIuYWRkQ2xhc3MoJ3VrLWhpZGRlbicpO1xyXG5cclxuICAgICAgICAgICAgaWYgKCR0aGlzLm1vZGFsLmRhdGEoJ213aWR0aCcpID09IHcgJiYgICR0aGlzLm1vZGFsLmRhdGEoJ21oZWlnaHQnKSA9PSBoKSB7XHJcbiAgICAgICAgICAgICAgICBkdXJhdGlvbiA9IDA7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMubW9kYWwuZGlhbG9nLmFuaW1hdGUoe3dpZHRoOiB3ICsgcGFkLCBoZWlnaHQ6IGggKyBwYWQsIHRvcDogdCB9LCBkdXJhdGlvbiwgJ3N3aW5nJywgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAkdGhpcy5tb2RhbC5sb2FkZXIuYWRkQ2xhc3MoJ3VrLWhpZGRlbicpO1xyXG4gICAgICAgICAgICAgICAgJHRoaXMubW9kYWwuY29udGVudC5jc3Moe3dpZHRoOicnfSkuYW5pbWF0ZSh7J29wYWNpdHknOiAxfSwgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHRoaXMubW9kYWwuY2xvc2VyLnJlbW92ZUNsYXNzKCd1ay1oaWRkZW4nKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgICR0aGlzLm1vZGFsLmRhdGEoeydtd2lkdGgnOiB3LCAnbWhlaWdodCc6IGh9KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgbmV4dDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2hvdyh0aGlzLnNpYmxpbmdzWyh0aGlzLmluZGV4KzEpXSA/ICh0aGlzLmluZGV4KzEpIDogMCk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgcHJldmlvdXM6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICB0aGlzLnNob3codGhpcy5zaWJsaW5nc1sodGhpcy5pbmRleC0xKV0gPyAodGhpcy5pbmRleC0xKSA6IHRoaXMuc2libGluZ3MubGVuZ3RoLTEpO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuXHJcbiAgICAvLyBQbHVnaW5zXHJcblxyXG4gICAgVUkucGx1Z2luKCdsaWdodGJveCcsICdpbWFnZScsIHtcclxuXHJcbiAgICAgICAgaW5pdDogZnVuY3Rpb24obGlnaHRib3gpIHtcclxuXHJcbiAgICAgICAgICAgIGxpZ2h0Ym94Lm9uKFwic2hvd2l0ZW0udWsubGlnaHRib3hcIiwgZnVuY3Rpb24oZSwgZGF0YSl7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGRhdGEudHlwZSA9PSAnaW1hZ2UnIHx8IGRhdGEuc291cmNlICYmIGRhdGEuc291cmNlLm1hdGNoKC9cXC4oanBnfGpwZWd8cG5nfGdpZnxzdmcpJC9pKSkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB2YXIgcmVzb2x2ZSA9IGZ1bmN0aW9uKHNvdXJjZSwgd2lkdGgsIGhlaWdodCkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5tZXRhID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJjb250ZW50XCIgOiAnPGltZyBjbGFzcz1cInVrLXJlc3BvbnNpdmUtd2lkdGhcIiB3aWR0aD1cIicrd2lkdGgrJ1wiIGhlaWdodD1cIicraGVpZ2h0KydcIiBzcmMgPVwiJytzb3VyY2UrJ1wiPicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIndpZHRoXCIgICA6IHdpZHRoLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJoZWlnaHRcIiAgOiBoZWlnaHRcclxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEudHlwZSA9ICdpbWFnZSc7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhLnByb21pc2UucmVzb2x2ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghY2FjaGVbZGF0YS5zb3VyY2VdKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaW1nID0gbmV3IEltYWdlKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbWcub25lcnJvciA9IGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLnByb21pc2UucmVqZWN0KCdMb2FkaW5nIGltYWdlIGZhaWxlZCcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaW1nLm9ubG9hZCA9IGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWNoZVtkYXRhLnNvdXJjZV0gPSB7d2lkdGg6IGltZy53aWR0aCwgaGVpZ2h0OiBpbWcuaGVpZ2h0fTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoZGF0YS5zb3VyY2UsIGNhY2hlW2RhdGEuc291cmNlXS53aWR0aCwgY2FjaGVbZGF0YS5zb3VyY2VdLmhlaWdodCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbWcuc3JjID0gZGF0YS5zb3VyY2U7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoZGF0YS5zb3VyY2UsIGNhY2hlW2RhdGEuc291cmNlXS53aWR0aCwgY2FjaGVbZGF0YS5zb3VyY2VdLmhlaWdodCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICBVSS5wbHVnaW4oXCJsaWdodGJveFwiLCBcInlvdXR1YmVcIiwge1xyXG5cclxuICAgICAgICBpbml0OiBmdW5jdGlvbihsaWdodGJveCkge1xyXG5cclxuICAgICAgICAgICAgdmFyIHlvdXR1YmVSZWdFeHAgPSAvKFxcL1xcLy4qP3lvdXR1YmVcXC5bYS16XSspXFwvd2F0Y2hcXD92PShbXiZdKykmPyguKikvLFxyXG4gICAgICAgICAgICAgICAgeW91dHViZVJlZ0V4cFNob3J0ID0gL3lvdXR1XFwuYmVcXC8oLiopLztcclxuXHJcblxyXG4gICAgICAgICAgICBsaWdodGJveC5vbihcInNob3dpdGVtLnVrLmxpZ2h0Ym94XCIsIGZ1bmN0aW9uKGUsIGRhdGEpe1xyXG5cclxuICAgICAgICAgICAgICAgIHZhciBpZCwgbWF0Y2hlcywgcmVzb2x2ZSA9IGZ1bmN0aW9uKGlkLCB3aWR0aCwgaGVpZ2h0KSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGRhdGEubWV0YSA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ2NvbnRlbnQnOiAnPGlmcmFtZSBzcmM9XCIvL3d3dy55b3V0dWJlLmNvbS9lbWJlZC8nK2lkKydcIiB3aWR0aD1cIicrd2lkdGgrJ1wiIGhlaWdodD1cIicraGVpZ2h0KydcIiBzdHlsZT1cIm1heC13aWR0aDoxMDAlO1wiPjwvaWZyYW1lPicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICd3aWR0aCc6IHdpZHRoLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAnaGVpZ2h0JzogaGVpZ2h0XHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgZGF0YS50eXBlID0gJ2lmcmFtZSc7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGRhdGEucHJvbWlzZS5yZXNvbHZlKCk7XHJcbiAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChtYXRjaGVzID0gZGF0YS5zb3VyY2UubWF0Y2goeW91dHViZVJlZ0V4cCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZCA9IG1hdGNoZXNbMl07XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKG1hdGNoZXMgPSBkYXRhLnNvdXJjZS5tYXRjaCh5b3V0dWJlUmVnRXhwU2hvcnQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWQgPSBtYXRjaGVzWzFdO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmIChpZCkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZighY2FjaGVbaWRdKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaW1nID0gbmV3IEltYWdlKCksIGxvd3JlcyA9IGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaW1nLm9uZXJyb3IgPSBmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FjaGVbaWRdID0ge3dpZHRoOjY0MCwgaGVpZ2h0OjMyMH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKGlkLCBjYWNoZVtpZF0ud2lkdGgsIGNhY2hlW2lkXS5oZWlnaHQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaW1nLm9ubG9hZCA9IGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL3lvdXR1YmUgZGVmYXVsdCA0MDQgdGh1bWIsIGZhbGwgYmFjayB0byBsb3dyZXNcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbWcud2lkdGggPT0gMTIwICYmIGltZy5oZWlnaHQgPT0gOTApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWxvd3Jlcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb3dyZXMgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbWcuc3JjID0gJy8vaW1nLnlvdXR1YmUuY29tL3ZpLycgKyBpZCArICcvMC5qcGcnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhY2hlW2lkXSA9IHt3aWR0aDogNjQwLCBoZWlnaHQ6IDMyMH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoaWQsIGNhY2hlW2lkXS53aWR0aCwgY2FjaGVbaWRdLmhlaWdodCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWNoZVtpZF0gPSB7d2lkdGg6IGltZy53aWR0aCwgaGVpZ2h0OiBpbWcuaGVpZ2h0fTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKGlkLCBpbWcud2lkdGgsIGltZy5oZWlnaHQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaW1nLnNyYyA9ICcvL2ltZy55b3V0dWJlLmNvbS92aS8nK2lkKycvbWF4cmVzZGVmYXVsdC5qcGcnO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKGlkLCBjYWNoZVtpZF0ud2lkdGgsIGNhY2hlW2lkXS5oZWlnaHQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG5cclxuICAgIFVJLnBsdWdpbihcImxpZ2h0Ym94XCIsIFwidmltZW9cIiwge1xyXG5cclxuICAgICAgICBpbml0OiBmdW5jdGlvbihsaWdodGJveCkge1xyXG5cclxuICAgICAgICAgICAgdmFyIHJlZ2V4ID0gLyhcXC9cXC8uKj8pdmltZW9cXC5bYS16XStcXC8oWzAtOV0rKS4qPy8sIG1hdGNoZXM7XHJcblxyXG5cclxuICAgICAgICAgICAgbGlnaHRib3gub24oXCJzaG93aXRlbS51ay5saWdodGJveFwiLCBmdW5jdGlvbihlLCBkYXRhKXtcclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgaWQsIHJlc29sdmUgPSBmdW5jdGlvbihpZCwgd2lkdGgsIGhlaWdodCkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBkYXRhLm1ldGEgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICdjb250ZW50JzogJzxpZnJhbWUgc3JjPVwiLy9wbGF5ZXIudmltZW8uY29tL3ZpZGVvLycraWQrJ1wiIHdpZHRoPVwiJyt3aWR0aCsnXCIgaGVpZ2h0PVwiJytoZWlnaHQrJ1wiIHN0eWxlPVwid2lkdGg6MTAwJTtib3gtc2l6aW5nOmJvcmRlci1ib3g7XCI+PC9pZnJhbWU+JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ3dpZHRoJzogd2lkdGgsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICdoZWlnaHQnOiBoZWlnaHRcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBkYXRhLnR5cGUgPSAnaWZyYW1lJztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5wcm9taXNlLnJlc29sdmUoKTtcclxuICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKG1hdGNoZXMgPSBkYXRhLnNvdXJjZS5tYXRjaChyZWdleCkpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWQgPSBtYXRjaGVzWzJdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZighY2FjaGVbaWRdKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBVSS4kLmFqYXgoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZSAgICAgOiAnR0VUJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybCAgICAgIDogJ2h0dHA6Ly92aW1lby5jb20vYXBpL29lbWJlZC5qc29uP3VybD0nICsgZW5jb2RlVVJJKGRhdGEuc291cmNlKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpzb25wICAgIDogJ2NhbGxiYWNrJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFUeXBlIDogJ2pzb25wJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3MgIDogZnVuY3Rpb24oZGF0YSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhY2hlW2lkXSA9IHt3aWR0aDpkYXRhLndpZHRoLCBoZWlnaHQ6ZGF0YS5oZWlnaHR9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoaWQsIGNhY2hlW2lkXS53aWR0aCwgY2FjaGVbaWRdLmhlaWdodCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKGlkLCBjYWNoZVtpZF0ud2lkdGgsIGNhY2hlW2lkXS5oZWlnaHQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgVUkucGx1Z2luKFwibGlnaHRib3hcIiwgXCJ2aWRlb1wiLCB7XHJcblxyXG4gICAgICAgIGluaXQ6IGZ1bmN0aW9uKGxpZ2h0Ym94KSB7XHJcblxyXG4gICAgICAgICAgICBsaWdodGJveC5vbihcInNob3dpdGVtLnVrLmxpZ2h0Ym94XCIsIGZ1bmN0aW9uKGUsIGRhdGEpe1xyXG5cclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgcmVzb2x2ZSA9IGZ1bmN0aW9uKHNvdXJjZSwgd2lkdGgsIGhlaWdodCkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBkYXRhLm1ldGEgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICdjb250ZW50JzogJzx2aWRlbyBjbGFzcz1cInVrLXJlc3BvbnNpdmUtd2lkdGhcIiBzcmM9XCInK3NvdXJjZSsnXCIgd2lkdGg9XCInK3dpZHRoKydcIiBoZWlnaHQ9XCInK2hlaWdodCsnXCIgY29udHJvbHM+PC92aWRlbz4nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAnd2lkdGgnOiB3aWR0aCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ2hlaWdodCc6IGhlaWdodFxyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGRhdGEudHlwZSA9ICd2aWRlbyc7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGRhdGEucHJvbWlzZS5yZXNvbHZlKCk7XHJcbiAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChkYXRhLnR5cGUgPT0gJ3ZpZGVvJyB8fCBkYXRhLnNvdXJjZS5tYXRjaCgvXFwuKG1wNHx3ZWJtfG9ndikkL2kpKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghY2FjaGVbZGF0YS5zb3VyY2VdKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdmlkID0gVUkuJCgnPHZpZGVvIHN0eWxlPVwicG9zaXRpb246Zml4ZWQ7dmlzaWJpbGl0eTpoaWRkZW47dG9wOi0xMDAwMHB4O1wiPjwvdmlkZW8+JykuYXR0cignc3JjJywgZGF0YS5zb3VyY2UpLmFwcGVuZFRvKCdib2R5Jyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaWRsZSA9IHNldEludGVydmFsKGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2aWRbMF0udmlkZW9XaWR0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwoaWRsZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FjaGVbZGF0YS5zb3VyY2VdID0ge3dpZHRoOiB2aWRbMF0udmlkZW9XaWR0aCwgaGVpZ2h0OiB2aWRbMF0udmlkZW9IZWlnaHR9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoZGF0YS5zb3VyY2UsIGNhY2hlW2RhdGEuc291cmNlXS53aWR0aCwgY2FjaGVbZGF0YS5zb3VyY2VdLmhlaWdodCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmlkLnJlbW92ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgMjApO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKGRhdGEuc291cmNlLCBjYWNoZVtkYXRhLnNvdXJjZV0ud2lkdGgsIGNhY2hlW2RhdGEuc291cmNlXS5oZWlnaHQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG5cclxuICAgIGZ1bmN0aW9uIGdldE1vZGFsKGxpZ2h0Ym94KSB7XHJcblxyXG4gICAgICAgIGlmIChtb2RhbCkge1xyXG4gICAgICAgICAgICBtb2RhbC5saWdodGJveCA9IGxpZ2h0Ym94O1xyXG4gICAgICAgICAgICByZXR1cm4gbW9kYWw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBpbml0IGxpZ2h0Ym94IGNvbnRhaW5lclxyXG4gICAgICAgIG1vZGFsID0gVUkuJChbXHJcbiAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwidWstbW9kYWxcIj4nLFxyXG4gICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJ1ay1tb2RhbC1kaWFsb2cgdWstbW9kYWwtZGlhbG9nLWxpZ2h0Ym94IHVrLXNsaWRlbmF2LXBvc2l0aW9uXCIgc3R5bGU9XCJtYXJnaW4tbGVmdDphdXRvO21hcmdpbi1yaWdodDphdXRvO3dpZHRoOjIwMHB4O2hlaWdodDoyMDBweDt0b3A6JytNYXRoLmFicyh3aW5kb3cuaW5uZXJIZWlnaHQvMiAtIDIwMCkrJ3B4O1wiPicsXHJcbiAgICAgICAgICAgICAgICAgICAgJzxhIGhyZWY9XCIjXCIgY2xhc3M9XCJ1ay1tb2RhbC1jbG9zZSB1ay1jbG9zZSB1ay1jbG9zZS1hbHRcIj48L2E+JyxcclxuICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cInVrLWxpZ2h0Ym94LWNvbnRlbnRcIj48L2Rpdj4nLFxyXG4gICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwidWstbW9kYWwtc3Bpbm5lciB1ay1oaWRkZW5cIj48L2Rpdj4nLFxyXG4gICAgICAgICAgICAgICAgJzwvZGl2PicsXHJcbiAgICAgICAgICAgICc8L2Rpdj4nXHJcbiAgICAgICAgXS5qb2luKCcnKSkuYXBwZW5kVG8oJ2JvZHknKTtcclxuXHJcbiAgICAgICAgbW9kYWwuZGlhbG9nICA9IG1vZGFsLmZpbmQoJy51ay1tb2RhbC1kaWFsb2c6Zmlyc3QnKTtcclxuICAgICAgICBtb2RhbC5jb250ZW50ID0gbW9kYWwuZmluZCgnLnVrLWxpZ2h0Ym94LWNvbnRlbnQ6Zmlyc3QnKTtcclxuICAgICAgICBtb2RhbC5sb2FkZXIgID0gbW9kYWwuZmluZCgnLnVrLW1vZGFsLXNwaW5uZXI6Zmlyc3QnKTtcclxuICAgICAgICBtb2RhbC5jbG9zZXIgID0gbW9kYWwuZmluZCgnLnVrLWNsb3NlLnVrLWNsb3NlLWFsdCcpO1xyXG4gICAgICAgIG1vZGFsLm1vZGFsICAgPSBVSS5tb2RhbChtb2RhbCwge21vZGFsOmZhbHNlfSk7XHJcblxyXG4gICAgICAgIC8vIG5leHQgLyBwcmV2aW91c1xyXG4gICAgICAgIG1vZGFsLm9uKFwic3dpcGVSaWdodCBzd2lwZUxlZnRcIiwgZnVuY3Rpb24oZSkge1xyXG4gICAgICAgICAgICBtb2RhbC5saWdodGJveFtlLnR5cGU9PSdzd2lwZUxlZnQnID8gJ25leHQnOidwcmV2aW91cyddKCk7XHJcbiAgICAgICAgfSkub24oXCJjbGlja1wiLCBcIltkYXRhLWxpZ2h0Ym94LXByZXZpb3VzXSwgW2RhdGEtbGlnaHRib3gtbmV4dF1cIiwgZnVuY3Rpb24oZSl7XHJcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgbW9kYWwubGlnaHRib3hbVUkuJCh0aGlzKS5pcygnW2RhdGEtbGlnaHRib3gtbmV4dF0nKSA/ICduZXh0JzoncHJldmlvdXMnXSgpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvLyBkZXN0cm95IGNvbnRlbnQgb24gbW9kYWwgaGlkZVxyXG4gICAgICAgIG1vZGFsLm9uKFwiaGlkZS51ay5tb2RhbFwiLCBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgICAgIG1vZGFsLmNvbnRlbnQuaHRtbCgnJyk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIFVJLiR3aW4ub24oJ2xvYWQgcmVzaXplIG9yaWVudGF0aW9uY2hhbmdlJywgVUkuVXRpbHMuZGVib3VuY2UoZnVuY3Rpb24oZSl7XHJcbiAgICAgICAgICAgIGlmIChtb2RhbC5pcygnOnZpc2libGUnKSAmJiAhVUkuVXRpbHMuaXNGdWxsc2NyZWVuKCkpIG1vZGFsLmxpZ2h0Ym94LmZpdFNpemUoKTtcclxuICAgICAgICB9LmJpbmQodGhpcyksIDEwMCkpO1xyXG5cclxuICAgICAgICBtb2RhbC5saWdodGJveCA9IGxpZ2h0Ym94O1xyXG5cclxuICAgICAgICByZXR1cm4gbW9kYWw7XHJcbiAgICB9XHJcblxyXG4gICAgVUkubGlnaHRib3guY3JlYXRlID0gZnVuY3Rpb24oaXRlbXMsIG9wdGlvbnMpIHtcclxuXHJcbiAgICAgICAgaWYgKCFpdGVtcykgcmV0dXJuO1xyXG5cclxuICAgICAgICB2YXIgZ3JvdXAgPSBbXSwgbztcclxuXHJcbiAgICAgICAgaXRlbXMuZm9yRWFjaChmdW5jdGlvbihpdGVtKSB7XHJcblxyXG4gICAgICAgICAgICBncm91cC5wdXNoKFVJLiQuZXh0ZW5kKHtcclxuICAgICAgICAgICAgICAgICdzb3VyY2UnIDogJycsXHJcbiAgICAgICAgICAgICAgICAndGl0bGUnICA6ICcnLFxyXG4gICAgICAgICAgICAgICAgJ3R5cGUnICAgOiAnYXV0bycsXHJcbiAgICAgICAgICAgICAgICAnbGluaycgICA6IGZhbHNlXHJcbiAgICAgICAgICAgIH0sICh0eXBlb2YoaXRlbSkgPT0gJ3N0cmluZycgPyB7J3NvdXJjZSc6IGl0ZW19IDogaXRlbSkpKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgbyA9IFVJLmxpZ2h0Ym94KFVJLiQuZXh0ZW5kKHt9LCBvcHRpb25zLCB7J2dyb3VwJzpncm91cH0pKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIG87XHJcbiAgICB9O1xyXG5cclxuICAgIHJldHVybiBVSS5saWdodGJveDtcclxufSk7XHJcbi8qISBVSWtpdCAyLjI0LjIgfCBodHRwOi8vd3d3LmdldHVpa2l0LmNvbSB8IChjKSAyMDE0IFlPT3RoZW1lIHwgTUlUIExpY2Vuc2UgKi9cclxuKGZ1bmN0aW9uKGFkZG9uKSB7XHJcbiAgICB2YXIgY29tcG9uZW50O1xyXG5cclxuICAgIGlmICh3aW5kb3cuVUlraXQpIHtcclxuICAgICAgICBjb21wb25lbnQgPSBhZGRvbihVSWtpdCk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHR5cGVvZiBkZWZpbmUgPT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQpIHtcclxuICAgICAgICBkZWZpbmUoXCJ1aWtpdC1hY2NvcmRpb25cIiwgW1widWlraXRcIl0sIGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgIHJldHVybiBjb21wb25lbnQgfHwgYWRkb24oVUlraXQpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59KShmdW5jdGlvbihVSSl7XHJcblxyXG4gICAgXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG4gICAgVUkuY29tcG9uZW50KCdhY2NvcmRpb24nLCB7XHJcblxyXG4gICAgICAgIGRlZmF1bHRzOiB7XHJcbiAgICAgICAgICAgIHNob3dmaXJzdCAgOiB0cnVlLFxyXG4gICAgICAgICAgICBjb2xsYXBzZSAgIDogdHJ1ZSxcclxuICAgICAgICAgICAgYW5pbWF0ZSAgICA6IHRydWUsXHJcbiAgICAgICAgICAgIGVhc2luZyAgICAgOiAnc3dpbmcnLFxyXG4gICAgICAgICAgICBkdXJhdGlvbiAgIDogMzAwLFxyXG4gICAgICAgICAgICB0b2dnbGUgICAgIDogJy51ay1hY2NvcmRpb24tdGl0bGUnLFxyXG4gICAgICAgICAgICBjb250YWluZXJzIDogJy51ay1hY2NvcmRpb24tY29udGVudCcsXHJcbiAgICAgICAgICAgIGNsc2FjdGl2ZSAgOiAndWstYWN0aXZlJ1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGJvb3Q6ICBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgICAgIC8vIGluaXQgY29kZVxyXG4gICAgICAgICAgICBVSS5yZWFkeShmdW5jdGlvbihjb250ZXh0KSB7XHJcblxyXG4gICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpe1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBVSS4kKFwiW2RhdGEtdWstYWNjb3JkaW9uXVwiLCBjb250ZXh0KS5lYWNoKGZ1bmN0aW9uKCl7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZWxlID0gVUkuJCh0aGlzKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCFlbGUuZGF0YShcImFjY29yZGlvblwiKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgVUkuYWNjb3JkaW9uKGVsZSwgVUkuVXRpbHMub3B0aW9ucyhlbGUuYXR0cignZGF0YS11ay1hY2NvcmRpb24nKSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgfSwgMCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGluaXQ6IGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICAgICAgdmFyICR0aGlzID0gdGhpcztcclxuXHJcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudC5vbignY2xpY2sudWlraXQuYWNjb3JkaW9uJywgdGhpcy5vcHRpb25zLnRvZ2dsZSwgZnVuY3Rpb24oZSkge1xyXG5cclxuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAkdGhpcy50b2dnbGVJdGVtKFVJLiQodGhpcykuZGF0YSgnd3JhcHBlcicpLCAkdGhpcy5vcHRpb25zLmFuaW1hdGUsICR0aGlzLm9wdGlvbnMuY29sbGFwc2UpO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMudXBkYXRlKCk7XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLnNob3dmaXJzdCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy50b2dnbGVJdGVtKHRoaXMudG9nZ2xlLmVxKDApLmRhdGEoJ3dyYXBwZXInKSwgZmFsc2UsIGZhbHNlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIHRvZ2dsZUl0ZW06IGZ1bmN0aW9uKHdyYXBwZXIsIGFuaW1hdGVkLCBjb2xsYXBzZSkge1xyXG5cclxuICAgICAgICAgICAgdmFyICR0aGlzID0gdGhpcztcclxuXHJcbiAgICAgICAgICAgIHdyYXBwZXIuZGF0YSgndG9nZ2xlJykudG9nZ2xlQ2xhc3ModGhpcy5vcHRpb25zLmNsc2FjdGl2ZSk7XHJcbiAgICAgICAgICAgIHdyYXBwZXIuZGF0YSgnY29udGVudCcpLnRvZ2dsZUNsYXNzKHRoaXMub3B0aW9ucy5jbHNhY3RpdmUpO1xyXG5cclxuICAgICAgICAgICAgdmFyIGFjdGl2ZSA9IHdyYXBwZXIuZGF0YSgndG9nZ2xlJykuaGFzQ2xhc3ModGhpcy5vcHRpb25zLmNsc2FjdGl2ZSk7XHJcblxyXG4gICAgICAgICAgICBpZiAoY29sbGFwc2UpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMudG9nZ2xlLm5vdCh3cmFwcGVyLmRhdGEoJ3RvZ2dsZScpKS5yZW1vdmVDbGFzcyh0aGlzLm9wdGlvbnMuY2xzYWN0aXZlKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuY29udGVudC5ub3Qod3JhcHBlci5kYXRhKCdjb250ZW50JykpLnJlbW92ZUNsYXNzKHRoaXMub3B0aW9ucy5jbHNhY3RpdmUpXHJcbiAgICAgICAgICAgICAgICAgICAgLnBhcmVudCgpLnN0b3AoKS5jc3MoJ292ZXJmbG93JywgJ2hpZGRlbicpLmFuaW1hdGUoeyBoZWlnaHQ6IDAgfSwge2Vhc2luZzogdGhpcy5vcHRpb25zLmVhc2luZywgZHVyYXRpb246IGFuaW1hdGVkID8gdGhpcy5vcHRpb25zLmR1cmF0aW9uIDogMH0pLmF0dHIoJ2FyaWEtZXhwYW5kZWQnLCAnZmFsc2UnKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgd3JhcHBlci5zdG9wKCkuY3NzKCdvdmVyZmxvdycsICdoaWRkZW4nKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChhbmltYXRlZCkge1xyXG5cclxuICAgICAgICAgICAgICAgIHdyYXBwZXIuYW5pbWF0ZSh7IGhlaWdodDogYWN0aXZlID8gZ2V0SGVpZ2h0KHdyYXBwZXIuZGF0YSgnY29udGVudCcpKSA6IDAgfSwge2Vhc2luZzogdGhpcy5vcHRpb25zLmVhc2luZywgZHVyYXRpb246IHRoaXMub3B0aW9ucy5kdXJhdGlvbiwgY29tcGxldGU6IGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoYWN0aXZlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdyYXBwZXIuY3NzKHsnb3ZlcmZsb3cnOiAnJywgJ2hlaWdodCc6ICdhdXRvJ30pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBVSS5VdGlscy5jaGVja0Rpc3BsYXkod3JhcHBlci5kYXRhKCdjb250ZW50JykpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgJHRoaXMudHJpZ2dlcignZGlzcGxheS51ay5jaGVjaycpO1xyXG4gICAgICAgICAgICAgICAgfX0pO1xyXG5cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuXHJcbiAgICAgICAgICAgICAgICB3cmFwcGVyLmhlaWdodChhY3RpdmUgPyAnYXV0bycgOiAwKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoYWN0aXZlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgd3JhcHBlci5jc3MoeydvdmVyZmxvdyc6ICcnfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgVUkuVXRpbHMuY2hlY2tEaXNwbGF5KHdyYXBwZXIuZGF0YSgnY29udGVudCcpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB0aGlzLnRyaWdnZXIoJ2Rpc3BsYXkudWsuY2hlY2snKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gVXBkYXRlIEFSSUFcclxuICAgICAgICAgICAgd3JhcHBlci5hdHRyKCdhcmlhLWV4cGFuZGVkJywgYWN0aXZlKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudC50cmlnZ2VyKCd0b2dnbGUudWsuYWNjb3JkaW9uJywgW2FjdGl2ZSwgd3JhcHBlci5kYXRhKCd0b2dnbGUnKSwgd3JhcHBlci5kYXRhKCdjb250ZW50JyldKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICB1cGRhdGU6IGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICAgICAgdmFyICR0aGlzID0gdGhpcywgJGNvbnRlbnQsICR3cmFwcGVyLCAkdG9nZ2xlO1xyXG5cclxuICAgICAgICAgICAgdGhpcy50b2dnbGUgPSB0aGlzLmZpbmQodGhpcy5vcHRpb25zLnRvZ2dsZSk7XHJcbiAgICAgICAgICAgIHRoaXMuY29udGVudCA9IHRoaXMuZmluZCh0aGlzLm9wdGlvbnMuY29udGFpbmVycyk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLmNvbnRlbnQuZWFjaChmdW5jdGlvbihpbmRleCkge1xyXG5cclxuICAgICAgICAgICAgICAgICRjb250ZW50ID0gVUkuJCh0aGlzKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoJGNvbnRlbnQucGFyZW50KCkuZGF0YSgnd3JhcHBlcicpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHdyYXBwZXIgPSAkY29udGVudC5wYXJlbnQoKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHdyYXBwZXIgPSBVSS4kKHRoaXMpLndyYXAoJzxkaXYgZGF0YS13cmFwcGVyPVwidHJ1ZVwiIHN0eWxlPVwib3ZlcmZsb3c6aGlkZGVuO2hlaWdodDowO3Bvc2l0aW9uOnJlbGF0aXZlO1wiPjwvZGl2PicpLnBhcmVudCgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyBJbml0IEFSSUFcclxuICAgICAgICAgICAgICAgICAgICAkd3JhcHBlci5hdHRyKCdhcmlhLWV4cGFuZGVkJywgJ2ZhbHNlJyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgJHRvZ2dsZSA9ICR0aGlzLnRvZ2dsZS5lcShpbmRleCk7XHJcblxyXG4gICAgICAgICAgICAgICAgJHdyYXBwZXIuZGF0YSgndG9nZ2xlJywgJHRvZ2dsZSk7XHJcbiAgICAgICAgICAgICAgICAkd3JhcHBlci5kYXRhKCdjb250ZW50JywgJGNvbnRlbnQpO1xyXG4gICAgICAgICAgICAgICAgJHRvZ2dsZS5kYXRhKCd3cmFwcGVyJywgJHdyYXBwZXIpO1xyXG4gICAgICAgICAgICAgICAgJGNvbnRlbnQuZGF0YSgnd3JhcHBlcicsICR3cmFwcGVyKTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLmVsZW1lbnQudHJpZ2dlcigndXBkYXRlLnVrLmFjY29yZGlvbicsIFt0aGlzXSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgIH0pO1xyXG5cclxuICAgIC8vIGhlbHBlclxyXG5cclxuICAgIGZ1bmN0aW9uIGdldEhlaWdodChlbGUpIHtcclxuXHJcbiAgICAgICAgdmFyICRlbGUgPSBVSS4kKGVsZSksIGhlaWdodCA9IFwiYXV0b1wiO1xyXG5cclxuICAgICAgICBpZiAoJGVsZS5pcyhcIjp2aXNpYmxlXCIpKSB7XHJcbiAgICAgICAgICAgIGhlaWdodCA9ICRlbGUub3V0ZXJIZWlnaHQoKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG5cclxuICAgICAgICAgICAgdmFyIHRtcCA9IHtcclxuICAgICAgICAgICAgICAgIHBvc2l0aW9uICAgOiAkZWxlLmNzcyhcInBvc2l0aW9uXCIpLFxyXG4gICAgICAgICAgICAgICAgdmlzaWJpbGl0eSA6ICRlbGUuY3NzKFwidmlzaWJpbGl0eVwiKSxcclxuICAgICAgICAgICAgICAgIGRpc3BsYXkgICAgOiAkZWxlLmNzcyhcImRpc3BsYXlcIilcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIGhlaWdodCA9ICRlbGUuY3NzKHtwb3NpdGlvbjogJ2Fic29sdXRlJywgdmlzaWJpbGl0eTogJ2hpZGRlbicsIGRpc3BsYXk6ICdibG9jayd9KS5vdXRlckhlaWdodCgpO1xyXG5cclxuICAgICAgICAgICAgJGVsZS5jc3ModG1wKTsgLy8gcmVzZXQgZWxlbWVudFxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGhlaWdodDtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gVUkuYWNjb3JkaW9uO1xyXG59KTtcclxuLyohXHJcbiAqIENoYXJ0LmpzXHJcbiAqIGh0dHA6Ly9jaGFydGpzLm9yZy9cclxuICogVmVyc2lvbjogMS4wLjJcclxuICpcclxuICogQ29weXJpZ2h0IDIwMTUgTmljayBEb3duaWVcclxuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlXHJcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9ubm5pY2svQ2hhcnQuanMvYmxvYi9tYXN0ZXIvTElDRU5TRS5tZFxyXG4gKi9cclxuKGZ1bmN0aW9uKCl7XCJ1c2Ugc3RyaWN0XCI7dmFyIHQ9dGhpcyxpPXQuQ2hhcnQsZT1mdW5jdGlvbih0KXt0aGlzLmNhbnZhcz10LmNhbnZhcyx0aGlzLmN0eD10O3ZhciBpPWZ1bmN0aW9uKHQsaSl7cmV0dXJuIHRbXCJvZmZzZXRcIitpXT90W1wib2Zmc2V0XCIraV06ZG9jdW1lbnQuZGVmYXVsdFZpZXcuZ2V0Q29tcHV0ZWRTdHlsZSh0KS5nZXRQcm9wZXJ0eVZhbHVlKGkpfSxlPXRoaXMud2lkdGg9aSh0LmNhbnZhcyxcIldpZHRoXCIpLG49dGhpcy5oZWlnaHQ9aSh0LmNhbnZhcyxcIkhlaWdodFwiKTt0LmNhbnZhcy53aWR0aD1lLHQuY2FudmFzLmhlaWdodD1uO3ZhciBlPXRoaXMud2lkdGg9dC5jYW52YXMud2lkdGgsbj10aGlzLmhlaWdodD10LmNhbnZhcy5oZWlnaHQ7cmV0dXJuIHRoaXMuYXNwZWN0UmF0aW89dGhpcy53aWR0aC90aGlzLmhlaWdodCxzLnJldGluYVNjYWxlKHRoaXMpLHRoaXN9O2UuZGVmYXVsdHM9e2dsb2JhbDp7YW5pbWF0aW9uOiEwLGFuaW1hdGlvblN0ZXBzOjYwLGFuaW1hdGlvbkVhc2luZzpcImVhc2VPdXRRdWFydFwiLHNob3dTY2FsZTohMCxzY2FsZU92ZXJyaWRlOiExLHNjYWxlU3RlcHM6bnVsbCxzY2FsZVN0ZXBXaWR0aDpudWxsLHNjYWxlU3RhcnRWYWx1ZTpudWxsLHNjYWxlTGluZUNvbG9yOlwicmdiYSgwLDAsMCwuMSlcIixzY2FsZUxpbmVXaWR0aDoxLHNjYWxlU2hvd0xhYmVsczohMCxzY2FsZUxhYmVsOlwiPCU9dmFsdWUlPlwiLHNjYWxlSW50ZWdlcnNPbmx5OiEwLHNjYWxlQmVnaW5BdFplcm86ITEsc2NhbGVGb250RmFtaWx5OlwiJ0hlbHZldGljYSBOZXVlJywgJ0hlbHZldGljYScsICdBcmlhbCcsIHNhbnMtc2VyaWZcIixzY2FsZUZvbnRTaXplOjEyLHNjYWxlRm9udFN0eWxlOlwibm9ybWFsXCIsc2NhbGVGb250Q29sb3I6XCIjNjY2XCIscmVzcG9uc2l2ZTohMSxtYWludGFpbkFzcGVjdFJhdGlvOiEwLHNob3dUb29sdGlwczohMCxjdXN0b21Ub29sdGlwczohMSx0b29sdGlwRXZlbnRzOltcIm1vdXNlbW92ZVwiLFwidG91Y2hzdGFydFwiLFwidG91Y2htb3ZlXCIsXCJtb3VzZW91dFwiXSx0b29sdGlwRmlsbENvbG9yOlwicmdiYSgwLDAsMCwwLjgpXCIsdG9vbHRpcEZvbnRGYW1pbHk6XCInSGVsdmV0aWNhIE5ldWUnLCAnSGVsdmV0aWNhJywgJ0FyaWFsJywgc2Fucy1zZXJpZlwiLHRvb2x0aXBGb250U2l6ZToxNCx0b29sdGlwRm9udFN0eWxlOlwibm9ybWFsXCIsdG9vbHRpcEZvbnRDb2xvcjpcIiNmZmZcIix0b29sdGlwVGl0bGVGb250RmFtaWx5OlwiJ0hlbHZldGljYSBOZXVlJywgJ0hlbHZldGljYScsICdBcmlhbCcsIHNhbnMtc2VyaWZcIix0b29sdGlwVGl0bGVGb250U2l6ZToxNCx0b29sdGlwVGl0bGVGb250U3R5bGU6XCJib2xkXCIsdG9vbHRpcFRpdGxlRm9udENvbG9yOlwiI2ZmZlwiLHRvb2x0aXBZUGFkZGluZzo2LHRvb2x0aXBYUGFkZGluZzo2LHRvb2x0aXBDYXJldFNpemU6OCx0b29sdGlwQ29ybmVyUmFkaXVzOjYsdG9vbHRpcFhPZmZzZXQ6MTAsdG9vbHRpcFRlbXBsYXRlOlwiPCVpZiAobGFiZWwpeyU+PCU9bGFiZWwlPjogPCV9JT48JT0gdmFsdWUgJT5cIixtdWx0aVRvb2x0aXBUZW1wbGF0ZTpcIjwlPSB2YWx1ZSAlPlwiLG11bHRpVG9vbHRpcEtleUJhY2tncm91bmQ6XCIjZmZmXCIsb25BbmltYXRpb25Qcm9ncmVzczpmdW5jdGlvbigpe30sb25BbmltYXRpb25Db21wbGV0ZTpmdW5jdGlvbigpe319fSxlLnR5cGVzPXt9O3ZhciBzPWUuaGVscGVycz17fSxuPXMuZWFjaD1mdW5jdGlvbih0LGksZSl7dmFyIHM9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLDMpO2lmKHQpaWYodC5sZW5ndGg9PT0rdC5sZW5ndGgpe3ZhciBuO2ZvcihuPTA7bjx0Lmxlbmd0aDtuKyspaS5hcHBseShlLFt0W25dLG5dLmNvbmNhdChzKSl9ZWxzZSBmb3IodmFyIG8gaW4gdClpLmFwcGx5KGUsW3Rbb10sb10uY29uY2F0KHMpKX0sbz1zLmNsb25lPWZ1bmN0aW9uKHQpe3ZhciBpPXt9O3JldHVybiBuKHQsZnVuY3Rpb24oZSxzKXt0Lmhhc093blByb3BlcnR5KHMpJiYoaVtzXT1lKX0pLGl9LGE9cy5leHRlbmQ9ZnVuY3Rpb24odCl7cmV0dXJuIG4oQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLDEpLGZ1bmN0aW9uKGkpe24oaSxmdW5jdGlvbihlLHMpe2kuaGFzT3duUHJvcGVydHkocykmJih0W3NdPWUpfSl9KSx0fSxoPXMubWVyZ2U9ZnVuY3Rpb24oKXt2YXIgdD1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsMCk7cmV0dXJuIHQudW5zaGlmdCh7fSksYS5hcHBseShudWxsLHQpfSxsPXMuaW5kZXhPZj1mdW5jdGlvbih0LGkpe2lmKEFycmF5LnByb3RvdHlwZS5pbmRleE9mKXJldHVybiB0LmluZGV4T2YoaSk7Zm9yKHZhciBlPTA7ZTx0Lmxlbmd0aDtlKyspaWYodFtlXT09PWkpcmV0dXJuIGU7cmV0dXJuLTF9LHI9KHMud2hlcmU9ZnVuY3Rpb24odCxpKXt2YXIgZT1bXTtyZXR1cm4gcy5lYWNoKHQsZnVuY3Rpb24odCl7aSh0KSYmZS5wdXNoKHQpfSksZX0scy5maW5kTmV4dFdoZXJlPWZ1bmN0aW9uKHQsaSxlKXtlfHwoZT0tMSk7Zm9yKHZhciBzPWUrMTtzPHQubGVuZ3RoO3MrKyl7dmFyIG49dFtzXTtpZihpKG4pKXJldHVybiBufX0scy5maW5kUHJldmlvdXNXaGVyZT1mdW5jdGlvbih0LGksZSl7ZXx8KGU9dC5sZW5ndGgpO2Zvcih2YXIgcz1lLTE7cz49MDtzLS0pe3ZhciBuPXRbc107aWYoaShuKSlyZXR1cm4gbn19LHMuaW5oZXJpdHM9ZnVuY3Rpb24odCl7dmFyIGk9dGhpcyxlPXQmJnQuaGFzT3duUHJvcGVydHkoXCJjb25zdHJ1Y3RvclwiKT90LmNvbnN0cnVjdG9yOmZ1bmN0aW9uKCl7cmV0dXJuIGkuYXBwbHkodGhpcyxhcmd1bWVudHMpfSxzPWZ1bmN0aW9uKCl7dGhpcy5jb25zdHJ1Y3Rvcj1lfTtyZXR1cm4gcy5wcm90b3R5cGU9aS5wcm90b3R5cGUsZS5wcm90b3R5cGU9bmV3IHMsZS5leHRlbmQ9cix0JiZhKGUucHJvdG90eXBlLHQpLGUuX19zdXBlcl9fPWkucHJvdG90eXBlLGV9KSxjPXMubm9vcD1mdW5jdGlvbigpe30sdT1zLnVpZD1mdW5jdGlvbigpe3ZhciB0PTA7cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuXCJjaGFydC1cIit0Kyt9fSgpLGQ9cy53YXJuPWZ1bmN0aW9uKHQpe3dpbmRvdy5jb25zb2xlJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiB3aW5kb3cuY29uc29sZS53YXJuJiZjb25zb2xlLndhcm4odCl9LHA9cy5hbWQ9XCJmdW5jdGlvblwiPT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kLGY9cy5pc051bWJlcj1mdW5jdGlvbih0KXtyZXR1cm4haXNOYU4ocGFyc2VGbG9hdCh0KSkmJmlzRmluaXRlKHQpfSxnPXMubWF4PWZ1bmN0aW9uKHQpe3JldHVybiBNYXRoLm1heC5hcHBseShNYXRoLHQpfSxtPXMubWluPWZ1bmN0aW9uKHQpe3JldHVybiBNYXRoLm1pbi5hcHBseShNYXRoLHQpfSx2PShzLmNhcD1mdW5jdGlvbih0LGksZSl7aWYoZihpKSl7aWYodD5pKXJldHVybiBpfWVsc2UgaWYoZihlKSYmZT50KXJldHVybiBlO3JldHVybiB0fSxzLmdldERlY2ltYWxQbGFjZXM9ZnVuY3Rpb24odCl7cmV0dXJuIHQlMSE9PTAmJmYodCk/dC50b1N0cmluZygpLnNwbGl0KFwiLlwiKVsxXS5sZW5ndGg6MH0pLFM9cy5yYWRpYW5zPWZ1bmN0aW9uKHQpe3JldHVybiB0KihNYXRoLlBJLzE4MCl9LHg9KHMuZ2V0QW5nbGVGcm9tUG9pbnQ9ZnVuY3Rpb24odCxpKXt2YXIgZT1pLngtdC54LHM9aS55LXQueSxuPU1hdGguc3FydChlKmUrcypzKSxvPTIqTWF0aC5QSStNYXRoLmF0YW4yKHMsZSk7cmV0dXJuIDA+ZSYmMD5zJiYobys9MipNYXRoLlBJKSx7YW5nbGU6byxkaXN0YW5jZTpufX0scy5hbGlhc1BpeGVsPWZ1bmN0aW9uKHQpe3JldHVybiB0JTI9PT0wPzA6LjV9KSx5PShzLnNwbGluZUN1cnZlPWZ1bmN0aW9uKHQsaSxlLHMpe3ZhciBuPU1hdGguc3FydChNYXRoLnBvdyhpLngtdC54LDIpK01hdGgucG93KGkueS10LnksMikpLG89TWF0aC5zcXJ0KE1hdGgucG93KGUueC1pLngsMikrTWF0aC5wb3coZS55LWkueSwyKSksYT1zKm4vKG4rbyksaD1zKm8vKG4rbyk7cmV0dXJue2lubmVyOnt4OmkueC1hKihlLngtdC54KSx5OmkueS1hKihlLnktdC55KX0sb3V0ZXI6e3g6aS54K2gqKGUueC10LngpLHk6aS55K2gqKGUueS10LnkpfX19LHMuY2FsY3VsYXRlT3JkZXJPZk1hZ25pdHVkZT1mdW5jdGlvbih0KXtyZXR1cm4gTWF0aC5mbG9vcihNYXRoLmxvZyh0KS9NYXRoLkxOMTApfSksQz0ocy5jYWxjdWxhdGVTY2FsZVJhbmdlPWZ1bmN0aW9uKHQsaSxlLHMsbil7dmFyIG89MixhPU1hdGguZmxvb3IoaS8oMS41KmUpKSxoPW8+PWEsbD1nKHQpLHI9bSh0KTtsPT09ciYmKGwrPS41LHI+PS41JiYhcz9yLT0uNTpsKz0uNSk7Zm9yKHZhciBjPU1hdGguYWJzKGwtciksdT15KGMpLGQ9TWF0aC5jZWlsKGwvKDEqTWF0aC5wb3coMTAsdSkpKSpNYXRoLnBvdygxMCx1KSxwPXM/MDpNYXRoLmZsb29yKHIvKDEqTWF0aC5wb3coMTAsdSkpKSpNYXRoLnBvdygxMCx1KSxmPWQtcCx2PU1hdGgucG93KDEwLHUpLFM9TWF0aC5yb3VuZChmL3YpOyhTPmF8fGE+MipTKSYmIWg7KWlmKFM+YSl2Kj0yLFM9TWF0aC5yb3VuZChmL3YpLFMlMSE9PTAmJihoPSEwKTtlbHNlIGlmKG4mJnU+PTApe2lmKHYvMiUxIT09MClicmVhazt2Lz0yLFM9TWF0aC5yb3VuZChmL3YpfWVsc2Ugdi89MixTPU1hdGgucm91bmQoZi92KTtyZXR1cm4gaCYmKFM9byx2PWYvUykse3N0ZXBzOlMsc3RlcFZhbHVlOnYsbWluOnAsbWF4OnArUyp2fX0scy50ZW1wbGF0ZT1mdW5jdGlvbih0LGkpe2Z1bmN0aW9uIGUodCxpKXt2YXIgZT0vXFxXLy50ZXN0KHQpP25ldyBGdW5jdGlvbihcIm9ialwiLFwidmFyIHA9W10scHJpbnQ9ZnVuY3Rpb24oKXtwLnB1c2guYXBwbHkocCxhcmd1bWVudHMpO307d2l0aChvYmope3AucHVzaCgnXCIrdC5yZXBsYWNlKC9bXFxyXFx0XFxuXS9nLFwiIFwiKS5zcGxpdChcIjwlXCIpLmpvaW4oXCJcdFwiKS5yZXBsYWNlKC8oKF58JT4pW15cXHRdKiknL2csXCIkMVxcclwiKS5yZXBsYWNlKC9cXHQ9KC4qPyklPi9nLFwiJywkMSwnXCIpLnNwbGl0KFwiXHRcIikuam9pbihcIicpO1wiKS5zcGxpdChcIiU+XCIpLmpvaW4oXCJwLnB1c2goJ1wiKS5zcGxpdChcIlxcclwiKS5qb2luKFwiXFxcXCdcIikrXCInKTt9cmV0dXJuIHAuam9pbignJyk7XCIpOnNbdF09c1t0XTtyZXR1cm4gaT9lKGkpOmV9aWYodCBpbnN0YW5jZW9mIEZ1bmN0aW9uKXJldHVybiB0KGkpO3ZhciBzPXt9O3JldHVybiBlKHQsaSl9KSx3PShzLmdlbmVyYXRlTGFiZWxzPWZ1bmN0aW9uKHQsaSxlLHMpe3ZhciBvPW5ldyBBcnJheShpKTtyZXR1cm4gbGFiZWxUZW1wbGF0ZVN0cmluZyYmbihvLGZ1bmN0aW9uKGksbil7b1tuXT1DKHQse3ZhbHVlOmUrcyoobisxKX0pfSksb30scy5lYXNpbmdFZmZlY3RzPXtsaW5lYXI6ZnVuY3Rpb24odCl7cmV0dXJuIHR9LGVhc2VJblF1YWQ6ZnVuY3Rpb24odCl7cmV0dXJuIHQqdH0sZWFzZU91dFF1YWQ6ZnVuY3Rpb24odCl7cmV0dXJuLTEqdCoodC0yKX0sZWFzZUluT3V0UXVhZDpmdW5jdGlvbih0KXtyZXR1cm4odC89LjUpPDE/LjUqdCp0Oi0wLjUqKC0tdCoodC0yKS0xKX0sZWFzZUluQ3ViaWM6ZnVuY3Rpb24odCl7cmV0dXJuIHQqdCp0fSxlYXNlT3V0Q3ViaWM6ZnVuY3Rpb24odCl7cmV0dXJuIDEqKCh0PXQvMS0xKSp0KnQrMSl9LGVhc2VJbk91dEN1YmljOmZ1bmN0aW9uKHQpe3JldHVybih0Lz0uNSk8MT8uNSp0KnQqdDouNSooKHQtPTIpKnQqdCsyKX0sZWFzZUluUXVhcnQ6ZnVuY3Rpb24odCl7cmV0dXJuIHQqdCp0KnR9LGVhc2VPdXRRdWFydDpmdW5jdGlvbih0KXtyZXR1cm4tMSooKHQ9dC8xLTEpKnQqdCp0LTEpfSxlYXNlSW5PdXRRdWFydDpmdW5jdGlvbih0KXtyZXR1cm4odC89LjUpPDE/LjUqdCp0KnQqdDotMC41KigodC09MikqdCp0KnQtMil9LGVhc2VJblF1aW50OmZ1bmN0aW9uKHQpe3JldHVybiAxKih0Lz0xKSp0KnQqdCp0fSxlYXNlT3V0UXVpbnQ6ZnVuY3Rpb24odCl7cmV0dXJuIDEqKCh0PXQvMS0xKSp0KnQqdCp0KzEpfSxlYXNlSW5PdXRRdWludDpmdW5jdGlvbih0KXtyZXR1cm4odC89LjUpPDE/LjUqdCp0KnQqdCp0Oi41KigodC09MikqdCp0KnQqdCsyKX0sZWFzZUluU2luZTpmdW5jdGlvbih0KXtyZXR1cm4tMSpNYXRoLmNvcyh0LzEqKE1hdGguUEkvMikpKzF9LGVhc2VPdXRTaW5lOmZ1bmN0aW9uKHQpe3JldHVybiAxKk1hdGguc2luKHQvMSooTWF0aC5QSS8yKSl9LGVhc2VJbk91dFNpbmU6ZnVuY3Rpb24odCl7cmV0dXJuLTAuNSooTWF0aC5jb3MoTWF0aC5QSSp0LzEpLTEpfSxlYXNlSW5FeHBvOmZ1bmN0aW9uKHQpe3JldHVybiAwPT09dD8xOjEqTWF0aC5wb3coMiwxMCoodC8xLTEpKX0sZWFzZU91dEV4cG86ZnVuY3Rpb24odCl7cmV0dXJuIDE9PT10PzE6MSooLU1hdGgucG93KDIsLTEwKnQvMSkrMSl9LGVhc2VJbk91dEV4cG86ZnVuY3Rpb24odCl7cmV0dXJuIDA9PT10PzA6MT09PXQ/MToodC89LjUpPDE/LjUqTWF0aC5wb3coMiwxMCoodC0xKSk6LjUqKC1NYXRoLnBvdygyLC0xMCotLXQpKzIpfSxlYXNlSW5DaXJjOmZ1bmN0aW9uKHQpe3JldHVybiB0Pj0xP3Q6LTEqKE1hdGguc3FydCgxLSh0Lz0xKSp0KS0xKX0sZWFzZU91dENpcmM6ZnVuY3Rpb24odCl7cmV0dXJuIDEqTWF0aC5zcXJ0KDEtKHQ9dC8xLTEpKnQpfSxlYXNlSW5PdXRDaXJjOmZ1bmN0aW9uKHQpe3JldHVybih0Lz0uNSk8MT8tMC41KihNYXRoLnNxcnQoMS10KnQpLTEpOi41KihNYXRoLnNxcnQoMS0odC09MikqdCkrMSl9LGVhc2VJbkVsYXN0aWM6ZnVuY3Rpb24odCl7dmFyIGk9MS43MDE1OCxlPTAscz0xO3JldHVybiAwPT09dD8wOjE9PSh0Lz0xKT8xOihlfHwoZT0uMyksczxNYXRoLmFicygxKT8ocz0xLGk9ZS80KTppPWUvKDIqTWF0aC5QSSkqTWF0aC5hc2luKDEvcyksLShzKk1hdGgucG93KDIsMTAqKHQtPTEpKSpNYXRoLnNpbigyKigxKnQtaSkqTWF0aC5QSS9lKSkpfSxlYXNlT3V0RWxhc3RpYzpmdW5jdGlvbih0KXt2YXIgaT0xLjcwMTU4LGU9MCxzPTE7cmV0dXJuIDA9PT10PzA6MT09KHQvPTEpPzE6KGV8fChlPS4zKSxzPE1hdGguYWJzKDEpPyhzPTEsaT1lLzQpOmk9ZS8oMipNYXRoLlBJKSpNYXRoLmFzaW4oMS9zKSxzKk1hdGgucG93KDIsLTEwKnQpKk1hdGguc2luKDIqKDEqdC1pKSpNYXRoLlBJL2UpKzEpfSxlYXNlSW5PdXRFbGFzdGljOmZ1bmN0aW9uKHQpe3ZhciBpPTEuNzAxNTgsZT0wLHM9MTtyZXR1cm4gMD09PXQ/MDoyPT0odC89LjUpPzE6KGV8fChlPS4zKjEuNSksczxNYXRoLmFicygxKT8ocz0xLGk9ZS80KTppPWUvKDIqTWF0aC5QSSkqTWF0aC5hc2luKDEvcyksMT50Py0uNSpzKk1hdGgucG93KDIsMTAqKHQtPTEpKSpNYXRoLnNpbigyKigxKnQtaSkqTWF0aC5QSS9lKTpzKk1hdGgucG93KDIsLTEwKih0LT0xKSkqTWF0aC5zaW4oMiooMSp0LWkpKk1hdGguUEkvZSkqLjUrMSl9LGVhc2VJbkJhY2s6ZnVuY3Rpb24odCl7dmFyIGk9MS43MDE1ODtyZXR1cm4gMSoodC89MSkqdCooKGkrMSkqdC1pKX0sZWFzZU91dEJhY2s6ZnVuY3Rpb24odCl7dmFyIGk9MS43MDE1ODtyZXR1cm4gMSooKHQ9dC8xLTEpKnQqKChpKzEpKnQraSkrMSl9LGVhc2VJbk91dEJhY2s6ZnVuY3Rpb24odCl7dmFyIGk9MS43MDE1ODtyZXR1cm4odC89LjUpPDE/LjUqdCp0KigoKGkqPTEuNTI1KSsxKSp0LWkpOi41KigodC09MikqdCooKChpKj0xLjUyNSkrMSkqdCtpKSsyKX0sZWFzZUluQm91bmNlOmZ1bmN0aW9uKHQpe3JldHVybiAxLXcuZWFzZU91dEJvdW5jZSgxLXQpfSxlYXNlT3V0Qm91bmNlOmZ1bmN0aW9uKHQpe3JldHVybih0Lz0xKTwxLzIuNzU/Ny41NjI1KnQqdDoyLzIuNzU+dD8xKig3LjU2MjUqKHQtPTEuNS8yLjc1KSp0Ky43NSk6Mi41LzIuNzU+dD8xKig3LjU2MjUqKHQtPTIuMjUvMi43NSkqdCsuOTM3NSk6MSooNy41NjI1Kih0LT0yLjYyNS8yLjc1KSp0Ky45ODQzNzUpfSxlYXNlSW5PdXRCb3VuY2U6ZnVuY3Rpb24odCl7cmV0dXJuLjU+dD8uNSp3LmVhc2VJbkJvdW5jZSgyKnQpOi41KncuZWFzZU91dEJvdW5jZSgyKnQtMSkrLjV9fSksYj1zLnJlcXVlc3RBbmltRnJhbWU9ZnVuY3Rpb24oKXtyZXR1cm4gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZXx8d2luZG93LndlYmtpdFJlcXVlc3RBbmltYXRpb25GcmFtZXx8d2luZG93Lm1velJlcXVlc3RBbmltYXRpb25GcmFtZXx8d2luZG93Lm9SZXF1ZXN0QW5pbWF0aW9uRnJhbWV8fHdpbmRvdy5tc1JlcXVlc3RBbmltYXRpb25GcmFtZXx8ZnVuY3Rpb24odCl7cmV0dXJuIHdpbmRvdy5zZXRUaW1lb3V0KHQsMWUzLzYwKX19KCksUD1zLmNhbmNlbEFuaW1GcmFtZT1mdW5jdGlvbigpe3JldHVybiB3aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWV8fHdpbmRvdy53ZWJraXRDYW5jZWxBbmltYXRpb25GcmFtZXx8d2luZG93Lm1vekNhbmNlbEFuaW1hdGlvbkZyYW1lfHx3aW5kb3cub0NhbmNlbEFuaW1hdGlvbkZyYW1lfHx3aW5kb3cubXNDYW5jZWxBbmltYXRpb25GcmFtZXx8ZnVuY3Rpb24odCl7cmV0dXJuIHdpbmRvdy5jbGVhclRpbWVvdXQodCwxZTMvNjApfX0oKSxMPShzLmFuaW1hdGlvbkxvb3A9ZnVuY3Rpb24odCxpLGUscyxuLG8pe3ZhciBhPTAsaD13W2VdfHx3LmxpbmVhcixsPWZ1bmN0aW9uKCl7YSsrO3ZhciBlPWEvaSxyPWgoZSk7dC5jYWxsKG8scixlLGEpLHMuY2FsbChvLHIsZSksaT5hP28uYW5pbWF0aW9uRnJhbWU9YihsKTpuLmFwcGx5KG8pfTtiKGwpfSxzLmdldFJlbGF0aXZlUG9zaXRpb249ZnVuY3Rpb24odCl7dmFyIGksZSxzPXQub3JpZ2luYWxFdmVudHx8dCxuPXQuY3VycmVudFRhcmdldHx8dC5zcmNFbGVtZW50LG89bi5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtyZXR1cm4gcy50b3VjaGVzPyhpPXMudG91Y2hlc1swXS5jbGllbnRYLW8ubGVmdCxlPXMudG91Y2hlc1swXS5jbGllbnRZLW8udG9wKTooaT1zLmNsaWVudFgtby5sZWZ0LGU9cy5jbGllbnRZLW8udG9wKSx7eDppLHk6ZX19LHMuYWRkRXZlbnQ9ZnVuY3Rpb24odCxpLGUpe3QuYWRkRXZlbnRMaXN0ZW5lcj90LmFkZEV2ZW50TGlzdGVuZXIoaSxlKTp0LmF0dGFjaEV2ZW50P3QuYXR0YWNoRXZlbnQoXCJvblwiK2ksZSk6dFtcIm9uXCIraV09ZX0pLGs9cy5yZW1vdmVFdmVudD1mdW5jdGlvbih0LGksZSl7dC5yZW1vdmVFdmVudExpc3RlbmVyP3QucmVtb3ZlRXZlbnRMaXN0ZW5lcihpLGUsITEpOnQuZGV0YWNoRXZlbnQ/dC5kZXRhY2hFdmVudChcIm9uXCIraSxlKTp0W1wib25cIitpXT1jfSxGPShzLmJpbmRFdmVudHM9ZnVuY3Rpb24odCxpLGUpe3QuZXZlbnRzfHwodC5ldmVudHM9e30pLG4oaSxmdW5jdGlvbihpKXt0LmV2ZW50c1tpXT1mdW5jdGlvbigpe2UuYXBwbHkodCxhcmd1bWVudHMpfSxMKHQuY2hhcnQuY2FudmFzLGksdC5ldmVudHNbaV0pfSl9LHMudW5iaW5kRXZlbnRzPWZ1bmN0aW9uKHQsaSl7bihpLGZ1bmN0aW9uKGksZSl7ayh0LmNoYXJ0LmNhbnZhcyxlLGkpfSl9KSxSPXMuZ2V0TWF4aW11bVdpZHRoPWZ1bmN0aW9uKHQpe3ZhciBpPXQucGFyZW50Tm9kZTtyZXR1cm4gaS5jbGllbnRXaWR0aH0sVD1zLmdldE1heGltdW1IZWlnaHQ9ZnVuY3Rpb24odCl7dmFyIGk9dC5wYXJlbnROb2RlO3JldHVybiBpLmNsaWVudEhlaWdodH0sQT0ocy5nZXRNYXhpbXVtU2l6ZT1zLmdldE1heGltdW1XaWR0aCxzLnJldGluYVNjYWxlPWZ1bmN0aW9uKHQpe3ZhciBpPXQuY3R4LGU9dC5jYW52YXMud2lkdGgscz10LmNhbnZhcy5oZWlnaHQ7d2luZG93LmRldmljZVBpeGVsUmF0aW8mJihpLmNhbnZhcy5zdHlsZS53aWR0aD1lK1wicHhcIixpLmNhbnZhcy5zdHlsZS5oZWlnaHQ9cytcInB4XCIsaS5jYW52YXMuaGVpZ2h0PXMqd2luZG93LmRldmljZVBpeGVsUmF0aW8saS5jYW52YXMud2lkdGg9ZSp3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbyxpLnNjYWxlKHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvLHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvKSl9KSxNPXMuY2xlYXI9ZnVuY3Rpb24odCl7dC5jdHguY2xlYXJSZWN0KDAsMCx0LndpZHRoLHQuaGVpZ2h0KX0sVz1zLmZvbnRTdHJpbmc9ZnVuY3Rpb24odCxpLGUpe3JldHVybiBpK1wiIFwiK3QrXCJweCBcIitlfSx6PXMubG9uZ2VzdFRleHQ9ZnVuY3Rpb24odCxpLGUpe3QuZm9udD1pO3ZhciBzPTA7cmV0dXJuIG4oZSxmdW5jdGlvbihpKXt2YXIgZT10Lm1lYXN1cmVUZXh0KGkpLndpZHRoO3M9ZT5zP2U6c30pLHN9LEI9cy5kcmF3Um91bmRlZFJlY3RhbmdsZT1mdW5jdGlvbih0LGksZSxzLG4sbyl7dC5iZWdpblBhdGgoKSx0Lm1vdmVUbyhpK28sZSksdC5saW5lVG8oaStzLW8sZSksdC5xdWFkcmF0aWNDdXJ2ZVRvKGkrcyxlLGkrcyxlK28pLHQubGluZVRvKGkrcyxlK24tbyksdC5xdWFkcmF0aWNDdXJ2ZVRvKGkrcyxlK24saStzLW8sZStuKSx0LmxpbmVUbyhpK28sZStuKSx0LnF1YWRyYXRpY0N1cnZlVG8oaSxlK24saSxlK24tbyksdC5saW5lVG8oaSxlK28pLHQucXVhZHJhdGljQ3VydmVUbyhpLGUsaStvLGUpLHQuY2xvc2VQYXRoKCl9O2UuaW5zdGFuY2VzPXt9LGUuVHlwZT1mdW5jdGlvbih0LGkscyl7dGhpcy5vcHRpb25zPWksdGhpcy5jaGFydD1zLHRoaXMuaWQ9dSgpLGUuaW5zdGFuY2VzW3RoaXMuaWRdPXRoaXMsaS5yZXNwb25zaXZlJiZ0aGlzLnJlc2l6ZSgpLHRoaXMuaW5pdGlhbGl6ZS5jYWxsKHRoaXMsdCl9LGEoZS5UeXBlLnByb3RvdHlwZSx7aW5pdGlhbGl6ZTpmdW5jdGlvbigpe3JldHVybiB0aGlzfSxjbGVhcjpmdW5jdGlvbigpe3JldHVybiBNKHRoaXMuY2hhcnQpLHRoaXN9LHN0b3A6ZnVuY3Rpb24oKXtyZXR1cm4gUCh0aGlzLmFuaW1hdGlvbkZyYW1lKSx0aGlzfSxyZXNpemU6ZnVuY3Rpb24odCl7dGhpcy5zdG9wKCk7dmFyIGk9dGhpcy5jaGFydC5jYW52YXMsZT1SKHRoaXMuY2hhcnQuY2FudmFzKSxzPXRoaXMub3B0aW9ucy5tYWludGFpbkFzcGVjdFJhdGlvP2UvdGhpcy5jaGFydC5hc3BlY3RSYXRpbzpUKHRoaXMuY2hhcnQuY2FudmFzKTtyZXR1cm4gaS53aWR0aD10aGlzLmNoYXJ0LndpZHRoPWUsaS5oZWlnaHQ9dGhpcy5jaGFydC5oZWlnaHQ9cyxBKHRoaXMuY2hhcnQpLFwiZnVuY3Rpb25cIj09dHlwZW9mIHQmJnQuYXBwbHkodGhpcyxBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsMSkpLHRoaXN9LHJlZmxvdzpjLHJlbmRlcjpmdW5jdGlvbih0KXtyZXR1cm4gdCYmdGhpcy5yZWZsb3coKSx0aGlzLm9wdGlvbnMuYW5pbWF0aW9uJiYhdD9zLmFuaW1hdGlvbkxvb3AodGhpcy5kcmF3LHRoaXMub3B0aW9ucy5hbmltYXRpb25TdGVwcyx0aGlzLm9wdGlvbnMuYW5pbWF0aW9uRWFzaW5nLHRoaXMub3B0aW9ucy5vbkFuaW1hdGlvblByb2dyZXNzLHRoaXMub3B0aW9ucy5vbkFuaW1hdGlvbkNvbXBsZXRlLHRoaXMpOih0aGlzLmRyYXcoKSx0aGlzLm9wdGlvbnMub25BbmltYXRpb25Db21wbGV0ZS5jYWxsKHRoaXMpKSx0aGlzfSxnZW5lcmF0ZUxlZ2VuZDpmdW5jdGlvbigpe3JldHVybiBDKHRoaXMub3B0aW9ucy5sZWdlbmRUZW1wbGF0ZSx0aGlzKX0sZGVzdHJveTpmdW5jdGlvbigpe3RoaXMuY2xlYXIoKSxGKHRoaXMsdGhpcy5ldmVudHMpO3ZhciB0PXRoaXMuY2hhcnQuY2FudmFzO3Qud2lkdGg9dGhpcy5jaGFydC53aWR0aCx0LmhlaWdodD10aGlzLmNoYXJ0LmhlaWdodCx0LnN0eWxlLnJlbW92ZVByb3BlcnR5Pyh0LnN0eWxlLnJlbW92ZVByb3BlcnR5KFwid2lkdGhcIiksdC5zdHlsZS5yZW1vdmVQcm9wZXJ0eShcImhlaWdodFwiKSk6KHQuc3R5bGUucmVtb3ZlQXR0cmlidXRlKFwid2lkdGhcIiksdC5zdHlsZS5yZW1vdmVBdHRyaWJ1dGUoXCJoZWlnaHRcIikpLGRlbGV0ZSBlLmluc3RhbmNlc1t0aGlzLmlkXX0sc2hvd1Rvb2x0aXA6ZnVuY3Rpb24odCxpKXtcInVuZGVmaW5lZFwiPT10eXBlb2YgdGhpcy5hY3RpdmVFbGVtZW50cyYmKHRoaXMuYWN0aXZlRWxlbWVudHM9W10pO3ZhciBvPWZ1bmN0aW9uKHQpe3ZhciBpPSExO3JldHVybiB0Lmxlbmd0aCE9PXRoaXMuYWN0aXZlRWxlbWVudHMubGVuZ3RoP2k9ITA6KG4odCxmdW5jdGlvbih0LGUpe3QhPT10aGlzLmFjdGl2ZUVsZW1lbnRzW2VdJiYoaT0hMCl9LHRoaXMpLGkpfS5jYWxsKHRoaXMsdCk7aWYob3x8aSl7aWYodGhpcy5hY3RpdmVFbGVtZW50cz10LHRoaXMuZHJhdygpLHRoaXMub3B0aW9ucy5jdXN0b21Ub29sdGlwcyYmdGhpcy5vcHRpb25zLmN1c3RvbVRvb2x0aXBzKCExKSx0Lmxlbmd0aD4wKWlmKHRoaXMuZGF0YXNldHMmJnRoaXMuZGF0YXNldHMubGVuZ3RoPjEpe2Zvcih2YXIgYSxoLHI9dGhpcy5kYXRhc2V0cy5sZW5ndGgtMTtyPj0wJiYoYT10aGlzLmRhdGFzZXRzW3JdLnBvaW50c3x8dGhpcy5kYXRhc2V0c1tyXS5iYXJzfHx0aGlzLmRhdGFzZXRzW3JdLnNlZ21lbnRzLGg9bChhLHRbMF0pLC0xPT09aCk7ci0tKTt2YXIgYz1bXSx1PVtdLGQ9ZnVuY3Rpb24oKXt2YXIgdCxpLGUsbixvLGE9W10sbD1bXSxyPVtdO3JldHVybiBzLmVhY2godGhpcy5kYXRhc2V0cyxmdW5jdGlvbihpKXt0PWkucG9pbnRzfHxpLmJhcnN8fGkuc2VnbWVudHMsdFtoXSYmdFtoXS5oYXNWYWx1ZSgpJiZhLnB1c2godFtoXSl9KSxzLmVhY2goYSxmdW5jdGlvbih0KXtsLnB1c2godC54KSxyLnB1c2godC55KSxjLnB1c2gocy50ZW1wbGF0ZSh0aGlzLm9wdGlvbnMubXVsdGlUb29sdGlwVGVtcGxhdGUsdCkpLHUucHVzaCh7ZmlsbDp0Ll9zYXZlZC5maWxsQ29sb3J8fHQuZmlsbENvbG9yLHN0cm9rZTp0Ll9zYXZlZC5zdHJva2VDb2xvcnx8dC5zdHJva2VDb2xvcn0pfSx0aGlzKSxvPW0ociksZT1nKHIpLG49bShsKSxpPWcobCkse3g6bj50aGlzLmNoYXJ0LndpZHRoLzI/bjppLHk6KG8rZSkvMn19LmNhbGwodGhpcyxoKTtuZXcgZS5NdWx0aVRvb2x0aXAoe3g6ZC54LHk6ZC55LHhQYWRkaW5nOnRoaXMub3B0aW9ucy50b29sdGlwWFBhZGRpbmcseVBhZGRpbmc6dGhpcy5vcHRpb25zLnRvb2x0aXBZUGFkZGluZyx4T2Zmc2V0OnRoaXMub3B0aW9ucy50b29sdGlwWE9mZnNldCxmaWxsQ29sb3I6dGhpcy5vcHRpb25zLnRvb2x0aXBGaWxsQ29sb3IsdGV4dENvbG9yOnRoaXMub3B0aW9ucy50b29sdGlwRm9udENvbG9yLGZvbnRGYW1pbHk6dGhpcy5vcHRpb25zLnRvb2x0aXBGb250RmFtaWx5LGZvbnRTdHlsZTp0aGlzLm9wdGlvbnMudG9vbHRpcEZvbnRTdHlsZSxmb250U2l6ZTp0aGlzLm9wdGlvbnMudG9vbHRpcEZvbnRTaXplLHRpdGxlVGV4dENvbG9yOnRoaXMub3B0aW9ucy50b29sdGlwVGl0bGVGb250Q29sb3IsdGl0bGVGb250RmFtaWx5OnRoaXMub3B0aW9ucy50b29sdGlwVGl0bGVGb250RmFtaWx5LHRpdGxlRm9udFN0eWxlOnRoaXMub3B0aW9ucy50b29sdGlwVGl0bGVGb250U3R5bGUsdGl0bGVGb250U2l6ZTp0aGlzLm9wdGlvbnMudG9vbHRpcFRpdGxlRm9udFNpemUsY29ybmVyUmFkaXVzOnRoaXMub3B0aW9ucy50b29sdGlwQ29ybmVyUmFkaXVzLGxhYmVsczpjLGxlZ2VuZENvbG9yczp1LGxlZ2VuZENvbG9yQmFja2dyb3VuZDp0aGlzLm9wdGlvbnMubXVsdGlUb29sdGlwS2V5QmFja2dyb3VuZCx0aXRsZTp0WzBdLmxhYmVsLGNoYXJ0OnRoaXMuY2hhcnQsY3R4OnRoaXMuY2hhcnQuY3R4LGN1c3RvbTp0aGlzLm9wdGlvbnMuY3VzdG9tVG9vbHRpcHN9KS5kcmF3KCl9ZWxzZSBuKHQsZnVuY3Rpb24odCl7dmFyIGk9dC50b29sdGlwUG9zaXRpb24oKTtuZXcgZS5Ub29sdGlwKHt4Ok1hdGgucm91bmQoaS54KSx5Ok1hdGgucm91bmQoaS55KSx4UGFkZGluZzp0aGlzLm9wdGlvbnMudG9vbHRpcFhQYWRkaW5nLHlQYWRkaW5nOnRoaXMub3B0aW9ucy50b29sdGlwWVBhZGRpbmcsZmlsbENvbG9yOnRoaXMub3B0aW9ucy50b29sdGlwRmlsbENvbG9yLHRleHRDb2xvcjp0aGlzLm9wdGlvbnMudG9vbHRpcEZvbnRDb2xvcixmb250RmFtaWx5OnRoaXMub3B0aW9ucy50b29sdGlwRm9udEZhbWlseSxmb250U3R5bGU6dGhpcy5vcHRpb25zLnRvb2x0aXBGb250U3R5bGUsZm9udFNpemU6dGhpcy5vcHRpb25zLnRvb2x0aXBGb250U2l6ZSxjYXJldEhlaWdodDp0aGlzLm9wdGlvbnMudG9vbHRpcENhcmV0U2l6ZSxjb3JuZXJSYWRpdXM6dGhpcy5vcHRpb25zLnRvb2x0aXBDb3JuZXJSYWRpdXMsdGV4dDpDKHRoaXMub3B0aW9ucy50b29sdGlwVGVtcGxhdGUsdCksY2hhcnQ6dGhpcy5jaGFydCxjdXN0b206dGhpcy5vcHRpb25zLmN1c3RvbVRvb2x0aXBzfSkuZHJhdygpfSx0aGlzKTtyZXR1cm4gdGhpc319LHRvQmFzZTY0SW1hZ2U6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5jaGFydC5jYW52YXMudG9EYXRhVVJMLmFwcGx5KHRoaXMuY2hhcnQuY2FudmFzLGFyZ3VtZW50cyl9fSksZS5UeXBlLmV4dGVuZD1mdW5jdGlvbih0KXt2YXIgaT10aGlzLHM9ZnVuY3Rpb24oKXtyZXR1cm4gaS5hcHBseSh0aGlzLGFyZ3VtZW50cyl9O2lmKHMucHJvdG90eXBlPW8oaS5wcm90b3R5cGUpLGEocy5wcm90b3R5cGUsdCkscy5leHRlbmQ9ZS5UeXBlLmV4dGVuZCx0Lm5hbWV8fGkucHJvdG90eXBlLm5hbWUpe3ZhciBuPXQubmFtZXx8aS5wcm90b3R5cGUubmFtZSxsPWUuZGVmYXVsdHNbaS5wcm90b3R5cGUubmFtZV0/byhlLmRlZmF1bHRzW2kucHJvdG90eXBlLm5hbWVdKTp7fTtlLmRlZmF1bHRzW25dPWEobCx0LmRlZmF1bHRzKSxlLnR5cGVzW25dPXMsZS5wcm90b3R5cGVbbl09ZnVuY3Rpb24odCxpKXt2YXIgbz1oKGUuZGVmYXVsdHMuZ2xvYmFsLGUuZGVmYXVsdHNbbl0saXx8e30pO3JldHVybiBuZXcgcyh0LG8sdGhpcyl9fWVsc2UgZChcIk5hbWUgbm90IHByb3ZpZGVkIGZvciB0aGlzIGNoYXJ0LCBzbyBpdCBoYXNuJ3QgYmVlbiByZWdpc3RlcmVkXCIpO3JldHVybiBpfSxlLkVsZW1lbnQ9ZnVuY3Rpb24odCl7YSh0aGlzLHQpLHRoaXMuaW5pdGlhbGl6ZS5hcHBseSh0aGlzLGFyZ3VtZW50cyksdGhpcy5zYXZlKCl9LGEoZS5FbGVtZW50LnByb3RvdHlwZSx7aW5pdGlhbGl6ZTpmdW5jdGlvbigpe30scmVzdG9yZTpmdW5jdGlvbih0KXtyZXR1cm4gdD9uKHQsZnVuY3Rpb24odCl7dGhpc1t0XT10aGlzLl9zYXZlZFt0XX0sdGhpcyk6YSh0aGlzLHRoaXMuX3NhdmVkKSx0aGlzfSxzYXZlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3NhdmVkPW8odGhpcyksZGVsZXRlIHRoaXMuX3NhdmVkLl9zYXZlZCx0aGlzfSx1cGRhdGU6ZnVuY3Rpb24odCl7cmV0dXJuIG4odCxmdW5jdGlvbih0LGkpe3RoaXMuX3NhdmVkW2ldPXRoaXNbaV0sdGhpc1tpXT10fSx0aGlzKSx0aGlzfSx0cmFuc2l0aW9uOmZ1bmN0aW9uKHQsaSl7cmV0dXJuIG4odCxmdW5jdGlvbih0LGUpe3RoaXNbZV09KHQtdGhpcy5fc2F2ZWRbZV0pKmkrdGhpcy5fc2F2ZWRbZV19LHRoaXMpLHRoaXN9LHRvb2x0aXBQb3NpdGlvbjpmdW5jdGlvbigpe3JldHVybnt4OnRoaXMueCx5OnRoaXMueX19LGhhc1ZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIGYodGhpcy52YWx1ZSl9fSksZS5FbGVtZW50LmV4dGVuZD1yLGUuUG9pbnQ9ZS5FbGVtZW50LmV4dGVuZCh7ZGlzcGxheTohMCxpblJhbmdlOmZ1bmN0aW9uKHQsaSl7dmFyIGU9dGhpcy5oaXREZXRlY3Rpb25SYWRpdXMrdGhpcy5yYWRpdXM7cmV0dXJuIE1hdGgucG93KHQtdGhpcy54LDIpK01hdGgucG93KGktdGhpcy55LDIpPE1hdGgucG93KGUsMil9LGRyYXc6ZnVuY3Rpb24oKXtpZih0aGlzLmRpc3BsYXkpe3ZhciB0PXRoaXMuY3R4O3QuYmVnaW5QYXRoKCksdC5hcmModGhpcy54LHRoaXMueSx0aGlzLnJhZGl1cywwLDIqTWF0aC5QSSksdC5jbG9zZVBhdGgoKSx0LnN0cm9rZVN0eWxlPXRoaXMuc3Ryb2tlQ29sb3IsdC5saW5lV2lkdGg9dGhpcy5zdHJva2VXaWR0aCx0LmZpbGxTdHlsZT10aGlzLmZpbGxDb2xvcix0LmZpbGwoKSx0LnN0cm9rZSgpfX19KSxlLkFyYz1lLkVsZW1lbnQuZXh0ZW5kKHtpblJhbmdlOmZ1bmN0aW9uKHQsaSl7dmFyIGU9cy5nZXRBbmdsZUZyb21Qb2ludCh0aGlzLHt4OnQseTppfSksbj1lLmFuZ2xlPj10aGlzLnN0YXJ0QW5nbGUmJmUuYW5nbGU8PXRoaXMuZW5kQW5nbGUsbz1lLmRpc3RhbmNlPj10aGlzLmlubmVyUmFkaXVzJiZlLmRpc3RhbmNlPD10aGlzLm91dGVyUmFkaXVzO3JldHVybiBuJiZvfSx0b29sdGlwUG9zaXRpb246ZnVuY3Rpb24oKXt2YXIgdD10aGlzLnN0YXJ0QW5nbGUrKHRoaXMuZW5kQW5nbGUtdGhpcy5zdGFydEFuZ2xlKS8yLGk9KHRoaXMub3V0ZXJSYWRpdXMtdGhpcy5pbm5lclJhZGl1cykvMit0aGlzLmlubmVyUmFkaXVzO3JldHVybnt4OnRoaXMueCtNYXRoLmNvcyh0KSppLHk6dGhpcy55K01hdGguc2luKHQpKml9fSxkcmF3OmZ1bmN0aW9uKHQpe3ZhciBpPXRoaXMuY3R4O2kuYmVnaW5QYXRoKCksaS5hcmModGhpcy54LHRoaXMueSx0aGlzLm91dGVyUmFkaXVzLHRoaXMuc3RhcnRBbmdsZSx0aGlzLmVuZEFuZ2xlKSxpLmFyYyh0aGlzLngsdGhpcy55LHRoaXMuaW5uZXJSYWRpdXMsdGhpcy5lbmRBbmdsZSx0aGlzLnN0YXJ0QW5nbGUsITApLGkuY2xvc2VQYXRoKCksaS5zdHJva2VTdHlsZT10aGlzLnN0cm9rZUNvbG9yLGkubGluZVdpZHRoPXRoaXMuc3Ryb2tlV2lkdGgsaS5maWxsU3R5bGU9dGhpcy5maWxsQ29sb3IsaS5maWxsKCksaS5saW5lSm9pbj1cImJldmVsXCIsdGhpcy5zaG93U3Ryb2tlJiZpLnN0cm9rZSgpfX0pLGUuUmVjdGFuZ2xlPWUuRWxlbWVudC5leHRlbmQoe2RyYXc6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLmN0eCxpPXRoaXMud2lkdGgvMixlPXRoaXMueC1pLHM9dGhpcy54K2ksbj10aGlzLmJhc2UtKHRoaXMuYmFzZS10aGlzLnkpLG89dGhpcy5zdHJva2VXaWR0aC8yO3RoaXMuc2hvd1N0cm9rZSYmKGUrPW8scy09byxuKz1vKSx0LmJlZ2luUGF0aCgpLHQuZmlsbFN0eWxlPXRoaXMuZmlsbENvbG9yLHQuc3Ryb2tlU3R5bGU9dGhpcy5zdHJva2VDb2xvcix0LmxpbmVXaWR0aD10aGlzLnN0cm9rZVdpZHRoLHQubW92ZVRvKGUsdGhpcy5iYXNlKSx0LmxpbmVUbyhlLG4pLHQubGluZVRvKHMsbiksdC5saW5lVG8ocyx0aGlzLmJhc2UpLHQuZmlsbCgpLHRoaXMuc2hvd1N0cm9rZSYmdC5zdHJva2UoKX0saGVpZ2h0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuYmFzZS10aGlzLnl9LGluUmFuZ2U6ZnVuY3Rpb24odCxpKXtyZXR1cm4gdD49dGhpcy54LXRoaXMud2lkdGgvMiYmdDw9dGhpcy54K3RoaXMud2lkdGgvMiYmaT49dGhpcy55JiZpPD10aGlzLmJhc2V9fSksZS5Ub29sdGlwPWUuRWxlbWVudC5leHRlbmQoe2RyYXc6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLmNoYXJ0LmN0eDt0LmZvbnQ9Vyh0aGlzLmZvbnRTaXplLHRoaXMuZm9udFN0eWxlLHRoaXMuZm9udEZhbWlseSksdGhpcy54QWxpZ249XCJjZW50ZXJcIix0aGlzLnlBbGlnbj1cImFib3ZlXCI7dmFyIGk9dGhpcy5jYXJldFBhZGRpbmc9MixlPXQubWVhc3VyZVRleHQodGhpcy50ZXh0KS53aWR0aCsyKnRoaXMueFBhZGRpbmcscz10aGlzLmZvbnRTaXplKzIqdGhpcy55UGFkZGluZyxuPXMrdGhpcy5jYXJldEhlaWdodCtpO3RoaXMueCtlLzI+dGhpcy5jaGFydC53aWR0aD90aGlzLnhBbGlnbj1cImxlZnRcIjp0aGlzLngtZS8yPDAmJih0aGlzLnhBbGlnbj1cInJpZ2h0XCIpLHRoaXMueS1uPDAmJih0aGlzLnlBbGlnbj1cImJlbG93XCIpO3ZhciBvPXRoaXMueC1lLzIsYT10aGlzLnktbjtpZih0LmZpbGxTdHlsZT10aGlzLmZpbGxDb2xvcix0aGlzLmN1c3RvbSl0aGlzLmN1c3RvbSh0aGlzKTtlbHNle3N3aXRjaCh0aGlzLnlBbGlnbil7Y2FzZVwiYWJvdmVcIjp0LmJlZ2luUGF0aCgpLHQubW92ZVRvKHRoaXMueCx0aGlzLnktaSksdC5saW5lVG8odGhpcy54K3RoaXMuY2FyZXRIZWlnaHQsdGhpcy55LShpK3RoaXMuY2FyZXRIZWlnaHQpKSx0LmxpbmVUbyh0aGlzLngtdGhpcy5jYXJldEhlaWdodCx0aGlzLnktKGkrdGhpcy5jYXJldEhlaWdodCkpLHQuY2xvc2VQYXRoKCksdC5maWxsKCk7YnJlYWs7Y2FzZVwiYmVsb3dcIjphPXRoaXMueStpK3RoaXMuY2FyZXRIZWlnaHQsdC5iZWdpblBhdGgoKSx0Lm1vdmVUbyh0aGlzLngsdGhpcy55K2kpLHQubGluZVRvKHRoaXMueCt0aGlzLmNhcmV0SGVpZ2h0LHRoaXMueStpK3RoaXMuY2FyZXRIZWlnaHQpLHQubGluZVRvKHRoaXMueC10aGlzLmNhcmV0SGVpZ2h0LHRoaXMueStpK3RoaXMuY2FyZXRIZWlnaHQpLHQuY2xvc2VQYXRoKCksdC5maWxsKCl9c3dpdGNoKHRoaXMueEFsaWduKXtjYXNlXCJsZWZ0XCI6bz10aGlzLngtZSsodGhpcy5jb3JuZXJSYWRpdXMrdGhpcy5jYXJldEhlaWdodCk7YnJlYWs7Y2FzZVwicmlnaHRcIjpvPXRoaXMueC0odGhpcy5jb3JuZXJSYWRpdXMrdGhpcy5jYXJldEhlaWdodCl9Qih0LG8sYSxlLHMsdGhpcy5jb3JuZXJSYWRpdXMpLHQuZmlsbCgpLHQuZmlsbFN0eWxlPXRoaXMudGV4dENvbG9yLHQudGV4dEFsaWduPVwiY2VudGVyXCIsdC50ZXh0QmFzZWxpbmU9XCJtaWRkbGVcIix0LmZpbGxUZXh0KHRoaXMudGV4dCxvK2UvMixhK3MvMil9fX0pLGUuTXVsdGlUb29sdGlwPWUuRWxlbWVudC5leHRlbmQoe2luaXRpYWxpemU6ZnVuY3Rpb24oKXt0aGlzLmZvbnQ9Vyh0aGlzLmZvbnRTaXplLHRoaXMuZm9udFN0eWxlLHRoaXMuZm9udEZhbWlseSksdGhpcy50aXRsZUZvbnQ9Vyh0aGlzLnRpdGxlRm9udFNpemUsdGhpcy50aXRsZUZvbnRTdHlsZSx0aGlzLnRpdGxlRm9udEZhbWlseSksdGhpcy5oZWlnaHQ9dGhpcy5sYWJlbHMubGVuZ3RoKnRoaXMuZm9udFNpemUrKHRoaXMubGFiZWxzLmxlbmd0aC0xKSoodGhpcy5mb250U2l6ZS8yKSsyKnRoaXMueVBhZGRpbmcrMS41KnRoaXMudGl0bGVGb250U2l6ZSx0aGlzLmN0eC5mb250PXRoaXMudGl0bGVGb250O3ZhciB0PXRoaXMuY3R4Lm1lYXN1cmVUZXh0KHRoaXMudGl0bGUpLndpZHRoLGk9eih0aGlzLmN0eCx0aGlzLmZvbnQsdGhpcy5sYWJlbHMpK3RoaXMuZm9udFNpemUrMyxlPWcoW2ksdF0pO3RoaXMud2lkdGg9ZSsyKnRoaXMueFBhZGRpbmc7dmFyIHM9dGhpcy5oZWlnaHQvMjt0aGlzLnktczwwP3RoaXMueT1zOnRoaXMueStzPnRoaXMuY2hhcnQuaGVpZ2h0JiYodGhpcy55PXRoaXMuY2hhcnQuaGVpZ2h0LXMpLHRoaXMueD50aGlzLmNoYXJ0LndpZHRoLzI/dGhpcy54LT10aGlzLnhPZmZzZXQrdGhpcy53aWR0aDp0aGlzLngrPXRoaXMueE9mZnNldH0sZ2V0TGluZUhlaWdodDpmdW5jdGlvbih0KXt2YXIgaT10aGlzLnktdGhpcy5oZWlnaHQvMit0aGlzLnlQYWRkaW5nLGU9dC0xO3JldHVybiAwPT09dD9pK3RoaXMudGl0bGVGb250U2l6ZS8yOmkrKDEuNSp0aGlzLmZvbnRTaXplKmUrdGhpcy5mb250U2l6ZS8yKSsxLjUqdGhpcy50aXRsZUZvbnRTaXplfSxkcmF3OmZ1bmN0aW9uKCl7aWYodGhpcy5jdXN0b20pdGhpcy5jdXN0b20odGhpcyk7ZWxzZXtCKHRoaXMuY3R4LHRoaXMueCx0aGlzLnktdGhpcy5oZWlnaHQvMix0aGlzLndpZHRoLHRoaXMuaGVpZ2h0LHRoaXMuY29ybmVyUmFkaXVzKTt2YXIgdD10aGlzLmN0eDt0LmZpbGxTdHlsZT10aGlzLmZpbGxDb2xvcix0LmZpbGwoKSx0LmNsb3NlUGF0aCgpLHQudGV4dEFsaWduPVwibGVmdFwiLHQudGV4dEJhc2VsaW5lPVwibWlkZGxlXCIsdC5maWxsU3R5bGU9dGhpcy50aXRsZVRleHRDb2xvcix0LmZvbnQ9dGhpcy50aXRsZUZvbnQsdC5maWxsVGV4dCh0aGlzLnRpdGxlLHRoaXMueCt0aGlzLnhQYWRkaW5nLHRoaXMuZ2V0TGluZUhlaWdodCgwKSksdC5mb250PXRoaXMuZm9udCxzLmVhY2godGhpcy5sYWJlbHMsZnVuY3Rpb24oaSxlKXt0LmZpbGxTdHlsZT10aGlzLnRleHRDb2xvcix0LmZpbGxUZXh0KGksdGhpcy54K3RoaXMueFBhZGRpbmcrdGhpcy5mb250U2l6ZSszLHRoaXMuZ2V0TGluZUhlaWdodChlKzEpKSx0LmZpbGxTdHlsZT10aGlzLmxlZ2VuZENvbG9yQmFja2dyb3VuZCx0LmZpbGxSZWN0KHRoaXMueCt0aGlzLnhQYWRkaW5nLHRoaXMuZ2V0TGluZUhlaWdodChlKzEpLXRoaXMuZm9udFNpemUvMix0aGlzLmZvbnRTaXplLHRoaXMuZm9udFNpemUpLHQuZmlsbFN0eWxlPXRoaXMubGVnZW5kQ29sb3JzW2VdLmZpbGwsdC5maWxsUmVjdCh0aGlzLngrdGhpcy54UGFkZGluZyx0aGlzLmdldExpbmVIZWlnaHQoZSsxKS10aGlzLmZvbnRTaXplLzIsdGhpcy5mb250U2l6ZSx0aGlzLmZvbnRTaXplKX0sdGhpcyl9fX0pLGUuU2NhbGU9ZS5FbGVtZW50LmV4dGVuZCh7aW5pdGlhbGl6ZTpmdW5jdGlvbigpe3RoaXMuZml0KCl9LGJ1aWxkWUxhYmVsczpmdW5jdGlvbigpe3RoaXMueUxhYmVscz1bXTtmb3IodmFyIHQ9dih0aGlzLnN0ZXBWYWx1ZSksaT0wO2k8PXRoaXMuc3RlcHM7aSsrKXRoaXMueUxhYmVscy5wdXNoKEModGhpcy50ZW1wbGF0ZVN0cmluZyx7dmFsdWU6KHRoaXMubWluK2kqdGhpcy5zdGVwVmFsdWUpLnRvRml4ZWQodCl9KSk7dGhpcy55TGFiZWxXaWR0aD10aGlzLmRpc3BsYXkmJnRoaXMuc2hvd0xhYmVscz96KHRoaXMuY3R4LHRoaXMuZm9udCx0aGlzLnlMYWJlbHMpOjB9LGFkZFhMYWJlbDpmdW5jdGlvbih0KXt0aGlzLnhMYWJlbHMucHVzaCh0KSx0aGlzLnZhbHVlc0NvdW50KyssdGhpcy5maXQoKX0scmVtb3ZlWExhYmVsOmZ1bmN0aW9uKCl7dGhpcy54TGFiZWxzLnNoaWZ0KCksdGhpcy52YWx1ZXNDb3VudC0tLHRoaXMuZml0KCl9LGZpdDpmdW5jdGlvbigpe3RoaXMuc3RhcnRQb2ludD10aGlzLmRpc3BsYXk/dGhpcy5mb250U2l6ZTowLHRoaXMuZW5kUG9pbnQ9dGhpcy5kaXNwbGF5P3RoaXMuaGVpZ2h0LTEuNSp0aGlzLmZvbnRTaXplLTU6dGhpcy5oZWlnaHQsdGhpcy5zdGFydFBvaW50Kz10aGlzLnBhZGRpbmcsdGhpcy5lbmRQb2ludC09dGhpcy5wYWRkaW5nO3ZhciB0LGk9dGhpcy5lbmRQb2ludC10aGlzLnN0YXJ0UG9pbnQ7Zm9yKHRoaXMuY2FsY3VsYXRlWVJhbmdlKGkpLHRoaXMuYnVpbGRZTGFiZWxzKCksdGhpcy5jYWxjdWxhdGVYTGFiZWxSb3RhdGlvbigpO2k+dGhpcy5lbmRQb2ludC10aGlzLnN0YXJ0UG9pbnQ7KWk9dGhpcy5lbmRQb2ludC10aGlzLnN0YXJ0UG9pbnQsdD10aGlzLnlMYWJlbFdpZHRoLHRoaXMuY2FsY3VsYXRlWVJhbmdlKGkpLHRoaXMuYnVpbGRZTGFiZWxzKCksdDx0aGlzLnlMYWJlbFdpZHRoJiZ0aGlzLmNhbGN1bGF0ZVhMYWJlbFJvdGF0aW9uKCl9LGNhbGN1bGF0ZVhMYWJlbFJvdGF0aW9uOmZ1bmN0aW9uKCl7dGhpcy5jdHguZm9udD10aGlzLmZvbnQ7dmFyIHQsaSxlPXRoaXMuY3R4Lm1lYXN1cmVUZXh0KHRoaXMueExhYmVsc1swXSkud2lkdGgscz10aGlzLmN0eC5tZWFzdXJlVGV4dCh0aGlzLnhMYWJlbHNbdGhpcy54TGFiZWxzLmxlbmd0aC0xXSkud2lkdGg7aWYodGhpcy54U2NhbGVQYWRkaW5nUmlnaHQ9cy8yKzMsdGhpcy54U2NhbGVQYWRkaW5nTGVmdD1lLzI+dGhpcy55TGFiZWxXaWR0aCsxMD9lLzI6dGhpcy55TGFiZWxXaWR0aCsxMCx0aGlzLnhMYWJlbFJvdGF0aW9uPTAsdGhpcy5kaXNwbGF5KXt2YXIgbixvPXoodGhpcy5jdHgsdGhpcy5mb250LHRoaXMueExhYmVscyk7dGhpcy54TGFiZWxXaWR0aD1vO2Zvcih2YXIgYT1NYXRoLmZsb29yKHRoaXMuY2FsY3VsYXRlWCgxKS10aGlzLmNhbGN1bGF0ZVgoMCkpLTY7dGhpcy54TGFiZWxXaWR0aD5hJiYwPT09dGhpcy54TGFiZWxSb3RhdGlvbnx8dGhpcy54TGFiZWxXaWR0aD5hJiZ0aGlzLnhMYWJlbFJvdGF0aW9uPD05MCYmdGhpcy54TGFiZWxSb3RhdGlvbj4wOyluPU1hdGguY29zKFModGhpcy54TGFiZWxSb3RhdGlvbikpLHQ9biplLGk9bipzLHQrdGhpcy5mb250U2l6ZS8yPnRoaXMueUxhYmVsV2lkdGgrOCYmKHRoaXMueFNjYWxlUGFkZGluZ0xlZnQ9dCt0aGlzLmZvbnRTaXplLzIpLHRoaXMueFNjYWxlUGFkZGluZ1JpZ2h0PXRoaXMuZm9udFNpemUvMix0aGlzLnhMYWJlbFJvdGF0aW9uKyssdGhpcy54TGFiZWxXaWR0aD1uKm87dGhpcy54TGFiZWxSb3RhdGlvbj4wJiYodGhpcy5lbmRQb2ludC09TWF0aC5zaW4oUyh0aGlzLnhMYWJlbFJvdGF0aW9uKSkqbyszKX1lbHNlIHRoaXMueExhYmVsV2lkdGg9MCx0aGlzLnhTY2FsZVBhZGRpbmdSaWdodD10aGlzLnBhZGRpbmcsdGhpcy54U2NhbGVQYWRkaW5nTGVmdD10aGlzLnBhZGRpbmd9LGNhbGN1bGF0ZVlSYW5nZTpjLGRyYXdpbmdBcmVhOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuc3RhcnRQb2ludC10aGlzLmVuZFBvaW50fSxjYWxjdWxhdGVZOmZ1bmN0aW9uKHQpe3ZhciBpPXRoaXMuZHJhd2luZ0FyZWEoKS8odGhpcy5taW4tdGhpcy5tYXgpO3JldHVybiB0aGlzLmVuZFBvaW50LWkqKHQtdGhpcy5taW4pfSxjYWxjdWxhdGVYOmZ1bmN0aW9uKHQpe3ZhciBpPSh0aGlzLnhMYWJlbFJvdGF0aW9uPjAsdGhpcy53aWR0aC0odGhpcy54U2NhbGVQYWRkaW5nTGVmdCt0aGlzLnhTY2FsZVBhZGRpbmdSaWdodCkpLGU9aS9NYXRoLm1heCh0aGlzLnZhbHVlc0NvdW50LSh0aGlzLm9mZnNldEdyaWRMaW5lcz8wOjEpLDEpLHM9ZSp0K3RoaXMueFNjYWxlUGFkZGluZ0xlZnQ7cmV0dXJuIHRoaXMub2Zmc2V0R3JpZExpbmVzJiYocys9ZS8yKSxNYXRoLnJvdW5kKHMpfSx1cGRhdGU6ZnVuY3Rpb24odCl7cy5leHRlbmQodGhpcyx0KSx0aGlzLmZpdCgpfSxkcmF3OmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5jdHgsaT0odGhpcy5lbmRQb2ludC10aGlzLnN0YXJ0UG9pbnQpL3RoaXMuc3RlcHMsZT1NYXRoLnJvdW5kKHRoaXMueFNjYWxlUGFkZGluZ0xlZnQpO3RoaXMuZGlzcGxheSYmKHQuZmlsbFN0eWxlPXRoaXMudGV4dENvbG9yLHQuZm9udD10aGlzLmZvbnQsbih0aGlzLnlMYWJlbHMsZnVuY3Rpb24obixvKXt2YXIgYT10aGlzLmVuZFBvaW50LWkqbyxoPU1hdGgucm91bmQoYSksbD10aGlzLnNob3dIb3Jpem9udGFsTGluZXM7dC50ZXh0QWxpZ249XCJyaWdodFwiLHQudGV4dEJhc2VsaW5lPVwibWlkZGxlXCIsdGhpcy5zaG93TGFiZWxzJiZ0LmZpbGxUZXh0KG4sZS0xMCxhKSwwIT09b3x8bHx8KGw9ITApLGwmJnQuYmVnaW5QYXRoKCksbz4wPyh0LmxpbmVXaWR0aD10aGlzLmdyaWRMaW5lV2lkdGgsdC5zdHJva2VTdHlsZT10aGlzLmdyaWRMaW5lQ29sb3IpOih0LmxpbmVXaWR0aD10aGlzLmxpbmVXaWR0aCx0LnN0cm9rZVN0eWxlPXRoaXMubGluZUNvbG9yKSxoKz1zLmFsaWFzUGl4ZWwodC5saW5lV2lkdGgpLGwmJih0Lm1vdmVUbyhlLGgpLHQubGluZVRvKHRoaXMud2lkdGgsaCksdC5zdHJva2UoKSx0LmNsb3NlUGF0aCgpKSx0LmxpbmVXaWR0aD10aGlzLmxpbmVXaWR0aCx0LnN0cm9rZVN0eWxlPXRoaXMubGluZUNvbG9yLHQuYmVnaW5QYXRoKCksdC5tb3ZlVG8oZS01LGgpLHQubGluZVRvKGUsaCksdC5zdHJva2UoKSx0LmNsb3NlUGF0aCgpfSx0aGlzKSxuKHRoaXMueExhYmVscyxmdW5jdGlvbihpLGUpe3ZhciBzPXRoaXMuY2FsY3VsYXRlWChlKSt4KHRoaXMubGluZVdpZHRoKSxuPXRoaXMuY2FsY3VsYXRlWChlLSh0aGlzLm9mZnNldEdyaWRMaW5lcz8uNTowKSkreCh0aGlzLmxpbmVXaWR0aCksbz10aGlzLnhMYWJlbFJvdGF0aW9uPjAsYT10aGlzLnNob3dWZXJ0aWNhbExpbmVzOzAhPT1lfHxhfHwoYT0hMCksYSYmdC5iZWdpblBhdGgoKSxlPjA/KHQubGluZVdpZHRoPXRoaXMuZ3JpZExpbmVXaWR0aCx0LnN0cm9rZVN0eWxlPXRoaXMuZ3JpZExpbmVDb2xvcik6KHQubGluZVdpZHRoPXRoaXMubGluZVdpZHRoLHQuc3Ryb2tlU3R5bGU9dGhpcy5saW5lQ29sb3IpLGEmJih0Lm1vdmVUbyhuLHRoaXMuZW5kUG9pbnQpLHQubGluZVRvKG4sdGhpcy5zdGFydFBvaW50LTMpLHQuc3Ryb2tlKCksdC5jbG9zZVBhdGgoKSksdC5saW5lV2lkdGg9dGhpcy5saW5lV2lkdGgsdC5zdHJva2VTdHlsZT10aGlzLmxpbmVDb2xvcix0LmJlZ2luUGF0aCgpLHQubW92ZVRvKG4sdGhpcy5lbmRQb2ludCksdC5saW5lVG8obix0aGlzLmVuZFBvaW50KzUpLHQuc3Ryb2tlKCksdC5jbG9zZVBhdGgoKSx0LnNhdmUoKSx0LnRyYW5zbGF0ZShzLG8/dGhpcy5lbmRQb2ludCsxMjp0aGlzLmVuZFBvaW50KzgpLHQucm90YXRlKC0xKlModGhpcy54TGFiZWxSb3RhdGlvbikpLHQuZm9udD10aGlzLmZvbnQsdC50ZXh0QWxpZ249bz9cInJpZ2h0XCI6XCJjZW50ZXJcIix0LnRleHRCYXNlbGluZT1vP1wibWlkZGxlXCI6XCJ0b3BcIix0LmZpbGxUZXh0KGksMCwwKSx0LnJlc3RvcmUoKX0sdGhpcykpfX0pLGUuUmFkaWFsU2NhbGU9ZS5FbGVtZW50LmV4dGVuZCh7aW5pdGlhbGl6ZTpmdW5jdGlvbigpe3RoaXMuc2l6ZT1tKFt0aGlzLmhlaWdodCx0aGlzLndpZHRoXSksdGhpcy5kcmF3aW5nQXJlYT10aGlzLmRpc3BsYXk/dGhpcy5zaXplLzItKHRoaXMuZm9udFNpemUvMit0aGlzLmJhY2tkcm9wUGFkZGluZ1kpOnRoaXMuc2l6ZS8yfSxjYWxjdWxhdGVDZW50ZXJPZmZzZXQ6ZnVuY3Rpb24odCl7dmFyIGk9dGhpcy5kcmF3aW5nQXJlYS8odGhpcy5tYXgtdGhpcy5taW4pO3JldHVybih0LXRoaXMubWluKSppfSx1cGRhdGU6ZnVuY3Rpb24oKXt0aGlzLmxpbmVBcmM/dGhpcy5kcmF3aW5nQXJlYT10aGlzLmRpc3BsYXk/dGhpcy5zaXplLzItKHRoaXMuZm9udFNpemUvMit0aGlzLmJhY2tkcm9wUGFkZGluZ1kpOnRoaXMuc2l6ZS8yOnRoaXMuc2V0U2NhbGVTaXplKCksdGhpcy5idWlsZFlMYWJlbHMoKX0sYnVpbGRZTGFiZWxzOmZ1bmN0aW9uKCl7dGhpcy55TGFiZWxzPVtdO2Zvcih2YXIgdD12KHRoaXMuc3RlcFZhbHVlKSxpPTA7aTw9dGhpcy5zdGVwcztpKyspdGhpcy55TGFiZWxzLnB1c2goQyh0aGlzLnRlbXBsYXRlU3RyaW5nLHt2YWx1ZToodGhpcy5taW4raSp0aGlzLnN0ZXBWYWx1ZSkudG9GaXhlZCh0KX0pKX0sZ2V0Q2lyY3VtZmVyZW5jZTpmdW5jdGlvbigpe3JldHVybiAyKk1hdGguUEkvdGhpcy52YWx1ZXNDb3VudH0sc2V0U2NhbGVTaXplOmZ1bmN0aW9uKCl7dmFyIHQsaSxlLHMsbixvLGEsaCxsLHIsYyx1LGQ9bShbdGhpcy5oZWlnaHQvMi10aGlzLnBvaW50TGFiZWxGb250U2l6ZS01LHRoaXMud2lkdGgvMl0pLHA9dGhpcy53aWR0aCxnPTA7Zm9yKHRoaXMuY3R4LmZvbnQ9Vyh0aGlzLnBvaW50TGFiZWxGb250U2l6ZSx0aGlzLnBvaW50TGFiZWxGb250U3R5bGUsdGhpcy5wb2ludExhYmVsRm9udEZhbWlseSksaT0wO2k8dGhpcy52YWx1ZXNDb3VudDtpKyspdD10aGlzLmdldFBvaW50UG9zaXRpb24oaSxkKSxlPXRoaXMuY3R4Lm1lYXN1cmVUZXh0KEModGhpcy50ZW1wbGF0ZVN0cmluZyx7dmFsdWU6dGhpcy5sYWJlbHNbaV19KSkud2lkdGgrNSwwPT09aXx8aT09PXRoaXMudmFsdWVzQ291bnQvMj8ocz1lLzIsdC54K3M+cCYmKHA9dC54K3Msbj1pKSx0LngtczxnJiYoZz10LngtcyxhPWkpKTppPHRoaXMudmFsdWVzQ291bnQvMj90LngrZT5wJiYocD10LngrZSxuPWkpOmk+dGhpcy52YWx1ZXNDb3VudC8yJiZ0LngtZTxnJiYoZz10LngtZSxhPWkpO2w9ZyxyPU1hdGguY2VpbChwLXRoaXMud2lkdGgpLG89dGhpcy5nZXRJbmRleEFuZ2xlKG4pLGg9dGhpcy5nZXRJbmRleEFuZ2xlKGEpLGM9ci9NYXRoLnNpbihvK01hdGguUEkvMiksdT1sL01hdGguc2luKGgrTWF0aC5QSS8yKSxjPWYoYyk/YzowLHU9Zih1KT91OjAsdGhpcy5kcmF3aW5nQXJlYT1kLSh1K2MpLzIsdGhpcy5zZXRDZW50ZXJQb2ludCh1LGMpfSxzZXRDZW50ZXJQb2ludDpmdW5jdGlvbih0LGkpe3ZhciBlPXRoaXMud2lkdGgtaS10aGlzLmRyYXdpbmdBcmVhLHM9dCt0aGlzLmRyYXdpbmdBcmVhO3RoaXMueENlbnRlcj0ocytlKS8yLHRoaXMueUNlbnRlcj10aGlzLmhlaWdodC8yfSxnZXRJbmRleEFuZ2xlOmZ1bmN0aW9uKHQpe3ZhciBpPTIqTWF0aC5QSS90aGlzLnZhbHVlc0NvdW50O3JldHVybiB0KmktTWF0aC5QSS8yfSxnZXRQb2ludFBvc2l0aW9uOmZ1bmN0aW9uKHQsaSl7dmFyIGU9dGhpcy5nZXRJbmRleEFuZ2xlKHQpO3JldHVybnt4Ok1hdGguY29zKGUpKmkrdGhpcy54Q2VudGVyLHk6TWF0aC5zaW4oZSkqaSt0aGlzLnlDZW50ZXJ9fSxkcmF3OmZ1bmN0aW9uKCl7aWYodGhpcy5kaXNwbGF5KXt2YXIgdD10aGlzLmN0eDtpZihuKHRoaXMueUxhYmVscyxmdW5jdGlvbihpLGUpe2lmKGU+MCl7dmFyIHMsbj1lKih0aGlzLmRyYXdpbmdBcmVhL3RoaXMuc3RlcHMpLG89dGhpcy55Q2VudGVyLW47aWYodGhpcy5saW5lV2lkdGg+MClpZih0LnN0cm9rZVN0eWxlPXRoaXMubGluZUNvbG9yLHQubGluZVdpZHRoPXRoaXMubGluZVdpZHRoLHRoaXMubGluZUFyYyl0LmJlZ2luUGF0aCgpLHQuYXJjKHRoaXMueENlbnRlcix0aGlzLnlDZW50ZXIsbiwwLDIqTWF0aC5QSSksdC5jbG9zZVBhdGgoKSx0LnN0cm9rZSgpO2Vsc2V7dC5iZWdpblBhdGgoKTtmb3IodmFyIGE9MDthPHRoaXMudmFsdWVzQ291bnQ7YSsrKXM9dGhpcy5nZXRQb2ludFBvc2l0aW9uKGEsdGhpcy5jYWxjdWxhdGVDZW50ZXJPZmZzZXQodGhpcy5taW4rZSp0aGlzLnN0ZXBWYWx1ZSkpLDA9PT1hP3QubW92ZVRvKHMueCxzLnkpOnQubGluZVRvKHMueCxzLnkpO3QuY2xvc2VQYXRoKCksdC5zdHJva2UoKX1pZih0aGlzLnNob3dMYWJlbHMpe2lmKHQuZm9udD1XKHRoaXMuZm9udFNpemUsdGhpcy5mb250U3R5bGUsdGhpcy5mb250RmFtaWx5KSx0aGlzLnNob3dMYWJlbEJhY2tkcm9wKXt2YXIgaD10Lm1lYXN1cmVUZXh0KGkpLndpZHRoO3QuZmlsbFN0eWxlPXRoaXMuYmFja2Ryb3BDb2xvcix0LmZpbGxSZWN0KHRoaXMueENlbnRlci1oLzItdGhpcy5iYWNrZHJvcFBhZGRpbmdYLG8tdGhpcy5mb250U2l6ZS8yLXRoaXMuYmFja2Ryb3BQYWRkaW5nWSxoKzIqdGhpcy5iYWNrZHJvcFBhZGRpbmdYLHRoaXMuZm9udFNpemUrMip0aGlzLmJhY2tkcm9wUGFkZGluZ1kpfXQudGV4dEFsaWduPVwiY2VudGVyXCIsdC50ZXh0QmFzZWxpbmU9XCJtaWRkbGVcIix0LmZpbGxTdHlsZT10aGlzLmZvbnRDb2xvcix0LmZpbGxUZXh0KGksdGhpcy54Q2VudGVyLG8pfX19LHRoaXMpLCF0aGlzLmxpbmVBcmMpe3QubGluZVdpZHRoPXRoaXMuYW5nbGVMaW5lV2lkdGgsdC5zdHJva2VTdHlsZT10aGlzLmFuZ2xlTGluZUNvbG9yO2Zvcih2YXIgaT10aGlzLnZhbHVlc0NvdW50LTE7aT49MDtpLS0pe2lmKHRoaXMuYW5nbGVMaW5lV2lkdGg+MCl7dmFyIGU9dGhpcy5nZXRQb2ludFBvc2l0aW9uKGksdGhpcy5jYWxjdWxhdGVDZW50ZXJPZmZzZXQodGhpcy5tYXgpKTt0LmJlZ2luUGF0aCgpLHQubW92ZVRvKHRoaXMueENlbnRlcix0aGlzLnlDZW50ZXIpLHQubGluZVRvKGUueCxlLnkpLHQuc3Ryb2tlKCksdC5jbG9zZVBhdGgoKX12YXIgcz10aGlzLmdldFBvaW50UG9zaXRpb24oaSx0aGlzLmNhbGN1bGF0ZUNlbnRlck9mZnNldCh0aGlzLm1heCkrNSk7dC5mb250PVcodGhpcy5wb2ludExhYmVsRm9udFNpemUsdGhpcy5wb2ludExhYmVsRm9udFN0eWxlLHRoaXMucG9pbnRMYWJlbEZvbnRGYW1pbHkpLHQuZmlsbFN0eWxlPXRoaXMucG9pbnRMYWJlbEZvbnRDb2xvcjt2YXIgbz10aGlzLmxhYmVscy5sZW5ndGgsYT10aGlzLmxhYmVscy5sZW5ndGgvMixoPWEvMixsPWg+aXx8aT5vLWgscj1pPT09aHx8aT09PW8taDt0LnRleHRBbGlnbj0wPT09aT9cImNlbnRlclwiOmk9PT1hP1wiY2VudGVyXCI6YT5pP1wibGVmdFwiOlwicmlnaHRcIix0LnRleHRCYXNlbGluZT1yP1wibWlkZGxlXCI6bD9cImJvdHRvbVwiOlwidG9wXCIsdC5maWxsVGV4dCh0aGlzLmxhYmVsc1tpXSxzLngscy55KX19fX19KSxzLmFkZEV2ZW50KHdpbmRvdyxcInJlc2l6ZVwiLGZ1bmN0aW9uKCl7dmFyIHQ7cmV0dXJuIGZ1bmN0aW9uKCl7Y2xlYXJUaW1lb3V0KHQpLHQ9c2V0VGltZW91dChmdW5jdGlvbigpe24oZS5pbnN0YW5jZXMsZnVuY3Rpb24odCl7dC5vcHRpb25zLnJlc3BvbnNpdmUmJnQucmVzaXplKHQucmVuZGVyLCEwKX0pfSw1MCl9fSgpKSxwP2RlZmluZShmdW5jdGlvbigpe3JldHVybiBlfSk6XCJvYmplY3RcIj09dHlwZW9mIG1vZHVsZSYmbW9kdWxlLmV4cG9ydHMmJihtb2R1bGUuZXhwb3J0cz1lKSx0LkNoYXJ0PWUsZS5ub0NvbmZsaWN0PWZ1bmN0aW9uKCl7cmV0dXJuIHQuQ2hhcnQ9aSxlfX0pLmNhbGwodGhpcyksZnVuY3Rpb24oKXtcInVzZSBzdHJpY3RcIjt2YXIgdD10aGlzLGk9dC5DaGFydCxlPWkuaGVscGVycyxzPXtzY2FsZUJlZ2luQXRaZXJvOiEwLHNjYWxlU2hvd0dyaWRMaW5lczohMCxzY2FsZUdyaWRMaW5lQ29sb3I6XCJyZ2JhKDAsMCwwLC4wNSlcIixzY2FsZUdyaWRMaW5lV2lkdGg6MSxzY2FsZVNob3dIb3Jpem9udGFsTGluZXM6ITAsc2NhbGVTaG93VmVydGljYWxMaW5lczohMCxiYXJTaG93U3Ryb2tlOiEwLGJhclN0cm9rZVdpZHRoOjIsYmFyVmFsdWVTcGFjaW5nOjUsYmFyRGF0YXNldFNwYWNpbmc6MSxsZWdlbmRUZW1wbGF0ZTonPHVsIGNsYXNzPVwiPCU9bmFtZS50b0xvd2VyQ2FzZSgpJT4tbGVnZW5kXCI+PCUgZm9yICh2YXIgaT0wOyBpPGRhdGFzZXRzLmxlbmd0aDsgaSsrKXslPjxsaT48c3BhbiBzdHlsZT1cImJhY2tncm91bmQtY29sb3I6PCU9ZGF0YXNldHNbaV0uZmlsbENvbG9yJT5cIj48L3NwYW4+PCVpZihkYXRhc2V0c1tpXS5sYWJlbCl7JT48JT1kYXRhc2V0c1tpXS5sYWJlbCU+PCV9JT48L2xpPjwlfSU+PC91bD4nfTtpLlR5cGUuZXh0ZW5kKHtuYW1lOlwiQmFyXCIsZGVmYXVsdHM6cyxpbml0aWFsaXplOmZ1bmN0aW9uKHQpe3ZhciBzPXRoaXMub3B0aW9uczt0aGlzLlNjYWxlQ2xhc3M9aS5TY2FsZS5leHRlbmQoe29mZnNldEdyaWRMaW5lczohMCxjYWxjdWxhdGVCYXJYOmZ1bmN0aW9uKHQsaSxlKXt2YXIgbj10aGlzLmNhbGN1bGF0ZUJhc2VXaWR0aCgpLG89dGhpcy5jYWxjdWxhdGVYKGUpLW4vMixhPXRoaXMuY2FsY3VsYXRlQmFyV2lkdGgodCk7cmV0dXJuIG8rYSppK2kqcy5iYXJEYXRhc2V0U3BhY2luZythLzJ9LGNhbGN1bGF0ZUJhc2VXaWR0aDpmdW5jdGlvbigpe3JldHVybiB0aGlzLmNhbGN1bGF0ZVgoMSktdGhpcy5jYWxjdWxhdGVYKDApLTIqcy5iYXJWYWx1ZVNwYWNpbmd9LGNhbGN1bGF0ZUJhcldpZHRoOmZ1bmN0aW9uKHQpe3ZhciBpPXRoaXMuY2FsY3VsYXRlQmFzZVdpZHRoKCktKHQtMSkqcy5iYXJEYXRhc2V0U3BhY2luZztyZXR1cm4gaS90fX0pLHRoaXMuZGF0YXNldHM9W10sdGhpcy5vcHRpb25zLnNob3dUb29sdGlwcyYmZS5iaW5kRXZlbnRzKHRoaXMsdGhpcy5vcHRpb25zLnRvb2x0aXBFdmVudHMsZnVuY3Rpb24odCl7dmFyIGk9XCJtb3VzZW91dFwiIT09dC50eXBlP3RoaXMuZ2V0QmFyc0F0RXZlbnQodCk6W107dGhpcy5lYWNoQmFycyhmdW5jdGlvbih0KXt0LnJlc3RvcmUoW1wiZmlsbENvbG9yXCIsXCJzdHJva2VDb2xvclwiXSl9KSxlLmVhY2goaSxmdW5jdGlvbih0KXt0LmZpbGxDb2xvcj10LmhpZ2hsaWdodEZpbGwsdC5zdHJva2VDb2xvcj10LmhpZ2hsaWdodFN0cm9rZX0pLHRoaXMuc2hvd1Rvb2x0aXAoaSl9KSx0aGlzLkJhckNsYXNzPWkuUmVjdGFuZ2xlLmV4dGVuZCh7c3Ryb2tlV2lkdGg6dGhpcy5vcHRpb25zLmJhclN0cm9rZVdpZHRoLHNob3dTdHJva2U6dGhpcy5vcHRpb25zLmJhclNob3dTdHJva2UsY3R4OnRoaXMuY2hhcnQuY3R4fSksZS5lYWNoKHQuZGF0YXNldHMsZnVuY3Rpb24oaSl7dmFyIHM9e2xhYmVsOmkubGFiZWx8fG51bGwsZmlsbENvbG9yOmkuZmlsbENvbG9yLHN0cm9rZUNvbG9yOmkuc3Ryb2tlQ29sb3IsYmFyczpbXX07dGhpcy5kYXRhc2V0cy5wdXNoKHMpLGUuZWFjaChpLmRhdGEsZnVuY3Rpb24oZSxuKXtzLmJhcnMucHVzaChuZXcgdGhpcy5CYXJDbGFzcyh7dmFsdWU6ZSxsYWJlbDp0LmxhYmVsc1tuXSxkYXRhc2V0TGFiZWw6aS5sYWJlbCxzdHJva2VDb2xvcjppLnN0cm9rZUNvbG9yLGZpbGxDb2xvcjppLmZpbGxDb2xvcixoaWdobGlnaHRGaWxsOmkuaGlnaGxpZ2h0RmlsbHx8aS5maWxsQ29sb3IsaGlnaGxpZ2h0U3Ryb2tlOmkuaGlnaGxpZ2h0U3Ryb2tlfHxpLnN0cm9rZUNvbG9yfSkpfSx0aGlzKX0sdGhpcyksdGhpcy5idWlsZFNjYWxlKHQubGFiZWxzKSx0aGlzLkJhckNsYXNzLnByb3RvdHlwZS5iYXNlPXRoaXMuc2NhbGUuZW5kUG9pbnQsdGhpcy5lYWNoQmFycyhmdW5jdGlvbih0LGkscyl7ZS5leHRlbmQodCx7d2lkdGg6dGhpcy5zY2FsZS5jYWxjdWxhdGVCYXJXaWR0aCh0aGlzLmRhdGFzZXRzLmxlbmd0aCkseDp0aGlzLnNjYWxlLmNhbGN1bGF0ZUJhclgodGhpcy5kYXRhc2V0cy5sZW5ndGgscyxpKSx5OnRoaXMuc2NhbGUuZW5kUG9pbnR9KSx0LnNhdmUoKX0sdGhpcyksdGhpcy5yZW5kZXIoKX0sdXBkYXRlOmZ1bmN0aW9uKCl7dGhpcy5zY2FsZS51cGRhdGUoKSxlLmVhY2godGhpcy5hY3RpdmVFbGVtZW50cyxmdW5jdGlvbih0KXt0LnJlc3RvcmUoW1wiZmlsbENvbG9yXCIsXCJzdHJva2VDb2xvclwiXSl9KSx0aGlzLmVhY2hCYXJzKGZ1bmN0aW9uKHQpe3Quc2F2ZSgpfSksdGhpcy5yZW5kZXIoKX0sZWFjaEJhcnM6ZnVuY3Rpb24odCl7ZS5lYWNoKHRoaXMuZGF0YXNldHMsZnVuY3Rpb24oaSxzKXtlLmVhY2goaS5iYXJzLHQsdGhpcyxzKX0sdGhpcyl9LGdldEJhcnNBdEV2ZW50OmZ1bmN0aW9uKHQpe2Zvcih2YXIgaSxzPVtdLG49ZS5nZXRSZWxhdGl2ZVBvc2l0aW9uKHQpLG89ZnVuY3Rpb24odCl7cy5wdXNoKHQuYmFyc1tpXSl9LGE9MDthPHRoaXMuZGF0YXNldHMubGVuZ3RoO2ErKylmb3IoaT0wO2k8dGhpcy5kYXRhc2V0c1thXS5iYXJzLmxlbmd0aDtpKyspaWYodGhpcy5kYXRhc2V0c1thXS5iYXJzW2ldLmluUmFuZ2Uobi54LG4ueSkpcmV0dXJuIGUuZWFjaCh0aGlzLmRhdGFzZXRzLG8pLHM7cmV0dXJuIHN9LGJ1aWxkU2NhbGU6ZnVuY3Rpb24odCl7dmFyIGk9dGhpcyxzPWZ1bmN0aW9uKCl7dmFyIHQ9W107cmV0dXJuIGkuZWFjaEJhcnMoZnVuY3Rpb24oaSl7dC5wdXNoKGkudmFsdWUpfSksdH0sbj17dGVtcGxhdGVTdHJpbmc6dGhpcy5vcHRpb25zLnNjYWxlTGFiZWwsaGVpZ2h0OnRoaXMuY2hhcnQuaGVpZ2h0LHdpZHRoOnRoaXMuY2hhcnQud2lkdGgsY3R4OnRoaXMuY2hhcnQuY3R4LHRleHRDb2xvcjp0aGlzLm9wdGlvbnMuc2NhbGVGb250Q29sb3IsZm9udFNpemU6dGhpcy5vcHRpb25zLnNjYWxlRm9udFNpemUsZm9udFN0eWxlOnRoaXMub3B0aW9ucy5zY2FsZUZvbnRTdHlsZSxmb250RmFtaWx5OnRoaXMub3B0aW9ucy5zY2FsZUZvbnRGYW1pbHksdmFsdWVzQ291bnQ6dC5sZW5ndGgsYmVnaW5BdFplcm86dGhpcy5vcHRpb25zLnNjYWxlQmVnaW5BdFplcm8saW50ZWdlcnNPbmx5OnRoaXMub3B0aW9ucy5zY2FsZUludGVnZXJzT25seSxjYWxjdWxhdGVZUmFuZ2U6ZnVuY3Rpb24odCl7dmFyIGk9ZS5jYWxjdWxhdGVTY2FsZVJhbmdlKHMoKSx0LHRoaXMuZm9udFNpemUsdGhpcy5iZWdpbkF0WmVybyx0aGlzLmludGVnZXJzT25seSk7ZS5leHRlbmQodGhpcyxpKX0seExhYmVsczp0LGZvbnQ6ZS5mb250U3RyaW5nKHRoaXMub3B0aW9ucy5zY2FsZUZvbnRTaXplLHRoaXMub3B0aW9ucy5zY2FsZUZvbnRTdHlsZSx0aGlzLm9wdGlvbnMuc2NhbGVGb250RmFtaWx5KSxsaW5lV2lkdGg6dGhpcy5vcHRpb25zLnNjYWxlTGluZVdpZHRoLGxpbmVDb2xvcjp0aGlzLm9wdGlvbnMuc2NhbGVMaW5lQ29sb3Isc2hvd0hvcml6b250YWxMaW5lczp0aGlzLm9wdGlvbnMuc2NhbGVTaG93SG9yaXpvbnRhbExpbmVzLHNob3dWZXJ0aWNhbExpbmVzOnRoaXMub3B0aW9ucy5zY2FsZVNob3dWZXJ0aWNhbExpbmVzLGdyaWRMaW5lV2lkdGg6dGhpcy5vcHRpb25zLnNjYWxlU2hvd0dyaWRMaW5lcz90aGlzLm9wdGlvbnMuc2NhbGVHcmlkTGluZVdpZHRoOjAsZ3JpZExpbmVDb2xvcjp0aGlzLm9wdGlvbnMuc2NhbGVTaG93R3JpZExpbmVzP3RoaXMub3B0aW9ucy5zY2FsZUdyaWRMaW5lQ29sb3I6XCJyZ2JhKDAsMCwwLDApXCIscGFkZGluZzp0aGlzLm9wdGlvbnMuc2hvd1NjYWxlPzA6dGhpcy5vcHRpb25zLmJhclNob3dTdHJva2U/dGhpcy5vcHRpb25zLmJhclN0cm9rZVdpZHRoOjAsc2hvd0xhYmVsczp0aGlzLm9wdGlvbnMuc2NhbGVTaG93TGFiZWxzLGRpc3BsYXk6dGhpcy5vcHRpb25zLnNob3dTY2FsZX07dGhpcy5vcHRpb25zLnNjYWxlT3ZlcnJpZGUmJmUuZXh0ZW5kKG4se2NhbGN1bGF0ZVlSYW5nZTplLm5vb3Asc3RlcHM6dGhpcy5vcHRpb25zLnNjYWxlU3RlcHMsc3RlcFZhbHVlOnRoaXMub3B0aW9ucy5zY2FsZVN0ZXBXaWR0aCxtaW46dGhpcy5vcHRpb25zLnNjYWxlU3RhcnRWYWx1ZSxtYXg6dGhpcy5vcHRpb25zLnNjYWxlU3RhcnRWYWx1ZSt0aGlzLm9wdGlvbnMuc2NhbGVTdGVwcyp0aGlzLm9wdGlvbnMuc2NhbGVTdGVwV2lkdGh9KSx0aGlzLnNjYWxlPW5ldyB0aGlzLlNjYWxlQ2xhc3Mobil9LGFkZERhdGE6ZnVuY3Rpb24odCxpKXtlLmVhY2godCxmdW5jdGlvbih0LGUpe3RoaXMuZGF0YXNldHNbZV0uYmFycy5wdXNoKG5ldyB0aGlzLkJhckNsYXNzKHt2YWx1ZTp0LGxhYmVsOmkseDp0aGlzLnNjYWxlLmNhbGN1bGF0ZUJhclgodGhpcy5kYXRhc2V0cy5sZW5ndGgsZSx0aGlzLnNjYWxlLnZhbHVlc0NvdW50KzEpLHk6dGhpcy5zY2FsZS5lbmRQb2ludCx3aWR0aDp0aGlzLnNjYWxlLmNhbGN1bGF0ZUJhcldpZHRoKHRoaXMuZGF0YXNldHMubGVuZ3RoKSxiYXNlOnRoaXMuc2NhbGUuZW5kUG9pbnQsc3Ryb2tlQ29sb3I6dGhpcy5kYXRhc2V0c1tlXS5zdHJva2VDb2xvcixmaWxsQ29sb3I6dGhpcy5kYXRhc2V0c1tlXS5maWxsQ29sb3J9KSlcclxufSx0aGlzKSx0aGlzLnNjYWxlLmFkZFhMYWJlbChpKSx0aGlzLnVwZGF0ZSgpfSxyZW1vdmVEYXRhOmZ1bmN0aW9uKCl7dGhpcy5zY2FsZS5yZW1vdmVYTGFiZWwoKSxlLmVhY2godGhpcy5kYXRhc2V0cyxmdW5jdGlvbih0KXt0LmJhcnMuc2hpZnQoKX0sdGhpcyksdGhpcy51cGRhdGUoKX0scmVmbG93OmZ1bmN0aW9uKCl7ZS5leHRlbmQodGhpcy5CYXJDbGFzcy5wcm90b3R5cGUse3k6dGhpcy5zY2FsZS5lbmRQb2ludCxiYXNlOnRoaXMuc2NhbGUuZW5kUG9pbnR9KTt2YXIgdD1lLmV4dGVuZCh7aGVpZ2h0OnRoaXMuY2hhcnQuaGVpZ2h0LHdpZHRoOnRoaXMuY2hhcnQud2lkdGh9KTt0aGlzLnNjYWxlLnVwZGF0ZSh0KX0sZHJhdzpmdW5jdGlvbih0KXt2YXIgaT10fHwxO3RoaXMuY2xlYXIoKTt0aGlzLmNoYXJ0LmN0eDt0aGlzLnNjYWxlLmRyYXcoaSksZS5lYWNoKHRoaXMuZGF0YXNldHMsZnVuY3Rpb24odCxzKXtlLmVhY2godC5iYXJzLGZ1bmN0aW9uKHQsZSl7dC5oYXNWYWx1ZSgpJiYodC5iYXNlPXRoaXMuc2NhbGUuZW5kUG9pbnQsdC50cmFuc2l0aW9uKHt4OnRoaXMuc2NhbGUuY2FsY3VsYXRlQmFyWCh0aGlzLmRhdGFzZXRzLmxlbmd0aCxzLGUpLHk6dGhpcy5zY2FsZS5jYWxjdWxhdGVZKHQudmFsdWUpLHdpZHRoOnRoaXMuc2NhbGUuY2FsY3VsYXRlQmFyV2lkdGgodGhpcy5kYXRhc2V0cy5sZW5ndGgpfSxpKS5kcmF3KCkpfSx0aGlzKX0sdGhpcyl9fSl9LmNhbGwodGhpcyksZnVuY3Rpb24oKXtcInVzZSBzdHJpY3RcIjt2YXIgdD10aGlzLGk9dC5DaGFydCxlPWkuaGVscGVycyxzPXtzZWdtZW50U2hvd1N0cm9rZTohMCxzZWdtZW50U3Ryb2tlQ29sb3I6XCIjZmZmXCIsc2VnbWVudFN0cm9rZVdpZHRoOjIscGVyY2VudGFnZUlubmVyQ3V0b3V0OjUwLGFuaW1hdGlvblN0ZXBzOjEwMCxhbmltYXRpb25FYXNpbmc6XCJlYXNlT3V0Qm91bmNlXCIsYW5pbWF0ZVJvdGF0ZTohMCxhbmltYXRlU2NhbGU6ITEsbGVnZW5kVGVtcGxhdGU6Jzx1bCBjbGFzcz1cIjwlPW5hbWUudG9Mb3dlckNhc2UoKSU+LWxlZ2VuZFwiPjwlIGZvciAodmFyIGk9MDsgaTxzZWdtZW50cy5sZW5ndGg7IGkrKyl7JT48bGk+PHNwYW4gc3R5bGU9XCJiYWNrZ3JvdW5kLWNvbG9yOjwlPXNlZ21lbnRzW2ldLmZpbGxDb2xvciU+XCI+PC9zcGFuPjwlaWYoc2VnbWVudHNbaV0ubGFiZWwpeyU+PCU9c2VnbWVudHNbaV0ubGFiZWwlPjwlfSU+PC9saT48JX0lPjwvdWw+J307aS5UeXBlLmV4dGVuZCh7bmFtZTpcIkRvdWdobnV0XCIsZGVmYXVsdHM6cyxpbml0aWFsaXplOmZ1bmN0aW9uKHQpe3RoaXMuc2VnbWVudHM9W10sdGhpcy5vdXRlclJhZGl1cz0oZS5taW4oW3RoaXMuY2hhcnQud2lkdGgsdGhpcy5jaGFydC5oZWlnaHRdKS10aGlzLm9wdGlvbnMuc2VnbWVudFN0cm9rZVdpZHRoLzIpLzIsdGhpcy5TZWdtZW50QXJjPWkuQXJjLmV4dGVuZCh7Y3R4OnRoaXMuY2hhcnQuY3R4LHg6dGhpcy5jaGFydC53aWR0aC8yLHk6dGhpcy5jaGFydC5oZWlnaHQvMn0pLHRoaXMub3B0aW9ucy5zaG93VG9vbHRpcHMmJmUuYmluZEV2ZW50cyh0aGlzLHRoaXMub3B0aW9ucy50b29sdGlwRXZlbnRzLGZ1bmN0aW9uKHQpe3ZhciBpPVwibW91c2VvdXRcIiE9PXQudHlwZT90aGlzLmdldFNlZ21lbnRzQXRFdmVudCh0KTpbXTtlLmVhY2godGhpcy5zZWdtZW50cyxmdW5jdGlvbih0KXt0LnJlc3RvcmUoW1wiZmlsbENvbG9yXCJdKX0pLGUuZWFjaChpLGZ1bmN0aW9uKHQpe3QuZmlsbENvbG9yPXQuaGlnaGxpZ2h0Q29sb3J9KSx0aGlzLnNob3dUb29sdGlwKGkpfSksdGhpcy5jYWxjdWxhdGVUb3RhbCh0KSxlLmVhY2godCxmdW5jdGlvbih0LGkpe3RoaXMuYWRkRGF0YSh0LGksITApfSx0aGlzKSx0aGlzLnJlbmRlcigpfSxnZXRTZWdtZW50c0F0RXZlbnQ6ZnVuY3Rpb24odCl7dmFyIGk9W10scz1lLmdldFJlbGF0aXZlUG9zaXRpb24odCk7cmV0dXJuIGUuZWFjaCh0aGlzLnNlZ21lbnRzLGZ1bmN0aW9uKHQpe3QuaW5SYW5nZShzLngscy55KSYmaS5wdXNoKHQpfSx0aGlzKSxpfSxhZGREYXRhOmZ1bmN0aW9uKHQsaSxlKXt2YXIgcz1pfHx0aGlzLnNlZ21lbnRzLmxlbmd0aDt0aGlzLnNlZ21lbnRzLnNwbGljZShzLDAsbmV3IHRoaXMuU2VnbWVudEFyYyh7dmFsdWU6dC52YWx1ZSxvdXRlclJhZGl1czp0aGlzLm9wdGlvbnMuYW5pbWF0ZVNjYWxlPzA6dGhpcy5vdXRlclJhZGl1cyxpbm5lclJhZGl1czp0aGlzLm9wdGlvbnMuYW5pbWF0ZVNjYWxlPzA6dGhpcy5vdXRlclJhZGl1cy8xMDAqdGhpcy5vcHRpb25zLnBlcmNlbnRhZ2VJbm5lckN1dG91dCxmaWxsQ29sb3I6dC5jb2xvcixoaWdobGlnaHRDb2xvcjp0LmhpZ2hsaWdodHx8dC5jb2xvcixzaG93U3Ryb2tlOnRoaXMub3B0aW9ucy5zZWdtZW50U2hvd1N0cm9rZSxzdHJva2VXaWR0aDp0aGlzLm9wdGlvbnMuc2VnbWVudFN0cm9rZVdpZHRoLHN0cm9rZUNvbG9yOnRoaXMub3B0aW9ucy5zZWdtZW50U3Ryb2tlQ29sb3Isc3RhcnRBbmdsZToxLjUqTWF0aC5QSSxjaXJjdW1mZXJlbmNlOnRoaXMub3B0aW9ucy5hbmltYXRlUm90YXRlPzA6dGhpcy5jYWxjdWxhdGVDaXJjdW1mZXJlbmNlKHQudmFsdWUpLGxhYmVsOnQubGFiZWx9KSksZXx8KHRoaXMucmVmbG93KCksdGhpcy51cGRhdGUoKSl9LGNhbGN1bGF0ZUNpcmN1bWZlcmVuY2U6ZnVuY3Rpb24odCl7cmV0dXJuIDIqTWF0aC5QSSooTWF0aC5hYnModCkvdGhpcy50b3RhbCl9LGNhbGN1bGF0ZVRvdGFsOmZ1bmN0aW9uKHQpe3RoaXMudG90YWw9MCxlLmVhY2godCxmdW5jdGlvbih0KXt0aGlzLnRvdGFsKz1NYXRoLmFicyh0LnZhbHVlKX0sdGhpcyl9LHVwZGF0ZTpmdW5jdGlvbigpe3RoaXMuY2FsY3VsYXRlVG90YWwodGhpcy5zZWdtZW50cyksZS5lYWNoKHRoaXMuYWN0aXZlRWxlbWVudHMsZnVuY3Rpb24odCl7dC5yZXN0b3JlKFtcImZpbGxDb2xvclwiXSl9KSxlLmVhY2godGhpcy5zZWdtZW50cyxmdW5jdGlvbih0KXt0LnNhdmUoKX0pLHRoaXMucmVuZGVyKCl9LHJlbW92ZURhdGE6ZnVuY3Rpb24odCl7dmFyIGk9ZS5pc051bWJlcih0KT90OnRoaXMuc2VnbWVudHMubGVuZ3RoLTE7dGhpcy5zZWdtZW50cy5zcGxpY2UoaSwxKSx0aGlzLnJlZmxvdygpLHRoaXMudXBkYXRlKCl9LHJlZmxvdzpmdW5jdGlvbigpe2UuZXh0ZW5kKHRoaXMuU2VnbWVudEFyYy5wcm90b3R5cGUse3g6dGhpcy5jaGFydC53aWR0aC8yLHk6dGhpcy5jaGFydC5oZWlnaHQvMn0pLHRoaXMub3V0ZXJSYWRpdXM9KGUubWluKFt0aGlzLmNoYXJ0LndpZHRoLHRoaXMuY2hhcnQuaGVpZ2h0XSktdGhpcy5vcHRpb25zLnNlZ21lbnRTdHJva2VXaWR0aC8yKS8yLGUuZWFjaCh0aGlzLnNlZ21lbnRzLGZ1bmN0aW9uKHQpe3QudXBkYXRlKHtvdXRlclJhZGl1czp0aGlzLm91dGVyUmFkaXVzLGlubmVyUmFkaXVzOnRoaXMub3V0ZXJSYWRpdXMvMTAwKnRoaXMub3B0aW9ucy5wZXJjZW50YWdlSW5uZXJDdXRvdXR9KX0sdGhpcyl9LGRyYXc6ZnVuY3Rpb24odCl7dmFyIGk9dD90OjE7dGhpcy5jbGVhcigpLGUuZWFjaCh0aGlzLnNlZ21lbnRzLGZ1bmN0aW9uKHQsZSl7dC50cmFuc2l0aW9uKHtjaXJjdW1mZXJlbmNlOnRoaXMuY2FsY3VsYXRlQ2lyY3VtZmVyZW5jZSh0LnZhbHVlKSxvdXRlclJhZGl1czp0aGlzLm91dGVyUmFkaXVzLGlubmVyUmFkaXVzOnRoaXMub3V0ZXJSYWRpdXMvMTAwKnRoaXMub3B0aW9ucy5wZXJjZW50YWdlSW5uZXJDdXRvdXR9LGkpLHQuZW5kQW5nbGU9dC5zdGFydEFuZ2xlK3QuY2lyY3VtZmVyZW5jZSx0LmRyYXcoKSwwPT09ZSYmKHQuc3RhcnRBbmdsZT0xLjUqTWF0aC5QSSksZTx0aGlzLnNlZ21lbnRzLmxlbmd0aC0xJiYodGhpcy5zZWdtZW50c1tlKzFdLnN0YXJ0QW5nbGU9dC5lbmRBbmdsZSl9LHRoaXMpfX0pLGkudHlwZXMuRG91Z2hudXQuZXh0ZW5kKHtuYW1lOlwiUGllXCIsZGVmYXVsdHM6ZS5tZXJnZShzLHtwZXJjZW50YWdlSW5uZXJDdXRvdXQ6MH0pfSl9LmNhbGwodGhpcyksZnVuY3Rpb24oKXtcInVzZSBzdHJpY3RcIjt2YXIgdD10aGlzLGk9dC5DaGFydCxlPWkuaGVscGVycyxzPXtzY2FsZVNob3dHcmlkTGluZXM6ITAsc2NhbGVHcmlkTGluZUNvbG9yOlwicmdiYSgwLDAsMCwuMDUpXCIsc2NhbGVHcmlkTGluZVdpZHRoOjEsc2NhbGVTaG93SG9yaXpvbnRhbExpbmVzOiEwLHNjYWxlU2hvd1ZlcnRpY2FsTGluZXM6ITAsYmV6aWVyQ3VydmU6ITAsYmV6aWVyQ3VydmVUZW5zaW9uOi40LHBvaW50RG90OiEwLHBvaW50RG90UmFkaXVzOjQscG9pbnREb3RTdHJva2VXaWR0aDoxLHBvaW50SGl0RGV0ZWN0aW9uUmFkaXVzOjIwLGRhdGFzZXRTdHJva2U6ITAsZGF0YXNldFN0cm9rZVdpZHRoOjIsZGF0YXNldEZpbGw6ITAsbGVnZW5kVGVtcGxhdGU6Jzx1bCBjbGFzcz1cIjwlPW5hbWUudG9Mb3dlckNhc2UoKSU+LWxlZ2VuZFwiPjwlIGZvciAodmFyIGk9MDsgaTxkYXRhc2V0cy5sZW5ndGg7IGkrKyl7JT48bGk+PHNwYW4gc3R5bGU9XCJiYWNrZ3JvdW5kLWNvbG9yOjwlPWRhdGFzZXRzW2ldLnN0cm9rZUNvbG9yJT5cIj48L3NwYW4+PCVpZihkYXRhc2V0c1tpXS5sYWJlbCl7JT48JT1kYXRhc2V0c1tpXS5sYWJlbCU+PCV9JT48L2xpPjwlfSU+PC91bD4nfTtpLlR5cGUuZXh0ZW5kKHtuYW1lOlwiTGluZVwiLGRlZmF1bHRzOnMsaW5pdGlhbGl6ZTpmdW5jdGlvbih0KXt0aGlzLlBvaW50Q2xhc3M9aS5Qb2ludC5leHRlbmQoe3N0cm9rZVdpZHRoOnRoaXMub3B0aW9ucy5wb2ludERvdFN0cm9rZVdpZHRoLHJhZGl1czp0aGlzLm9wdGlvbnMucG9pbnREb3RSYWRpdXMsZGlzcGxheTp0aGlzLm9wdGlvbnMucG9pbnREb3QsaGl0RGV0ZWN0aW9uUmFkaXVzOnRoaXMub3B0aW9ucy5wb2ludEhpdERldGVjdGlvblJhZGl1cyxjdHg6dGhpcy5jaGFydC5jdHgsaW5SYW5nZTpmdW5jdGlvbih0KXtyZXR1cm4gTWF0aC5wb3codC10aGlzLngsMik8TWF0aC5wb3codGhpcy5yYWRpdXMrdGhpcy5oaXREZXRlY3Rpb25SYWRpdXMsMil9fSksdGhpcy5kYXRhc2V0cz1bXSx0aGlzLm9wdGlvbnMuc2hvd1Rvb2x0aXBzJiZlLmJpbmRFdmVudHModGhpcyx0aGlzLm9wdGlvbnMudG9vbHRpcEV2ZW50cyxmdW5jdGlvbih0KXt2YXIgaT1cIm1vdXNlb3V0XCIhPT10LnR5cGU/dGhpcy5nZXRQb2ludHNBdEV2ZW50KHQpOltdO3RoaXMuZWFjaFBvaW50cyhmdW5jdGlvbih0KXt0LnJlc3RvcmUoW1wiZmlsbENvbG9yXCIsXCJzdHJva2VDb2xvclwiXSl9KSxlLmVhY2goaSxmdW5jdGlvbih0KXt0LmZpbGxDb2xvcj10LmhpZ2hsaWdodEZpbGwsdC5zdHJva2VDb2xvcj10LmhpZ2hsaWdodFN0cm9rZX0pLHRoaXMuc2hvd1Rvb2x0aXAoaSl9KSxlLmVhY2godC5kYXRhc2V0cyxmdW5jdGlvbihpKXt2YXIgcz17bGFiZWw6aS5sYWJlbHx8bnVsbCxmaWxsQ29sb3I6aS5maWxsQ29sb3Isc3Ryb2tlQ29sb3I6aS5zdHJva2VDb2xvcixwb2ludENvbG9yOmkucG9pbnRDb2xvcixwb2ludFN0cm9rZUNvbG9yOmkucG9pbnRTdHJva2VDb2xvcixwb2ludHM6W119O3RoaXMuZGF0YXNldHMucHVzaChzKSxlLmVhY2goaS5kYXRhLGZ1bmN0aW9uKGUsbil7cy5wb2ludHMucHVzaChuZXcgdGhpcy5Qb2ludENsYXNzKHt2YWx1ZTplLGxhYmVsOnQubGFiZWxzW25dLGRhdGFzZXRMYWJlbDppLmxhYmVsLHN0cm9rZUNvbG9yOmkucG9pbnRTdHJva2VDb2xvcixmaWxsQ29sb3I6aS5wb2ludENvbG9yLGhpZ2hsaWdodEZpbGw6aS5wb2ludEhpZ2hsaWdodEZpbGx8fGkucG9pbnRDb2xvcixoaWdobGlnaHRTdHJva2U6aS5wb2ludEhpZ2hsaWdodFN0cm9rZXx8aS5wb2ludFN0cm9rZUNvbG9yfSkpfSx0aGlzKSx0aGlzLmJ1aWxkU2NhbGUodC5sYWJlbHMpLHRoaXMuZWFjaFBvaW50cyhmdW5jdGlvbih0LGkpe2UuZXh0ZW5kKHQse3g6dGhpcy5zY2FsZS5jYWxjdWxhdGVYKGkpLHk6dGhpcy5zY2FsZS5lbmRQb2ludH0pLHQuc2F2ZSgpfSx0aGlzKX0sdGhpcyksdGhpcy5yZW5kZXIoKX0sdXBkYXRlOmZ1bmN0aW9uKCl7dGhpcy5zY2FsZS51cGRhdGUoKSxlLmVhY2godGhpcy5hY3RpdmVFbGVtZW50cyxmdW5jdGlvbih0KXt0LnJlc3RvcmUoW1wiZmlsbENvbG9yXCIsXCJzdHJva2VDb2xvclwiXSl9KSx0aGlzLmVhY2hQb2ludHMoZnVuY3Rpb24odCl7dC5zYXZlKCl9KSx0aGlzLnJlbmRlcigpfSxlYWNoUG9pbnRzOmZ1bmN0aW9uKHQpe2UuZWFjaCh0aGlzLmRhdGFzZXRzLGZ1bmN0aW9uKGkpe2UuZWFjaChpLnBvaW50cyx0LHRoaXMpfSx0aGlzKX0sZ2V0UG9pbnRzQXRFdmVudDpmdW5jdGlvbih0KXt2YXIgaT1bXSxzPWUuZ2V0UmVsYXRpdmVQb3NpdGlvbih0KTtyZXR1cm4gZS5lYWNoKHRoaXMuZGF0YXNldHMsZnVuY3Rpb24odCl7ZS5lYWNoKHQucG9pbnRzLGZ1bmN0aW9uKHQpe3QuaW5SYW5nZShzLngscy55KSYmaS5wdXNoKHQpfSl9LHRoaXMpLGl9LGJ1aWxkU2NhbGU6ZnVuY3Rpb24odCl7dmFyIHM9dGhpcyxuPWZ1bmN0aW9uKCl7dmFyIHQ9W107cmV0dXJuIHMuZWFjaFBvaW50cyhmdW5jdGlvbihpKXt0LnB1c2goaS52YWx1ZSl9KSx0fSxvPXt0ZW1wbGF0ZVN0cmluZzp0aGlzLm9wdGlvbnMuc2NhbGVMYWJlbCxoZWlnaHQ6dGhpcy5jaGFydC5oZWlnaHQsd2lkdGg6dGhpcy5jaGFydC53aWR0aCxjdHg6dGhpcy5jaGFydC5jdHgsdGV4dENvbG9yOnRoaXMub3B0aW9ucy5zY2FsZUZvbnRDb2xvcixmb250U2l6ZTp0aGlzLm9wdGlvbnMuc2NhbGVGb250U2l6ZSxmb250U3R5bGU6dGhpcy5vcHRpb25zLnNjYWxlRm9udFN0eWxlLGZvbnRGYW1pbHk6dGhpcy5vcHRpb25zLnNjYWxlRm9udEZhbWlseSx2YWx1ZXNDb3VudDp0Lmxlbmd0aCxiZWdpbkF0WmVybzp0aGlzLm9wdGlvbnMuc2NhbGVCZWdpbkF0WmVybyxpbnRlZ2Vyc09ubHk6dGhpcy5vcHRpb25zLnNjYWxlSW50ZWdlcnNPbmx5LGNhbGN1bGF0ZVlSYW5nZTpmdW5jdGlvbih0KXt2YXIgaT1lLmNhbGN1bGF0ZVNjYWxlUmFuZ2UobigpLHQsdGhpcy5mb250U2l6ZSx0aGlzLmJlZ2luQXRaZXJvLHRoaXMuaW50ZWdlcnNPbmx5KTtlLmV4dGVuZCh0aGlzLGkpfSx4TGFiZWxzOnQsZm9udDplLmZvbnRTdHJpbmcodGhpcy5vcHRpb25zLnNjYWxlRm9udFNpemUsdGhpcy5vcHRpb25zLnNjYWxlRm9udFN0eWxlLHRoaXMub3B0aW9ucy5zY2FsZUZvbnRGYW1pbHkpLGxpbmVXaWR0aDp0aGlzLm9wdGlvbnMuc2NhbGVMaW5lV2lkdGgsbGluZUNvbG9yOnRoaXMub3B0aW9ucy5zY2FsZUxpbmVDb2xvcixzaG93SG9yaXpvbnRhbExpbmVzOnRoaXMub3B0aW9ucy5zY2FsZVNob3dIb3Jpem9udGFsTGluZXMsc2hvd1ZlcnRpY2FsTGluZXM6dGhpcy5vcHRpb25zLnNjYWxlU2hvd1ZlcnRpY2FsTGluZXMsZ3JpZExpbmVXaWR0aDp0aGlzLm9wdGlvbnMuc2NhbGVTaG93R3JpZExpbmVzP3RoaXMub3B0aW9ucy5zY2FsZUdyaWRMaW5lV2lkdGg6MCxncmlkTGluZUNvbG9yOnRoaXMub3B0aW9ucy5zY2FsZVNob3dHcmlkTGluZXM/dGhpcy5vcHRpb25zLnNjYWxlR3JpZExpbmVDb2xvcjpcInJnYmEoMCwwLDAsMClcIixwYWRkaW5nOnRoaXMub3B0aW9ucy5zaG93U2NhbGU/MDp0aGlzLm9wdGlvbnMucG9pbnREb3RSYWRpdXMrdGhpcy5vcHRpb25zLnBvaW50RG90U3Ryb2tlV2lkdGgsc2hvd0xhYmVsczp0aGlzLm9wdGlvbnMuc2NhbGVTaG93TGFiZWxzLGRpc3BsYXk6dGhpcy5vcHRpb25zLnNob3dTY2FsZX07dGhpcy5vcHRpb25zLnNjYWxlT3ZlcnJpZGUmJmUuZXh0ZW5kKG8se2NhbGN1bGF0ZVlSYW5nZTplLm5vb3Asc3RlcHM6dGhpcy5vcHRpb25zLnNjYWxlU3RlcHMsc3RlcFZhbHVlOnRoaXMub3B0aW9ucy5zY2FsZVN0ZXBXaWR0aCxtaW46dGhpcy5vcHRpb25zLnNjYWxlU3RhcnRWYWx1ZSxtYXg6dGhpcy5vcHRpb25zLnNjYWxlU3RhcnRWYWx1ZSt0aGlzLm9wdGlvbnMuc2NhbGVTdGVwcyp0aGlzLm9wdGlvbnMuc2NhbGVTdGVwV2lkdGh9KSx0aGlzLnNjYWxlPW5ldyBpLlNjYWxlKG8pfSxhZGREYXRhOmZ1bmN0aW9uKHQsaSl7ZS5lYWNoKHQsZnVuY3Rpb24odCxlKXt0aGlzLmRhdGFzZXRzW2VdLnBvaW50cy5wdXNoKG5ldyB0aGlzLlBvaW50Q2xhc3Moe3ZhbHVlOnQsbGFiZWw6aSx4OnRoaXMuc2NhbGUuY2FsY3VsYXRlWCh0aGlzLnNjYWxlLnZhbHVlc0NvdW50KzEpLHk6dGhpcy5zY2FsZS5lbmRQb2ludCxzdHJva2VDb2xvcjp0aGlzLmRhdGFzZXRzW2VdLnBvaW50U3Ryb2tlQ29sb3IsZmlsbENvbG9yOnRoaXMuZGF0YXNldHNbZV0ucG9pbnRDb2xvcn0pKX0sdGhpcyksdGhpcy5zY2FsZS5hZGRYTGFiZWwoaSksdGhpcy51cGRhdGUoKX0scmVtb3ZlRGF0YTpmdW5jdGlvbigpe3RoaXMuc2NhbGUucmVtb3ZlWExhYmVsKCksZS5lYWNoKHRoaXMuZGF0YXNldHMsZnVuY3Rpb24odCl7dC5wb2ludHMuc2hpZnQoKX0sdGhpcyksdGhpcy51cGRhdGUoKX0scmVmbG93OmZ1bmN0aW9uKCl7dmFyIHQ9ZS5leHRlbmQoe2hlaWdodDp0aGlzLmNoYXJ0LmhlaWdodCx3aWR0aDp0aGlzLmNoYXJ0LndpZHRofSk7dGhpcy5zY2FsZS51cGRhdGUodCl9LGRyYXc6ZnVuY3Rpb24odCl7dmFyIGk9dHx8MTt0aGlzLmNsZWFyKCk7dmFyIHM9dGhpcy5jaGFydC5jdHgsbj1mdW5jdGlvbih0KXtyZXR1cm4gbnVsbCE9PXQudmFsdWV9LG89ZnVuY3Rpb24odCxpLHMpe3JldHVybiBlLmZpbmROZXh0V2hlcmUoaSxuLHMpfHx0fSxhPWZ1bmN0aW9uKHQsaSxzKXtyZXR1cm4gZS5maW5kUHJldmlvdXNXaGVyZShpLG4scyl8fHR9O3RoaXMuc2NhbGUuZHJhdyhpKSxlLmVhY2godGhpcy5kYXRhc2V0cyxmdW5jdGlvbih0KXt2YXIgaD1lLndoZXJlKHQucG9pbnRzLG4pO2UuZWFjaCh0LnBvaW50cyxmdW5jdGlvbih0LGUpe3QuaGFzVmFsdWUoKSYmdC50cmFuc2l0aW9uKHt5OnRoaXMuc2NhbGUuY2FsY3VsYXRlWSh0LnZhbHVlKSx4OnRoaXMuc2NhbGUuY2FsY3VsYXRlWChlKX0saSl9LHRoaXMpLHRoaXMub3B0aW9ucy5iZXppZXJDdXJ2ZSYmZS5lYWNoKGgsZnVuY3Rpb24odCxpKXt2YXIgcz1pPjAmJmk8aC5sZW5ndGgtMT90aGlzLm9wdGlvbnMuYmV6aWVyQ3VydmVUZW5zaW9uOjA7dC5jb250cm9sUG9pbnRzPWUuc3BsaW5lQ3VydmUoYSh0LGgsaSksdCxvKHQsaCxpKSxzKSx0LmNvbnRyb2xQb2ludHMub3V0ZXIueT50aGlzLnNjYWxlLmVuZFBvaW50P3QuY29udHJvbFBvaW50cy5vdXRlci55PXRoaXMuc2NhbGUuZW5kUG9pbnQ6dC5jb250cm9sUG9pbnRzLm91dGVyLnk8dGhpcy5zY2FsZS5zdGFydFBvaW50JiYodC5jb250cm9sUG9pbnRzLm91dGVyLnk9dGhpcy5zY2FsZS5zdGFydFBvaW50KSx0LmNvbnRyb2xQb2ludHMuaW5uZXIueT50aGlzLnNjYWxlLmVuZFBvaW50P3QuY29udHJvbFBvaW50cy5pbm5lci55PXRoaXMuc2NhbGUuZW5kUG9pbnQ6dC5jb250cm9sUG9pbnRzLmlubmVyLnk8dGhpcy5zY2FsZS5zdGFydFBvaW50JiYodC5jb250cm9sUG9pbnRzLmlubmVyLnk9dGhpcy5zY2FsZS5zdGFydFBvaW50KX0sdGhpcykscy5saW5lV2lkdGg9dGhpcy5vcHRpb25zLmRhdGFzZXRTdHJva2VXaWR0aCxzLnN0cm9rZVN0eWxlPXQuc3Ryb2tlQ29sb3Iscy5iZWdpblBhdGgoKSxlLmVhY2goaCxmdW5jdGlvbih0LGkpe2lmKDA9PT1pKXMubW92ZVRvKHQueCx0LnkpO2Vsc2UgaWYodGhpcy5vcHRpb25zLmJlemllckN1cnZlKXt2YXIgZT1hKHQsaCxpKTtzLmJlemllckN1cnZlVG8oZS5jb250cm9sUG9pbnRzLm91dGVyLngsZS5jb250cm9sUG9pbnRzLm91dGVyLnksdC5jb250cm9sUG9pbnRzLmlubmVyLngsdC5jb250cm9sUG9pbnRzLmlubmVyLnksdC54LHQueSl9ZWxzZSBzLmxpbmVUbyh0LngsdC55KX0sdGhpcykscy5zdHJva2UoKSx0aGlzLm9wdGlvbnMuZGF0YXNldEZpbGwmJmgubGVuZ3RoPjAmJihzLmxpbmVUbyhoW2gubGVuZ3RoLTFdLngsdGhpcy5zY2FsZS5lbmRQb2ludCkscy5saW5lVG8oaFswXS54LHRoaXMuc2NhbGUuZW5kUG9pbnQpLHMuZmlsbFN0eWxlPXQuZmlsbENvbG9yLHMuY2xvc2VQYXRoKCkscy5maWxsKCkpLGUuZWFjaChoLGZ1bmN0aW9uKHQpe3QuZHJhdygpfSl9LHRoaXMpfX0pfS5jYWxsKHRoaXMpLGZ1bmN0aW9uKCl7XCJ1c2Ugc3RyaWN0XCI7dmFyIHQ9dGhpcyxpPXQuQ2hhcnQsZT1pLmhlbHBlcnMscz17c2NhbGVTaG93TGFiZWxCYWNrZHJvcDohMCxzY2FsZUJhY2tkcm9wQ29sb3I6XCJyZ2JhKDI1NSwyNTUsMjU1LDAuNzUpXCIsc2NhbGVCZWdpbkF0WmVybzohMCxzY2FsZUJhY2tkcm9wUGFkZGluZ1k6MixzY2FsZUJhY2tkcm9wUGFkZGluZ1g6MixzY2FsZVNob3dMaW5lOiEwLHNlZ21lbnRTaG93U3Ryb2tlOiEwLHNlZ21lbnRTdHJva2VDb2xvcjpcIiNmZmZcIixzZWdtZW50U3Ryb2tlV2lkdGg6MixhbmltYXRpb25TdGVwczoxMDAsYW5pbWF0aW9uRWFzaW5nOlwiZWFzZU91dEJvdW5jZVwiLGFuaW1hdGVSb3RhdGU6ITAsYW5pbWF0ZVNjYWxlOiExLGxlZ2VuZFRlbXBsYXRlOic8dWwgY2xhc3M9XCI8JT1uYW1lLnRvTG93ZXJDYXNlKCklPi1sZWdlbmRcIj48JSBmb3IgKHZhciBpPTA7IGk8c2VnbWVudHMubGVuZ3RoOyBpKyspeyU+PGxpPjxzcGFuIHN0eWxlPVwiYmFja2dyb3VuZC1jb2xvcjo8JT1zZWdtZW50c1tpXS5maWxsQ29sb3IlPlwiPjwvc3Bhbj48JWlmKHNlZ21lbnRzW2ldLmxhYmVsKXslPjwlPXNlZ21lbnRzW2ldLmxhYmVsJT48JX0lPjwvbGk+PCV9JT48L3VsPid9O2kuVHlwZS5leHRlbmQoe25hbWU6XCJQb2xhckFyZWFcIixkZWZhdWx0czpzLGluaXRpYWxpemU6ZnVuY3Rpb24odCl7dGhpcy5zZWdtZW50cz1bXSx0aGlzLlNlZ21lbnRBcmM9aS5BcmMuZXh0ZW5kKHtzaG93U3Ryb2tlOnRoaXMub3B0aW9ucy5zZWdtZW50U2hvd1N0cm9rZSxzdHJva2VXaWR0aDp0aGlzLm9wdGlvbnMuc2VnbWVudFN0cm9rZVdpZHRoLHN0cm9rZUNvbG9yOnRoaXMub3B0aW9ucy5zZWdtZW50U3Ryb2tlQ29sb3IsY3R4OnRoaXMuY2hhcnQuY3R4LGlubmVyUmFkaXVzOjAseDp0aGlzLmNoYXJ0LndpZHRoLzIseTp0aGlzLmNoYXJ0LmhlaWdodC8yfSksdGhpcy5zY2FsZT1uZXcgaS5SYWRpYWxTY2FsZSh7ZGlzcGxheTp0aGlzLm9wdGlvbnMuc2hvd1NjYWxlLGZvbnRTdHlsZTp0aGlzLm9wdGlvbnMuc2NhbGVGb250U3R5bGUsZm9udFNpemU6dGhpcy5vcHRpb25zLnNjYWxlRm9udFNpemUsZm9udEZhbWlseTp0aGlzLm9wdGlvbnMuc2NhbGVGb250RmFtaWx5LGZvbnRDb2xvcjp0aGlzLm9wdGlvbnMuc2NhbGVGb250Q29sb3Isc2hvd0xhYmVsczp0aGlzLm9wdGlvbnMuc2NhbGVTaG93TGFiZWxzLHNob3dMYWJlbEJhY2tkcm9wOnRoaXMub3B0aW9ucy5zY2FsZVNob3dMYWJlbEJhY2tkcm9wLGJhY2tkcm9wQ29sb3I6dGhpcy5vcHRpb25zLnNjYWxlQmFja2Ryb3BDb2xvcixiYWNrZHJvcFBhZGRpbmdZOnRoaXMub3B0aW9ucy5zY2FsZUJhY2tkcm9wUGFkZGluZ1ksYmFja2Ryb3BQYWRkaW5nWDp0aGlzLm9wdGlvbnMuc2NhbGVCYWNrZHJvcFBhZGRpbmdYLGxpbmVXaWR0aDp0aGlzLm9wdGlvbnMuc2NhbGVTaG93TGluZT90aGlzLm9wdGlvbnMuc2NhbGVMaW5lV2lkdGg6MCxsaW5lQ29sb3I6dGhpcy5vcHRpb25zLnNjYWxlTGluZUNvbG9yLGxpbmVBcmM6ITAsd2lkdGg6dGhpcy5jaGFydC53aWR0aCxoZWlnaHQ6dGhpcy5jaGFydC5oZWlnaHQseENlbnRlcjp0aGlzLmNoYXJ0LndpZHRoLzIseUNlbnRlcjp0aGlzLmNoYXJ0LmhlaWdodC8yLGN0eDp0aGlzLmNoYXJ0LmN0eCx0ZW1wbGF0ZVN0cmluZzp0aGlzLm9wdGlvbnMuc2NhbGVMYWJlbCx2YWx1ZXNDb3VudDp0Lmxlbmd0aH0pLHRoaXMudXBkYXRlU2NhbGVSYW5nZSh0KSx0aGlzLnNjYWxlLnVwZGF0ZSgpLGUuZWFjaCh0LGZ1bmN0aW9uKHQsaSl7dGhpcy5hZGREYXRhKHQsaSwhMCl9LHRoaXMpLHRoaXMub3B0aW9ucy5zaG93VG9vbHRpcHMmJmUuYmluZEV2ZW50cyh0aGlzLHRoaXMub3B0aW9ucy50b29sdGlwRXZlbnRzLGZ1bmN0aW9uKHQpe3ZhciBpPVwibW91c2VvdXRcIiE9PXQudHlwZT90aGlzLmdldFNlZ21lbnRzQXRFdmVudCh0KTpbXTtlLmVhY2godGhpcy5zZWdtZW50cyxmdW5jdGlvbih0KXt0LnJlc3RvcmUoW1wiZmlsbENvbG9yXCJdKX0pLGUuZWFjaChpLGZ1bmN0aW9uKHQpe3QuZmlsbENvbG9yPXQuaGlnaGxpZ2h0Q29sb3J9KSx0aGlzLnNob3dUb29sdGlwKGkpfSksdGhpcy5yZW5kZXIoKX0sZ2V0U2VnbWVudHNBdEV2ZW50OmZ1bmN0aW9uKHQpe3ZhciBpPVtdLHM9ZS5nZXRSZWxhdGl2ZVBvc2l0aW9uKHQpO3JldHVybiBlLmVhY2godGhpcy5zZWdtZW50cyxmdW5jdGlvbih0KXt0LmluUmFuZ2Uocy54LHMueSkmJmkucHVzaCh0KX0sdGhpcyksaX0sYWRkRGF0YTpmdW5jdGlvbih0LGksZSl7dmFyIHM9aXx8dGhpcy5zZWdtZW50cy5sZW5ndGg7dGhpcy5zZWdtZW50cy5zcGxpY2UocywwLG5ldyB0aGlzLlNlZ21lbnRBcmMoe2ZpbGxDb2xvcjp0LmNvbG9yLGhpZ2hsaWdodENvbG9yOnQuaGlnaGxpZ2h0fHx0LmNvbG9yLGxhYmVsOnQubGFiZWwsdmFsdWU6dC52YWx1ZSxvdXRlclJhZGl1czp0aGlzLm9wdGlvbnMuYW5pbWF0ZVNjYWxlPzA6dGhpcy5zY2FsZS5jYWxjdWxhdGVDZW50ZXJPZmZzZXQodC52YWx1ZSksY2lyY3VtZmVyZW5jZTp0aGlzLm9wdGlvbnMuYW5pbWF0ZVJvdGF0ZT8wOnRoaXMuc2NhbGUuZ2V0Q2lyY3VtZmVyZW5jZSgpLHN0YXJ0QW5nbGU6MS41Kk1hdGguUEl9KSksZXx8KHRoaXMucmVmbG93KCksdGhpcy51cGRhdGUoKSl9LHJlbW92ZURhdGE6ZnVuY3Rpb24odCl7dmFyIGk9ZS5pc051bWJlcih0KT90OnRoaXMuc2VnbWVudHMubGVuZ3RoLTE7dGhpcy5zZWdtZW50cy5zcGxpY2UoaSwxKSx0aGlzLnJlZmxvdygpLHRoaXMudXBkYXRlKCl9LGNhbGN1bGF0ZVRvdGFsOmZ1bmN0aW9uKHQpe3RoaXMudG90YWw9MCxlLmVhY2godCxmdW5jdGlvbih0KXt0aGlzLnRvdGFsKz10LnZhbHVlfSx0aGlzKSx0aGlzLnNjYWxlLnZhbHVlc0NvdW50PXRoaXMuc2VnbWVudHMubGVuZ3RofSx1cGRhdGVTY2FsZVJhbmdlOmZ1bmN0aW9uKHQpe3ZhciBpPVtdO2UuZWFjaCh0LGZ1bmN0aW9uKHQpe2kucHVzaCh0LnZhbHVlKX0pO3ZhciBzPXRoaXMub3B0aW9ucy5zY2FsZU92ZXJyaWRlP3tzdGVwczp0aGlzLm9wdGlvbnMuc2NhbGVTdGVwcyxzdGVwVmFsdWU6dGhpcy5vcHRpb25zLnNjYWxlU3RlcFdpZHRoLG1pbjp0aGlzLm9wdGlvbnMuc2NhbGVTdGFydFZhbHVlLG1heDp0aGlzLm9wdGlvbnMuc2NhbGVTdGFydFZhbHVlK3RoaXMub3B0aW9ucy5zY2FsZVN0ZXBzKnRoaXMub3B0aW9ucy5zY2FsZVN0ZXBXaWR0aH06ZS5jYWxjdWxhdGVTY2FsZVJhbmdlKGksZS5taW4oW3RoaXMuY2hhcnQud2lkdGgsdGhpcy5jaGFydC5oZWlnaHRdKS8yLHRoaXMub3B0aW9ucy5zY2FsZUZvbnRTaXplLHRoaXMub3B0aW9ucy5zY2FsZUJlZ2luQXRaZXJvLHRoaXMub3B0aW9ucy5zY2FsZUludGVnZXJzT25seSk7ZS5leHRlbmQodGhpcy5zY2FsZSxzLHtzaXplOmUubWluKFt0aGlzLmNoYXJ0LndpZHRoLHRoaXMuY2hhcnQuaGVpZ2h0XSkseENlbnRlcjp0aGlzLmNoYXJ0LndpZHRoLzIseUNlbnRlcjp0aGlzLmNoYXJ0LmhlaWdodC8yfSl9LHVwZGF0ZTpmdW5jdGlvbigpe3RoaXMuY2FsY3VsYXRlVG90YWwodGhpcy5zZWdtZW50cyksZS5lYWNoKHRoaXMuc2VnbWVudHMsZnVuY3Rpb24odCl7dC5zYXZlKCl9KSx0aGlzLnJlZmxvdygpLHRoaXMucmVuZGVyKCl9LHJlZmxvdzpmdW5jdGlvbigpe2UuZXh0ZW5kKHRoaXMuU2VnbWVudEFyYy5wcm90b3R5cGUse3g6dGhpcy5jaGFydC53aWR0aC8yLHk6dGhpcy5jaGFydC5oZWlnaHQvMn0pLHRoaXMudXBkYXRlU2NhbGVSYW5nZSh0aGlzLnNlZ21lbnRzKSx0aGlzLnNjYWxlLnVwZGF0ZSgpLGUuZXh0ZW5kKHRoaXMuc2NhbGUse3hDZW50ZXI6dGhpcy5jaGFydC53aWR0aC8yLHlDZW50ZXI6dGhpcy5jaGFydC5oZWlnaHQvMn0pLGUuZWFjaCh0aGlzLnNlZ21lbnRzLGZ1bmN0aW9uKHQpe3QudXBkYXRlKHtvdXRlclJhZGl1czp0aGlzLnNjYWxlLmNhbGN1bGF0ZUNlbnRlck9mZnNldCh0LnZhbHVlKX0pfSx0aGlzKX0sZHJhdzpmdW5jdGlvbih0KXt2YXIgaT10fHwxO3RoaXMuY2xlYXIoKSxlLmVhY2godGhpcy5zZWdtZW50cyxmdW5jdGlvbih0LGUpe3QudHJhbnNpdGlvbih7Y2lyY3VtZmVyZW5jZTp0aGlzLnNjYWxlLmdldENpcmN1bWZlcmVuY2UoKSxvdXRlclJhZGl1czp0aGlzLnNjYWxlLmNhbGN1bGF0ZUNlbnRlck9mZnNldCh0LnZhbHVlKX0saSksdC5lbmRBbmdsZT10LnN0YXJ0QW5nbGUrdC5jaXJjdW1mZXJlbmNlLDA9PT1lJiYodC5zdGFydEFuZ2xlPTEuNSpNYXRoLlBJKSxlPHRoaXMuc2VnbWVudHMubGVuZ3RoLTEmJih0aGlzLnNlZ21lbnRzW2UrMV0uc3RhcnRBbmdsZT10LmVuZEFuZ2xlKSx0LmRyYXcoKX0sdGhpcyksdGhpcy5zY2FsZS5kcmF3KCl9fSl9LmNhbGwodGhpcyksZnVuY3Rpb24oKXtcInVzZSBzdHJpY3RcIjt2YXIgdD10aGlzLGk9dC5DaGFydCxlPWkuaGVscGVycztpLlR5cGUuZXh0ZW5kKHtuYW1lOlwiUmFkYXJcIixkZWZhdWx0czp7c2NhbGVTaG93TGluZTohMCxhbmdsZVNob3dMaW5lT3V0OiEwLHNjYWxlU2hvd0xhYmVsczohMSxzY2FsZUJlZ2luQXRaZXJvOiEwLGFuZ2xlTGluZUNvbG9yOlwicmdiYSgwLDAsMCwuMSlcIixhbmdsZUxpbmVXaWR0aDoxLHBvaW50TGFiZWxGb250RmFtaWx5OlwiJ0FyaWFsJ1wiLHBvaW50TGFiZWxGb250U3R5bGU6XCJub3JtYWxcIixwb2ludExhYmVsRm9udFNpemU6MTAscG9pbnRMYWJlbEZvbnRDb2xvcjpcIiM2NjZcIixwb2ludERvdDohMCxwb2ludERvdFJhZGl1czozLHBvaW50RG90U3Ryb2tlV2lkdGg6MSxwb2ludEhpdERldGVjdGlvblJhZGl1czoyMCxkYXRhc2V0U3Ryb2tlOiEwLGRhdGFzZXRTdHJva2VXaWR0aDoyLGRhdGFzZXRGaWxsOiEwLGxlZ2VuZFRlbXBsYXRlOic8dWwgY2xhc3M9XCI8JT1uYW1lLnRvTG93ZXJDYXNlKCklPi1sZWdlbmRcIj48JSBmb3IgKHZhciBpPTA7IGk8ZGF0YXNldHMubGVuZ3RoOyBpKyspeyU+PGxpPjxzcGFuIHN0eWxlPVwiYmFja2dyb3VuZC1jb2xvcjo8JT1kYXRhc2V0c1tpXS5zdHJva2VDb2xvciU+XCI+PC9zcGFuPjwlaWYoZGF0YXNldHNbaV0ubGFiZWwpeyU+PCU9ZGF0YXNldHNbaV0ubGFiZWwlPjwlfSU+PC9saT48JX0lPjwvdWw+J30saW5pdGlhbGl6ZTpmdW5jdGlvbih0KXt0aGlzLlBvaW50Q2xhc3M9aS5Qb2ludC5leHRlbmQoe3N0cm9rZVdpZHRoOnRoaXMub3B0aW9ucy5wb2ludERvdFN0cm9rZVdpZHRoLHJhZGl1czp0aGlzLm9wdGlvbnMucG9pbnREb3RSYWRpdXMsZGlzcGxheTp0aGlzLm9wdGlvbnMucG9pbnREb3QsaGl0RGV0ZWN0aW9uUmFkaXVzOnRoaXMub3B0aW9ucy5wb2ludEhpdERldGVjdGlvblJhZGl1cyxjdHg6dGhpcy5jaGFydC5jdHh9KSx0aGlzLmRhdGFzZXRzPVtdLHRoaXMuYnVpbGRTY2FsZSh0KSx0aGlzLm9wdGlvbnMuc2hvd1Rvb2x0aXBzJiZlLmJpbmRFdmVudHModGhpcyx0aGlzLm9wdGlvbnMudG9vbHRpcEV2ZW50cyxmdW5jdGlvbih0KXt2YXIgaT1cIm1vdXNlb3V0XCIhPT10LnR5cGU/dGhpcy5nZXRQb2ludHNBdEV2ZW50KHQpOltdO3RoaXMuZWFjaFBvaW50cyhmdW5jdGlvbih0KXt0LnJlc3RvcmUoW1wiZmlsbENvbG9yXCIsXCJzdHJva2VDb2xvclwiXSl9KSxlLmVhY2goaSxmdW5jdGlvbih0KXt0LmZpbGxDb2xvcj10LmhpZ2hsaWdodEZpbGwsdC5zdHJva2VDb2xvcj10LmhpZ2hsaWdodFN0cm9rZX0pLHRoaXMuc2hvd1Rvb2x0aXAoaSl9KSxlLmVhY2godC5kYXRhc2V0cyxmdW5jdGlvbihpKXt2YXIgcz17bGFiZWw6aS5sYWJlbHx8bnVsbCxmaWxsQ29sb3I6aS5maWxsQ29sb3Isc3Ryb2tlQ29sb3I6aS5zdHJva2VDb2xvcixwb2ludENvbG9yOmkucG9pbnRDb2xvcixwb2ludFN0cm9rZUNvbG9yOmkucG9pbnRTdHJva2VDb2xvcixwb2ludHM6W119O3RoaXMuZGF0YXNldHMucHVzaChzKSxlLmVhY2goaS5kYXRhLGZ1bmN0aW9uKGUsbil7dmFyIG87dGhpcy5zY2FsZS5hbmltYXRpb258fChvPXRoaXMuc2NhbGUuZ2V0UG9pbnRQb3NpdGlvbihuLHRoaXMuc2NhbGUuY2FsY3VsYXRlQ2VudGVyT2Zmc2V0KGUpKSkscy5wb2ludHMucHVzaChuZXcgdGhpcy5Qb2ludENsYXNzKHt2YWx1ZTplLGxhYmVsOnQubGFiZWxzW25dLGRhdGFzZXRMYWJlbDppLmxhYmVsLHg6dGhpcy5vcHRpb25zLmFuaW1hdGlvbj90aGlzLnNjYWxlLnhDZW50ZXI6by54LHk6dGhpcy5vcHRpb25zLmFuaW1hdGlvbj90aGlzLnNjYWxlLnlDZW50ZXI6by55LHN0cm9rZUNvbG9yOmkucG9pbnRTdHJva2VDb2xvcixmaWxsQ29sb3I6aS5wb2ludENvbG9yLGhpZ2hsaWdodEZpbGw6aS5wb2ludEhpZ2hsaWdodEZpbGx8fGkucG9pbnRDb2xvcixoaWdobGlnaHRTdHJva2U6aS5wb2ludEhpZ2hsaWdodFN0cm9rZXx8aS5wb2ludFN0cm9rZUNvbG9yfSkpfSx0aGlzKX0sdGhpcyksdGhpcy5yZW5kZXIoKX0sZWFjaFBvaW50czpmdW5jdGlvbih0KXtlLmVhY2godGhpcy5kYXRhc2V0cyxmdW5jdGlvbihpKXtlLmVhY2goaS5wb2ludHMsdCx0aGlzKX0sdGhpcyl9LGdldFBvaW50c0F0RXZlbnQ6ZnVuY3Rpb24odCl7dmFyIGk9ZS5nZXRSZWxhdGl2ZVBvc2l0aW9uKHQpLHM9ZS5nZXRBbmdsZUZyb21Qb2ludCh7eDp0aGlzLnNjYWxlLnhDZW50ZXIseTp0aGlzLnNjYWxlLnlDZW50ZXJ9LGkpLG49MipNYXRoLlBJL3RoaXMuc2NhbGUudmFsdWVzQ291bnQsbz1NYXRoLnJvdW5kKChzLmFuZ2xlLTEuNSpNYXRoLlBJKS9uKSxhPVtdO3JldHVybihvPj10aGlzLnNjYWxlLnZhbHVlc0NvdW50fHwwPm8pJiYobz0wKSxzLmRpc3RhbmNlPD10aGlzLnNjYWxlLmRyYXdpbmdBcmVhJiZlLmVhY2godGhpcy5kYXRhc2V0cyxmdW5jdGlvbih0KXthLnB1c2godC5wb2ludHNbb10pfSksYX0sYnVpbGRTY2FsZTpmdW5jdGlvbih0KXt0aGlzLnNjYWxlPW5ldyBpLlJhZGlhbFNjYWxlKHtkaXNwbGF5OnRoaXMub3B0aW9ucy5zaG93U2NhbGUsZm9udFN0eWxlOnRoaXMub3B0aW9ucy5zY2FsZUZvbnRTdHlsZSxmb250U2l6ZTp0aGlzLm9wdGlvbnMuc2NhbGVGb250U2l6ZSxmb250RmFtaWx5OnRoaXMub3B0aW9ucy5zY2FsZUZvbnRGYW1pbHksZm9udENvbG9yOnRoaXMub3B0aW9ucy5zY2FsZUZvbnRDb2xvcixzaG93TGFiZWxzOnRoaXMub3B0aW9ucy5zY2FsZVNob3dMYWJlbHMsc2hvd0xhYmVsQmFja2Ryb3A6dGhpcy5vcHRpb25zLnNjYWxlU2hvd0xhYmVsQmFja2Ryb3AsYmFja2Ryb3BDb2xvcjp0aGlzLm9wdGlvbnMuc2NhbGVCYWNrZHJvcENvbG9yLGJhY2tkcm9wUGFkZGluZ1k6dGhpcy5vcHRpb25zLnNjYWxlQmFja2Ryb3BQYWRkaW5nWSxiYWNrZHJvcFBhZGRpbmdYOnRoaXMub3B0aW9ucy5zY2FsZUJhY2tkcm9wUGFkZGluZ1gsbGluZVdpZHRoOnRoaXMub3B0aW9ucy5zY2FsZVNob3dMaW5lP3RoaXMub3B0aW9ucy5zY2FsZUxpbmVXaWR0aDowLGxpbmVDb2xvcjp0aGlzLm9wdGlvbnMuc2NhbGVMaW5lQ29sb3IsYW5nbGVMaW5lQ29sb3I6dGhpcy5vcHRpb25zLmFuZ2xlTGluZUNvbG9yLGFuZ2xlTGluZVdpZHRoOnRoaXMub3B0aW9ucy5hbmdsZVNob3dMaW5lT3V0P3RoaXMub3B0aW9ucy5hbmdsZUxpbmVXaWR0aDowLHBvaW50TGFiZWxGb250Q29sb3I6dGhpcy5vcHRpb25zLnBvaW50TGFiZWxGb250Q29sb3IscG9pbnRMYWJlbEZvbnRTaXplOnRoaXMub3B0aW9ucy5wb2ludExhYmVsRm9udFNpemUscG9pbnRMYWJlbEZvbnRGYW1pbHk6dGhpcy5vcHRpb25zLnBvaW50TGFiZWxGb250RmFtaWx5LHBvaW50TGFiZWxGb250U3R5bGU6dGhpcy5vcHRpb25zLnBvaW50TGFiZWxGb250U3R5bGUsaGVpZ2h0OnRoaXMuY2hhcnQuaGVpZ2h0LHdpZHRoOnRoaXMuY2hhcnQud2lkdGgseENlbnRlcjp0aGlzLmNoYXJ0LndpZHRoLzIseUNlbnRlcjp0aGlzLmNoYXJ0LmhlaWdodC8yLGN0eDp0aGlzLmNoYXJ0LmN0eCx0ZW1wbGF0ZVN0cmluZzp0aGlzLm9wdGlvbnMuc2NhbGVMYWJlbCxsYWJlbHM6dC5sYWJlbHMsdmFsdWVzQ291bnQ6dC5kYXRhc2V0c1swXS5kYXRhLmxlbmd0aH0pLHRoaXMuc2NhbGUuc2V0U2NhbGVTaXplKCksdGhpcy51cGRhdGVTY2FsZVJhbmdlKHQuZGF0YXNldHMpLHRoaXMuc2NhbGUuYnVpbGRZTGFiZWxzKCl9LHVwZGF0ZVNjYWxlUmFuZ2U6ZnVuY3Rpb24odCl7dmFyIGk9ZnVuY3Rpb24oKXt2YXIgaT1bXTtyZXR1cm4gZS5lYWNoKHQsZnVuY3Rpb24odCl7dC5kYXRhP2k9aS5jb25jYXQodC5kYXRhKTplLmVhY2godC5wb2ludHMsZnVuY3Rpb24odCl7aS5wdXNoKHQudmFsdWUpfSl9KSxpfSgpLHM9dGhpcy5vcHRpb25zLnNjYWxlT3ZlcnJpZGU/e3N0ZXBzOnRoaXMub3B0aW9ucy5zY2FsZVN0ZXBzLHN0ZXBWYWx1ZTp0aGlzLm9wdGlvbnMuc2NhbGVTdGVwV2lkdGgsbWluOnRoaXMub3B0aW9ucy5zY2FsZVN0YXJ0VmFsdWUsbWF4OnRoaXMub3B0aW9ucy5zY2FsZVN0YXJ0VmFsdWUrdGhpcy5vcHRpb25zLnNjYWxlU3RlcHMqdGhpcy5vcHRpb25zLnNjYWxlU3RlcFdpZHRofTplLmNhbGN1bGF0ZVNjYWxlUmFuZ2UoaSxlLm1pbihbdGhpcy5jaGFydC53aWR0aCx0aGlzLmNoYXJ0LmhlaWdodF0pLzIsdGhpcy5vcHRpb25zLnNjYWxlRm9udFNpemUsdGhpcy5vcHRpb25zLnNjYWxlQmVnaW5BdFplcm8sdGhpcy5vcHRpb25zLnNjYWxlSW50ZWdlcnNPbmx5KTtlLmV4dGVuZCh0aGlzLnNjYWxlLHMpfSxhZGREYXRhOmZ1bmN0aW9uKHQsaSl7dGhpcy5zY2FsZS52YWx1ZXNDb3VudCsrLGUuZWFjaCh0LGZ1bmN0aW9uKHQsZSl7dmFyIHM9dGhpcy5zY2FsZS5nZXRQb2ludFBvc2l0aW9uKHRoaXMuc2NhbGUudmFsdWVzQ291bnQsdGhpcy5zY2FsZS5jYWxjdWxhdGVDZW50ZXJPZmZzZXQodCkpO3RoaXMuZGF0YXNldHNbZV0ucG9pbnRzLnB1c2gobmV3IHRoaXMuUG9pbnRDbGFzcyh7dmFsdWU6dCxsYWJlbDppLHg6cy54LHk6cy55LHN0cm9rZUNvbG9yOnRoaXMuZGF0YXNldHNbZV0ucG9pbnRTdHJva2VDb2xvcixmaWxsQ29sb3I6dGhpcy5kYXRhc2V0c1tlXS5wb2ludENvbG9yfSkpfSx0aGlzKSx0aGlzLnNjYWxlLmxhYmVscy5wdXNoKGkpLHRoaXMucmVmbG93KCksdGhpcy51cGRhdGUoKX0scmVtb3ZlRGF0YTpmdW5jdGlvbigpe3RoaXMuc2NhbGUudmFsdWVzQ291bnQtLSx0aGlzLnNjYWxlLmxhYmVscy5zaGlmdCgpLGUuZWFjaCh0aGlzLmRhdGFzZXRzLGZ1bmN0aW9uKHQpe3QucG9pbnRzLnNoaWZ0KCl9LHRoaXMpLHRoaXMucmVmbG93KCksdGhpcy51cGRhdGUoKX0sdXBkYXRlOmZ1bmN0aW9uKCl7dGhpcy5lYWNoUG9pbnRzKGZ1bmN0aW9uKHQpe3Quc2F2ZSgpfSksdGhpcy5yZWZsb3coKSx0aGlzLnJlbmRlcigpfSxyZWZsb3c6ZnVuY3Rpb24oKXtlLmV4dGVuZCh0aGlzLnNjYWxlLHt3aWR0aDp0aGlzLmNoYXJ0LndpZHRoLGhlaWdodDp0aGlzLmNoYXJ0LmhlaWdodCxzaXplOmUubWluKFt0aGlzLmNoYXJ0LndpZHRoLHRoaXMuY2hhcnQuaGVpZ2h0XSkseENlbnRlcjp0aGlzLmNoYXJ0LndpZHRoLzIseUNlbnRlcjp0aGlzLmNoYXJ0LmhlaWdodC8yfSksdGhpcy51cGRhdGVTY2FsZVJhbmdlKHRoaXMuZGF0YXNldHMpLHRoaXMuc2NhbGUuc2V0U2NhbGVTaXplKCksdGhpcy5zY2FsZS5idWlsZFlMYWJlbHMoKX0sZHJhdzpmdW5jdGlvbih0KXt2YXIgaT10fHwxLHM9dGhpcy5jaGFydC5jdHg7dGhpcy5jbGVhcigpLHRoaXMuc2NhbGUuZHJhdygpLGUuZWFjaCh0aGlzLmRhdGFzZXRzLGZ1bmN0aW9uKHQpe2UuZWFjaCh0LnBvaW50cyxmdW5jdGlvbih0LGUpe3QuaGFzVmFsdWUoKSYmdC50cmFuc2l0aW9uKHRoaXMuc2NhbGUuZ2V0UG9pbnRQb3NpdGlvbihlLHRoaXMuc2NhbGUuY2FsY3VsYXRlQ2VudGVyT2Zmc2V0KHQudmFsdWUpKSxpKX0sdGhpcykscy5saW5lV2lkdGg9dGhpcy5vcHRpb25zLmRhdGFzZXRTdHJva2VXaWR0aCxzLnN0cm9rZVN0eWxlPXQuc3Ryb2tlQ29sb3Iscy5iZWdpblBhdGgoKSxlLmVhY2godC5wb2ludHMsZnVuY3Rpb24odCxpKXswPT09aT9zLm1vdmVUbyh0LngsdC55KTpzLmxpbmVUbyh0LngsdC55KX0sdGhpcykscy5jbG9zZVBhdGgoKSxzLnN0cm9rZSgpLHMuZmlsbFN0eWxlPXQuZmlsbENvbG9yLHMuZmlsbCgpLGUuZWFjaCh0LnBvaW50cyxmdW5jdGlvbih0KXt0Lmhhc1ZhbHVlKCkmJnQuZHJhdygpfSl9LHRoaXMpfX0pfS5jYWxsKHRoaXMpO1xyXG5cclxuXHJcbi8qXHJcbiAqIEN1c3RvbVxyXG4gKi9cclxuJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24gKCkge1xyXG4gICAgdGFnKCk7XHJcbiAgICBzdGFyKCk7XHJcbiAgICB0ZWFtVG9nZ2xlKCk7XHJcbiAgICBjaGVja0FsbCgpO1xyXG4gICAgY291bnRDYXJ0KCk7XHJcblxyXG4gICAgcGhvdG8oKTtcclxuICAgIGNhcnRDaGFydFRyaWdnZXIoKTtcclxuXHJcblxyXG4gICAgbW9iaWxlVGJsKCk7XHJcblxyXG5cclxuICAgIGNoYXJ0KCk7XHJcbn0pO1xyXG52YXIgbW9iaWxlVGJsID0gZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyICR0YmwgPSAkKCd0YWJsZScpO1xyXG4gICAgJHRibC53cmFwKCc8ZGl2IGNsYXNzPVwidGJsLXdyYXBcIj48L2Rpdj4nKTtcclxufVxyXG52YXIgdGFnID0gZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyICR0YWcgPSAkKCcuanMtdGFnJyk7XHJcbiAgICAkdGFnLm9uKCdjbGljaycsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgJHRoaXMgPSAkKHRoaXMpO1xyXG4gICAgICAgICR0aGlzLnRvZ2dsZUNsYXNzKCdhY3RpdmUnKTtcclxuICAgIH0pO1xyXG59XHJcblxyXG52YXIgc3RhciA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciAkc3RhciA9ICQoJy5zdGFyJyksXHJcbiAgICAgICAgJHN0YXJUb2dnbGUgPSAkKCcuanMtc3Rhci10b2dnbGUnKTtcclxuICAgICRzdGFyLm9uKCdjbGljaycsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgJHRoaXMgPSAkKHRoaXMpO1xyXG4gICAgICAgICR0aGlzLnRvZ2dsZUNsYXNzKCdzdGFyX2FjdGl2ZScpO1xyXG4gICAgfSk7XHJcbiAgICAkc3RhclRvZ2dsZS5vbignY2xpY2snLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyICR0aGlzID0gJCh0aGlzKSxcclxuICAgICAgICAgICAgJHR4dCA9ICQodGhpcykudGV4dCgpO1xyXG5cclxuICAgICAgICBpZiAoJHR4dCA9PSAn0JTQvtCx0LDQstC40YLRjCDQsiDQuNC30LHRgNCw0L3QvdC+0LUnKSB7XHJcbiAgICAgICAgICAgICR0aGlzLnRleHQoJ9Cj0LHRgNCw0YLRjCDQuNC3INC40LfQsdGA0LDQvdC90L7Qs9C+Jyk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgJHRoaXMudGV4dCgn0JTQvtCx0LDQstC40YLRjCDQsiDQuNC30LHRgNCw0L3QvdC+0LUnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgJHRoaXMucHJldigkc3RhcikudG9nZ2xlQ2xhc3MoJ3N0YXJfYWN0aXZlJyk7XHJcbiAgICB9KTtcclxufVxyXG5cclxudmFyIHRlYW1Ub2dnbGUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgJHRlYW1JdGVtID0gJCgnLmpzLXRlYW0nKSxcclxuICAgICAgICAkdGVhbUNvbnQgPSAkKCcuanMtdGVhbS10eHQnKSxcclxuICAgICAgICAkaGVpZ2h0QXJyID0gW107XHJcblxyXG4gICAgJHRlYW1Db250LmVhY2goZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciAkdGhpcyA9ICQodGhpcyksXHJcbiAgICAgICAgICAgICRoZWlnaHQgPSAkdGhpcy5vdXRlckhlaWdodCgpO1xyXG4gICAgICAgICRoZWlnaHRBcnIucHVzaCgkaGVpZ2h0KTtcclxuICAgICAgICAkdGhpcy5oaWRlKCkuY3NzKHtcclxuICAgICAgICAgICAgJ2xlZnQnOiAwLFxyXG4gICAgICAgICAgICAndmlzaWJpbGl0eSc6ICd2aXNpYmxlJ1xyXG4gICAgICAgIH0pXHJcbiAgICB9KTtcclxuXHJcbiAgICAkdGVhbUl0ZW0uZWFjaChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyICR0aGlzID0gJCh0aGlzKSxcclxuICAgICAgICAgICAgJHRoaXNDb250ID0gJHRoaXMuZmluZCgkdGVhbUNvbnQpLFxyXG4gICAgICAgICAgICAkaWQgPSAkdGhpcy5pbmRleCgpO1xyXG4gICAgICAgICR0aGlzLm9uKCdjbGljaycsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgJHRlYW1Db250LmhpZGUoKTtcclxuICAgICAgICAgICAgJHRlYW1JdGVtLmNzcyh7XHJcbiAgICAgICAgICAgICAgICAncGFkZGluZy1ib3R0b20nOiAwXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAkdGhpc0NvbnQuc2xpZGVEb3duKCc0MDAnKTtcclxuICAgICAgICAgICAgJHRoaXMuY3NzKHtcclxuICAgICAgICAgICAgICAgICdwYWRkaW5nLWJvdHRvbSc6ICRoZWlnaHRBcnJbJGlkXVxyXG4gICAgICAgICAgICB9KVxyXG5cclxuXHJcbiAgICAgICAgfSlcclxuICAgIH0pO1xyXG59XHJcblxyXG5cclxudmFyIGNoZWNrQWxsID0gZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyICRib3ggPSAkKCcuY2FydC10YmwnKSxcclxuICAgICAgICAkY2hlY2tib3hlcyA9ICRib3guZmluZCgnaW5wdXRbdHlwZT1cImNoZWNrYm94XCJdJyksXHJcbiAgICAgICAgJGNoZWNrVHJpZ2dlciA9ICQoJyNjYXJ0LWNoZWNrLWFsbCcpO1xyXG5cclxuICAgICRjaGVja1RyaWdnZXIub24oJ2NoYW5nZScsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAkY2hlY2tib3hlcy5wcm9wKFwiY2hlY2tlZFwiLCAkY2hlY2tUcmlnZ2VyLnByb3AoXCJjaGVja2VkXCIpKTtcclxuICAgIH0pXHJcblxyXG4gICAgJGJveC5maW5kKCdsYWJlbC5jaGVjaycpLmNsaWNrKGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcclxuXHJcbiAgICB9KTtcclxufVxyXG5cclxudmFyIGNhcnRDaGFydFRyaWdnZXIgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAkKCcjY2FydC1jaGFydC10cmlnZ2VyJykub24oJ2NsaWNrJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICQoJyNqcy1jYXJ0LWNoYXJ0JykudG9nZ2xlQ2xhc3MoJ29uJyk7XHJcbiAgICAgICAgJCgnLmNhcnQtY2hhcnRfX2xpbmsnKS50b2dnbGVDbGFzcygndWstaGlkZGVuJyk7XHJcbiAgICB9KTtcclxufVxyXG5cclxudmFyIGNoYXJ0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgJCgnLmpzLWNhcnQtY2hhcnQtdG9nZ2xlJykuc2xpZGVVcChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgJCh0aGlzKS5hZGRDbGFzcygndWstaGlkZGVuJyk7XHJcbiAgICB9KTtcclxuXHJcblxyXG4gICAgdmFyIGRhdGEgPSB7XHJcbiAgICAgICAgbGFiZWxzOiBbXCJFYXRpbmdcIiwgXCJEcmlua2luZ1wiLCBcIlNsZWVwaW5nXCIsIFwiRGVzaWduaW5nXCIsIFwiQ29kaW5nXCIsIFwiQ3ljbGluZ1wiLCBcIlJ1bm5pbmdcIl0sXHJcbiAgICAgICAgZGF0YXNldHM6IFtcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgbGFiZWw6IFwiTXkgRmlyc3QgZGF0YXNldFwiLFxyXG4gICAgICAgICAgICAgICAgZmlsbENvbG9yOiBcInJnYmEoMjIwLDIyMCwyMjAsMC4yKVwiLFxyXG4gICAgICAgICAgICAgICAgc3Ryb2tlQ29sb3I6IFwicmdiYSgyMjAsMjIwLDIyMCwxKVwiLFxyXG4gICAgICAgICAgICAgICAgcG9pbnRDb2xvcjogXCJyZ2JhKDIyMCwyMjAsMjIwLDEpXCIsXHJcbiAgICAgICAgICAgICAgICBwb2ludFN0cm9rZUNvbG9yOiBcIiNmZmZcIixcclxuICAgICAgICAgICAgICAgIHBvaW50SGlnaGxpZ2h0RmlsbDogXCIjZmZmXCIsXHJcbiAgICAgICAgICAgICAgICBwb2ludEhpZ2hsaWdodFN0cm9rZTogXCJyZ2JhKDIyMCwyMjAsMjIwLDEpXCIsXHJcbiAgICAgICAgICAgICAgICBkYXRhOiBbNjUsIDU5LCA5MCwgODEsIDU2LCA1NSwgNDBdXHJcbiAgICAgICAgfSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgbGFiZWw6IFwiTXkgU2Vjb25kIGRhdGFzZXRcIixcclxuICAgICAgICAgICAgICAgIGZpbGxDb2xvcjogXCJyZ2JhKDE1MSwxODcsMjA1LDAuMilcIixcclxuICAgICAgICAgICAgICAgIHN0cm9rZUNvbG9yOiBcInJnYmEoMTUxLDE4NywyMDUsMSlcIixcclxuICAgICAgICAgICAgICAgIHBvaW50Q29sb3I6IFwicmdiYSgxNTEsMTg3LDIwNSwxKVwiLFxyXG4gICAgICAgICAgICAgICAgcG9pbnRTdHJva2VDb2xvcjogXCIjZmZmXCIsXHJcbiAgICAgICAgICAgICAgICBwb2ludEhpZ2hsaWdodEZpbGw6IFwiI2ZmZlwiLFxyXG4gICAgICAgICAgICAgICAgcG9pbnRIaWdobGlnaHRTdHJva2U6IFwicmdiYSgxNTEsMTg3LDIwNSwxKVwiLFxyXG4gICAgICAgICAgICAgICAgZGF0YTogWzI4LCA0OCwgNDAsIDE5LCA5NiwgMjcsIDEwMF1cclxuICAgICAgICB9XHJcbiAgICBdXHJcbiAgICB9O1xyXG4gICAgdmFyIGN0eCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibXlDaGFydFwiKS5nZXRDb250ZXh0KFwiMmRcIik7XHJcbiAgICB2YXIgbXlSYWRhckNoYXJ0ID0gbmV3IENoYXJ0KGN0eCkuUmFkYXIoZGF0YSwge1xyXG5cclxuICAgICAgICAvL0Jvb2xlYW4gLSBXaGV0aGVyIHRvIHNob3cgbGluZXMgZm9yIGVhY2ggc2NhbGUgcG9pbnRcclxuICAgICAgICBzY2FsZVNob3dMaW5lOiB0cnVlLFxyXG5cclxuICAgICAgICAvL0Jvb2xlYW4gLSBXaGV0aGVyIHdlIHNob3cgdGhlIGFuZ2xlIGxpbmVzIG91dCBvZiB0aGUgcmFkYXJcclxuICAgICAgICBhbmdsZVNob3dMaW5lT3V0OiB0cnVlLFxyXG5cclxuICAgICAgICAvL0Jvb2xlYW4gLSBXaGV0aGVyIHRvIHNob3cgbGFiZWxzIG9uIHRoZSBzY2FsZVxyXG4gICAgICAgIHNjYWxlU2hvd0xhYmVsczogZmFsc2UsXHJcblxyXG4gICAgICAgIC8vIEJvb2xlYW4gLSBXaGV0aGVyIHRoZSBzY2FsZSBzaG91bGQgYmVnaW4gYXQgemVyb1xyXG4gICAgICAgIHNjYWxlQmVnaW5BdFplcm86IHRydWUsXHJcblxyXG4gICAgICAgIC8vU3RyaW5nIC0gQ29sb3VyIG9mIHRoZSBhbmdsZSBsaW5lXHJcbiAgICAgICAgYW5nbGVMaW5lQ29sb3I6IFwicmdiYSgwLDAsMCwuMSlcIixcclxuXHJcbiAgICAgICAgLy9OdW1iZXIgLSBQaXhlbCB3aWR0aCBvZiB0aGUgYW5nbGUgbGluZVxyXG4gICAgICAgIGFuZ2xlTGluZVdpZHRoOiAxLFxyXG5cclxuICAgICAgICAvL1N0cmluZyAtIFBvaW50IGxhYmVsIGZvbnQgZGVjbGFyYXRpb25cclxuICAgICAgICBwb2ludExhYmVsRm9udEZhbWlseTogXCInQXJpYWwnXCIsXHJcblxyXG4gICAgICAgIC8vU3RyaW5nIC0gUG9pbnQgbGFiZWwgZm9udCB3ZWlnaHRcclxuICAgICAgICBwb2ludExhYmVsRm9udFN0eWxlOiBcIm5vcm1hbFwiLFxyXG5cclxuICAgICAgICAvL051bWJlciAtIFBvaW50IGxhYmVsIGZvbnQgc2l6ZSBpbiBwaXhlbHNcclxuICAgICAgICBwb2ludExhYmVsRm9udFNpemU6IDEwLFxyXG5cclxuICAgICAgICAvL1N0cmluZyAtIFBvaW50IGxhYmVsIGZvbnQgY29sb3VyXHJcbiAgICAgICAgcG9pbnRMYWJlbEZvbnRDb2xvcjogXCIjNjY2XCIsXHJcblxyXG4gICAgICAgIC8vQm9vbGVhbiAtIFdoZXRoZXIgdG8gc2hvdyBhIGRvdCBmb3IgZWFjaCBwb2ludFxyXG4gICAgICAgIHBvaW50RG90OiB0cnVlLFxyXG5cclxuICAgICAgICAvL051bWJlciAtIFJhZGl1cyBvZiBlYWNoIHBvaW50IGRvdCBpbiBwaXhlbHNcclxuICAgICAgICBwb2ludERvdFJhZGl1czogMyxcclxuXHJcbiAgICAgICAgLy9OdW1iZXIgLSBQaXhlbCB3aWR0aCBvZiBwb2ludCBkb3Qgc3Ryb2tlXHJcbiAgICAgICAgcG9pbnREb3RTdHJva2VXaWR0aDogMSxcclxuXHJcbiAgICAgICAgLy9OdW1iZXIgLSBhbW91bnQgZXh0cmEgdG8gYWRkIHRvIHRoZSByYWRpdXMgdG8gY2F0ZXIgZm9yIGhpdCBkZXRlY3Rpb24gb3V0c2lkZSB0aGUgZHJhd24gcG9pbnRcclxuICAgICAgICBwb2ludEhpdERldGVjdGlvblJhZGl1czogMjAsXHJcblxyXG4gICAgICAgIC8vQm9vbGVhbiAtIFdoZXRoZXIgdG8gc2hvdyBhIHN0cm9rZSBmb3IgZGF0YXNldHNcclxuICAgICAgICBkYXRhc2V0U3Ryb2tlOiB0cnVlLFxyXG5cclxuICAgICAgICAvL051bWJlciAtIFBpeGVsIHdpZHRoIG9mIGRhdGFzZXQgc3Ryb2tlXHJcbiAgICAgICAgZGF0YXNldFN0cm9rZVdpZHRoOiAyLFxyXG5cclxuICAgICAgICAvL0Jvb2xlYW4gLSBXaGV0aGVyIHRvIGZpbGwgdGhlIGRhdGFzZXQgd2l0aCBhIGNvbG91clxyXG4gICAgICAgIGRhdGFzZXRGaWxsOiB0cnVlLFxyXG5cclxuICAgICAgICAvL1N0cmluZyAtIEEgbGVnZW5kIHRlbXBsYXRlXHJcbiAgICAgICAgbGVnZW5kVGVtcGxhdGU6IFwiPHVsIGNsYXNzPVxcXCI8JT1uYW1lLnRvTG93ZXJDYXNlKCklPi1sZWdlbmRcXFwiPjwlIGZvciAodmFyIGk9MDsgaTxkYXRhc2V0cy5sZW5ndGg7IGkrKyl7JT48bGk+PHNwYW4gc3R5bGU9XFxcImJhY2tncm91bmQtY29sb3I6PCU9ZGF0YXNldHNbaV0uc3Ryb2tlQ29sb3IlPlxcXCI+PC9zcGFuPjwlaWYoZGF0YXNldHNbaV0ubGFiZWwpeyU+PCU9ZGF0YXNldHNbaV0ubGFiZWwlPjwlfSU+PC9saT48JX0lPjwvdWw+XCJcclxuXHJcblxyXG4gICAgfSk7XHJcbn1cclxuXHJcbnZhciBjb3VudENhcnQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgJGNvdW50ID0gJCgnLmpzLWNvdW50JyksXHJcbiAgICAgICAgJGRlYyA9ICRjb3VudC5maW5kKCcuY291bnRfX2RlYycpLFxyXG4gICAgICAgICRpbmMgPSAkY291bnQuZmluZCgnLmNvdW50X19pbmMnKSxcclxuICAgICAgICAkaW5wdXQgPSAkY291bnQuZmluZCgnaW5wdXQnKTtcclxuXHJcbiAgICAkaW5wdXQudmFsKCcxJyk7XHJcblxyXG5cclxuICAgICRpbnB1dC5vbigna2V5cHJlc3MnLCBmdW5jdGlvbiAoZSkge1xyXG5cclxuICAgICAgICBlID0gZSB8fCBldmVudDtcclxuXHJcbiAgICAgICAgaWYgKGUuY3RybEtleSB8fCBlLmFsdEtleSB8fCBlLm1ldGFLZXkpIHJldHVybjtcclxuXHJcbiAgICAgICAgdmFyIGNociA9IGdldENoYXIoZSk7XHJcblxyXG4gICAgICAgIC8vINGBIG51bGwg0L3QsNC00L4g0L7RgdGC0L7RgNC+0LbQvdC+INCyINC90LXRgNCw0LLQtdC90YHRgtCy0LDRhSxcclxuICAgICAgICAvLyDRgi7Qui4g0L3QsNC/0YDQuNC80LXRgCBudWxsID49ICcwJyA9PiB0cnVlXHJcbiAgICAgICAgLy8g0L3QsCDQstGB0Y/QutC40Lkg0YHQu9GD0YfQsNC5INC70YPRh9GI0LUg0LLRi9C90LXRgdGC0Lgg0L/RgNC+0LLQtdGA0LrRgyBjaHIgPT0gbnVsbCDQvtGC0LTQtdC70YzQvdC+XHJcbiAgICAgICAgaWYgKGNociA9PSBudWxsKSByZXR1cm47XHJcblxyXG4gICAgICAgIGlmIChjaHIgPCAnMCcgfHwgY2hyID4gJzknKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuXHJcblxyXG5cclxuICAgIGZ1bmN0aW9uIGdldENoYXIoZXZlbnQpIHtcclxuICAgICAgICBpZiAoZXZlbnQud2hpY2ggPT0gbnVsbCkge1xyXG4gICAgICAgICAgICBpZiAoZXZlbnQua2V5Q29kZSA8IDMyKSByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoZXZlbnQua2V5Q29kZSkgLy8gSUVcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChldmVudC53aGljaCAhPSAwICYmIGV2ZW50LmNoYXJDb2RlICE9IDApIHtcclxuICAgICAgICAgICAgaWYgKGV2ZW50LndoaWNoIDwgMzIpIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShldmVudC53aGljaCkgLy8g0L7RgdGC0LDQu9GM0L3Ri9C1XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gbnVsbDsgLy8g0YHQv9C10YbQuNCw0LvRjNC90LDRjyDQutC70LDQstC40YjQsFxyXG4gICAgfVxyXG5cclxuICAgICRjb3VudC5vbignY2xpY2snLCBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgIGUgPSBlIHx8IGV2ZW50O1xyXG4gICAgICAgIHZhciAkdGFyZ2V0ID0gJChlLnRhcmdldCksXHJcbiAgICAgICAgICAgICR0aGlzID0gJCh0aGlzKSxcclxuICAgICAgICAgICAgJGlucHV0ID0gJHRoaXMuZmluZCgnaW5wdXQnKSxcclxuICAgICAgICAgICAgdmFsID0gcGFyc2VJbnQoJHRoaXMuZmluZCgnaW5wdXQnKS52YWwoKSk7XHJcblxyXG4gICAgICAgIGlmICgkdGFyZ2V0Lmhhc0NsYXNzKCdjb3VudF9fZGVjJykpIHtcclxuXHJcbiAgICAgICAgICAgIGlmICh2YWwgPD0wKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB2YWwtLTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoJHRhcmdldC5oYXNDbGFzcygnY291bnRfX2luYycpKSB7XHJcbiAgICAgICAgICAgIHZhbCsrO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgJGlucHV0LnZhbCh2YWwpO1xyXG5cclxuICAgIH0pO1xyXG59XHJcblxyXG5cclxudmFyIHBob3RvID0gZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyICRwaG90b0JveCA9ICQoJyNqcy1waG90bycpLFxyXG4gICAgICAgICRiaWcgPSAkcGhvdG9Cb3guZmluZCgnLmNhdGFsb2ctaXRlbS1waG90b19fYmlnIGEnKSxcclxuICAgICAgICAkYmlnSW1nID0gJHBob3RvQm94LmZpbmQoJy5jYXRhbG9nLWl0ZW0tcGhvdG9fX2JpZyBpbWcnKSxcclxuICAgICAgICAkbWluaSA9ICRwaG90b0JveC5maW5kKCcuY2F0YWxvZy1pdGVtLXBob3RvX19taW5pJyk7XHJcbiAgICAkbWluaS5vbignY2xpY2snLCBmdW5jdGlvbihlKSB7XHJcbiAgICAgICB2YXIgJHRoaXMgPSAkKHRoaXMpLFxyXG4gICAgICAgICAgIGluZGV4ID0gJHRoaXMuaW5kZXgoKSxcclxuICAgICAgICAgICBocmVmID0gJHRoaXMuZmluZCgnaW1nJykuZGF0YSgnaHJlZicpO1xyXG4gICAgICAgICRiaWcucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpICA7XHJcbiAgICAgICAgJGJpZy5lcShpbmRleCkuYWRkQ2xhc3MoJ2FjdGl2ZScpO1xyXG4gICAgICAgICRiaWdJbWcucHJvcCgnc3JjJywgaHJlZik7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfSk7XHJcbn07Il0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
